[{"title":"人工智能 1","url":"http://zswh33.github.io/2023/07/27/人工智能-1/","content":"<h1 id=\"工作流程\"><a href=\"#工作流程\" class=\"headerlink\" title=\"工作流程\"></a>工作流程</h1><ol>\n<li>获取数据</li>\n<li>数据基本处理</li>\n<li>特征工程</li>\n<li>机器学习（模型训练）</li>\n<li>模型评估</li>\n</ol>\n<h1 id=\"数据集介绍\"><a href=\"#数据集介绍\" class=\"headerlink\" title=\"数据集介绍\"></a>数据集介绍</h1><ol>\n<li><p>专有名词</p>\n<p>样本，特征，目标值（标签值），特征值</p>\n</li>\n<li><p>数据类型构成</p>\n<ol>\n<li>特征值 + 目标值<ul>\n<li>目标值可以是<strong>分散</strong>和<strong>连续</strong>两种情况</li>\n</ul>\n</li>\n<li>只有<strong>特征值</strong>，没有目标值</li>\n</ol>\n</li>\n<li><p>数据分割</p>\n<ul>\n<li>机器学习一般将数据集分为两部分<ul>\n<li>训练数据：用于训练和构建模型</li>\n<li>测试数据：检验模型，评估模型是否有效</li>\n</ul>\n</li>\n<li>划分比例<ul>\n<li>训练集：70% 80% 75%</li>\n<li>测试集：30% 20% 25%</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"特征工程\"><a href=\"#特征工程\" class=\"headerlink\" title=\"特征工程\"></a>特征工程</h1><h2 id=\"什么是特征工程\"><a href=\"#什么是特征工程\" class=\"headerlink\" title=\"什么是特征工程\"></a>什么是特征工程</h2><p>特征工程师使用专业背景知识和技巧处理数据，使得特征能在机器学习算法上发挥更好的作用的过程。</p>\n<h2 id=\"特征工程包含内容\"><a href=\"#特征工程包含内容\" class=\"headerlink\" title=\"特征工程包含内容\"></a>特征工程包含内容</h2><ul>\n<li>特征提取：将任意数据（如文本或图像）转换为可用于机器学习的数字特征。</li>\n<li>特征预处理：通过一些转换函数将特征数据转换成更加适合算法模型的特征数据过程。</li>\n<li>特征降维：在某些限定条件下，<strong>降低随机变量（特征）的个数</strong>，得到一组“不相关“主变量的过程</li>\n</ul>\n<h1 id=\"完整机械学习流程\"><a href=\"#完整机械学习流程\" class=\"headerlink\" title=\"完整机械学习流程\"></a>完整机械学习流程</h1><p><img src=\"/2023/07/27/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD-1/YN\\hexo\\source_posts\\人工智能-1\\image-20230727021501797.png\" alt=\"image-20230727021501797\"></p>\n<p><img src=\"/2023/07/27/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD-1/YN\\hexo\\source_posts\\人工智能-1\\image-20230727021550628.png\" alt=\"image-20230727021550628\"></p>\n<p><img src=\"/2023/07/27/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD-1/YN\\hexo\\source_posts\\人工智能-1\\image-20230727021658371.png\" alt=\"image-20230727021658371\"></p>\n<p><img src=\"/2023/07/27/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD-1/YN\\hexo\\source_posts\\人工智能-1\\image-20230727021725735.png\" alt=\"image-20230727021725735\"></p>\n<p><img src=\"/2023/07/27/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD-1/YN\\hexo\\source_posts\\人工智能-1\\image-20230727021754655.png\" alt=\"image-20230727021754655\"></p>\n<p><img src=\"/2023/07/27/%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD-1/YN\\hexo\\source_posts\\人工智能-1\\image-20230727021814881.png\" alt=\"image-20230727021814881\"></p>\n","categories":[],"tags":["人工智能"]},{"title":"为jar包签名，并验证签名。","url":"http://zswh33.github.io/2023/05/11/为jar包签名，并验证签名。/","content":"<h1 id=\"keytool生成密钥对\"><a href=\"#keytool生成密钥对\" class=\"headerlink\" title=\"keytool生成密钥对\"></a>keytool生成密钥对</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkeypair -<span class=\"built_in\">alias</span> KEYALIAS -keyalg RSA -keysize 2048 -validity 36500 -keystore FILE.jks</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>alias 指定密钥对别名</li>\n<li>keyalg 指定算法</li>\n<li>keysize 指定密钥大小</li>\n<li>validity 证书有效期</li>\n<li>keystore 密钥库文件名称</li>\n</ul>\n<h1 id=\"jarsigner数字签名以及验证\"><a href=\"#jarsigner数字签名以及验证\" class=\"headerlink\" title=\"jarsigner数字签名以及验证\"></a>jarsigner数字签名以及验证</h1><blockquote>\n<p>进行数字签名</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -keystore FILE.jks JARFILE.jar KEYALIAS</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>keystore 指定密钥库文件名</li>\n<li>JARFILE.jar 指定要签名的Jar文件名称</li>\n<li>KEYALIAS 是密钥库中密钥对的别称</li>\n</ul>\n<blockquote>\n<p>验证数字签名</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jarsigner -verify JARFILE.jar -keystore FILE.jks</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Java中使用Security-API对jar文件进行验证\"><a href=\"#Java中使用Security-API对jar文件进行验证\" class=\"headerlink\" title=\"Java中使用Security API对jar文件进行验证\"></a>Java中使用Security API对jar文件进行验证</h1>","categories":[],"tags":["jar","java","加密"]},{"title":"SpringCloud 1","url":"http://zswh33.github.io/2023/05/10/SpringCloud-1/","content":"","categories":[],"tags":[]},{"title":"Job Study 3 String","url":"http://zswh33.github.io/2023/04/29/Job-Study-3-String/","content":"<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>[1] <a href=\"https://juejin.cn/post/7226157821708648509\">https://juejin.cn/post/7226157821708648509</a></p>\n<p>[2] <a href=\"https://blog.csdn.net/hl_java/article/details/104352925\">https://blog.csdn.net/hl_java/article/details/104352925</a></p>\n<h1 id=\"final修饰String类\"><a href=\"#final修饰String类\" class=\"headerlink\" title=\"final修饰String类\"></a>final修饰String类</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">String</span></span><br><span class=\"line\">    <span class=\"keyword\">implements</span> <span class=\"title class_\">java</span>.io.Serializable, Comparable&lt;String&gt;, CharSequence,</span><br><span class=\"line\">               Constable, ConstantDesc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>final：表示String类不可被继承</li>\n<li>String字符串是常量，一旦被创建，不可改变</li>\n<li>String字符串缓冲区支持可变字符串</li>\n<li>因为String不可变，即String可共享。</li>\n</ul>\n<h1 id=\"final修饰的value\"><a href=\"#final修饰的value\" class=\"headerlink\" title=\"final修饰的value[]\"></a>final修饰的value[]</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">char</span>[] value;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>value是一个私有的字符数组，String通过这个value保存字符串内容。</li>\n<li>由final修饰，不可修改。</li>\n</ul>\n<h2 id=\"存储\"><a href=\"#存储\" class=\"headerlink\" title=\"存储\"></a>存储</h2><p>Java中使用字符串常量池存储字符串字面量。</p>\n<ul>\n<li>由于JDK版本不同，常量池位置也不同<ul>\n<li>JDK6及以下字符串常量池在方法区（perm Gen）中，此时常量池存储字符串对象。</li>\n<li>在JDK8中，方法区（永久代被元空间取代）。</li>\n<li>JDK7，8中，字符串常量池被转移到堆中，此时常量池存储字符串对象的引用，而不是字符串对象本身。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"不可变性的优点\"><a href=\"#不可变性的优点\" class=\"headerlink\" title=\"不可变性的优点\"></a>不可变性的优点</h1><ul>\n<li>只有当字符串不可变，字符串池才可实现。字符串池可以节省很多heap空间，因为不同的字符串引用都可以指向池中同一个字符串。</li>\n<li>（存疑）如果字符串可变，可能会引起严重的安全问题。</li>\n<li>字符串不可变，使得同一个字符串实例可以被多个线程共享。</li>\n<li>字符串不可变，在字符串对象创建的时候，hashCode就被执行并把结果缓存，每次使用hashCode不需要重新计算。字符串变得很容易去成为Map的键。</li>\n</ul>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ul>\n<li>丧失灵活性。可以通过StringBuilder弥补这个缺点。</li>\n<li>脆弱的不可变性。String可以通过JNI或反射来改变其不可变性。</li>\n</ul>\n","categories":[],"tags":["Java"]},{"title":"Job Study 2","url":"http://zswh33.github.io/2023/04/29/Job-Study-2/","content":"<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p>[1] <a href=\"https://cloud.tencent.com/developer/article/1872211\">https://cloud.tencent.com/developer/article/1872211</a></p>\n<h1 id=\"Java语言特点\"><a href=\"#Java语言特点\" class=\"headerlink\" title=\"Java语言特点\"></a>Java语言特点</h1><ul>\n<li>纯面向对象的语言。</li>\n<li>具有平台无关性。</li>\n<li>解释型语言。（相对的是编译型语言）</li>\n<li>很多内置类库，如多线程支持，网络通信支持，垃圾回收器。</li>\n<li>较好的安全性和健壮性。提供异常处理和垃圾回收机制。</li>\n</ul>\n<h1 id=\"JDK和JRE区别\"><a href=\"#JDK和JRE区别\" class=\"headerlink\" title=\"JDK和JRE区别\"></a>JDK和JRE区别</h1><ul>\n<li>JDK：Java Development Kit，开发工具包，提供开发环境和运行环境。</li>\n<li>JRE：Java Runtime Environment，Java运行环境。</li>\n<li>JDK包含了JRE。</li>\n</ul>\n<h1 id=\"Java数据类型\"><a href=\"#Java数据类型\" class=\"headerlink\" title=\"Java数据类型\"></a>Java数据类型</h1><ul>\n<li><p>基本数据类型</p>\n<ul>\n<li><p>整数类型</p>\n<ul>\n<li>byte，1字节，-128 ~ 127。</li>\n<li>short，2字节，-32768 ~ 32767。</li>\n<li>int，4字节，-2^31 ~ 2^31-1</li>\n<li>long，8字节，-2^63 ~ 2^63-1</li>\n</ul>\n</li>\n<li><p>浮点数</p>\n<ul>\n<li>float，浮点数，32位，4字节</li>\n<li>double，浮点数，64位，8字节</li>\n</ul>\n</li>\n<li><p>布尔类型</p>\n<ul>\n<li>boolean：布尔，占用大小依据虚拟机不同有差异。<ul>\n<li>在规范上，没有要求boolean占用多大内存。</li>\n<li>在遵循规范的基础上，如果boolean是单独使用，boolean占用4字节。如果boolean以数组使用，则一个boolean占用1字节。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>字符类型</p>\n<ul>\n<li>char：2字节，16位。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>引用数据类型</p>\n<ul>\n<li>数组</li>\n<li>对象</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"自动装箱拆箱\"><a href=\"#自动装箱拆箱\" class=\"headerlink\" title=\"自动装箱拆箱\"></a>自动装箱拆箱</h1><p>对于Java基础数据类型，都有其对象的包装类。</p>\n<p>装箱就是把基本数组类型封装为包装器类型。</p>\n<p>拆箱就是自动将包装器类型转换为基础数据类型。</p>\n<h1 id=\"访问修饰符\"><a href=\"#访问修饰符\" class=\"headerlink\" title=\"访问修饰符\"></a>访问修饰符</h1><ul>\n<li>default：默认修饰符，同一包内可见。</li>\n<li>private：同一类内可见</li>\n<li>protected：同一包内的类和所有子类可见，不能修饰类。</li>\n<li>public：所有类可见。</li>\n</ul>\n<h1 id=\"构造方法，成员变量初始化以及静态成员变量三者初始化顺序\"><a href=\"#构造方法，成员变量初始化以及静态成员变量三者初始化顺序\" class=\"headerlink\" title=\"构造方法，成员变量初始化以及静态成员变量三者初始化顺序\"></a>构造方法，成员变量初始化以及静态成员变量三者初始化顺序</h1><p>先后顺序：静态成员变量，成员变量，构造方法。</p>\n<p>详细先后顺序：</p>\n<ul>\n<li>父类静态变量，</li>\n<li>父类静态代码块，</li>\n<li>子类静态变量，</li>\n<li>子类静态代码块，</li>\n<li>父类成员变量，父类构造方法，子类成员变量，子类构造方法。</li>\n</ul>\n<h1 id=\"面向对象三大特征\"><a href=\"#面向对象三大特征\" class=\"headerlink\" title=\"面向对象三大特征\"></a>面向对象三大特征</h1><ul>\n<li><p>继承：对象新类可以从现有的类中派生，派生类可以从它的基类那继承方法和实例变量，且派生类可以修改或新增新的方法使之更适合特殊的需求。</p>\n</li>\n<li><p>封装：将客观事物抽象成类，每个类可以把自身数据和方法只让可信的类或对象操作，对不可信的类进行信息隐藏。</p>\n</li>\n<li><p>多态：允许不同类的对象对同一消息做出响应，不同对象调用相同方法即使参数也相同，最终表现行为是不一样的。</p>\n</li>\n</ul>\n<h1 id=\"Java多态\"><a href=\"#Java多态\" class=\"headerlink\" title=\"Java多态\"></a>Java多态</h1><p>Java多态分为编译时多态和运行时多态。</p>\n<p>编译时多态主要指方法的重载，即通过参数列表的不同来区分不同的方法。</p>\n<p>运行时多态主要指继承父类和实现接口时，可以使用父类引用指向子类对象。</p>\n<p>运行时多态表现：主要依靠方法表，放发表最先存放Object类的方法，接下来是该类父类的方法，最后是该类本身的方法。若子类改写了父类的方法，则子类和父类同名方法共享一个方法表项，都被认作是父类的方法。因此可以实现运行时多态。</p>\n<h1 id=\"Java提供多态机制\"><a href=\"#Java提供多态机制\" class=\"headerlink\" title=\"Java提供多态机制\"></a>Java提供多态机制</h1><p>重载，同一个类有多个同名的方法，方法有不同的参数，在编译期间可以确定调用哪个方法。</p>\n<p>覆盖：派生类重写基类的方法。父类引用指向子类对象，在运行时可以确定要调用的方法。</p>\n<h1 id=\"重载和重写的区别\"><a href=\"#重载和重写的区别\" class=\"headerlink\" title=\"重载和重写的区别\"></a>重载和重写的区别</h1><ul>\n<li>重写是父类与子类的关系。重载是同一类中方法之间的关系。</li>\n</ul>\n<h1 id=\"接口和抽象类的区别\"><a href=\"#接口和抽象类的区别\" class=\"headerlink\" title=\"接口和抽象类的区别\"></a>接口和抽象类的区别</h1><ul>\n<li>相同<ul>\n<li>都不能被实例化</li>\n<li>接口的实现类或抽象类的子类需实现接口或抽象类中相应的方法才能被实例化。</li>\n</ul>\n</li>\n<li>不同<ul>\n<li>接口只能有方法定义，不能有方法实现。抽象类可以有方法的定义和实现。</li>\n<li>实现接口implement，继承抽象类使用extends。只能“单继承，多实现“。</li>\n<li>对于应用<ul>\n<li>抽象类：当子类和父类之间存在逻辑上的层次接口，建议用抽象类。</li>\n<li>接口类：当功能不需要，希望支持差别较大的两个或更多对象间的特定交互行为。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"内部类及其作用\"><a href=\"#内部类及其作用\" class=\"headerlink\" title=\"内部类及其作用\"></a>内部类及其作用</h1><ul>\n<li>成员内部类：<ul>\n<li>成员内部类可以访问private及以上外部类的属性和方法。</li>\n<li>外部类想要访问内部类属性或方法时，必须创建一个内部类对象，然后通过该对象访问内部类的属性或方法。</li>\n<li>外部类也可以访问private修饰的内部类属性。</li>\n</ul>\n</li>\n<li>局部内部类：<ul>\n<li>存在于放啊中的内部类，访问权限类似局部变量，只能访问外部类的final变量。</li>\n</ul>\n</li>\n<li>匿名内部类：<ul>\n<li>只能用一次，没有类名，只能访问外部类的final变量。</li>\n</ul>\n</li>\n<li>静态内部类<ul>\n<li>类似类的静态成员变量。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Java的static\"><a href=\"#Java的static\" class=\"headerlink\" title=\"Java的static\"></a>Java的static</h1><ul>\n<li>修饰成员变量</li>\n<li>修饰常用方法</li>\n<li>修饰代码块</li>\n<li>修饰内部类</li>\n</ul>\n<h1 id=\"为什么String被设计为不可变\"><a href=\"#为什么String被设计为不可变\" class=\"headerlink\" title=\"为什么String被设计为不可变\"></a>为什么String被设计为不可变</h1><ul>\n<li>节省空间：字符串常量存储在JVM的字符串池中可以被用户共享。</li>\n<li>提高效率：String可以被不同线程共享，是线程安全的。在涉及多线程操作中不需要同步操作。</li>\n<li><del>安全：String常用于用户名，密码，文件名使用，由于其不可变，可避免黑客行为对其恶意修改</del>（什么胡言乱语）</li>\n</ul>\n<h1 id=\"String，StringBuffer，StringBuilder\"><a href=\"#String，StringBuffer，StringBuilder\" class=\"headerlink\" title=\"String，StringBuffer，StringBuilder\"></a>String，StringBuffer，StringBuilder</h1><p>String类：不可变。</p>\n<p>StringBuilder：采用无final修饰的字符数组保存，可变，效率高，线程不安全。</p>\n<p>StringBuffer：采用无final修饰的字符数组保存，可变，效率低，线程安全。</p>\n<ul>\n<li>StringBuilder和StringBuffer原理上的区别：StringBuffer的所有方法都有synchronized修饰，所以线程安全。</li>\n</ul>\n<h1 id=\"Object类常用方法\"><a href=\"#Object类常用方法\" class=\"headerlink\" title=\"Object类常用方法\"></a>Object类常用方法</h1><ul>\n<li>hashCode：通过对象计算散列码。常用于map和equals。</li>\n<li>equals：判断两个对象是否一致。若equals相同，则hashCode也必须相同。</li>\n<li>toString：用String表示该对象。</li>\n<li>clone：深拷贝一个对象。</li>\n</ul>\n<h1 id=\"Java一维数组和二维数组声明方式\"><a href=\"#Java一维数组和二维数组声明方式\" class=\"headerlink\" title=\"Java一维数组和二维数组声明方式\"></a>Java一维数组和二维数组声明方式</h1><p>一维数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type[] arrayName;</span><br><span class=\"line\">type arrayName[];</span><br></pre></td></tr></table></figure>\n\n<p>二维数组</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type[][] arrayName;</span><br><span class=\"line\">type arrayName[][];</span><br><span class=\"line\">type[] arrayName[];</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Java异常的分类\"><a href=\"#Java异常的分类\" class=\"headerlink\" title=\"Java异常的分类\"></a>Java异常的分类</h1><p>Error：程序无法处理的错误</p>\n<p>Exception：程序可以处理的异常</p>\n<p>Error常见的有StackOverFlowError，OutOfMemoryError。</p>\n<p>Exception分为运行时异常和非运行时异常。对于运行时异常，可以用try，catch处理，也可不处理。对于非运行时异常，则无法通过编译。</p>\n<h1 id=\"throw和throws的区别\"><a href=\"#throw和throws的区别\" class=\"headerlink\" title=\"throw和throws的区别\"></a>throw和throws的区别</h1><ul>\n<li>throw一般用在方法体内部，用于抛出异常</li>\n<li>throws用在方法声明上，代表该方法可能会抛出异常的列表。</li>\n</ul>\n<h1 id=\"finally是否一定会执行\"><a href=\"#finally是否一定会执行\" class=\"headerlink\" title=\"finally是否一定会执行\"></a>finally是否一定会执行</h1><ul>\n<li>在try语句之前出现异常。</li>\n<li>程序在try中出现程序强制退出，如System.exit(0)等方法，finally不会执行。</li>\n<li>其他<ul>\n<li>当try&#x2F;catch&#x2F;finally时，若try中存在return，finally语句会在return之前执行。若try&#x2F;catch&#x2F;finally中都有return语句，finally语句中的return语句会覆盖try&#x2F;catch中的return语句。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"final，finally和finalize区别\"><a href=\"#final，finally和finalize区别\" class=\"headerlink\" title=\"final，finally和finalize区别\"></a>final，finally和finalize区别</h1><ul>\n<li>final，用于声明属性、方法和类，分别表示属性不可变，方法不可重写，类不可继承。</li>\n<li>finally作为异常处理的一部分，只能在try&#x2F;catch中使用，finally语句在try&#x2F;catch后一定会被执行，一般用于释放资源。</li>\n<li>finalize时Object类的一个方法，在垃圾收集器要回收对象时，会先调用finalize方法，并在下次垃圾回收动作时真正回收对象占用的内存。</li>\n</ul>\n<h1 id=\"泛型\"><a href=\"#泛型\" class=\"headerlink\" title=\"泛型\"></a>泛型</h1><p>即“参数化类型”，解决不确定对象具体类型的问题。</p>\n<p>在编译阶段有效，操作的数据类型被指定为一个参数，这种参数类型在类中成为泛型类，接口中称为泛型接口，方法称为泛型方法。</p>\n<h1 id=\"泛型擦除\"><a href=\"#泛型擦除\" class=\"headerlink\" title=\"泛型擦除\"></a>泛型擦除</h1><p>Java编译器生成的字节码不包含泛型西悉尼，泛型类型信息将在编译处理阶段擦除。</p>\n<h1 id=\"注解\"><a href=\"#注解\" class=\"headerlink\" title=\"注解\"></a>注解</h1><p>Java注解用于为Java代码提供元数据。作为元数据，注解不直接影响代码执行，有些类型的注解可以用于这个目的。</p>\n<p>可以用于提供信息给编译器，在编译阶段时给软件提供信息进行相关的处理，在运行时处理写相应代码，做对应操作。</p>\n<h1 id=\"元注解\"><a href=\"#元注解\" class=\"headerlink\" title=\"元注解\"></a>元注解</h1><p>元注解可以理解为注解的注解，即在注解中使用，实现想要的功能，具体有：</p>\n<ul>\n<li>@Retention：表示注解存在阶段。包括：保留在源码，在字节码（类加载），还是在运行期间。</li>\n<li>@Target，注解作用范围。</li>\n<li>@Document，将注解元素包含到Javadoc中。</li>\n<li>@Inherited：一个被@Inherited注解了的注解修饰一个父类，若子类没有被其他注解修饰，则子类继承父类注解。</li>\n<li>@Repeatable：被这个元注解修饰的注解可以同时作用一个对象多次，但每次作用注解又可以表示不同的含义。</li>\n</ul>\n<h1 id=\"Java的Class对象\"><a href=\"#Java的Class对象\" class=\"headerlink\" title=\"Java的Class对象\"></a>Java的Class对象</h1><p>Jav中对象可分为实例对象和Class对象，每个类都有一个Class对象，其包含了与该类相关的信息。</p>\n<p>获取Class对象的方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class.forName(<span class=\"string\">&quot;类的全限定名&quot;</span>);</span><br><span class=\"line\">实例对象.getClass();</span><br><span class=\"line\">类名.class</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Java反射机制\"><a href=\"#Java反射机制\" class=\"headerlink\" title=\"Java反射机制\"></a>Java反射机制</h1><p>Java反射机制是指程序在运行过程中可以构造任意一个类的对象，获取任意一个类的成员变量和成员方法，获取任意一个对象所属的类信息，调用任意一个对象的属性和方法。反射机制使得Java具有动态获取程序信息和动态调用对象放啊的能力。可以通过以下类调用反射API。</p>\n<ul>\n<li>Class类：可以获得类属性方法</li>\n<li>Field：可以获得类的成员信息</li>\n<li>Method：类的方法信息</li>\n<li>Construct：类的构造方法等信息。</li>\n</ul>\n","categories":[],"tags":["Java","Job"]},{"title":"Job Study 1 Java","url":"http://zswh33.github.io/2023/04/28/Job-Study-1/","content":"<h1 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h1><h2 id=\"接口类和抽象类的区别\"><a href=\"#接口类和抽象类的区别\" class=\"headerlink\" title=\"接口类和抽象类的区别\"></a>接口类和抽象类的区别</h2><ul>\n<li>实现方式不同<ul>\n<li>抽象类是一个普通的类，使用abstract修饰，可以包含普通方法和抽象方法</li>\n<li>接口类是一种特殊的抽象类，使用interface修饰，只能包含抽象方法、常量和默认方法。</li>\n</ul>\n</li>\n<li>继承方式不同<ul>\n<li>子类只能继承一个抽象类，子类可以实现多个接口。（单继承，多实现）</li>\n</ul>\n</li>\n<li>实现方法不同<ul>\n<li>抽象类抽象方法可以具体实现代码</li>\n<li>接口类抽象方法必须由实现类提供具体实现。</li>\n</ul>\n</li>\n<li>设计目的<ul>\n<li>抽象类：被继承，提供一些通用的功能和属性，让子类实现自己特有的功能。</li>\n<li>接口类：被实现，定义一组规范，规定实现类要实现哪些方法。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"重载和重写的区别\"><a href=\"#重载和重写的区别\" class=\"headerlink\" title=\"重载和重写的区别\"></a>重载和重写的区别</h2><ul>\n<li>重载发生在同一个类中，方法名相同；参数列表，返回类型，权限修饰符可以不同</li>\n<li>重写发生在子类中，方法名、参数列表和返回类型都相同，权限修饰符要大于父类方法，声明异常范围要小于弗雷方法，但final和private修饰的方法都不可重写。</li>\n</ul>\n<h1 id=\"x3D-x3D-和equals的区别\"><a href=\"#x3D-x3D-和equals的区别\" class=\"headerlink\" title=\"&#x3D;&#x3D;和equals的区别\"></a>&#x3D;&#x3D;和equals的区别</h1><p>&#x3D;&#x3D;用于比较两个对象的引用是否相同。对于基本数据类型，比较两个值是否相等。</p>\n<p>equals比较两个对象在逻辑上是否相等，通常需要根据对象的属性值来判断。</p>\n<h2 id=\"异常处理机制\"><a href=\"#异常处理机制\" class=\"headerlink\" title=\"异常处理机制\"></a>异常处理机制</h2><p>Java异常处理机制是一种在程序运行时检测和处理错误的方式。</p>\n<p>当出现异常情况，JVM会生成一个异常对象，描述异常的类型和发生的位置。</p>\n<p>关键字：</p>\n<ul>\n<li>try：包裹可能会抛出异常的代码块</li>\n<li>catch：捕获try块中抛出的异常，并执行相应的处理逻辑。</li>\n<li>finally：无论是否发生异常，都会执行的代码块。常用于资源释放。</li>\n<li>throws：声明方法可能抛出的异常类型。</li>\n</ul>\n<h2 id=\"HashMap扩容机制\"><a href=\"#HashMap扩容机制\" class=\"headerlink\" title=\"HashMap扩容机制\"></a>HashMap扩容机制</h2><h2 id=\"HashMap实现原理\"><a href=\"#HashMap实现原理\" class=\"headerlink\" title=\"HashMap实现原理\"></a>HashMap实现原理</h2><h2 id=\"HashMap存取原理\"><a href=\"#HashMap存取原理\" class=\"headerlink\" title=\"HashMap存取原理\"></a>HashMap存取原理</h2><h2 id=\"线程安全的HashMap\"><a href=\"#线程安全的HashMap\" class=\"headerlink\" title=\"线程安全的HashMap\"></a>线程安全的HashMap</h2><h2 id=\"HashTable与HashMap区别\"><a href=\"#HashTable与HashMap区别\" class=\"headerlink\" title=\"HashTable与HashMap区别\"></a>HashTable与HashMap区别</h2><h2 id=\"ArrayList和LinkedList区别\"><a href=\"#ArrayList和LinkedList区别\" class=\"headerlink\" title=\"ArrayList和LinkedList区别\"></a>ArrayList和LinkedList区别</h2>","categories":[],"tags":["Job"]},{"title":"Openssl 1","url":"http://zswh33.github.io/2023/03/27/OpenSSL-1/","content":"<h1 id=\"子命令\"><a href=\"#子命令\" class=\"headerlink\" title=\"子命令\"></a>子命令</h1><ul>\n<li><code>ca</code>：对整数办法机构CA相关操作的子命令，可用于签发证书，吊销证书</li>\n<li><code>genrsa</code>：生成RSA密钥，</li>\n<li><code>genkey</code>：生成密钥的通用子命令</li>\n<li><code>passwd</code>：修改私钥密码的命令</li>\n<li><code>rsa</code>：进行RSA算法相关操作的子命令</li>\n<li><code>x509</code>：与X.509证书操作相关的命令，可以生成证书，查看证书信息。</li>\n</ul>\n<h2 id=\"genrsa\"><a href=\"#genrsa\" class=\"headerlink\" title=\"genrsa\"></a>genrsa</h2><p>用于生成RSA密钥对。</p>\n<p><code>openssl genrsa [options] [-out filename] [numbits]</code></p>\n<ul>\n<li><p>numbits: 密钥长度</p>\n</li>\n<li><p><code>-out filename</code>: 输出文件名</p>\n</li>\n<li><p><code>-des | -des3 | -aes128 | -aes192 | -aes256</code>：指定加密私钥使用的算法</p>\n</li>\n<li><p><code>-passout pass:&quot;123456&quot;</code>：指定加密私钥的密码，这里可以是一个字符串，也可以是一个文件名</p>\n</li>\n<li><p><code>-f4</code>：使用F4作为RSA密钥生成器的指数值，F4是一个公认的安全值。</p>\n</li>\n<li><p><code>-rand filename</code>：用于提供额外的熵，增加RSA密钥的强度，用于提高RSA密钥对的随机性。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">openssl genrsa -rand /dev/random -out key.pem 2048</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>-outform format</code>：指定生成文件的格式。可以是pem，der，net等其他格式；</p>\n</li>\n</ul>\n<h2 id=\"rsa\"><a href=\"#rsa\" class=\"headerlink\" title=\"rsa\"></a>rsa</h2><p>用于RSA算法相关的操作</p>\n<p><code>openssl rsa [options]</code></p>\n<ul>\n<li><code>-in filename</code>：输入文件名，必须是一个pem格式的RSA密钥文件，若未指定该参数，则从标准输入流中读取密钥</li>\n<li><code>-out filenmae</code>：指定输出的文件名，未指定则到标准输出流中</li>\n<li><code>-inform 输入文件格式</code>：der, net, pem</li>\n<li><code>-outform 输出文件格式</code>：der, net, pem</li>\n<li><code>-des | -des3 | -aes128 | -aes192 | -aes256</code>：加密方式</li>\n<li><code>-pubin</code>：指定输入文件为公钥文件，若未指定，默认输入文件为私钥文件</li>\n<li><code>-pubout</code>：指定输出的公钥部分，若指定参数，输出公钥，默认输出私钥</li>\n<li><code>-text</code>：输出密钥的详细信息，则输出RSA密钥的详细信息，包括模数，指数，系数等</li>\n<li><code>-noout</code>：不打印密钥key数据</li>\n<li><code>-passin</code>：指定输入文件的密码；</li>\n<li><code>-passout</code>：指定输出文件的密码</li>\n</ul>\n<h2 id=\"dgst-文件签名\"><a href=\"#dgst-文件签名\" class=\"headerlink\" title=\"dgst 文件签名\"></a>dgst 文件签名</h2><p><code>openssl dgst [options] [filename]</code></p>\n<ul>\n<li><p>filename: 操作的文件</p>\n</li>\n<li><p><code>-sign PRIKEY</code>：使用私钥生成一个文件的签名</p>\n</li>\n<li><p><code>-verify PUBKEY</code>：使用公钥对一个文件进行验证</p>\n</li>\n<li><p><code>--passin pass:&quot;123456&quot;</code>：指定私钥的密码</p>\n</li>\n</ul>\n<h2 id=\"enc-对文件进行密码加密\"><a href=\"#enc-对文件进行密码加密\" class=\"headerlink\" title=\"enc 对文件进行密码加密\"></a>enc 对文件进行密码加密</h2><p><code>openssl enc</code></p>\n<ul>\n<li><code>-e </code>：对文件进行加密操作</li>\n<li><code>-d</code>：对文件进行解密操作</li>\n<li><code>-in FILENAME</code>：输入文件</li>\n<li><code>-out FILENAME</code>：输出文件</li>\n<li><code>-aes256</code>：指定加密方式</li>\n</ul>\n<h2 id=\"rsautl-使用密钥进行文件加密\"><a href=\"#rsautl-使用密钥进行文件加密\" class=\"headerlink\" title=\"rsautl 使用密钥进行文件加密\"></a>rsautl 使用密钥进行文件加密</h2><ul>\n<li><code>-encrypt</code>：文件加密</li>\n<li><code>-decrypt</code>：文件解密</li>\n<li><code>-inkey KEY</code>：输入密钥文件</li>\n<li><code>-pubin</code>：指定输入文件为公钥</li>\n<li><code>-in FILENAME</code>：输入文件</li>\n<li><code>-out FILENAME</code>：输出文件</li>\n</ul>\n","categories":[],"tags":["openssl"]},{"title":"RabbitMQ 7","url":"http://zswh33.github.io/2023/03/20/RabbitMQ-7/","content":"<h1 id=\"优先级队列\"><a href=\"#优先级队列\" class=\"headerlink\" title=\"优先级队列\"></a>优先级队列</h1><p>在消息消费时，消息会根据优先级进行排序，优先级高的消息会被最先被消费。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"队列配置\"><a href=\"#队列配置\" class=\"headerlink\" title=\"队列配置\"></a>队列配置</h3><p><code>x-max-priority</code>可以配置队列的优先级数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> ExchangeBuilder.directExchange(EXCHANGE).withArgument(<span class=\"string\">&quot;x-max-priority&quot;</span>,<span class=\"number\">10</span>).build();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"消息配置\"><a href=\"#消息配置\" class=\"headerlink\" title=\"消息配置\"></a>消息配置</h3><p>发送消息的时候要为消息配置优先级。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template.convertAndSend(RabbitMQConfig.EXCHANGE,RabbitMQConfig.QUEUE_KEY,<span class=\"string\">&quot;当前是消息&quot;</span>+i, message -&gt; &#123;</span><br><span class=\"line\">\tmessage.getMessageProperties().setPriority(<span class=\"number\">7</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>在测试过程中，要为消费者设置较小的<code>basicQos</code>，否则由于消费者一次获取多个消息，无法达到优先队列的效果。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>RabbitMQ使用堆排序。</p>\n<h1 id=\"惰性队列\"><a href=\"#惰性队列\" class=\"headerlink\" title=\"惰性队列\"></a>惰性队列</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ul>\n<li>惰性队列可以将消息尽可能多地存储在磁盘中，而不是驻留在内存中，直到消费者需要消费相应消息时才会被加载到内存中。</li>\n<li>默认情况下，队列会尽可能地将消息存储在内存中，这样可以更快地将消息发给消费者。<ul>\n<li>即使是持久化队列，也会在内存中驻留一份备份。</li>\n</ul>\n</li>\n<li>当需要释放内存时，RabbitMQ会将消息换页到磁盘中，这个操作会消耗大量时间，并且造成阻塞队列，无法收到新的消息</li>\n<li>在惰性队列中，<ul>\n<li>持久化队列会将收到的消息直接存入文件系统，减少内存消耗，增加I&#x2F;O使用，</li>\n<li>若是非持久化消息，将不会发生变化。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"配置惰性队列\"><a href=\"#配置惰性队列\" class=\"headerlink\" title=\"配置惰性队列\"></a>配置惰性队列</h2><ul>\n<li><p>通过配置arguments来配置惰性队列</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Queue <span class=\"title function_\">lazyQueue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QueueBuilder.durable(<span class=\"string\">&quot;lazyQueue_Study_1030&quot;</span>).withArgument(<span class=\"string\">&quot;x-queue-mode&quot;</span>,<span class=\"string\">&quot;lazy&quot;</span>).build();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Queue <span class=\"title function_\">lazyQueue2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> QueueBuilder.durable(<span class=\"string\">&quot;lazyQueue_Study_10302&quot;</span>).lazy().build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>通过配置Policy的方式配置惰性队列</p>\n<p>hole…</p>\n</li>\n</ul>\n<h1 id=\"RabbitMQ集群\"><a href=\"#RabbitMQ集群\" class=\"headerlink\" title=\"RabbitMQ集群\"></a>RabbitMQ集群</h1><h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p><img src=\"/2023/03/20/RabbitMQ-7/RabbitMQ%E9%9B%86%E7%BE%A4.svg\" alt=\"RabbitMQ集群\"></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl stop_app <span class=\"comment\">#停止当前RabbitMQ</span></span><br><span class=\"line\">rabbitmqctl reset <span class=\"comment\"># 重置RabbitMQ</span></span><br><span class=\"line\">rabbitmqctl join_cluster rabbitmq@192.168.x.x:port <span class=\"comment\">#加入集群</span></span><br><span class=\"line\">rabbitmqctl start_app <span class=\"comment\"># 开启服务</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h2><p>查看集群状态：<code>rabbitmqctl cluster_status</code></p>\n<h2 id=\"从集群中删除节点\"><a href=\"#从集群中删除节点\" class=\"headerlink\" title=\"从集群中删除节点\"></a>从集群中删除节点</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmqctl forget_cluster_node rabbitmq@node2 <span class=\"comment\">#在集群的任意节点执行</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"镜像队列\"><a href=\"#镜像队列\" class=\"headerlink\" title=\"镜像队列\"></a>镜像队列</h1><p>镜像队列配置在Policy中，具体配置三个参数</p>\n<ul>\n<li>ha-mode：配置镜像队列的复制模式<ul>\n<li>exactly：队列复制到指定数量的节点</li>\n<li>nodes：将队列复制到所有具有相同名称的节点</li>\n<li>all：将队列复制到所有节点</li>\n</ul>\n</li>\n<li>ha-params：ha-mode指定后的参数<ul>\n<li>exactly模式，这里表示要复制的节点数量</li>\n<li>nodes模式，这里表示要复制到的节点的名称，如：<code>[&quot;rabbitmq@node1&quot;,&quot;rabbitmq@node2&quot;]</code></li>\n</ul>\n</li>\n<li>ha-sync-mode：表示镜像的同步方式，<ul>\n<li>automatic：异步模式进行同步</li>\n<li>manual：需要显式调用API进行同步操作</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Haproxy，keepalive\"><a href=\"#Haproxy，keepalive\" class=\"headerlink\" title=\"Haproxy，keepalive\"></a>Haproxy，keepalive</h1><p>实现RabbitMQ的高可用，负载均衡。</p>\n<h1 id=\"Federation插件\"><a href=\"#Federation插件\" class=\"headerlink\" title=\"Federation插件\"></a>Federation插件</h1><p><del>Federation联邦，用于为用户优选RabbitMQ主机。</del></p>\n<h2 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_federation  <span class=\"comment\">#开启插件</span></span><br><span class=\"line\">rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_federation_management  <span class=\"comment\">#开启插件</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","categories":[],"tags":["RabbitMQ"]},{"title":"RabbitMQ 6 交换机确认回调 消息回退 备份交换机 幂等性","url":"http://zswh33.github.io/2023/03/20/RabbitMQ-6/","content":"<h1 id=\"发布确认回调\"><a href=\"#发布确认回调\" class=\"headerlink\" title=\"发布确认回调\"></a>发布确认回调</h1><p>通过实现<code>RabbitTemplate.ConfirmCallback</code>接口，可以实现<strong>当消息向交换机传递失败时</strong>，触发回调方法。</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.rabbitmq.publisher-confirm-type</span>=<span class=\"string\">correlated</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>该配置用于设置<strong>消息从程序传递到交换机，交换机是否响应结果</strong>；</li>\n<li>参数<ul>\n<li><strong>CORRELATED</strong>：关联模式，消息发送到交换机会触发回调方法</li>\n<li>NONE：禁用发布确认，是<strong>默认</strong>模式。</li>\n<li>SIMPLE：<ul>\n<li>像CORRELATED一样会触发回调方法</li>\n<li>发布消息成功后使用<code>rabbitTemplate</code>调用<code>waitForConfirms</code>或<code>waitForConfirmsOrDie</code>方法等待broker节点返回发送结果，根据返回结果来判定下一步的逻辑，要注意的点是<code>waitForConfirmsOrDie</code>方法如果返回false则会关闭channel，则接下来无法发送消息到broker;</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"CORRELATED\"><a href=\"#CORRELATED\" class=\"headerlink\" title=\"CORRELATED\"></a>CORRELATED</h2><h3 id=\"发布消息\"><a href=\"#发布消息\" class=\"headerlink\" title=\"发布消息\"></a>发布消息</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template.convertAndSend(RabbitMQConfig.EXCHANGE,RabbitMQConfig.QUEUE_KEY,m,<span class=\"keyword\">new</span> <span class=\"title class_\">CorrelationData</span>(<span class=\"string\">&quot;这是ID&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">//new CorrelationData(&quot;这是ID&quot;)，这个参数会在回调函数中获得，一般用于在回调函数中区分被回调的消息。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"接收回调\"><a href=\"#接收回调\" class=\"headerlink\" title=\"接收回调\"></a>接收回调</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FailedMessageConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">RabbitTemplate</span>.ConfirmCallback &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    RabbitTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@PostConstruct</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        template.setConfirmCallback(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">confirm</span><span class=\"params\">(CorrelationData correlationData, <span class=\"type\">boolean</span> ack, String cause)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (correlationData!=<span class=\"literal\">null</span>)m = correlationData.getId();<span class=\"comment\">//这里获取消息的ID</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (ack)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;成功发送消息：&quot;</span>+m);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;发送消息失败，原因：&quot;</span>+cause);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">发送消息失败，原因：channel error; protocol method: <span class=\"comment\">#method&lt;channel.close&gt;(reply-code=404, reply-text=NOT_FOUND - no exchange &#x27;exchange_study_2131q&#x27; in vhost &#x27;/&#x27;, class-id=60, method-id=40)</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"消息回退\"><a href=\"#消息回退\" class=\"headerlink\" title=\"消息回退\"></a>消息回退</h1><ul>\n<li><p>当仅开启了生产者确认机制的情况下，交换机接收到消息后，会直接给消息生产者发送确认消息，如果发现消息该消息不可路由，消息会被直接丢弃。</p>\n</li>\n<li><p>解决方法</p>\n<ul>\n<li>设置mandatory参数，当消息不可到达目的地时将消息返回给生产者。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#当消息不可被路由，回退消息给生产者</span><br><span class=\"line\">spring.rabbitmq.publisher-returns=true</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class FailedMessageConfig implements RabbitTemplate.ReturnsCallback &#123;</span><br><span class=\"line\">    @Autowired</span><br><span class=\"line\">    RabbitTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    @PostConstruct</span><br><span class=\"line\">    public void init()&#123;</span><br><span class=\"line\">        template.setReturnsCallback(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    //可以当消息传递过程中，消息不可达目的地，则返回给生产者</span><br><span class=\"line\">    @Override</span><br><span class=\"line\">    public void returnedMessage(ReturnedMessage returned) &#123;</span><br><span class=\"line\">        System.out.printf(&quot;消息%s,被交换机%s退回，退回原因%s,路由key:%s&quot;,</span><br><span class=\"line\">                returned.getMessage(),</span><br><span class=\"line\">                returned.getExchange(),</span><br><span class=\"line\">                returned.getReplyText(),</span><br><span class=\"line\">                returned.getRoutingKey());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">消息 你好 ,被交换机 exchange_study_2131 退回，退回原因 NO_ROUTE ,路由key: queue_key_study_2131qwe</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"备份交换机\"><a href=\"#备份交换机\" class=\"headerlink\" title=\"备份交换机\"></a>备份交换机</h1><p>当交换机无法将消息传递给队列，会将消息传递给<code>备份交换机</code>。</p>\n<p>可以在交换机中配置参数：<code>alternate-exchange</code>值为备份交换机的名字。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Exchange <span class=\"title function_\">directExchange2131</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ExchangeBuilder.directExchange(EXCHANGE).withArgument(<span class=\"string\">&quot;alternate-exchange&quot;</span>,BACKUP_EXCHANGE).build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"消息回退与备份交换机\"><a href=\"#消息回退与备份交换机\" class=\"headerlink\" title=\"消息回退与备份交换机\"></a>消息回退与备份交换机</h1><p>当<strong>消息回退</strong>和<strong>备份交换机</strong>同时开启时，<strong>备份交换机优先级更高</strong>。</p>\n<h1 id=\"死信队列和备份交换机的区别\"><a href=\"#死信队列和备份交换机的区别\" class=\"headerlink\" title=\"死信队列和备份交换机的区别\"></a>死信队列和备份交换机的区别</h1><h2 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li><p>死信队列：<code>x-dead-letter-exchange</code>设置死信交换机，<code>x-dead-letter-routing-key</code>设置使用的路由key。</p>\n</li>\n<li><p>备份交换机：<code>alternate-exchange</code>指定备份交换机的名字。</p>\n</li>\n</ul>\n<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><ul>\n<li>死信队列：负责处理交换机的消息无法到达队列的情况，<code>消息被拒绝/队列达最大长度/TTL过期</code>。</li>\n<li>备份交换机：当消息无法到达交换机时，消息将尝试到达备份交换机。</li>\n</ul>\n<p><img src=\"/2023/03/20/RabbitMQ-6/%E6%B6%88%E6%81%AF%E5%BC%80%E5%A7%8B%E5%8F%91%E9%80%81.svg\" alt=\"消息开始发送\"></p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"幂等性\"><a href=\"#幂等性\" class=\"headerlink\" title=\"幂等性\"></a>幂等性</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><ul>\n<li><p>要求用户对于同一操作发起的<strong>一次或多次请求的结果是一致的</strong>，不会因多次请求产生副作用。</p>\n</li>\n<li><p>解决的问题如：支付，用户购买商品支付，扣款成功，但网络异常，导致<strong>二次扣款</strong>。</p>\n</li>\n</ul>\n<h3 id=\"如何出现\"><a href=\"#如何出现\" class=\"headerlink\" title=\"如何出现\"></a>如何出现</h3><ul>\n<li><p>消费者在MQ消费消息，</p>\n</li>\n<li><p>当MQ向消费者发送消息，消费者要返回ACK时，网络中断，</p>\n</li>\n<li><p>此时MQ没有收到确认消息，</p>\n<ul>\n<li>这个消息会被发送给其他消费者，</li>\n<li>或在网络恢复后将消息重新发给消费者</li>\n</ul>\n</li>\n<li><p>产生<strong>重复消费</strong>。</p>\n</li>\n</ul>\n<h3 id=\"解决思路\"><a href=\"#解决思路\" class=\"headerlink\" title=\"解决思路\"></a>解决思路</h3><ul>\n<li>为消息标记一个<strong>全局ID</strong>或一个<strong>唯一标识</strong>，每次消费消息前判断该消息是否被消费过。</li>\n</ul>\n<h3 id=\"主流解决方案\"><a href=\"#主流解决方案\" class=\"headerlink\" title=\"主流解决方案\"></a>主流解决方案</h3><ul>\n<li>唯一ID+指纹码机制<ul>\n<li>利用数据库主键去重</li>\n<li>指纹码：为消息添加唯一标志。</li>\n<li>优势：简单</li>\n<li>劣势：在高并发时，会出现性能问题。</li>\n</ul>\n</li>\n<li>分布式锁，如<strong>利用<code>Redis</code>原子性实现</strong>（推荐的方式）<ul>\n<li>使用Redis的setnx命令。</li>\n</ul>\n</li>\n</ul>\n","categories":[],"tags":["RabbitMQ"]},{"title":"RabbitMQ 基础知识 1","url":"http://zswh33.github.io/2023/03/18/RabbitMQ-基础知识-1/","content":"<h1 id=\"为队列设置arguments\"><a href=\"#为队列设置arguments\" class=\"headerlink\" title=\"为队列设置arguments\"></a>为队列设置arguments</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.queueDeclare(NORMAL_QUEUE,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String,Object&gt;()&#123;&#123;</span><br><span class=\"line\">    put(<span class=\"string\">&quot;x-dead-letter-exchange&quot;</span>,DEAD_EXCHANGE);<span class=\"comment\">//设置死信要送达的交换机</span></span><br><span class=\"line\">    put(<span class=\"string\">&quot;x-dead-letter-routing-key&quot;</span>,<span class=\"string\">&quot;lisi&quot;</span>);<span class=\"comment\">//设置死信送达使用的RoutingKey</span></span><br><span class=\"line\">&#125;&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>x-dead-letter-exchange</code>：设置死信要送达的交换机</p>\n</li>\n<li><p><code>x-dead-letter-routing-key</code>：设置死信送达使用的<code>RoutingKey</code></p>\n</li>\n<li><p><code>x-max-length</code>：队列的最大长度</p>\n</li>\n<li><p><code>x-message-ttl</code>：设置消息过期时间，单位毫秒</p>\n</li>\n<li><p><code>x-max-priority</code>：设置队列支持的消息的优先级级数，默认为10个级数，最大允许255；</p>\n</li>\n<li><p><code>x-expires</code>：设置队列的自动删除，单位毫秒</p>\n</li>\n<li><p><code>x-queue-mode</code>：可以设置队列模式</p>\n<ul>\n<li>对于持久化队列，消息会被存储到磁盘中，并在内存不吃紧的情况下，在内存中创建一个备份，这个备份包含队列的部分消息；</li>\n<li>默认情况下，内存中的备份会尽可能多的存储消息。<ul>\n<li><code>lazy</code>惰性队列：若设置了惰性队列，持久化队列将不在内存中设置备份，只有当被消费者消费的时候才会读入内存。</li>\n<li><code>classic</code>经典：消息会被直接保存在内存中</li>\n<li><code>quorum</code>仲裁：需要安装插件。在多个节点间复制队列，使得队列有更好的可靠性和可扩展性，但会带来一定的性能损失。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><code>ha-mode</code>：集群节点的复制模式。</p>\n<ul>\n<li><code>all</code>：队列将复制到所有的集群节点，并且在从节点不可用时，主节点不再接收新的消息；</li>\n<li><code>exactly</code>：队列将在特定数量的节点上进行复制。<ul>\n<li><code>ha-params</code>可以指定在多少个节点上进行复制，若不指定，则默认为所有节点。</li>\n</ul>\n</li>\n<li><code>nodes</code>：队列将复制到指定节点上，通过<code>ha-params</code>指定要复制的节点。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"发布消息指定配置\"><a href=\"#发布消息指定配置\" class=\"headerlink\" title=\"发布消息指定配置\"></a>发布消息指定配置</h1><h2 id=\"原生配置方式\"><a href=\"#原生配置方式\" class=\"headerlink\" title=\"原生配置方式\"></a>原生配置方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.basicPublish(</span><br><span class=\"line\">        Consumer.NORMAL_EXCHANGE,</span><br><span class=\"line\">        <span class=\"string\">&quot;zhangsan&quot;</span>,</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">AMQP</span>.BasicProperties().builder().expiration(<span class=\"string\">&quot;10000&quot;</span>).build(),<span class=\"comment\">//设置发布消息的配置，这里设置消息过期时间10秒</span></span><br><span class=\"line\">        message.getBytes());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SpringBoot配置方式\"><a href=\"#SpringBoot配置方式\" class=\"headerlink\" title=\"SpringBoot配置方式\"></a>SpringBoot配置方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template.convertAndSend(</span><br><span class=\"line\">    MQUtils.NORMAL_EXCHANGE,</span><br><span class=\"line\">    MQUtils.NORMAL_QUEUE_1_ROUTINGKEY,</span><br><span class=\"line\">    message,(msg)-&gt;&#123;</span><br><span class=\"line\">    \tmsg.getMessageProperties().setExpiration(<span class=\"string\">&quot;10000&quot;</span>);</span><br><span class=\"line\">\t    <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置列表\"><a href=\"#配置列表\" class=\"headerlink\" title=\"配置列表\"></a>配置列表</h2><ul>\n<li><code>contentType</code>：消息体编码方式，如<code>application/json</code></li>\n<li><code>contentEncoding</code>：消息体的字符集，如<code>UTF-8</code></li>\n<li><code>deliveryMode</code>：消息持久化，1表示持久化，0表示不持久化。</li>\n<li><code>priority</code>：消息的优先级，默认可以为0-9的整数</li>\n<li><code>correlationId</code>：关联Id，用于关联RPC请求和响应</li>\n<li><code>replyTo</code>：指定回复的队列名称</li>\n<li><code>expiration</code>：过期时间，单位毫秒<ul>\n<li>若与为队列设置的消息过期时间<code>ttl</code>同时存在，则以值较小的那个为准。</li>\n</ul>\n</li>\n<li><code>messageId</code>：消息Id</li>\n<li><code>headers</code>：存储自定义键值对，可以在不同服务之间传递消息</li>\n<li><code>type</code>：消息类型，可以用于标识消息的目的，如”order_create”或”payment_success”等</li>\n<li><code>timestamp</code>：消息的时间戳，表示消息的创建时间</li>\n<li><code>userId</code>：标识发送消息的用户</li>\n<li><code>appId</code>：应用程序Id，标识发送消息的应用程序</li>\n<li><code>clusterId</code>：集群Id，标识所属集群</li>\n</ul>\n<h1 id=\"Policy配置\"><a href=\"#Policy配置\" class=\"headerlink\" title=\"Policy配置\"></a>Policy配置</h1><p>可以在RabbitMQ的控制台的Admin中配置Policies</p>\n<p>配置Policy的参数</p>\n<ul>\n<li>Name：Policy的名称</li>\n<li>Pattern：配置队列名称的正则表达式<ul>\n<li>如：<code>^mirror</code>表示以mirror为前缀的队列。<code>mirror_hello</code></li>\n</ul>\n</li>\n<li>Definition：一个JSON对象，包含要为队列设置的属性和选项<ul>\n<li>message-ttl：消息过期时间</li>\n<li>maxlength：队列最大消息数</li>\n<li>ha-mode：队列镜像模式</li>\n<li>ha-sync-mode：队列的复制模式</li>\n<li>ha-params：镜像模式的参数</li>\n</ul>\n</li>\n</ul>\n","categories":[],"tags":["RabbitMQ"]},{"title":"RabbitMQ 4","url":"http://zswh33.github.io/2023/03/01/RabbitMQ-4/","content":"<h1 id=\"RabbitMQ持久化\"><a href=\"#RabbitMQ持久化\" class=\"headerlink\" title=\"RabbitMQ持久化\"></a>RabbitMQ持久化</h1><h2 id=\"队列持久化\"><a href=\"#队列持久化\" class=\"headerlink\" title=\"队列持久化\"></a>队列持久化</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在<code>queueDeclare</code>方法上将durable设为true来实现持久化。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.queueDeclare(MQUtils.KEY,<span class=\"literal\">true</span>,<span class=\"literal\">false</span>,<span class=\"literal\">true</span>,null);</span><br><span class=\"line\">                                  ^</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"消息持久化\"><a href=\"#消息持久化\" class=\"headerlink\" title=\"消息持久化\"></a>消息持久化</h2><h3 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>Hole,…</p>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>修改<code>basicPublish</code>的参数props为<code>MessageProperties.PERSISTENT_TEXT_PLAIN</code>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.basicPublish(<span class=\"string\">&quot;&quot;</span>,MQUtils.KEY,MessageProperties.PERSISTENT_TEXT_PLAIN,scanner.next().getBytes());</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"消息分发模式\"><a href=\"#消息分发模式\" class=\"headerlink\" title=\"消息分发模式\"></a>消息分发模式</h1><p>注：<strong>该模式并非RabbitMQ原本的模式，而是依据RabbitMQ使用方式来衍生出来的使用策略。</strong></p>\n<p><strong>默认为轮询模式。</strong></p>\n<ul>\n<li>轮询模式：一个消费者一条，按均分配；</li>\n<li>公平分发：根据消费者消费能力进行公平分发，处理快的处理的多，处理慢的处理的少。</li>\n</ul>\n<p>在Java中，通过设置是否进行自动应答和Qos来进行公平分发模式的实现。</p>\n<h2 id=\"轮询模式-Round-Robin\"><a href=\"#轮询模式-Round-Robin\" class=\"headerlink\" title=\"轮询模式 Round-Robin\"></a>轮询模式 Round-Robin</h2><p><del>特点：当有多个消费者接入时，消息的分配模式是一个消费者分配一条，直到消费者消费完成</del></p>\n<p> 若有2个消费者，1个生产者，不论两个消费者速度快慢，两个消费者收到的消息数量一致。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.basicConsume(<span class=\"string\">&quot;Queue1&quot;</span>, <span class=\"literal\">true</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">DeliverCallback</span>() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handle</span><span class=\"params\">(String consumerTag, Delivery message)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;收到消息：&quot;</span> + <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>( message.getBody()));</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.MILLISECONDS.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, <span class=\"keyword\">new</span> <span class=\"title class_\">CancelCallback</span>() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handle</span><span class=\"params\">(String consumerTag)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消息接受失败。&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不公平分发\"><a href=\"#不公平分发\" class=\"headerlink\" title=\"不公平分发\"></a>不公平分发</h2><p><em>能者多劳。</em></p>\n<p>在消费者的channel设置<strong>参数Qos为1</strong>，即可实现公平分发。</p>\n<ul>\n<li>Qos为0则表示轮询模式。</li>\n</ul>\n<p><code>channel.basicQos(1);</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.basicQos(<span class=\"number\">1</span>);</span><br><span class=\"line\">channel.basicConsume(<span class=\"string\">&quot;Queue1&quot;</span>,<span class=\"literal\">false</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费成功：&quot;</span>+<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.MILLISECONDS.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getChannel().basicAck(envelope.getDeliveryTag(),<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"预取值\"><a href=\"#预取值\" class=\"headerlink\" title=\"预取值\"></a>预取值</h1><p><code>prefetch</code></p>\n<p>信道缓存区的大小，通过basic.qos来设置消费者“预取计数”值来完成；</p>\n<p>定义<strong>通道上允许的未确认消息的最大数量</strong>，一旦达到配置的数量，RabbitMQ将停止在通道上传递更多消息，直到至少有1个未处理的消息被确认。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.basicQos(prefetchSize);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"发布确认\"><a href=\"#发布确认\" class=\"headerlink\" title=\"发布确认\"></a>发布确认</h1><h2 id=\"介绍-2\"><a href=\"#介绍-2\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ul>\n<li><p>信道的confirm模式；</p>\n</li>\n<li><p>在信道confirm模式下，生产者向Broker发送消息后，都会收到来自Broker的反馈；</p>\n<ul>\n<li>若生产者要求消息持久化，Broker会在将消息持久化之后向生产者发送反馈；</li>\n<li>原理：在confirm模式下，所有在该信道上面发布的消息都会被指派一个唯一的ID，一旦消息被投递到所有匹配的队列后，Broker会向生产者发送一条<strong>确认通知</strong>（包含消息的ID），这样生产者就会了解到消息是否成功送达队列。若消息是可持久化的，则确认通知会在消息写入磁盘后发出；<ul>\n<li>Broker的确认通知中delivery-tag域包含了消息是否已送达和消息的确认序列号；<ul>\n<li>若RabbitMQ因内部原因导致消息丢失，就会发送一条nack消息表示消息出错。</li>\n</ul>\n</li>\n<li>Broker可以设置basic.ack的multiple域，表示这个序列号之前的所有消息都已经得到处理。</li>\n</ul>\n</li>\n<li>confirm是异步的，生产者在等待确认通知的同时也可以继续发送下一跳消息；生产者在收到nack消息后可以在回调方法中处理该nack消息。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"开启confirm模式\"><a href=\"#开启confirm模式\" class=\"headerlink\" title=\"开启confirm模式\"></a>开启confirm模式</h2><p>在信道上使用<code>confirmSelect()</code>方法开启confirm模式。</p>\n<p><code>channel.confirmSelect()</code></p>\n<h2 id=\"确认发布模式\"><a href=\"#确认发布模式\" class=\"headerlink\" title=\"确认发布模式\"></a>确认发布模式</h2><h3 id=\"单个确认发布\"><a href=\"#单个确认发布\" class=\"headerlink\" title=\"单个确认发布\"></a>单个确认发布</h3><ul>\n<li><p>一种简单的确认方式，它是一种<strong>同步确认发布</strong>的方式，</p>\n<ul>\n<li>发布一个消息后，只有这个消息被<strong>确认</strong>，后续的消息才能继续发布</li>\n<li>waitForConfirmDie(long)，在指定时间内收到确认则返回，若在时间范围内未确认则抛出异常。</li>\n</ul>\n</li>\n<li><p>缺点</p>\n<ul>\n<li>发布速度特别慢</li>\n</ul>\n</li>\n<li><p>场景：每秒不超过数百条发布消息吞吐量，有些应用程序是可以用的。</p>\n</li>\n<li><p>使用：</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//开启发布确认</span></span><br><span class=\"line\">channel.confirmSelect();</span><br><span class=\"line\"><span class=\"comment\">//批量发消息</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; MessageCount; i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> i + <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    channel.basicPublish(<span class=\"string\">&quot;&quot;</span>,queueName,<span class=\"literal\">null</span>,message.getBytes());</span><br><span class=\"line\">    <span class=\"comment\">//单个消息，发布后马上确认</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> channel.waitForConfirms();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (b)&#123;</span><br><span class=\"line\">        System.out.println(i+<span class=\"string\">&quot;消息发送成功&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"批量\"><a href=\"#批量\" class=\"headerlink\" title=\"批量\"></a>批量</h3><ul>\n<li>先发一批消息，然后一起确认；</li>\n<li>优点：速度快</li>\n<li>缺点：不能确定是哪条消息出错</li>\n<li>使用：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//开启发布确认</span></span><br><span class=\"line\">channel.confirmSelect();</span><br><span class=\"line\"><span class=\"comment\">//批量多少开确认一次</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">batchSize</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"comment\">//批量发消息</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; MessageCount; i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> i + <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    channel.basicPublish(<span class=\"string\">&quot;&quot;</span>,queueName,<span class=\"literal\">null</span>,message.getBytes());</span><br><span class=\"line\">    <span class=\"comment\">//到100条消息时候，批量确认一次</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((<span class=\"number\">1</span>+i)%batchSize ==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">        channel.waitForConfirms();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"异步\"><a href=\"#异步\" class=\"headerlink\" title=\"异步\"></a>异步</h3><ul>\n<li><p>hole…</p>\n</li>\n<li><p>使用</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//消息监听器</span></span><br><span class=\"line\">channel.addConfirmListener((tag,multi)-&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">//监听 成功 ack</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;确认成功的消息：&quot;</span>+tag);</span><br><span class=\"line\">&#125;,(tag,multi)-&gt;&#123;</span><br><span class=\"line\">    <span class=\"comment\">//监听 失败 nack</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;确认表示失败的消息：&quot;</span>+tag);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//批量发消息</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; MessageCount; i++) &#123;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> i + <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    channel.basicPublish(<span class=\"string\">&quot;&quot;</span>,queueName,<span class=\"literal\">null</span>,message.getBytes());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["RabbitMQ"]},{"title":"RabbitMQ 4.9 SpringBoot与RabbitMQ","url":"http://zswh33.github.io/2023/02/28/RabbitMQ-5/","content":"<h1 id=\"SpringBoot整合RabbitMQ\"><a href=\"#SpringBoot整合RabbitMQ\" class=\"headerlink\" title=\"SpringBoot整合RabbitMQ\"></a>SpringBoot整合RabbitMQ</h1><h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Fanout生产者示例\"><a href=\"#Fanout生产者示例\" class=\"headerlink\" title=\"Fanout生产者示例\"></a>Fanout生产者示例</h2><ol>\n<li><p>使用RabbitMQConfiguration初始化Exchange、Queue以及进行队列交换机绑定；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RabbitMQConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//声明注册fanout模式的交换机</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FanoutExchange <span class=\"title function_\">fanoutExchange</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FanoutExchange</span>(<span class=\"string\">&quot;fanoutExchange&quot;</span>,<span class=\"literal\">true</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//声明队列：save, sms, email, notice</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Queue <span class=\"title function_\">saveQueue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>(<span class=\"string\">&quot;save.fanout.queue&quot;</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Queue <span class=\"title function_\">smsQueue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>(<span class=\"string\">&quot;sms.fanout.queue&quot;</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Queue <span class=\"title function_\">emailQueue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>(<span class=\"string\">&quot;email.fanout.queue&quot;</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Queue <span class=\"title function_\">noticeQueue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>(<span class=\"string\">&quot;notice.fanout.queue&quot;</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//完成绑定关系（队列和交换机完成绑定关系）</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> <span class=\"keyword\">public</span> Binding <span class=\"title function_\">saveBinding</span><span class=\"params\">()</span>&#123;<span class=\"keyword\">return</span> BindingBuilder.bind(saveQueue()).to(fanoutExchange());&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> <span class=\"keyword\">public</span> Binding <span class=\"title function_\">smsBinding</span><span class=\"params\">()</span>&#123;<span class=\"keyword\">return</span> BindingBuilder.bind(smsQueue()).to(fanoutExchange());&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> <span class=\"keyword\">public</span> Binding <span class=\"title function_\">emailBinding</span><span class=\"params\">()</span>&#123;<span class=\"keyword\">return</span> BindingBuilder.bind(emailQueue()).to(fanoutExchange());&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> <span class=\"keyword\">public</span> Binding <span class=\"title function_\">noticeBinding</span><span class=\"params\">()</span>&#123;<span class=\"keyword\">return</span> BindingBuilder.bind(noticeQueue()).to(fanoutExchange());&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用rabbitTemplate进行消息发送</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">OrderService</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> RabbitTemplate rabbitTemplate;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 模拟用户下单</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> uid  x</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> pid x</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> num x</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">makeOrder</span><span class=\"params\">(String uid,String pid,<span class=\"type\">int</span> num)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//生成订单</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">orderId</span> <span class=\"operator\">=</span> UUID.randomUUID().toString();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;生成订单：&quot;</span>+orderId);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过MQ发送消息</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">exchangeName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;fanoutExchange&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">routingKey</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 交换机 ，  路由Key或队列名称，  消息内容</span></span><br><span class=\"line\">        rabbitTemplate.convertAndSend(exchangeName,routingKey,orderId);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">OrderService orderService;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    orderService.makeOrder(<span class=\"string\">&quot;1&quot;</span>,<span class=\"string\">&quot;1&quot;</span>,<span class=\"number\">123</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"消费者示例\"><a href=\"#消费者示例\" class=\"headerlink\" title=\"消费者示例\"></a>消费者示例</h2><p>创建一个Consumer类，使用@Service注解和@RabbitListener注解</p>\n<p>其中：<code>@RabbitListener(queues = &#123;&quot;email.fanout.queue&quot;,&quot;队列名&quot;&#125;)</code>，表示要监听指定队列的消息信息</p>\n<p>然后在类的方法中加注解<code>@RabbitHandler</code>表示该方法负责处理收到的消息。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(queues = &#123;&quot;email.fanout.queue&quot;&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EmailConsumer</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">recevieMessage</span><span class=\"params\">(String message)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;email 收到订单信息：&quot;</span>+message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"DirectExchange生产者示例\"><a href=\"#DirectExchange生产者示例\" class=\"headerlink\" title=\"DirectExchange生产者示例\"></a>DirectExchange生产者示例</h2><p>与Fanout不同的是，直接将Bean Exchange的类型改为DirectExchange，然后键Binding Bean的添加方法with绑定RoutingKey即可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DirectRabbitMQConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//声明注册fanout模式的注册机</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DirectExchange <span class=\"title function_\">directExchange</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DirectExchange</span>(<span class=\"string\">&quot;directExchange&quot;</span>,<span class=\"literal\">true</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//声明队列：save, sms, email, notice</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Queue <span class=\"title function_\">saveQueue_testInDirect</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>(<span class=\"string\">&quot;save.direct.queue&quot;</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Queue <span class=\"title function_\">smsQueue_testInDirect</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>(<span class=\"string\">&quot;sms.direct.queue&quot;</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Queue <span class=\"title function_\">emailQueue_testInDirect</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>(<span class=\"string\">&quot;email.direct.queue&quot;</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Queue <span class=\"title function_\">noticeQueue_testInDirect</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Queue</span>(<span class=\"string\">&quot;notice.direct.queue&quot;</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//完成绑定关系（队列和交换机完成绑定关系）</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> <span class=\"keyword\">public</span> Binding <span class=\"title function_\">saveBindingInDirect</span><span class=\"params\">()</span>&#123;<span class=\"keyword\">return</span> BindingBuilder.bind(saveQueue_testInDirect()).to(directExchange()).with(<span class=\"string\">&quot;save&quot;</span>);&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> <span class=\"keyword\">public</span> Binding <span class=\"title function_\">smsBindingInDirect</span><span class=\"params\">()</span>&#123;<span class=\"keyword\">return</span> BindingBuilder.bind(smsQueue_testInDirect()).to(directExchange()).with(<span class=\"string\">&quot;sms&quot;</span>);&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> <span class=\"keyword\">public</span> Binding <span class=\"title function_\">emailBindingInDirect</span><span class=\"params\">()</span>&#123;<span class=\"keyword\">return</span> BindingBuilder.bind(emailQueue_testInDirect()).to(directExchange()).with(<span class=\"string\">&quot;email&quot;</span>);&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> <span class=\"keyword\">public</span> Binding <span class=\"title function_\">noticeBindingInDirect</span><span class=\"params\">()</span>&#123;<span class=\"keyword\">return</span> BindingBuilder.bind(noticeQueue_testInDirect()).to(directExchange()).with(<span class=\"string\">&quot;notice&quot;</span>);&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"TopicExchange注解方式消费者示例\"><a href=\"#TopicExchange注解方式消费者示例\" class=\"headerlink\" title=\"TopicExchange注解方式消费者示例\"></a>TopicExchange注解方式消费者示例</h2><p>这个没有可以学到的内容，建议先学@QueueBinding注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RabbitListener(</span></span><br><span class=\"line\"><span class=\"meta\">        bindings = @QueueBinding(</span></span><br><span class=\"line\"><span class=\"meta\">                value = @Queue(value = &quot;email.topic.queue&quot;,durable = &quot;true&quot;,autoDelete = &quot;false&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">                exchange = @Exchange(value = &quot;topicExchange&quot;,type = ExchangeTypes.TOPIC),</span></span><br><span class=\"line\"><span class=\"meta\">                key = &quot;#.email.*&quot;</span></span><br><span class=\"line\"><span class=\"meta\">        )</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">EmailConsumerTopic</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RabbitHandler</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">recevieMessage</span><span class=\"params\">(String message)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;email topic 收到订单信息：&quot;</span>+message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"一些SpringBoot的配置\"><a href=\"#一些SpringBoot的配置\" class=\"headerlink\" title=\"一些SpringBoot的配置\"></a>一些SpringBoot的配置</h1><h2 id=\"配置连接名，集群，地址连接方式\"><a href=\"#配置连接名，集群，地址连接方式\" class=\"headerlink\" title=\"配置连接名，集群，地址连接方式\"></a>配置连接名，集群，地址连接方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 配置连接名 */</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> SimplePropertyValueConnectionNameStrategy <span class=\"title function_\">cns</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimplePropertyValueConnectionNameStrategy</span>(<span class=\"string\">&quot;自定义连接Rabbit的名字&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\">ConnectionFactory <span class=\"title function_\">rabbitConnectionFactory</span><span class=\"params\">(ConnectionNameStrategy cns)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">CachingConnectionFactory</span> <span class=\"variable\">cachingConnectionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CachingConnectionFactory</span>();</span><br><span class=\"line\">    <span class=\"comment\">//配置连接名</span></span><br><span class=\"line\">    cachingConnectionFactory.setConnectionNameStrategy(cns);;</span><br><span class=\"line\">    <span class=\"comment\">//配置集群，多地址</span></span><br><span class=\"line\">    cachingConnectionFactory.setAddresses(<span class=\"string\">&quot;host1:5672,host2:5672,host3:5672&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//设置地址连接方式，默认情况下会随机选择一个地址，若不可用，则从前往后依次连接。</span></span><br><span class=\"line\">    cachingConnectionFactory.setAddressShuffleMode(AbstractConnectionFactory.AddressShuffleMode.RANDOM);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cachingConnectionFactory;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":[],"tags":["RabbitMQ"]},{"title":"RabbitMQ 5 交换机 死信队列 延时队列","url":"http://zswh33.github.io/2023/02/28/RabbitMQ-5_v2/","content":"<h1 id=\"RabbitMQ交换机\"><a href=\"#RabbitMQ交换机\" class=\"headerlink\" title=\"RabbitMQ交换机\"></a>RabbitMQ交换机</h1><p>消息路线：生产者 -&gt; 交换机 -&gt; 队列 -&gt; 消费者</p>\n<p>交换机接收生产者的消息，依据routingKey按照指定规则将消息转交给队列。</p>\n<p>类型：<code>     </code>，<code>direct</code>，<code>topic</code>，<code>headers</code>，<code>fanout</code> </p>\n<h2 id=\"默认交换机\"><a href=\"#默认交换机\" class=\"headerlink\" title=\"默认交换机\"></a>默认交换机</h2><p>即：<code> </code></p>\n<p>使用queueName代替routingKey，可以直接向队列中插入数据。</p>\n<h2 id=\"绑定关系\"><a href=\"#绑定关系\" class=\"headerlink\" title=\"绑定关系\"></a>绑定关系</h2><p>除了默认交换机，其他交换机都可将<strong>队列</strong>和<strong>RoutingKey</strong>进行绑定。</p>\n<p>交换机通过RoutingKey来匹配队列，将消息投递。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.queueBind(queueName,Exchange,RoutingKey)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Fanout交换机\"><a href=\"#Fanout交换机\" class=\"headerlink\" title=\"Fanout交换机\"></a>Fanout交换机</h2><p>将接收到的所有消息<strong>广播</strong>。</p>\n<p>队列与该交换机绑定不需要RoutingKey，</p>\n<p>只要绑定了该交换机，该交换机收到的消息都会被传递给绑定的队列。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">*  exchangeName：交换机的名字</span></span><br><span class=\"line\"><span class=\"comment\">*  typeName：交换机类型，fanout等</span></span><br><span class=\"line\"><span class=\"comment\">* public enum BuiltinExchangeType &#123;</span></span><br><span class=\"line\"><span class=\"comment\">*   DIRECT(&quot;direct&quot;),FANOUT(&quot;fanout&quot;),TOPIC(&quot;topic&quot;), *   HEADERS(&quot;headers&quot;);</span></span><br><span class=\"line\"><span class=\"comment\">* &#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">channel.exchangeDeclare(exchangeName,BuiltinExchangeType.FANOUT);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Direct交换机\"><a href=\"#Direct交换机\" class=\"headerlink\" title=\"Direct交换机\"></a>Direct交换机</h2><p>将接收到的消息，按照RoutingKey完全匹配的队列进行消息投递。</p>\n<h2 id=\"Topic交换机\"><a href=\"#Topic交换机\" class=\"headerlink\" title=\"Topic交换机\"></a>Topic交换机</h2><p>支持RoutingKey模糊匹配。</p>\n<p>Topic交换机的RoutingKey不能随意写，必须是：一个单词列表，用<code>.</code>分割。</p>\n<p>如：quick.orange.rabbit</p>\n<ul>\n<li><p>其他规则：</p>\n<ul>\n<li><p><code>*</code>可以代替一个单词</p>\n</li>\n<li><p><code>#</code>可以代替0个或多个单词</p>\n</li>\n</ul>\n</li>\n<li><p>若匹配<code>RoutingKey</code>使用<code>#</code>，则匹配任意队列。</p>\n</li>\n</ul>\n<h1 id=\"临时队列\"><a href=\"#临时队列\" class=\"headerlink\" title=\"临时队列\"></a>临时队列</h1><p>可以指定让服务器创建一个临时队列，</p>\n<ul>\n<li>临时队列是一个随机名称的队列，</li>\n<li>一旦断开了消费者的连接，队列将被自动删除。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">queueName</span> <span class=\"operator\">=</span> channel.queueDeclare().getQueue()</span><br></pre></td></tr></table></figure>\n\n<p>这种队列有<code>AD</code>标志。AD，即AutoDelete。</p>\n<h1 id=\"死信队列\"><a href=\"#死信队列\" class=\"headerlink\" title=\"死信队列\"></a>死信队列</h1><p>死信，即无法被消费的信息。</p>\n<p>当Consumer从Queue取出消息进行消费，但由于某些原因使得消费没有被消费，若没有后续的处理，这些消息就变成了<strong>死信</strong>。</p>\n<p>使用RabbitMQ的死信队列机制，当消息发生异常，消息会进入到死信队列中。</p>\n<h2 id=\"死信的出现\"><a href=\"#死信的出现\" class=\"headerlink\" title=\"死信的出现\"></a>死信的出现</h2><ul>\n<li>消息TTL过期</li>\n<li>队列达最大长度，多余添加到</li>\n<li>消息被拒绝<ul>\n<li>basic.reject或basci.nack并且requeue&#x3D;false</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ol>\n<li>生产者生产消息</li>\n<li>消息被拒绝&#x2F;队列达最大长度&#x2F;TTL过期</li>\n<li>进入dead_exchange死信交换机</li>\n<li>进入死信队列</li>\n</ol>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ul>\n<li><p>在需要进行死信处理的队列上添加<strong>死信arguments</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.queueDeclare(NORMAL_QUEUE,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String,Object&gt;()&#123;&#123;</span><br><span class=\"line\">    put(<span class=\"string\">&quot;x-dead-letter-exchange&quot;</span>,DEAD_EXCHANGE);  <span class=\"comment\">//死信提交的交换机</span></span><br><span class=\"line\">    put(<span class=\"string\">&quot;x-dead-letter-routing-key&quot;</span>,<span class=\"string\">&quot;lisi&quot;</span>);      <span class=\"comment\">//死信</span></span><br><span class=\"line\">&#125;&#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"实战1-消息TTL过期\"><a href=\"#实战1-消息TTL过期\" class=\"headerlink\" title=\"实战1 消息TTL过期\"></a>实战1 消息TTL过期</h2><ul>\n<li><p>消费者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Consumer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//普通交换机</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">NORMAL_EXCHANGE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;normal_exchange&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//死信交换机</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEAD_EXCHANGE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;dead_exchange&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//普通队列名称</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">NORMAL_QUEUE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;normal_queue&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">//死信队列</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEAD_QUEUE</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;dead_queue&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> MQUtils.getChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//声明交换机</span></span><br><span class=\"line\">        channel.exchangeDeclare(NORMAL_EXCHANGE, BuiltinExchangeType.DIRECT);<span class=\"comment\">//普通交换机</span></span><br><span class=\"line\">        channel.exchangeDeclare(DEAD_EXCHANGE, BuiltinExchangeType.DIRECT);<span class=\"comment\">//死信交换机</span></span><br><span class=\"line\">        <span class=\"comment\">//声明队列</span></span><br><span class=\"line\">        channel.queueDeclare(NORMAL_QUEUE,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String,Object&gt;()&#123;&#123;</span><br><span class=\"line\">            put(<span class=\"string\">&quot;x-dead-letter-exchange&quot;</span>,DEAD_EXCHANGE);<span class=\"comment\">//为普通队列添加死信队列</span></span><br><span class=\"line\">            put(<span class=\"string\">&quot;x-dead-letter-routing-key&quot;</span>,<span class=\"string\">&quot;lisi&quot;</span>);<span class=\"comment\">//添加死信使用的key</span></span><br><span class=\"line\">        &#125;&#125;);</span><br><span class=\"line\">        channel.queueDeclare(DEAD_QUEUE,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);<span class=\"comment\">//声明死信队列</span></span><br><span class=\"line\">        channel.queueBind(NORMAL_QUEUE,NORMAL_EXCHANGE,<span class=\"string\">&quot;zhangsan&quot;</span>);<span class=\"comment\">//绑定队列</span></span><br><span class=\"line\">        channel.queueBind(DEAD_QUEUE,DEAD_EXCHANGE,<span class=\"string\">&quot;lisi&quot;</span>);</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\"></span><br><span class=\"line\">        channel.basicConsume(NORMAL_QUEUE,<span class=\"literal\">true</span>,(String consumerTag, Delivery message)-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Consumer1接收到消息：&quot;</span>+<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(message.getBody(), StandardCharsets.UTF_8));</span><br><span class=\"line\">        &#125;,(String consumerTag)-&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>生产者</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Producer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, TimeoutException &#123;</span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> MQUtils.getChannel();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt; <span class=\"number\">11</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;info&quot;</span>+i;</span><br><span class=\"line\">            channel.basicPublish(</span><br><span class=\"line\">                    Consumer.NORMAL_EXCHANGE,</span><br><span class=\"line\">                    <span class=\"string\">&quot;zhangsan&quot;</span>,</span><br><span class=\"line\">                    <span class=\"keyword\">new</span> <span class=\"title class_\">AMQP</span>.BasicProperties().builder().expiration(<span class=\"string\">&quot;10000&quot;</span>).build(),</span><br><span class=\"line\">                    message.getBytes());<span class=\"comment\">//生产信息，配置信息的过期时间为10000毫秒</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"实战2-消息队列溢出\"><a href=\"#实战2-消息队列溢出\" class=\"headerlink\" title=\"实战2 消息队列溢出\"></a>实战2 消息队列溢出</h2><p>在声明队列的时候，设置队列最大长度，就可实现消息队列消息溢出，消息溢出后即为死信；</p>\n<p>若配置了死信队列，消息会被转移到死信队列中。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.queueDeclare(NORMAL_QUEUE,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String,Object&gt;()&#123;&#123;</span><br><span class=\"line\">    put(<span class=\"string\">&quot;x-dead-letter-exchange&quot;</span>,DEAD_EXCHANGE);</span><br><span class=\"line\">    put(<span class=\"string\">&quot;x-dead-letter-routing-key&quot;</span>,<span class=\"string\">&quot;lisi&quot;</span>);</span><br><span class=\"line\">    put(<span class=\"string\">&quot;x-max-length&quot;</span>,<span class=\"number\">6</span>);<span class=\"comment\">//设置队列最大长度</span></span><br><span class=\"line\">&#125;&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实战3-消息拒绝\"><a href=\"#实战3-消息拒绝\" class=\"headerlink\" title=\"实战3 消息拒绝\"></a>实战3 消息拒绝</h2><p>对消息进行nack，即拒绝消息，并设置不自动回到队列，即可实现消息拒绝，消息会被定为死信。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">p1：消息的Tag</span></span><br><span class=\"line\"><span class=\"comment\">p2：是否批量</span></span><br><span class=\"line\"><span class=\"comment\">p3：是否回到队列，这里为false。</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\">channel.basicNack(message.getEnvelope().getDeliveryTag(),<span class=\"literal\">false</span>,<span class=\"literal\">false</span>);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"基于死信实现的延迟队列\"><a href=\"#基于死信实现的延迟队列\" class=\"headerlink\" title=\"基于死信实现的延迟队列\"></a>基于死信实现的延迟队列</h1><p><em>为队列设置消息的ttl过期，即延时队列。</em></p>\n<p>延时队列并非RabbitMQ原生队列，而是在基础上衍生出来的一种使用方式。</p>\n<p>在RabbitMQ中为队列设置ttl，并设置死信队列，消费者在死信队列进行消费，即<strong>延时队列</strong>。</p>\n<p><strong>注意：RabbitMQ只会检测第一个消息的过期时间，不会检测后面的消息是否过期。</strong></p>\n<p><strong>弥补：插件解决</strong></p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ol>\n<li>订单在十分钟内未支付则自动取消</li>\n<li>新创建的店铺，若10天内没有上传商品，则自动发送消息提醒</li>\n<li>用户注册成功，若3天内未登录自动提醒</li>\n</ol>\n<h1 id=\"真正的延时队列交换机\"><a href=\"#真正的延时队列交换机\" class=\"headerlink\" title=\"真正的延时队列交换机\"></a>真正的延时<del>队列</del>交换机</h1><p>安装<code>rabbitmq_delayed_message_exchange</code>插件实现</p>\n<p>安装后会增加延时交换机类型<code>x-delayed-message</code>。</p>\n<ul>\n<li>使用该交换机的消息，可以增加<code>x-delay</code>属性来支持消息的延时传递，单位毫秒，若未设置<code>x-delay</code>属性，消息会被立即传递。</li>\n<li>该交换机遇上带有<code>x-delay</code>属性的消息后，会将该消息缓存，直到指定的时间结束后，消息会进入到指定的队列中。</li>\n</ul>\n<h2 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"创建交换机\"><a href=\"#创建交换机\" class=\"headerlink\" title=\"创建交换机\"></a>创建交换机</h3><ul>\n<li>需要设交换机类型为<code>x-delayed-message</code></li>\n<li>添加参数<code>x-delayed-type</code>为交换机类型，比如<code>direct</code></li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Exchange <span class=\"title function_\">exchange</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ExchangeBuilder</span>(DELAY_EXCHANGE,<span class=\"string\">&quot;x-delayed-message&quot;</span>).withArgument(<span class=\"string\">&quot;x-delayed-type&quot;</span>,<span class=\"string\">&quot;direct&quot;</span>).build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"向交换机发送消息\"><a href=\"#向交换机发送消息\" class=\"headerlink\" title=\"向交换机发送消息\"></a>向交换机发送消息</h3><ul>\n<li>添加参数<code>x-delay</code>为要进行延时的长度，单位毫秒</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">send3</span><span class=\"params\">(String message,Integer delay)</span>&#123;</span><br><span class=\"line\">    template.convertAndSend(<span class=\"string\">&quot;delay_exchange_study&quot;</span>,<span class=\"string\">&quot;delay_message_queue_key&quot;</span>,message,(msg)-&gt;&#123;</span><br><span class=\"line\">        msg.getMessageProperties().setDelay(delay);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> msg;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h3 id=\"机制\"><a href=\"#机制\" class=\"headerlink\" title=\"机制\"></a>机制</h3><p>安装插件后会生成新的Exchange类型<code>x-delayed-message</code>，该类型消息支持延迟投递机制,接收到消息后并未立即将消息投递至目标队列中，而是存储在<code>mnesia</code>(一个分布式数据系统)表中，并且当前节点是磁盘节点，那么节点重启后，消息还能保留。检测消息延迟时间，如达到可投递时间时并将其通过<code>x-delayed-type</code>类型标记的交换机类型投递至目标队列。但是要注意的是，如果集群中只有一个磁盘节点，如果说磁盘节点丢失，或者节点上的插件失效。意味着消息将会丢失。</p>\n<h1 id=\"延迟队列总结\"><a href=\"#延迟队列总结\" class=\"headerlink\" title=\"延迟队列总结\"></a>延迟队列总结</h1><h2 id=\"其他选择\"><a href=\"#其他选择\" class=\"headerlink\" title=\"其他选择\"></a>其他选择</h2><ul>\n<li>Java的<code>DelayQueue</code></li>\n<li><code>Redis</code>的<code>Zset</code></li>\n<li>Quartz</li>\n<li>或Kafka的时间轮。</li>\n</ul>\n","categories":[],"tags":["RabbitMQ"]},{"title":"RabbitMQ 3  消息模式 使用场景","url":"http://zswh33.github.io/2023/02/27/RabbitMQ-3/","content":"<h1 id=\"消息模式\"><a href=\"#消息模式\" class=\"headerlink\" title=\"消息模式\"></a>消息模式</h1><p><strong>Simple，Work Queue，Publish&#x2F;Subscribe，Routing，Topics</strong>，RPC；</p>\n<p>投递消息过程中，若没有指定交换机，则使用默认的交换机。</p>\n<h2 id=\"Simple简单模式\"><a href=\"#Simple简单模式\" class=\"headerlink\" title=\"Simple简单模式\"></a>Simple简单模式</h2><p>一个生产者，一个消费者</p>\n<p><img src=\"/2023/02/27/RabbitMQ-3/Simple.svg\" alt=\"Simple\"></p>\n<h2 id=\"Work-Queue工作队列\"><a href=\"#Work-Queue工作队列\" class=\"headerlink\" title=\"Work Queue工作队列\"></a>Work Queue工作队列</h2><p>一个生产者，多个消费者，一个消息只能消费一次。</p>\n<p><img src=\"/2023/02/27/RabbitMQ-3/WorkQueue.svg\" alt=\"WorkQueue\"></p>\n<h2 id=\"Publish-x2F-Subscribe\"><a href=\"#Publish-x2F-Subscribe\" class=\"headerlink\" title=\"Publish&#x2F;Subscribe\"></a>Publish&#x2F;Subscribe</h2><p>发布订阅模式。使用fanout交换机。</p>\n<p>生产者首先投递消息到交换机，订阅了这个交换机的所有队列就会收到生产者投递的消息。</p>\n<p><img src=\"/2023/02/27/RabbitMQ-3/%E5%8F%91%E5%B8%83%E8%AE%A2%E9%98%85%E6%A8%A1%E5%BC%8F.svg\" alt=\"发布订阅模式\"></p>\n<h2 id=\"Routing路由模式\"><a href=\"#Routing路由模式\" class=\"headerlink\" title=\"Routing路由模式\"></a>Routing路由模式</h2><p>使用direct交换机</p>\n<p>生产者生产消息投递到direct交换机中，交换机<strong>根据消息携带的RoutingKey匹配相应的队列</strong>。</p>\n<ul>\n<li>比如有三个队列：Q1，Q2，Q3；</li>\n<li>在direct交换机中，指定<ul>\n<li>Q1，mail</li>\n<li>Q2，phone</li>\n<li>Q3，Wechat</li>\n<li>Q2，Wechat</li>\n</ul>\n</li>\n<li>使用该交换机发送消息的时候，会向指定Key对应的队列中发布数据。<ul>\n<li>比如RoutingKey为Wechat时，发布的数据会被发送到Q3和Q2.</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/2023/02/27/RabbitMQ-3/direct.svg\" alt=\"路由模式\"></p>\n<h2 id=\"Topics\"><a href=\"#Topics\" class=\"headerlink\" title=\"Topics\"></a>Topics</h2><ul>\n<li><p>生产者将消息投递到topic交换机，该交换机<strong>支持根据RoutingKey对队列进行模糊匹配</strong>；</p>\n</li>\n<li><p>发送到Topics消息的RoutingKey<strong>不能随意写</strong>，必须是一个单词列表，每个单词用<code>.</code>分隔开；</p>\n<ul>\n<li><p>如：</p>\n<ul>\n<li><p>com.yn.ZhangSan</p>\n</li>\n<li><p>asd.qwe.zxc</p>\n</li>\n<li><p>其中有两个替换符</p>\n<ul>\n<li><p><code>#</code>：可以替代0个或多个单词</p>\n</li>\n<li><p><code>*</code>：可以替代一个单词</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Header\"><a href=\"#Header\" class=\"headerlink\" title=\"Header\"></a>Header</h2><p>同时根据header和RoutingKey进行匹配；</p>\n<p>有两种类型</p>\n<ul>\n<li>all：header头必须完全匹配</li>\n<li>any：在Queue的所有键值对在消息的Headers中都能找到，就可匹配成功。</li>\n</ul>\n<p>Header为一个key-value键值对，默认情况下headers为any类型</p>\n<h1 id=\"声明Exchange和Queue，Java示例\"><a href=\"#声明Exchange和Queue，Java示例\" class=\"headerlink\" title=\"声明Exchange和Queue，Java示例\"></a>声明Exchange和Queue，Java示例</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Producer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, TimeoutException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1. 创建连接</span></span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">connectionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>()&#123;&#123;</span><br><span class=\"line\">           setHost(<span class=\"string\">&quot;192.168.227.131&quot;</span>);</span><br><span class=\"line\">           setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">           setUsername(<span class=\"string\">&quot;admin&quot;</span>);</span><br><span class=\"line\">           setPassword(<span class=\"string\">&quot;admin123&quot;</span>);</span><br><span class=\"line\">           setVirtualHost(<span class=\"string\">&quot;/&quot;</span>);<span class=\"comment\">//</span></span><br><span class=\"line\">        &#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//2. 获取连接</span></span><br><span class=\"line\">            connection = connectionFactory.newConnection(<span class=\"string\">&quot;Test生产者&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//3. 通过连接获取通道Channel</span></span><br><span class=\"line\">            channel = connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">queueName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Queue2&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//声明队列</span></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@params</span>1 队列名称</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@params</span>2 是否要持久化durable</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@params</span>3 排他性，是否独占</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@params</span>4 是否自动删除，即随着最后一个消费者消息完毕后是否把队列删除</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@params</span>5 携带附属参数</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.queueDeclare(<span class=\"string\">&quot;Q1&quot;</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">            channel.queueDeclare(<span class=\"string\">&quot;Q2&quot;</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\">            channel.queueDeclare(<span class=\"string\">&quot;Q3&quot;</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            channel.exchangeDeclare(<span class=\"string\">&quot;Exchange1&quot;</span>,<span class=\"string\">&quot;direct&quot;</span>);</span><br><span class=\"line\">            channel.queueBind(<span class=\"string\">&quot;Q1&quot;</span>,<span class=\"string\">&quot;Exchange1&quot;</span>,<span class=\"string\">&quot;order&quot;</span>);</span><br><span class=\"line\">            channel.queueBind(<span class=\"string\">&quot;Q2&quot;</span>,<span class=\"string\">&quot;Exchange1&quot;</span>,<span class=\"string\">&quot;apple&quot;</span>);</span><br><span class=\"line\">            channel.queueBind(<span class=\"string\">&quot;Q3&quot;</span>,<span class=\"string\">&quot;Exchange1&quot;</span>,<span class=\"string\">&quot;pear&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//准备消息内容</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">exchange</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Exchange1&quot;</span>;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">routeKey</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;apple&quot;</span>;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello declare&quot;</span>;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@params</span>1 交换机，消息订阅类型</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@params</span>2 RoutingKey</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@params</span>3 是否持久化，后续详讲</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@params</span>4 信息的二进制数据</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.basicPublish(exchange,routeKey,<span class=\"literal\">null</span>,message.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;消息发送成功&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//关闭通道</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (channel!=<span class=\"literal\">null</span> &amp;&amp; channel.isOpen())&#123;</span><br><span class=\"line\">                channel.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//关闭连接</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (connection!=<span class=\"literal\">null</span> &amp;&amp; connection.isOpen())&#123;</span><br><span class=\"line\">                connection.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"RabbitMQ消息应答\"><a href=\"#RabbitMQ消息应答\" class=\"headerlink\" title=\"RabbitMQ消息应答\"></a>RabbitMQ消息应答</h1><h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><h3 id=\"自动应答\"><a href=\"#自动应答\" class=\"headerlink\" title=\"自动应答\"></a>自动应答</h3><p>只要消费者从队列中获取了消息，无论是否消费成功，都认为消息已被消费，队列会把该消息数据删除。</p>\n<h3 id=\"手动应答\"><a href=\"#手动应答\" class=\"headerlink\" title=\"手动应答\"></a>手动应答</h3><h4 id=\"正常应答\"><a href=\"#正常应答\" class=\"headerlink\" title=\"正常应答\"></a>正常应答</h4><ul>\n<li>Channel.basicAck 肯定确认<ul>\n<li>RabbitMQ了解到消息成功处理，将消息丢弃</li>\n</ul>\n</li>\n<li>Channel.basicNack 否定确认</li>\n<li>Channel.basicReject 否定确认，相对于Nack少一个参数；<ul>\n<li>不处理该消息了直接拒绝，可以将其丢弃。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Multiple-批量应答\"><a href=\"#Multiple-批量应答\" class=\"headerlink\" title=\"Multiple 批量应答\"></a>Multiple 批量应答</h4><p>可以减少网络拥堵。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.basicAck(deliveryTag,<span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">//参数2，true表示批量应答</span></span><br></pre></td></tr></table></figure>\n\n<p>Multiple：</p>\n<ul>\n<li><strong>true</strong>代表批量应答Channel上未应答的消息<ul>\n<li>如Channel上有消息5,6,7,8，当前tag是8，那么此时5-8这些未应答的消息都会被确认应答。</li>\n</ul>\n</li>\n<li><strong>false</strong><ul>\n<li>同上面相比，不会确认5-7的数据。</li>\n<li>一般建议，<strong>不要批量应答</strong></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">channel.basicConsume(<span class=\"string\">&quot;q1&quot;</span>,<span class=\"literal\">false</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">DefaultConsumer</span>(channel)&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">handleDelivery</span><span class=\"params\">(String consumerTag, Envelope envelope, AMQP.BasicProperties properties, <span class=\"type\">byte</span>[] body)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;消费成功：&quot;</span>+<span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(body));</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.getChannel().basicAck(envelope.getDeliveryTag(),<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"重新入队\"><a href=\"#重新入队\" class=\"headerlink\" title=\"重新入队\"></a>重新入队</h2><ul>\n<li><p>如果消费者由于某些原因失去连接（其通道已关闭，连接已关闭或TCP连接丢失），导致消息未发送Ack确认，RabbitMQ将了解消息未完全处理，并将其重新排队。</p>\n</li>\n<li><p>若此时其他消费者可以处理，它将很快将其重新分发给另一个消费者。</p>\n</li>\n<li><p>这样，即使某个消费者偶然异常，也能保证不会丢失任何消息。</p>\n</li>\n</ul>\n","categories":[],"tags":["RabbitMQ"]},{"title":"RabbitMQ 2 RabbitMQ安装，配置  Java中使用","url":"http://zswh33.github.io/2023/02/27/RabbitMQ-2/","content":"<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><ul>\n<li><p>新增用户</p>\n<ul>\n<li>&#96;&#96;&#96;bash<br>rabbitmqctl add_user admin admin<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 设置用户分配操作权限</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```bash</span><br><span class=\"line\">    rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>为用户添加资源权限</p>\n<ul>\n<li>&#96;&#96;&#96;bash<br>rabbitmqctl set_permissions -p &#x2F; admin “.<em>“ “.</em>“ “.*”<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 命令</span><br><span class=\"line\"></span><br><span class=\"line\">```bash</span><br><span class=\"line\">rabbitmqctl add_user USERNAME PASSWORD  #账号密码</span><br><span class=\"line\">rabbitmqctl set_user_tags USERNAME administrator #赋予角色</span><br><span class=\"line\">rabbitmqctl change_password USERNAME NEWPASSWORD # 修改密码</span><br><span class=\"line\">rabbitmqctl list_users # 查看用户清单</span><br><span class=\"line\"></span><br><span class=\"line\">rabbitmqctl [-p &lt;vhostpath&gt;] &lt;user&gt; &lt;conf&gt; &lt;write&gt; &lt;read&gt;</span><br><span class=\"line\">rabbitmqctl set_permissions -p / USERNAME &quot;.*&quot; &quot;.*&quot; &quot;.*&quot; #设置所有权限</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rabbitmq-plugins <span class=\"built_in\">enable</span> rabbitmq_management <span class=\"comment\"># 添加管理插件</span></span><br><span class=\"line\"><span class=\"comment\"># Web管理插件，默认端口15672.</span></span><br></pre></td></tr></table></figure>\n\n<p>RabbitMQ默认用户名和密码：guest</p>\n<h1 id=\"用户级别\"><a href=\"#用户级别\" class=\"headerlink\" title=\"用户级别\"></a>用户级别</h1><ul>\n<li>administrator，可以登录控制台，查看所有信息，可以对rabbitmq进行管理；<ul>\n<li>最高权限</li>\n<li>可以创建和删除virtual hosts</li>\n<li>可以查看，创建和删除users</li>\n<li>查看创建permissions</li>\n<li>关闭所有用户的connections</li>\n</ul>\n</li>\n<li>monitoring监控者，登录控制台，查看所有信息<ul>\n<li>包含management所有权限</li>\n<li>罗列出所有的virtual hosts，包括不能登录的virtual ohsts</li>\n<li>查看其他用户的connections和channels信息</li>\n<li>查看节点级别的数据如clustering和memory使用情况</li>\n<li>查看所有的virtual hosts的全局统计信息。</li>\n</ul>\n</li>\n<li>policymaker策略制定者，登录控制台，制定策略<ul>\n<li>包含management所有权限</li>\n<li>查看、创建额删除自己的virtual hosts所属的policies和parameters信息。</li>\n</ul>\n</li>\n<li>managment普通管理员，登录控制台<ul>\n<li>列出自己可以通过AMQP登入的虚拟机</li>\n<li>查看自己的虚拟机节点virtual hosts的queues，exchanges和bindings信息</li>\n<li>查看和关闭自己的channels和connections</li>\n<li>查看有关自己的虚拟机节点virtual hosts的统计信息，包括其他用户在这个节点的virtual hosts的活动信息。</li>\n</ul>\n</li>\n<li>none，不能访问management plugin。</li>\n</ul>\n<h1 id=\"在Java中使用-x2F-RabbitMQ简单模式实现\"><a href=\"#在Java中使用-x2F-RabbitMQ简单模式实现\" class=\"headerlink\" title=\"在Java中使用&#x2F;RabbitMQ简单模式实现\"></a>在Java中使用&#x2F;RabbitMQ简单模式实现</h1><h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.rabbitmq<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>amqp-client<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.14.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ol>\n<li>创建连接工厂，创建连接Connection</li>\n<li>通过连接获取通道Channel</li>\n<li>通过通道创建交换机，声明队列，绑定关系，路由key，发送消息，接收消息</li>\n<li>声明队列</li>\n<li>准备消息内容</li>\n<li>发送消息给队列</li>\n<li>关闭连接</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Producer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, TimeoutException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//1. 创建连接</span></span><br><span class=\"line\">        <span class=\"type\">ConnectionFactory</span> <span class=\"variable\">connectionFactory</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ConnectionFactory</span>()&#123;&#123;</span><br><span class=\"line\">           setHost(<span class=\"string\">&quot;192.168.227.131&quot;</span>);</span><br><span class=\"line\">           setPort(<span class=\"number\">5672</span>);</span><br><span class=\"line\">           setUsername(<span class=\"string\">&quot;admin&quot;</span>);</span><br><span class=\"line\">           setPassword(<span class=\"string\">&quot;admin123&quot;</span>);</span><br><span class=\"line\">           setVirtualHost(<span class=\"string\">&quot;/&quot;</span>);<span class=\"comment\">//</span></span><br><span class=\"line\">        &#125;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"type\">Channel</span> <span class=\"variable\">channel</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//2. 获取连接</span></span><br><span class=\"line\">            connection = connectionFactory.newConnection(<span class=\"string\">&quot;Test生产者&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//3. 通过连接获取通道Channel</span></span><br><span class=\"line\">            channel = connection.createChannel();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">queueName</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Queue1&quot;</span>;</span><br><span class=\"line\">            <span class=\"comment\">//声明队列</span></span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@params</span>1 队列名称</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@params</span>2 是否要持久化durable，是否将队列存储到磁盘</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@params</span>3 排他性，是否只对当前Connection可见。若为true，则其他连接不可见此队列，且在连接断开时删除当前队列。</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@params</span>4 是否自动删除，在最后一个消费者断开连接后是否自动删除。</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@params</span>5 携带附属参数</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.queueDeclare(queueName,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">false</span>,<span class=\"literal\">null</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//准备消息内容</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">message</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\">            <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@params</span>1 exchange，交换机</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@params</span>2 当为默认模式，则这里为队列名。其他则为RoutingKey</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@params</span>3 后续详讲</span></span><br><span class=\"line\"><span class=\"comment\">             * <span class=\"doctag\">@params</span>4 消息主体，信息的二进制数据</span></span><br><span class=\"line\"><span class=\"comment\">             * 可以存在没有交换机的队列吗？不可以，若没有输入交换机，则会使用一个默认的交换机</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            channel.basicPublish(<span class=\"string\">&quot;&quot;</span>,queueName,<span class=\"literal\">null</span>,message.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;消息发送成功&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//关闭通道</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (channel!=<span class=\"literal\">null</span> &amp;&amp; channel.isOpen())&#123;</span><br><span class=\"line\">                channel.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//关闭连接</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (connection!=<span class=\"literal\">null</span> &amp;&amp; connection.isOpen())&#123;</span><br><span class=\"line\">                connection.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"AMQP流程\"><a href=\"#AMQP流程\" class=\"headerlink\" title=\"AMQP流程\"></a>AMQP流程</h1><p>AMQP，Advanced Message Queuing Protocol（高级消息队列协议），是应用层协议的一个开发标准，为面向消息的中间件设计。</p>\n<h2 id=\"生产者流程\"><a href=\"#生产者流程\" class=\"headerlink\" title=\"生产者流程\"></a>生产者流程</h2><ol>\n<li>建立连接</li>\n<li>开启通道</li>\n<li>发送消息</li>\n<li>释放资源（关闭通道）</li>\n<li>关闭连接</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Producer发送          Broker服务器回应</span><br><span class=\"line\">Protocol Header      Connection.Start</span><br><span class=\"line\">Connection.Start-OK  Connection.Tune</span><br><span class=\"line\">Connection.Tune-OK</span><br><span class=\"line\">Connection.Open      Connection.Open-Ok</span><br><span class=\"line\">Channel.Open\t\t Channel.Open-Ok</span><br><span class=\"line\">Basic.Publish</span><br><span class=\"line\">Channel.Close \t\t Channel.Close-Ok</span><br><span class=\"line\">Connection.Close     Connection.Close-Ok</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"消费者流程\"><a href=\"#消费者流程\" class=\"headerlink\" title=\"消费者流程\"></a>消费者流程</h2><ol>\n<li>建立连接</li>\n<li>开启通道</li>\n<li>准备接收消息</li>\n<li>Broken推送消息<ul>\n<li>推送消息</li>\n</ul>\n</li>\n<li>发送确认<ul>\n<li>向Broker发送确认收到消费消息</li>\n<li>Broker收到消息后，会将消息从队列中删除；</li>\n<li>若Broker没有收到Ack，则一直发送消息，直到收到Ack为止。</li>\n</ul>\n</li>\n<li>释放资源</li>\n<li>关闭连接</li>\n</ol>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Consumer发送          Broker节点回应</span><br><span class=\"line\">Protocol Header      Connection.Start</span><br><span class=\"line\">Connection.Start-OK  Connection.Tune</span><br><span class=\"line\">Connection.Tune-OK</span><br><span class=\"line\">Connection.Open      Connection.Open-Ok</span><br><span class=\"line\">Channel.Open\t\t Channel.Open-Ok</span><br><span class=\"line\">Basic.Consume        Basic.Consume-Ok</span><br><span class=\"line\"> \t\t\t\t\t Basic.Deliver</span><br><span class=\"line\">Basic.Ack</span><br><span class=\"line\">Channel.Close \t\t Channel.Close-Ok</span><br><span class=\"line\">Connection.Close     Connection.Close-Ok</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"RabbitMQ组件与架构\"><a href=\"#RabbitMQ组件与架构\" class=\"headerlink\" title=\"RabbitMQ组件与架构\"></a>RabbitMQ组件与架构</h1><p><img src=\"/2023/02/27/RabbitMQ-2/RabbitMQ%E6%9E%B6%E6%9E%84.svg\" alt=\"RabbitMQ架构\"></p>\n<h1 id=\"整体架构\"><a href=\"#整体架构\" class=\"headerlink\" title=\"整体架构\"></a>整体架构</h1><p><img src=\"/2023/02/27/RabbitMQ-2/RabbitMQ%E6%95%B4%E4%BD%93%E6%9E%B6%E6%9E%84.svg\" alt=\"RabbitMQ整体架构\"></p>\n<h1 id=\"运行流程\"><a href=\"#运行流程\" class=\"headerlink\" title=\"运行流程\"></a>运行流程</h1><p><img src=\"/2023/02/27/RabbitMQ-2/RabbitMQ%E8%BF%90%E8%A1%8C%E6%B5%81%E7%A8%8B.svg\" alt=\"RabbitMQ运行流程\"></p>\n","categories":[],"tags":["RabbitMQ"]},{"title":"RabbitMQ 0 中间件 消息中间件常用协议 特点","url":"http://zswh33.github.io/2023/02/23/RabbitMQ-0/","content":"<h1 id=\"中间件\"><a href=\"#中间件\" class=\"headerlink\" title=\"中间件\"></a>中间件</h1><h2 id=\"分布式消息中间件\"><a href=\"#分布式消息中间件\" class=\"headerlink\" title=\"分布式消息中间件\"></a>分布式消息中间件</h2><h3 id=\"当前\"><a href=\"#当前\" class=\"headerlink\" title=\"当前\"></a>当前</h3><ul>\n<li><p>ActiveMQ</p>\n</li>\n<li><p>RabbitMQ</p>\n<ul>\n<li>在AMQP基础上完成</li>\n<li>优点：<ul>\n<li>基于erlang语言，高并发特性</li>\n<li>吞吐量万级</li>\n<li>MQ功能完善</li>\n<li>支持多种编程语言</li>\n<li>开源管理界面完善</li>\n<li>社区活跃度高</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>商业版收费</li>\n<li>学习成本高</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Kafka</p>\n<ul>\n<li>优点：性能很强，单机写入TPS约百万条&#x2F;s。</li>\n<li>缺点：<ul>\n<li>在单机超过64队列&#x2F;分区，Load会发生明显的飙高现象。队列越多，load越高，发送响应时间变长；</li>\n<li>一台宕机，就会产生消息乱序。</li>\n<li>消费失败不支持重试</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>RocketMQ</p>\n<ul>\n<li>阿里、滴滴开发的国产分布式消息中间件</li>\n<li>优点：<ul>\n<li>单机吞吐量十万级，</li>\n<li>消息可以做到0丢失，</li>\n<li>支持分布式，扩展性好。</li>\n<li>支持10亿级别消息堆积；</li>\n<li>支持自定义</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>支持的客户端不多。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><ul>\n<li>消息中间件监控数据</li>\n<li>异步数据传输场景</li>\n<li>削峰填谷场景</li>\n<li>任务调度场景</li>\n<li>海量数据同步场景</li>\n<li>分布式事务场景</li>\n<li>日记管理场景</li>\n<li>大数据分析场景</li>\n</ul>\n<h3 id=\"要求\"><a href=\"#要求\" class=\"headerlink\" title=\"要求\"></a>要求</h3><ul>\n<li>AMQP</li>\n<li>MQTT</li>\n<li>持久化设计</li>\n<li>Kafka协议</li>\n<li>消息分发设计</li>\n<li>高可用</li>\n<li>可靠性</li>\n<li>容错</li>\n</ul>\n<h2 id=\"负载均衡中间件\"><a href=\"#负载均衡中间件\" class=\"headerlink\" title=\"负载均衡中间件\"></a>负载均衡中间件</h2><ul>\n<li>Nginx</li>\n<li>LVS负载均衡<ul>\n<li>对Nginx进行集群</li>\n</ul>\n</li>\n<li>KeepAlive<ul>\n<li>保持心跳，保持高可用</li>\n</ul>\n</li>\n<li>CDN<ul>\n<li>加速</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"缓存中间件\"><a href=\"#缓存中间件\" class=\"headerlink\" title=\"缓存中间件\"></a>缓存中间件</h2><ul>\n<li>MemCache</li>\n<li>Redis</li>\n</ul>\n<h2 id=\"数据库中间件\"><a href=\"#数据库中间件\" class=\"headerlink\" title=\"数据库中间件\"></a>数据库中间件</h2><p><em>Mysql不保证高可用性</em></p>\n<p><em>数据库中间件：实现Mysql集群，高可用性</em></p>\n<ul>\n<li>Mycat</li>\n<li>ShardingJdbc</li>\n</ul>\n<h2 id=\"使用案例\"><a href=\"#使用案例\" class=\"headerlink\" title=\"使用案例\"></a>使用案例</h2><ul>\n<li>异步数据保存<ul>\n<li>实现削峰</li>\n</ul>\n</li>\n<li>订单数据的消息分发</li>\n<li>分布式事务</li>\n<li>消息的容错</li>\n<li>分布式锁</li>\n<li>分布式会话</li>\n<li>分库分表</li>\n</ul>\n<h2 id=\"消息中间件核心组成\"><a href=\"#消息中间件核心组成\" class=\"headerlink\" title=\"消息中间件核心组成\"></a>消息中间件核心组成</h2><ul>\n<li>消息的协议</li>\n<li>消息的持久化机制</li>\n<li>消息的分发策略</li>\n<li>消息的高可用，高可靠</li>\n<li>消息的容错机制</li>\n</ul>\n<h1 id=\"网络协议三要素\"><a href=\"#网络协议三要素\" class=\"headerlink\" title=\"网络协议三要素\"></a>网络协议三要素</h1><ul>\n<li>语法：语法是用户数据与控制信息的结构与格式以及数据出现的顺序</li>\n<li>语义：语义是解释控制信息的每个部分的意义。它规定了需要发出何种控制信息，以及完成的动作与做出什么样的响应</li>\n<li>时序：时序是对事件发生顺序的详细说明。</li>\n</ul>\n<h1 id=\"面试：为什么消息中间件不直接使用http协议？\"><a href=\"#面试：为什么消息中间件不直接使用http协议？\" class=\"headerlink\" title=\"面试：为什么消息中间件不直接使用http协议？\"></a>面试：为什么消息中间件不直接使用http协议？</h1><ul>\n<li>因为http请求报文头和响应报文头是比较复杂的，包含了cookie，数据的加密解密，状态码，响应码等附加功能，对于一个消息而言，不需要这些复杂的功能，，消息只需要负责数据传递，存储，分发就可以，且追求高性能，进行简洁，快速；</li>\n<li>大部分http使用的是短连接，在实际交互过程中，一个请求到响应很有可能会中断，中断后就不会进行持久化，造成请求的丢失，这样不利于消息中间件的业务场景。消息中间件可能是一个长期获取消息的过程，出现问题和故障要对数据或消息进行持久化等，目的是为了保证消息和数据的高可靠和稳健的运行。</li>\n</ul>\n<h1 id=\"消息中间件常用协议\"><a href=\"#消息中间件常用协议\" class=\"headerlink\" title=\"消息中间件常用协议\"></a>消息中间件常用协议</h1><ul>\n<li>OpenWire，<strong>AMQP，MQTT，Kafka</strong>，OpenMessage协议</li>\n</ul>\n<h2 id=\"AMQP\"><a href=\"#AMQP\" class=\"headerlink\" title=\"AMQP\"></a>AMQP</h2><p>全称：Advanced Message Queuing Protocol</p>\n<p>高级消息队列协议。</p>\n<p>特性</p>\n<ul>\n<li>分布式事务支持</li>\n<li>消息持久化支持</li>\n<li>高性能和高可靠的消息处理优势</li>\n</ul>\n<p>支持者</p>\n<ul>\n<li>RabbitMQ，ActiveMQ</li>\n</ul>\n<h2 id=\"MQTT\"><a href=\"#MQTT\" class=\"headerlink\" title=\"MQTT\"></a>MQTT</h2><p>Message Queuing Telemetry Transport</p>\n<p>是IBM开放的一个即时通讯协议，物联网系统架构的重要组成部分</p>\n<p>特点</p>\n<ul>\n<li>轻量</li>\n<li>结构简单</li>\n<li>速度快，不支持事务</li>\n<li>没有持久化设计</li>\n</ul>\n<p>应用场景</p>\n<ul>\n<li>计算能力有限</li>\n<li>低带宽</li>\n<li>网络不稳定场景</li>\n</ul>\n<p>支持者</p>\n<ul>\n<li>RabbitMQ，AvtiveMQ<ul>\n<li>默认关闭MQTT协议，需要手动打开</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"OpenMessage\"><a href=\"#OpenMessage\" class=\"headerlink\" title=\"OpenMessage\"></a>OpenMessage</h2><p>Apache RocketMQ</p>\n<p>由阿里、雅虎、滴滴、Stremalio等公司共同参与创立的分布式消息中间件、流处理领域的应用开发标准；</p>\n<p>特点：</p>\n<ul>\n<li>结构简单</li>\n<li>解析速度快</li>\n<li>支持事务和持久化设计</li>\n</ul>\n<h2 id=\"Kafka协议\"><a href=\"#Kafka协议\" class=\"headerlink\" title=\"Kafka协议\"></a>Kafka协议</h2><p>Kafka</p>\n<p>基于TCP&#x2F;IP的二进制协议，消息内部通过长度来分割，由一些基本数据类型组成</p>\n<p>特点</p>\n<ul>\n<li>结构简单</li>\n<li>解析速度快</li>\n<li>无事务支持</li>\n<li>有持久化设计</li>\n</ul>\n<h1 id=\"消息队列持久化\"><a href=\"#消息队列持久化\" class=\"headerlink\" title=\"消息队列持久化\"></a>消息队列持久化</h1><p><em>将数据存入磁盘，而不是存在内存中，使数据永久保存</em></p>\n<h1 id=\"消息队列分发策略\"><a href=\"#消息队列分发策略\" class=\"headerlink\" title=\"消息队列分发策略\"></a>消息队列分发策略</h1><p>角色：生产者，存储消息，消费者；</p>\n<h2 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h2><ul>\n<li>生产者生成消息</li>\n<li>MQ进行存储</li>\n<li>消费者通过<strong>PUSH推或PULL拉</strong>的方式获取消息</li>\n</ul>\n<h2 id=\"多个消息中间件消息分发策略的机制和对比\"><a href=\"#多个消息中间件消息分发策略的机制和对比\" class=\"headerlink\" title=\"多个消息中间件消息分发策略的机制和对比\"></a>多个消息中间件消息分发策略的机制和对比</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>ActiveMQ</th>\n<th>RabbitMQ</th>\n<th>Kafka</th>\n<th>RocketMQ</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>发布订阅</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>轮询分发</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>&#x2F;</td>\n</tr>\n<tr>\n<td>公平分发</td>\n<td>&#x2F;</td>\n<td>支持</td>\n<td>支持</td>\n<td>&#x2F;</td>\n</tr>\n<tr>\n<td>重发</td>\n<td>支持</td>\n<td>支持</td>\n<td>&#x2F;</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>消息拉取</td>\n<td>&#x2F;</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>轮询分发：每个服务器分配到的消息数量一致</p>\n</li>\n<li><p>公平分发：每个服务器分配到的消息数量<strong>不一致</strong>，能者多劳 ；</p>\n</li>\n<li><p>消息拉取：很少使用，RPC</p>\n</li>\n</ul>\n<h1 id=\"消息队列高可用和高可靠\"><a href=\"#消息队列高可用和高可靠\" class=\"headerlink\" title=\"消息队列高可用和高可靠\"></a>消息队列高可用和高可靠</h1><h2 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h2><p><em>即：集群。</em></p>\n<p>是指产品在规定的条件和规定的时刻或时间内处于可执行规定功能状态的能力；</p>\n<p>当业务量增加时，请求也过多，一台消息中间件服务器会触及硬件（CPU，内存，磁盘）的极限，一台消息服务器已经无法满足业务的需求，所以消息中间件必须支持集群部署，来达到高可用的目的。</p>\n<p>集群模式1，Master-Slave主从共享数据的部署方式</p>\n<p><img src=\"/2023/02/23/RabbitMQ-0/%E6%9C%AA%E5%91%BD%E5%90%8D%E7%BB%98%E5%9B%BE.drawio.svg\" alt=\"未命名绘图.drawio\"></p>\n<p>集群模式2，Master-Slave主从同步部署模式</p>\n<p>集群模式3，多主集群同步部署模式</p>\n<p>集群模式4，多主集群转发部署模式</p>\n<p>集群模式5，Master-Slave与Breok-Cluster组合方案</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>消息共享</li>\n<li>消息同步</li>\n<li>元数据共享</li>\n</ol>\n<h2 id=\"高可靠\"><a href=\"#高可靠\" class=\"headerlink\" title=\"高可靠\"></a>高可靠</h2><p><strong>指系统可以无故障持续运行</strong></p>\n<p>比如一个系统崩溃，报错，异常等不影响线上业务的正常运行，出错率极低，就称之为：高可靠。</p>\n<p>如何保证中间件消息的可靠性？</p>\n<ol>\n<li>消息的传输：通过协议来保证系统间数据解析的正确性</li>\n<li>消息的存储可靠：通过持久化来保证消息的可靠性</li>\n</ol>\n","categories":[],"tags":["RabbitMQ"]},{"title":"RabbitMQ 1 分布式消息中间件 MQ选用 RabbitMQ特点，流程，名词介绍","url":"http://zswh33.github.io/2023/02/23/RabbitMQ-1_v2/","content":"<h1 id=\"分布式消息中间件\"><a href=\"#分布式消息中间件\" class=\"headerlink\" title=\"分布式消息中间件\"></a>分布式消息中间件</h1><ul>\n<li><p>ActiveMQ</p>\n</li>\n<li><p>RabbitMQ</p>\n<ul>\n<li>在AMQP基础上完成</li>\n<li>优点：<ul>\n<li>基于erlang语言，高并发特性</li>\n<li>吞吐量万级</li>\n<li>MQ功能完善</li>\n<li>支持多种编程语言</li>\n<li>开源管理界面完善</li>\n<li>社区活跃度高</li>\n</ul>\n</li>\n<li>缺点<ul>\n<li>商业版收费</li>\n<li>学习成本高</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Kafka</p>\n<ul>\n<li>优点：性能很强，单机写入TPS约百万条&#x2F;s。</li>\n<li>缺点：<ul>\n<li>在单机超过64队列&#x2F;分区，Load会发生明显的飙高现象。队列越多，load越高，发送响应时间变长；</li>\n<li>一台宕机，就会产生消息乱序。</li>\n<li>消费失败不支持重试</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>RocketMQ</p>\n<ul>\n<li>阿里、滴滴开发的国产分布式消息中间件</li>\n<li>优点：<ul>\n<li>单机吞吐量十万级，</li>\n<li>消息可以做到0丢失，</li>\n<li>支持分布式，扩展性好。</li>\n<li>支持10亿级别消息堆积；</li>\n<li>支持自定义</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>支持的客户端不多。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"MQ区别-x2F-MQ选用\"><a href=\"#MQ区别-x2F-MQ选用\" class=\"headerlink\" title=\"MQ区别&#x2F;MQ选用\"></a>MQ区别&#x2F;MQ选用</h1><table>\n<thead>\n<tr>\n<th></th>\n<th>ActiveMQ</th>\n<th>RabbitMQ</th>\n<th>Kafka</th>\n<th>RocketMQ</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>发布订阅</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>轮询分发</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>&#x2F;</td>\n</tr>\n<tr>\n<td>公平分发</td>\n<td>&#x2F;</td>\n<td>支持</td>\n<td>支持</td>\n<td>&#x2F;</td>\n</tr>\n<tr>\n<td>重发</td>\n<td>支持</td>\n<td>支持</td>\n<td>&#x2F;</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>消息拉取</td>\n<td>&#x2F;</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n</tbody></table>\n<ul>\n<li>Kafuka<ul>\n<li>基于Pull模式处理消息消费，追求高吞吐量</li>\n<li><strong>适用于大量数据的互联网服务的数据收集业务</strong></li>\n<li>场景：日志采集</li>\n<li>适合大型公司</li>\n</ul>\n</li>\n<li>RocketMQ<ul>\n<li>适用于可靠性要求较高的场景。</li>\n<li>场景：金融互联网。</li>\n<li>在阿里双11经历多次考验。</li>\n</ul>\n</li>\n<li>RabbitMQ<ul>\n<li>结合erlang语言并发优势，时效性微秒级，社区活跃度高；</li>\n<li>使用方便</li>\n<li>场景：消息量不是那么大的场景</li>\n<li>适合中小型公司。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"RabbitMQ\"><a href=\"#RabbitMQ\" class=\"headerlink\" title=\"RabbitMQ\"></a>RabbitMQ</h1><p>负责数据存储与转发。</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ul>\n<li>削峰：将访问的人员进行排队，<ul>\n<li>若一个时间段有20000个请求，而服务器同时只能接收100个请求，RabbitMQ负责将大请求进行排队，依次进入服务器进行处理。</li>\n</ul>\n</li>\n<li>应用解耦<ul>\n<li>在一次订单过程中，订单需要经过：订单系统，库存系统，物流系统，支付系统等几个过程。若其中有任意一个出现问题，订单会执行失败。</li>\n<li>为解决问题，RabbitMQ可以进行解耦。解耦后，任意一个系统出现问题，消息会被缓存到消息队列中，直到系统被修复，这样可以避免整个过程重新执行。</li>\n<li>提升可用性</li>\n</ul>\n</li>\n<li>异步处理<ul>\n<li>若A要调用B且需要B的返回结果，若B需要很长时间，A需要等待B，这个效率很低；</li>\n<li>若MQ出现后，A只需要将消息交给MQ即可，当B完成后，将结果交给MQ，MQ将消息通知给A即可。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>RabbitMQ使用的是基于<strong>tcp&#x2F;ip</strong>的<strong>amqp协议</strong></p>\n<ul>\n<li>amqp，即Advanced Message Queuing Protocol，一个提供统一消息服务的应用层标准高级消息队列协议。</li>\n</ul>\n<h2 id=\"流程\"><a href=\"#流程\" class=\"headerlink\" title=\"流程\"></a>流程</h2><ul>\n<li>生产者</li>\n<li>MQ<ul>\n<li>交换机<ul>\n<li>交换机绑定队列</li>\n</ul>\n</li>\n<li>队列<ul>\n<li>队列绑定消费者</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>消费者</li>\n</ul>\n<h2 id=\"名词介绍\"><a href=\"#名词介绍\" class=\"headerlink\" title=\"名词介绍\"></a>名词介绍</h2><ul>\n<li><p><strong>Broker</strong>：接收和分发消息的应用。RabbitMQ Server就是一个Broker</p>\n</li>\n<li><p><strong>Server</strong>：又称Broker，接收客户端的连接，实现AMQP的实体服务；</p>\n</li>\n<li><p><strong>Connection</strong>：连接，应用程序与Broker的TCP&#x2F;IP连接。</p>\n</li>\n<li><p><strong>Channel</strong>：网络信道，几乎所有的操作都在Channel中进行，Channel进行消息读写的通道，客户端可以建立多个Channel，每个Channel代表一个会话任务；</p>\n<ul>\n<li>如果每一次访问创建一个Connection，会建立大量的TCP连接，Connection的开销是巨大的，效率也低。Channel是在Connection内部建立的逻辑连接，若应用程序支持多线程，通常每个thread创建单独的channel进行通讯。</li>\n<li>AMQP报文包含了Channel Id帮助客户端和message broker识别channel，所以channel之间是完全隔离的。</li>\n</ul>\n</li>\n<li><p><strong>Message</strong>：消息，服务器与应用程序之间传送的数据，由Properties和Body组成，</p>\n<ul>\n<li>Properties对消息进行修饰，比如消息的优先级，延迟等高级特性，</li>\n<li>Body是消息体的内容；</li>\n</ul>\n</li>\n<li><p><strong>Virtual Host</strong>：虚拟地址，用于进行逻辑隔离，最上层的消息路由，一个虚拟主机里可以有若干个Exchange和Queue，同一个虚拟主机里面不能有相同名字的Exchange；</p>\n</li>\n<li><p><strong>Exchange</strong>：交换机，接收消息，<strong>根据分发规则</strong>，<strong>匹配Routing Key发送消息到绑定的队列</strong>（不具备消息存储能力）。</p>\n<ul>\n<li>常用类型：direct（point-to-point），topic（publish-subscribe）和fanout（multicast）<ul>\n<li>direct：匹配路由键，只有完全匹配，消息才会被转发</li>\n<li>fanout：将消息发送至所有的队列</li>\n<li>topic：将路由进行<strong>模式匹配</strong><ul>\n<li><code>#</code>匹配一个或多个词</li>\n<li><code>&quot;</code>匹配不多不少一个词</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>Bindings</strong>：Exchange与Queue之间的虚拟连接，Binding中可以保护多个routing key。</p>\n</li>\n<li><p><strong>Routing key</strong>：生产者将消息发送到交换机时会携带一个key，来制定路由规则；</p>\n</li>\n<li><p><strong>Queue</strong>：队列，也称为Message Queue消息队列，保存消息并将它们转发给消费者。</p>\n</li>\n</ul>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><ul>\n<li>分布式事务可靠消息的可靠生产</li>\n<li>索引、缓存、静态化处理的数据同步</li>\n<li>流量监控</li>\n<li>日志监控（ELK）</li>\n<li>下单，订单分发，抢票。</li>\n</ul>\n","categories":[],"tags":["RabbitMQ"]},{"title":"Redis restudy 8 缓存穿透，击穿，雪崩","url":"http://zswh33.github.io/2023/02/13/Redis-restudy-8/","content":"<p>参考文献：<a href=\"https://www.bilibili.com/video/BV1S54y1R7SB\">https://www.bilibili.com/video/BV1S54y1R7SB</a></p>\n<h1 id=\"Redis缓存穿透和雪崩\"><a href=\"#Redis缓存穿透和雪崩\" class=\"headerlink\" title=\"Redis缓存穿透和雪崩\"></a>Redis缓存穿透和雪崩</h1><p><img src=\"/2023/02/13/Redis-restudy-8/%E7%BC%93%E5%AD%98.svg\" alt=\"缓存\"></p>\n<h2 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h2><p><em>数据查不到</em></p>\n<h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ul>\n<li><p>用户想要查询一个数据，发现Redis内存数据没有，也就是缓存没有命中，于是向持久层数据库查询，发现也没有，于是本次查询失败。</p>\n<ul>\n<li><del>有时候，查询失败时，用户会多次发送请求。</del></li>\n</ul>\n</li>\n<li><p>当用户很多的时候，缓存都没有命中，于是都去请求了持久层数据库，这会给持久层数据库造成很大的压力，这时候就相当于出现了缓存穿透。</p>\n</li>\n</ul>\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><h4 id=\"布隆过滤器\"><a href=\"#布隆过滤器\" class=\"headerlink\" title=\"布隆过滤器\"></a>布隆过滤器</h4><p><img src=\"/2023/02/13/Redis-restudy-8/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8.svg\" alt=\"布隆过滤器\"></p>\n<p>布隆过滤器是一种数据结构，对所有可能查询的参数以Hash形式存储，在控制层先校验，不符合则丢弃，从而避免了对底层存储系统的查询压力。</p>\n<h4 id=\"缓存空对象\"><a href=\"#缓存空对象\" class=\"headerlink\" title=\"缓存空对象\"></a>缓存空对象</h4><p><img src=\"/2023/02/13/Redis-restudy-8/%E7%BC%93%E5%AD%98%E7%A9%BA%E5%AF%B9%E8%B1%A1.svg\" alt=\"缓存空对象\"></p>\n<p>当存储层不命中后，即使返回的空对象也将其缓存起来，同时会设置一个过期时间，之后再访问这个数据将会从缓存中获取，保护了后端数据源。</p>\n<blockquote>\n<p> 问题：</p>\n</blockquote>\n<ol>\n<li>若控制能够被缓存起来，就意味着缓存需要更多的空间鵆更多的键，因为这当中可能会有很多的空值的键</li>\n<li>即使对空值设置了过期时间，还是会存在缓存层和存储层的护具会有一段时间窗口的不一致，这对于需要保持一致性的业务会有影响。</li>\n</ol>\n<h2 id=\"缓存击穿\"><a href=\"#缓存击穿\" class=\"headerlink\" title=\"缓存击穿\"></a>缓存击穿</h2><p><em>请求量太大，缓存过期</em></p>\n<h3 id=\"概念-1\"><a href=\"#概念-1\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>有一个key非常热点，收到大并发的数据访问；</p>\n<p>当这个key失效的瞬间，持续的大并发就会穿破缓存，直接请求数据库，就像是在一个屏障上凿开了一个洞。</p>\n<p>当某个key在过期的瞬间，有大量请求并发访问，这类数据一般是热点数据，由于缓存过期，会同时访问数据库来查询最新数据，并且回写缓存，会导致数据库瞬间压力过大。</p>\n<h3 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ol>\n<li>设置热点数据永不过期</li>\n<li>加互斥锁<ul>\n<li>分布式锁：使用分布式锁，保证对于每个key同时只有一个线程去查询后端服务，其他线程没有获得分布式锁的权限，因此只需要等待即可。</li>\n<li>这种方式将高并发的压力转移到了分布式锁，因此对分布式锁的考验很大。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h2><p><strong>缓存大面积失效</strong>或<strong>Redis宕机</strong>；</p>\n<h3 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h3><ol>\n<li><p>Redis高可用</p>\n<p>多增设几台Redis，即搭建集群</p>\n</li>\n<li><p>限流</p>\n<p>缓存失效后，通过加锁或队列来控制读数据库和写缓存的线程数量；比如对某个key只允许一个线程查询数据和写缓存，其他线程等待。</p>\n</li>\n<li><p>服务降级&#x2F;服务熔断</p>\n<ul>\n<li><p>发生缓存雪崩时，为防止发生连锁的数据库雪崩，甚至整个系统崩溃</p>\n<ul>\n<li><p>服务熔断</p>\n<ul>\n<li>客户端不再请求Redis，直接返回预定义数据或空数据</li>\n</ul>\n</li>\n<li><p>服务降级</p>\n<ul>\n<li><p>当业务应用访问非核心数据时，暂时停止从缓存中查询这些数据，而是直接范围预定义信息或空数据；</p>\n</li>\n<li><p>访问核心数据则正常执行。</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>- </p>\n</li>\n<li><p>数据预热</p>\n<p>在正式部署之前，先把可能的数据先预先访问一遍，这样部分可能大量访问的数据就会加载到缓存中。</p>\n<p>在即将发生大并发访问前手动触发加载缓存不同的key，设置不同的过期时间，让缓存失效的时间尽量均匀。</p>\n</li>\n<li><p>设置随机过期时间</p>\n<p>尽量保证数据过期时间不同。</p>\n</li>\n</ol>\n","categories":[],"tags":["Redis"]},{"title":"Redis restudy 7 发布订阅 主从复制 哨兵模式","url":"http://zswh33.github.io/2023/02/13/Redis-restudy-7/","content":"<h1 id=\"Redis发布订阅\"><a href=\"#Redis发布订阅\" class=\"headerlink\" title=\"Redis发布订阅\"></a>Redis发布订阅</h1><p><img src=\"/2023/02/13/Redis-restudy-7/redis_sub.svg\" alt=\"redis_sub\"></p>\n<p>Redis可以订阅任何数量的频道。</p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><p><code>psubscribe pattern [pattern ...]</code>：订阅一个或多个符合给定模式的频道</p>\n<p><code>pubsub subcommand [argument [argument ..]]</code>：查询订阅与发布系统状态</p>\n<p><code>publish channel message</code>：将信息发送到指定的频道</p>\n<p><code>punsubscribe [pattern [pattern ...]]</code>：退订所给定模式的频道</p>\n<p><code>subscribe channel [channel ...]</code>：订阅给定的一个或多个频道的信息</p>\n<p><code>unsubscribe [channel [channel ...]]</code>：退订给定的频道</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 订阅频道</span></span><br><span class=\"line\">127.0.0.1:6379&gt; subscribe yn</span><br><span class=\"line\">Reading messages... (press Ctrl-C to quit)</span><br><span class=\"line\">1) <span class=\"string\">&quot;subscribe&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;yn&quot;</span></span><br><span class=\"line\">3) (<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">1) <span class=\"string\">&quot;message&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;yn&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;HelloWorld&quot;</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;message&quot;</span> <span class=\"comment\">#消息</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;yn&quot;</span>  <span class=\"comment\">#来自哪个频道</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;ZhangSan&quot;</span>  <span class=\"comment\">#消息内容</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 频道信息发布</span></span><br><span class=\"line\">127.0.0.1:6379&gt; publish yn HelloWorld</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; publish yn ZhangSan</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>实时消息系统，实时聊天。</p>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><p>有更专业的MQ，Redis订阅可能不需要。</p>\n<h1 id=\"Redis主从复制\"><a href=\"#Redis主从复制\" class=\"headerlink\" title=\"Redis主从复制\"></a>Redis主从复制</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>主从复制，将一台Redis服务器的数据，复制到其他Redis服务器。</p>\n<p>前者为主节点（Master&#x2F;leader）,后者为从节点（slave&#x2F;follower）;</p>\n<p>数据复制是单向的，只能由主节点到从节点，Master写为主，Slave读为主。</p>\n<p>主从复制，读写分离！80%的情况下都是在进行读操作，减缓服务器压力。</p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><ol>\n<li>数据冗余：主从复制实现了数据的热备份，是持久化之外的一种数据冗余方式</li>\n<li>故障恢复：当主节点出现问题时，可以由从节点提供服务，实现快速的故障回复，实际上是一种服务的冗余；</li>\n<li>负载均衡：在主从复制的基础上，配合读写分离，可以由主节点提供写服务，由从节点提供度服务，分担服务器负载；尤其是在写少读多的场景下，通过多个节点分担读负载，可以大大提高Redis服务器并发量。</li>\n<li>高可用基石：主从复制为哨兵和集群提供能够实施的基础，因此主从复制是Redis高可用的基础。</li>\n</ol>\n<p>（“高可用”名词一般用于集群）</p>\n<h2 id=\"一般来说，Redis在工程项目中了，只用一台Redis是万万不能的\"><a href=\"#一般来说，Redis在工程项目中了，只用一台Redis是万万不能的\" class=\"headerlink\" title=\"一般来说，Redis在工程项目中了，只用一台Redis是万万不能的\"></a>一般来说，Redis在工程项目中了，只用一台Redis是万万不能的</h2><ol>\n<li>从结构上，单个Redis服务器会发生单点故障，并且一台服务器需要处理所有的请求负载，压力较大；</li>\n<li>从容量上，单个Redis服务器内存容量有限；一般来说，单台Redis最大使用内存不应该超过20G。</li>\n</ol>\n<p>只要在公司中，主从复制就是要必须使用的，在真实的项目中不可能单机使用Redis。</p>\n<h2 id=\"性质\"><a href=\"#性质\" class=\"headerlink\" title=\"性质\"></a>性质</h2><ul>\n<li><p>默认情况下，每台Redis服务器都是主节点</p>\n</li>\n<li><p>一个主节点可以有多个从节点，一个从节点只能有一个主节点。</p>\n</li>\n</ul>\n<h2 id=\"环境配置\"><a href=\"#环境配置\" class=\"headerlink\" title=\"环境配置\"></a>环境配置</h2><p>只配置从库，不用配置主库。</p>\n<h3 id=\"命令-1\"><a href=\"#命令-1\" class=\"headerlink\" title=\"命令\"></a>命令</h3><p><code>info replication</code>：查看当前库的信息</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; info replication</span><br><span class=\"line\"><span class=\"comment\"># Replication</span></span><br><span class=\"line\">role:master  </span><br><span class=\"line\">connected_slaves:0</span><br><span class=\"line\">master_replid:cf3c24d5b4964e0604f7cbc984152291c0175d35</span><br><span class=\"line\">master_replid2:0000000000000000000000000000000000000000</span><br><span class=\"line\">master_repl_offset:0</span><br><span class=\"line\">second_repl_offset:-1</span><br><span class=\"line\">repl_backlog_active:0</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:0</span><br><span class=\"line\">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><h4 id=\"单机测试学习\"><a href=\"#单机测试学习\" class=\"headerlink\" title=\"单机测试学习\"></a>单机测试学习</h4><ul>\n<li>准备3-4个配置文件</li>\n</ul>\n<ol>\n<li><p>要进行单机测试的话，要修改的配置</p>\n<ul>\n<li>端口，pid，log文件，备份文件名</li>\n</ul>\n</li>\n<li><p>只需配置从机，不配置主机</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#其中一个从机的信息</span></span><br><span class=\"line\">127.0.0.1:6380&gt; slaveof 127.0.0.1 6379  <span class=\"comment\">#认定指定服务器为主机</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6380&gt; info replication</span><br><span class=\"line\"><span class=\"comment\"># Replication</span></span><br><span class=\"line\">role:slave <span class=\"comment\"># 当前角色：从机</span></span><br><span class=\"line\">master_host:127.0.0.1</span><br><span class=\"line\">master_port:6379</span><br><span class=\"line\">master_link_status:up</span><br><span class=\"line\">master_last_io_seconds_ago:5</span><br><span class=\"line\">master_sync_in_progress:0</span><br><span class=\"line\">slave_repl_offset:0</span><br><span class=\"line\">slave_priority:100</span><br><span class=\"line\">slave_read_only:1</span><br><span class=\"line\">connected_slaves:0</span><br><span class=\"line\">master_replid:36c79b03b82a86ae900da1f1a4c8b98ad063dbdd</span><br><span class=\"line\">master_replid2:0000000000000000000000000000000000000000</span><br><span class=\"line\">master_repl_offset:0</span><br><span class=\"line\">second_repl_offset:-1</span><br><span class=\"line\">repl_backlog_active:1</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:1</span><br><span class=\"line\">repl_backlog_histlen:0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看结论</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 主机的信息</span></span><br><span class=\"line\">root@yynlinux:~/yn<span class=\"comment\"># redis-cli -p 6379</span></span><br><span class=\"line\">127.0.0.1:6379&gt; info replication</span><br><span class=\"line\"><span class=\"comment\"># Replication</span></span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:1  <span class=\"comment\">#连接的从机</span></span><br><span class=\"line\">slave0:ip=127.0.0.1,port=6380,state=online,offset=140,lag=0 <span class=\"comment\">#从机的信息</span></span><br><span class=\"line\">master_replid:36c79b03b82a86ae900da1f1a4c8b98ad063dbdd</span><br><span class=\"line\">master_replid2:0000000000000000000000000000000000000000</span><br><span class=\"line\">master_repl_offset:140</span><br><span class=\"line\">second_repl_offset:-1</span><br><span class=\"line\">repl_backlog_active:1</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:1</span><br><span class=\"line\">repl_backlog_histlen:14</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"正式配置\"><a href=\"#正式配置\" class=\"headerlink\" title=\"正式配置\"></a>正式配置</h4><h5 id=\"命令配置\"><a href=\"#命令配置\" class=\"headerlink\" title=\"命令配置\"></a>命令配置</h5><p>在从机上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6380&gt; slaveof 127.0.0.1 6379  <span class=\"comment\">#认定指定服务器为主机</span></span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>即可实现主从复制。</p>\n<h5 id=\"配置文件配置\"><a href=\"#配置文件配置\" class=\"headerlink\" title=\"配置文件配置\"></a>配置文件配置</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">replicaof &lt;masterip&gt; &lt;masterport&gt; <span class=\"comment\"># 主机ip和端口</span></span><br><span class=\"line\">masterauth &lt;master-password&gt;  <span class=\"comment\">#主机密码，密码和用户可以不存在</span></span><br><span class=\"line\">masteruser &lt;username&gt; <span class=\"comment\">#主机用户</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><p>主机可以写，从机只能读。</p>\n</li>\n<li><p>主机的数据会被从机自动保存</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#在从机写会发生的事情</span></span><br><span class=\"line\">127.0.0.1:6380&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">(error) READONLY You can<span class=\"string\">&#x27;t write against a read only replica.</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>主机宕机后，从机依旧连接主机；主机如果恢复了，从机依旧能够获取主机的信息。</li>\n<li>命令行配置的主从关系在从机重启后会消失，只有配置文件配置的主从能够保持。</li>\n</ul>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>Slave启动连接后会向master发送一个sync命令，</p>\n<p>master接到命令，启动后台的存盘进程，同时收集所有接受到的用于修改数据集的命令，在后台进程执行结束后，master将整个数据文件发送到slave，并完成一次完全同步；</p>\n<p>全量复制：slave将收到的数据文件，将其存盘并加载到内存中；</p>\n<p>增量复制：Master继续将新的所有收集到的修改命令依次传给slave，完成同步。</p>\n<h2 id=\"主从复制形式\"><a href=\"#主从复制形式\" class=\"headerlink\" title=\"主从复制形式\"></a>主从复制形式</h2><ol>\n<li><p>一个主机带多个从机</p>\n<p><img src=\"/2023/02/13/Redis-restudy-7/Master-Slave.svg\" alt=\"Master-Slave\"></p>\n</li>\n<li><p>一个主机带多个从机，从机再带从机</p>\n<p><img src=\"/2023/02/13/Redis-restudy-7/Master-Slave2.svg\" alt=\"Master-Slave2\"></p>\n<p>（中间的节点仍是从节点，不能写入。）</p>\n</li>\n</ol>\n<h2 id=\"取消从机模式\"><a href=\"#取消从机模式\" class=\"headerlink\" title=\"取消从机模式\"></a>取消从机模式</h2><p>两种方式：</p>\n<ol>\n<li><p>改配置文件，重启</p>\n</li>\n<li><p>命令：<code>slaveof no one</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6380&gt; slaveof no one</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6380&gt; info replication</span><br><span class=\"line\"><span class=\"comment\"># Replication</span></span><br><span class=\"line\">role:master</span><br><span class=\"line\">connected_slaves:0</span><br><span class=\"line\">master_replid:31c0ab1d95cc58365a1c357e721646ace499ad92</span><br><span class=\"line\">master_replid2:f7d2c0c54849a249b28c1aaaa3c19595b0b732f9</span><br><span class=\"line\">master_repl_offset:1666</span><br><span class=\"line\">second_repl_offset:1667</span><br><span class=\"line\">repl_backlog_active:1</span><br><span class=\"line\">repl_backlog_size:1048576</span><br><span class=\"line\">repl_backlog_first_byte_offset:1</span><br><span class=\"line\">repl_backlog_histlen:1666</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"Redis哨兵模式\"><a href=\"#Redis哨兵模式\" class=\"headerlink\" title=\"Redis哨兵模式\"></a>Redis哨兵模式</h1><p>自动选举Master~❤</p>\n<h2 id=\"传统的主从切换\"><a href=\"#传统的主从切换\" class=\"headerlink\" title=\"传统的主从切换\"></a>传统的主从切换</h2><p>当主服务器宕机，需要手动把一台服务器切换为主服务器，这需要人工干预，费时费力，且造成短时间服务不可用。</p>\n<p>Redis2.8正式提供了Sentinel哨兵架构来解决这个问题。</p>\n<h2 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ul>\n<li><p>哨兵模式能够监控主机是否故障，若故障则根据投票数自动将从库转换为主库。</p>\n</li>\n<li><p>哨兵是一种特殊的模式，哨兵是一个独立的进程，他会独立运行。</p>\n</li>\n<li><p><strong>哨兵通过发送命令，等待Redis服务器响应，从而监控运行的多个Redis示例。</strong></p>\n</li>\n</ul>\n<p><img src=\"/2023/02/13/Redis-restudy-7/%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.svg\" alt=\"哨兵模式\"></p>\n<h2 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>假设主服务器宕机，</p>\n<ul>\n<li>哨兵1会检测到这个结果，系统不会马上进行failover过程，仅仅是哨兵1认为主服务器不可用，这个现象称为<strong>主观下线</strong>；</li>\n<li>当后面的哨兵也检测到主服务器不可用，并达到一定数量时，那么哨兵之间会进行一次投票，投票的结果由一个哨兵发起（这个哨兵是随机的），进行failover[故障转移]操作，切换成功后，就会通过发布订阅模式，让各个哨兵把自己监控的从服务器实现切换主机，这个过程称为<strong>客观下线</strong>。</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><ol>\n<li><p>配置哨兵配置文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sentinel monitor 被监控的名称 地址 端口 最低投票数</span><br><span class=\"line\">sentinel monitor r1 127.0.0.1 6379 1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>被监控的名称自定义，不影响结果</li>\n</ul>\n</li>\n<li><p>启动哨兵</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@yynlinux:~/yn<span class=\"comment\"># redis-sentinel sentinel.conf</span></span><br><span class=\"line\">63284:X 13 Feb 2023 13:34:16.343 <span class=\"comment\"># oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo</span></span><br><span class=\"line\">63284:X 13 Feb 2023 13:34:16.345 <span class=\"comment\"># Redis version=6.0.16, bits=64, commit=00000000, modified=0, pid=63284, just started</span></span><br><span class=\"line\">63284:X 13 Feb 2023 13:34:16.346 <span class=\"comment\"># Configuration loaded</span></span><br><span class=\"line\">63284:X 13 Feb 2023 13:34:16.349 * Increased maximum number of open files to 10032 (it was originally <span class=\"built_in\">set</span> to 1024).</span><br><span class=\"line\">                _._</span><br><span class=\"line\">           _.-``__ <span class=\"string\">&#x27;&#x27;</span>-._</span><br><span class=\"line\">      _.-``    `.  `_.  <span class=\"string\">&#x27;&#x27;</span>-._           Redis 6.0.16 (00000000/0) 64 bit</span><br><span class=\"line\">  .-`` .-```.  ```\\/    _.,_ <span class=\"string\">&#x27;&#x27;</span>-._</span><br><span class=\"line\"> (    <span class=\"string\">&#x27;      ,       .-`  | `,    )     Running in sentinel mode</span></span><br><span class=\"line\"><span class=\"string\"> |`-._`-...-` __...-.``-._|&#x27;</span>` _.-<span class=\"string\">&#x27;|     Port: 26379</span></span><br><span class=\"line\"><span class=\"string\"> |    `-._   `._    /     _.-&#x27;</span>    |     PID: 63284</span><br><span class=\"line\">  `-._    `-._  `-./  _.-<span class=\"string\">&#x27;    _.-&#x27;</span></span><br><span class=\"line\"> |`-._`-._    `-.__.-<span class=\"string\">&#x27;    _.-&#x27;</span>_.-<span class=\"string\">&#x27;|</span></span><br><span class=\"line\"><span class=\"string\"> |    `-._`-._        _.-&#x27;</span>_.-<span class=\"string\">&#x27;    |           http://redis.io</span></span><br><span class=\"line\"><span class=\"string\">  `-._    `-._`-.__.-&#x27;</span>_.-<span class=\"string\">&#x27;    _.-&#x27;</span></span><br><span class=\"line\"> |`-._`-._    `-.__.-<span class=\"string\">&#x27;    _.-&#x27;</span>_.-<span class=\"string\">&#x27;|</span></span><br><span class=\"line\"><span class=\"string\"> |    `-._`-._        _.-&#x27;</span>_.-<span class=\"string\">&#x27;    |</span></span><br><span class=\"line\"><span class=\"string\">  `-._    `-._`-.__.-&#x27;</span>_.-<span class=\"string\">&#x27;    _.-&#x27;</span></span><br><span class=\"line\">      `-._    `-.__.-<span class=\"string\">&#x27;    _.-&#x27;</span></span><br><span class=\"line\">          `-._        _.-<span class=\"string\">&#x27;</span></span><br><span class=\"line\"><span class=\"string\">              `-.__.-&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">63284:X 13 Feb 2023 13:34:16.371 <span class=\"comment\"># Sentinel ID is aab9a70d6160f5ffdcbc57130a26295510730b10</span></span><br><span class=\"line\">63284:X 13 Feb 2023 13:34:16.372 <span class=\"comment\"># +monitor master r1 127.0.0.1 6379 quorum 1</span></span><br><span class=\"line\">63284:X 13 Feb 2023 13:34:16.377 * +slave slave 127.0.0.1:6380 127.0.0.1 6380 @ r1 127.0.0.1 6379</span><br><span class=\"line\">63284:X 13 Feb 2023 13:36:14.070 <span class=\"comment\"># +sdown master r1 127.0.0.1 6379</span></span><br><span class=\"line\">63284:X 13 Feb 2023 13:36:14.072 <span class=\"comment\"># +odown master r1 127.0.0.1 6379 #quorum 1/1</span></span><br><span class=\"line\">63284:X 13 Feb 2023 13:36:14.073 <span class=\"comment\"># +new-epoch 1</span></span><br><span class=\"line\">63284:X 13 Feb 2023 13:36:14.075 <span class=\"comment\"># +try-failover master r1 127.0.0.1 6379</span></span><br><span class=\"line\">63284:X 13 Feb 2023 13:36:14.084 <span class=\"comment\"># +vote-for-leader aab9a70d6160f5ffdcbc57130a26295510730b10 1</span></span><br><span class=\"line\">63284:X 13 Feb 2023 13:36:14.086 <span class=\"comment\"># +elected-leader master r1 127.0.0.1 6379</span></span><br><span class=\"line\">63284:X 13 Feb 2023 13:36:14.088 <span class=\"comment\"># +failover-state-select-slave master r1 127.0.0.1 6379</span></span><br><span class=\"line\">63284:X 13 Feb 2023 13:36:14.182 <span class=\"comment\"># +selected-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ r1 127.0.0.1 6379</span></span><br><span class=\"line\">63284:X 13 Feb 2023 13:36:14.184 * +failover-state-send-slaveof-noone slave 127.0.0.1:6380 127.0.0.1 6380 @ r1 127.0.0.1 6379</span><br><span class=\"line\">63284:X 13 Feb 2023 13:36:14.243 * +failover-state-wait-promotion slave 127.0.0.1:6380 127.0.0.1 6380 @ r1 127.0.0.1 6379</span><br><span class=\"line\">63284:X 13 Feb 2023 13:36:14.860 <span class=\"comment\"># +promoted-slave slave 127.0.0.1:6380 127.0.0.1 6380 @ r1 127.0.0.1 6379</span></span><br><span class=\"line\">63284:X 13 Feb 2023 13:36:14.862 <span class=\"comment\"># +failover-state-reconf-slaves master r1 127.0.0.1 6379</span></span><br><span class=\"line\">63284:X 13 Feb 2023 13:36:14.938 <span class=\"comment\"># +failover-end master r1 127.0.0.1 6379</span></span><br><span class=\"line\">63284:X 13 Feb 2023 13:36:14.939 <span class=\"comment\"># +switch-master r1 127.0.0.1 6379 127.0.0.1 6380</span></span><br><span class=\"line\">63284:X 13 Feb 2023 13:36:14.942 * +slave slave 127.0.0.1:6379 127.0.0.1 6379 @ r1 127.0.0.1 6380</span><br><span class=\"line\">63284:X 13 Feb 2023 13:36:15.208 * +slave slave 127.0.0.1:6381 127.0.0.1 6381 @ r1 127.0.0.1 6380</span><br><span class=\"line\">63284:X 13 Feb 2023 13:36:44.969 <span class=\"comment\"># +sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ r1 127.0.0.1 6380</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"其他-1\"><a href=\"#其他-1\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>若主机宕机后，哨兵会自动投票选举从机作为主机。</li>\n<li>主机宕机恢复后，哨兵会向该主机发送命令，将该主机变为新主机的从机。</li>\n</ul>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li>主从可以切换，故障可以转移，系统的可用性会更好；</li>\n<li>哨兵模式就是主从模式的升级，手动到自动；</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li>Redis不易扩容，集群容量一旦达到上限，在线扩容十分麻烦；</li>\n<li>实现哨兵模式的配置麻烦。</li>\n</ol>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bind</span> 127.0.0.1 ::1</span><br><span class=\"line\">port 26379  <span class=\"comment\">#如果有哨兵集群，则需要配置端口</span></span><br><span class=\"line\">daemonize no</span><br><span class=\"line\">pidfile <span class=\"string\">&quot;/var/run/sentinel/redis-sentinel.pid&quot;</span></span><br><span class=\"line\">logfile <span class=\"string\">&quot;/var/log/redis/redis-sentinel.log&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 指定监听的master</span></span><br><span class=\"line\"><span class=\"comment\">#    quorum 有多少个哨兵认为失联了，就认定主机down了</span></span><br><span class=\"line\"><span class=\"comment\">#sentinel monitor 主机名   地址     端口 quorum</span></span><br><span class=\"line\">sentinel monitor mymaster 127.0.0.1 6379 2</span><br><span class=\"line\"><span class=\"comment\">#配置主机密码</span></span><br><span class=\"line\">sentinel auto-pass &lt;master-name&gt; &lt;password&gt;</span><br><span class=\"line\"><span class=\"comment\"># 指定多长时间，哨兵主观认为master不可用了，单位是毫秒，默认为30秒</span></span><br><span class=\"line\"><span class=\"comment\"># 默认延时操作                      主机名        延时</span></span><br><span class=\"line\">sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class=\"line\"><span class=\"comment\">#  故障转移时，最多允许多少个从机同时从master进行数据同步。  因此，1则表示串行。设为1保证每次只有一个slave处于不能处理请求的状态</span></span><br><span class=\"line\">sentinel parallel syncs &lt;master-name&gt; &lt;numslaves&gt;</span><br><span class=\"line\"><span class=\"comment\"># 故障转移 超时时间 若超过180000ms没有转移成功，则视为故障转移失败</span></span><br><span class=\"line\">sentinel failover-timeout mymaster 180000</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 配置某一事件发生时要执行的脚本</span></span><br><span class=\"line\"><span class=\"comment\"># 通知型脚本：当sentinel有任何警告级别的事件发生时（比如Redis实例主管失效、客观失效等），将会去调用这个脚本，这时脚本应该通过邮件，SMS等方式通知系统管理员关于系统不正常运行的而信息；调用该脚本时，将会给脚本传递两个参数，一个是事件的类型，一个是事件的描述。若配置了这个脚本，则必须保证脚本可执行，否则sentinel无法正常启动</span></span><br><span class=\"line\"><span class=\"comment\"># 规则：</span></span><br><span class=\"line\"><span class=\"comment\"># 1. 若脚本执行后返回1，则该脚本会被再次执行，重复次数默认为10</span></span><br><span class=\"line\"><span class=\"comment\"># 2. 若脚本返回2或一个比2更高的值，脚本不会被重复执行</span></span><br><span class=\"line\"><span class=\"comment\"># 3. 若脚本执行过程中收到中断信号终止了，则同返回值为1的行为相同</span></span><br><span class=\"line\"><span class=\"comment\"># 4. 脚本最大执行时间为60s，超过这个时间会被一个SIGKILL信号终止，之后重新执行。</span></span><br><span class=\"line\">sentinel notification-script mymaster /var/redis/notfiy.sh</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 当一个master由于failover而发生改变时，这个脚本将被调用，通知相关的客户端关于master地址已经发生改变的信息，以下参数将会在调用脚本时传给脚本。</span></span><br><span class=\"line\"><span class=\"comment\"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span></span><br><span class=\"line\">sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":["Redis"]},{"title":"Redis restudy 6 conf 持久化","url":"http://zswh33.github.io/2023/02/13/Redis-restudy-6/","content":"<h1 id=\"Redis-conf\"><a href=\"#Redis-conf\" class=\"headerlink\" title=\"Redis.conf\"></a>Redis.conf</h1><h2 id=\"单位\"><a href=\"#单位\" class=\"headerlink\" title=\"单位\"></a>单位</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 1k =&gt; 1000 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># 1kb =&gt; 1024 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># 1m =&gt; 1000000 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># 1mb =&gt; 1024*1024 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># 1g =&gt; 1000000000 bytes</span></span><br><span class=\"line\"><span class=\"comment\"># 1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span></span><br></pre></td></tr></table></figure>\n\n<p>在单位上，大小写不敏感。</p>\n<h2 id=\"include\"><a href=\"#include\" class=\"headerlink\" title=\"include\"></a>include</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># include /path/to/local.conf</span></span><br><span class=\"line\"><span class=\"comment\"># include /path/to/other.conf</span></span><br></pre></td></tr></table></figure>\n\n<p>可以包含别的配置文件。</p>\n<h2 id=\"网络\"><a href=\"#网络\" class=\"headerlink\" title=\"网络\"></a>网络</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">bind</span> 127.0.0.1 ::1  <span class=\"comment\">#绑定的IP地址</span></span><br><span class=\"line\">protected-mode <span class=\"built_in\">yes</span> <span class=\"comment\"># 保护模式开关</span></span><br><span class=\"line\">port 6379 <span class=\"comment\"># 端口</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"General\"><a href=\"#General\" class=\"headerlink\" title=\"General\"></a>General</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize <span class=\"built_in\">yes</span> <span class=\"comment\">#以守护进程方式运行</span></span><br><span class=\"line\">pidfile /var/run/redis/redis-server.pid  <span class=\"comment\">#若以后台方式运行，就需要指定一个pid文件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># debug (a lot of information, useful for development/testing)</span></span><br><span class=\"line\"><span class=\"comment\"># verbose (many rarely useful info, but not a mess like the debug level)</span></span><br><span class=\"line\"><span class=\"comment\"># notice (moderately verbose, what you want in production probably) 生产环境适用</span></span><br><span class=\"line\"><span class=\"comment\"># warning (only very important / critical messages are logged)</span></span><br><span class=\"line\">loglevel notice  <span class=\"comment\">#日志级别</span></span><br><span class=\"line\"></span><br><span class=\"line\">logfile /var/log/redis/redis-server.log  <span class=\"comment\">#日志的文件位置</span></span><br><span class=\"line\">databases 16 <span class=\"comment\"># 默认数据库数量</span></span><br><span class=\"line\">always-show-logo <span class=\"built_in\">yes</span>  <span class=\"comment\">#是否总是展示logo</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"SNAPSHOTTING-快照\"><a href=\"#SNAPSHOTTING-快照\" class=\"headerlink\" title=\"SNAPSHOTTING 快照\"></a>SNAPSHOTTING 快照</h2><p>持久化，在规定的时间内，执行了多少次操作，则会进行一次持久化。</p>\n<p>Redis是内存数据库，没有持久化，数据断电即失。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">save 900 1     <span class=\"comment\">#每隔900秒尝试进行保存，若修改次数&gt;=1则进行一次快照保存</span></span><br><span class=\"line\">save 300 10    <span class=\"comment\">#每隔300秒尝试进行保存，若修改次数&gt;=10则进行一次快照保存</span></span><br><span class=\"line\">save 60 10000  <span class=\"comment\">#每隔60秒尝试进行保存，若修改次数&gt;=10000则进行一次快照保存</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stop-writes-on-bgsave-error <span class=\"built_in\">yes</span>  <span class=\"comment\">#持久化出错，是否继续工作</span></span><br><span class=\"line\">rdbcompression <span class=\"built_in\">yes</span> <span class=\"comment\"># 是否开启rdb文件压缩，需要消耗CPU资源</span></span><br><span class=\"line\">rdbchecksum <span class=\"built_in\">yes</span> <span class=\"comment\">#保存rdb文件时，进行rdb文件校验</span></span><br><span class=\"line\">dbfilename dump.rdb <span class=\"comment\">#rdb文件保存目录</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"REPLICATION复制\"><a href=\"#REPLICATION复制\" class=\"headerlink\" title=\"REPLICATION复制\"></a>REPLICATION复制</h2><p>…</p>\n<h2 id=\"SECURITY安全\"><a href=\"#SECURITY安全\" class=\"headerlink\" title=\"SECURITY安全\"></a>SECURITY安全</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">requirepass 123456 <span class=\"comment\"># 设置密码，默认没有密码</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CLIENTS客户端\"><a href=\"#CLIENTS客户端\" class=\"headerlink\" title=\"CLIENTS客户端\"></a>CLIENTS客户端</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">maxclients 1000 <span class=\"comment\">#设置redis最大客户端数量</span></span><br><span class=\"line\">maxmemory &lt;bytes&gt; <span class=\"comment\">#设置最大内存容量</span></span><br><span class=\"line\">maxmemory-policy noeviction <span class=\"comment\">#内存满了，处理策略</span></span><br><span class=\"line\">\t<span class=\"comment\">#noeviction: 不删除策略, 达到最大内存限制时, 如果需要更多内存, 直接返回错误信息。（默认值）</span></span><br><span class=\"line\">\t<span class=\"comment\">#allkeys-lru: 所有key通用; 优先删除最近最少使用(less recently used ,LRU) 的 key。</span></span><br><span class=\"line\">\t<span class=\"comment\">#volatile-lru: 只限于设置了 expire 的部分; 优先删除最近最少使用(less recently used ,LRU) 的 key。\t#allkeys-random: 所有key通用; 随机删除一部分 key。</span></span><br><span class=\"line\">\t<span class=\"comment\">#volatile-random: 只限于设置了 expire 的部分; 随机删除一部分 key。</span></span><br><span class=\"line\">\t<span class=\"comment\">#volatile-ttl: 只限于设置了 expire 的部分; 优先删除剩余时间(time to live,TTL) 短的key。</span></span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"APPEND-ONLY-MODE-模式-aof\"><a href=\"#APPEND-ONLY-MODE-模式-aof\" class=\"headerlink\" title=\"APPEND ONLY MODE 模式 aof\"></a>APPEND ONLY MODE 模式 aof</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appendonly no  <span class=\"comment\">#默认不开启aof模式，</span></span><br><span class=\"line\">\t<span class=\"comment\">#默认使用的是rdb方式持久化，大部分情况下rdb够用。</span></span><br><span class=\"line\">appendfilename <span class=\"string\">&quot;appendonly.aof&quot;</span>  <span class=\"comment\">#持久化文件名</span></span><br><span class=\"line\">appendfsync everysec <span class=\"comment\"># 每秒执行一次同步，可能会丢失这一秒的数据</span></span><br><span class=\"line\">\t<span class=\"comment\">#always  #每次修改值都会写入</span></span><br><span class=\"line\">\t<span class=\"comment\">#no      #不执行，这个时候操作系统自己同步数据，速度最快。</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Redis持久化\"><a href=\"#Redis持久化\" class=\"headerlink\" title=\"Redis持久化\"></a>Redis持久化</h1><p>参考文献：<a href=\"https://www.cnblogs.com/xing1/p/16380120.html\">https://www.cnblogs.com/xing1/p/16380120.html</a></p>\n<p>Redis是内存数据库，若不将内存中数据库状态保存到磁盘，一旦服务器进程退出，服务器中数据库状态就会消失，所以Redis提供了持久化功能。</p>\n<h2 id=\"RDB（Redis-Database）\"><a href=\"#RDB（Redis-Database）\" class=\"headerlink\" title=\"RDB（Redis Database）\"></a>RDB（Redis Database）</h2><p>指定时间间隔内将内存中数据快照写入磁盘。</p>\n<p>Redis单独创建（fork）一个子进程来进行持久化，会先将数据写入到一个临时文件中，待持久化过程结束了，再用这个临时文件替换上次持久化好的文件。</p>\n<p>主进程不进行任何IO操作，确保了极高的性能。</p>\n<p>如果要大规模进行数据恢复，且对于数据恢复的完整性不是非常敏感，那RDB的方式要比AOF方式更加高效。RDB缺点是最后一次持久化后数据可能丢失。</p>\n<p>默认情况下使用RDB。</p>\n<p>默认保存文件为：dump.rdb</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dbfilename: dump.rdb</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"触发条件\"><a href=\"#触发条件\" class=\"headerlink\" title=\"触发条件\"></a>触发条件</h3><ol>\n<li>save规则满足</li>\n<li>执行flushall</li>\n<li>关闭redis服务器</li>\n</ol>\n<h3 id=\"rdb文件恢复\"><a href=\"#rdb文件恢复\" class=\"headerlink\" title=\"rdb文件恢复\"></a>rdb文件恢复</h3><p>将rdb文件放到Redis启动目录就可，redis启动会检查rdb文件然后恢复。</p>\n<ul>\n<li>&#x2F;user&#x2F;local&#x2F;bin</li>\n</ul>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ol>\n<li><p>适合大规模数据恢复</p>\n</li>\n<li><p>对数据完成性要求不高</p>\n</li>\n</ol>\n<p>缺点：</p>\n<ol>\n<li>需要一定的时间间隔进程操作。若redis意外宕机了，最后一次修改数据就没有了</li>\n<li>fork进程的时候，会占用一定的内存空间。</li>\n</ol>\n<p>有时候在生产环境我们会对这个文件进行备份。</p>\n<h2 id=\"AOF（Append-Only-File）\"><a href=\"#AOF（Append-Only-File）\" class=\"headerlink\" title=\"AOF（Append Only File）\"></a>AOF（Append Only File）</h2><h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>将所有命令都记录下来，恢复的时候就把这个文件再全部执行一遍；</p>\n<p>以日志的形式记录每个写操作，将Redis执行过的所有指令记录下来（不记录读操作），只可追加文件不可改写文件，Redis启动之初会读取该文件重新构建数据，Redis重启的话就根据日志文件的内容将所有指令执行一次以完成数据恢复操作。</p>\n<h3 id=\"AOF重写\"><a href=\"#AOF重写\" class=\"headerlink\" title=\"AOF重写\"></a>AOF重写</h3><p>AOF追加文件会越来越大，这样不合理；</p>\n<p>为了解决这个问题，当文件大到一定程度，会触发<strong>AOF重写</strong>；</p>\n<p>AOF重写会将内存中的数据库用命令的方式重写一个aof文件，来为AOF文件<strong>减肥</strong>。</p>\n<ul>\n<li>当AOF文件体积变得过大时，会fork出一条新进程来将文件重写（先写临时文件，然后rename），遍历新进程的内存数据，每条记录有一条set语句。重写aof文件操作，没有读取旧的aof文件，而是将<strong>整个内存中的数据库内容用命令的方式重写一个新的aof文件</strong>（与快照类似）。</li>\n<li>在子进程重写期间，服务端正常对外服务，服务端会将在重写期间收到的数据缓存到aof_rewrite_buf中，也就是单独开辟一块缓存来存储重写期间收到的命令，在子进程重写完成后，再把缓存的数据追加到新的aof文件中。</li>\n<li>重写期间写出的aof文件是一个临时文件，不是旧文件，在重写结束后会删除旧的aof文件，然后临时文件会rename，成为当前使用的aof文件。</li>\n</ul>\n<h3 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h3><p>AOF默认文件：appendonly.aof</p>\n<p><strong>AOF默认不开启</strong>，需要手动开启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">appendonly no <span class=\"comment\">#no表示关闭 yes表示开启</span></span><br><span class=\"line\">appendfilename <span class=\"string\">&quot;appendonly.aof&quot;</span></span><br><span class=\"line\">no-appendfsync-on-rewrite no <span class=\"comment\">#在执行AOF重写期间是否进行AOF文件同步</span></span><br><span class=\"line\">auto-aof-rewrite-percentage 100 <span class=\"comment\">#目前AOF文件超过上次重写文件的百分之多少时候再次重写，这里指上次重写文件的1倍</span></span><br><span class=\"line\">auto-aof-rewrite-min-size 64mb  <span class=\"comment\">#设置允许重写的最小文件大小，防止文件本身就小还要重写。</span></span><br><span class=\"line\"></span><br><span class=\"line\">aof-use-rdb-preamble no <span class=\"comment\">#Redis4.0新增的RDB-AOF混合持久化方式，其中RDB负责记录已有数据，AOF负责记录最近发生变化的数据。这样就同时兼有AOF和RDB的优点：既能够快速生成重写文件，也能在出现问题时，快速地载入数据。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"AOF文件修复\"><a href=\"#AOF文件修复\" class=\"headerlink\" title=\"AOF文件修复\"></a>AOF文件修复</h3><p>当aof文件有错误，Redis则无法启动，就需要修复这个aof文件；</p>\n<p>redis提供了一个工具<code>redis-check-aof</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">redis-check-aof --fix appendonly.aof</span><br></pre></td></tr></table></figure>\n\n<p><code>redis-check-aof</code>修复会删除错误的指令，将错误的数据删除。</p>\n<h3 id=\"优点-1\"><a href=\"#优点-1\" class=\"headerlink\" title=\"优点\"></a>优点</h3><ol>\n<li>每次修改都同步，文件完整性更高</li>\n</ol>\n<h3 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h3><ol>\n<li>数据文件大，</li>\n<li>修复速度慢</li>\n<li>AOF运行效率比rdb低</li>\n</ol>\n","categories":[],"tags":["Redis"]},{"title":"Redis restudy 5 事务 监视Jedis SpringBootRedis","url":"http://zswh33.github.io/2023/02/13/Redis-restudy-5/","content":"<h1 id=\"事务\"><a href=\"#事务\" class=\"headerlink\" title=\"事务\"></a>事务</h1><p><em>要么同时成功，要么同时失败：原子性。</em></p>\n<ul>\n<li><p><strong>Redis单条命令保证原子性</strong>，但<strong>事务不保证原子性</strong>。</p>\n<ul>\n<li><strong>Redis没有事务隔离级别的概念</strong></li>\n</ul>\n</li>\n<li><p>Redis事务：一组命令的集合。</p>\n</li>\n<li><p>一个事务的所有命令都会被序列化，在事务执行过程中，会按照顺序执行</p>\n</li>\n<li><p>所有命令在事务中，不会被直接执行！只有发起执行命令的时候才会执行！</p>\n<ul>\n<li>先<strong>创建事务</strong>，然后<strong>发起执行命令</strong>，然后<strong>开始执行</strong>。</li>\n</ul>\n</li>\n<li><p><strong>一次性，顺序性，排他性</strong>。</p>\n</li>\n</ul>\n<h2 id=\"执行流程\"><a href=\"#执行流程\" class=\"headerlink\" title=\"执行流程\"></a>执行流程</h2><ul>\n<li>开启事务 multi</li>\n<li>命令入队 </li>\n<li>执行事务 exec</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; multi  <span class=\"comment\">#开启事务</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1  <span class=\"comment\">#命令入队</span></span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; get k2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; get k1</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span>  <span class=\"comment\">#执行</span></span><br><span class=\"line\">1) OK</span><br><span class=\"line\">2) OK</span><br><span class=\"line\">3) <span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">4) OK</span><br><span class=\"line\">5) <span class=\"string\">&quot;v1&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><p><code>multi</code>：开启事务</p>\n<p><code>exec</code>：执行事务</p>\n<p><code>discard</code>：取消事务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; multi  <span class=\"comment\">#开启事务</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k5 qweasd</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; discard  <span class=\"comment\">#取消事务</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get k5  <span class=\"comment\"># 事务队列命令不会被执行</span></span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li>若事务中出现错误命令，exec后事务中所有命令都不会被执行；</li>\n<li>若事务队列中出现“运行时异常”，在事务执行过程中，其他命令可以被正常执行。<ul>\n<li>错误命令抛出异常</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"编译时异常\"><a href=\"#编译时异常\" class=\"headerlink\" title=\"编译时异常\"></a>编译时异常</h2><p>一个命令出现错误，事务中所有命令都不会被执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; getset k3 <span class=\"comment\">#错误的命令</span></span><br><span class=\"line\">(error) ERR wrong number of arguments <span class=\"keyword\">for</span> <span class=\"string\">&#x27;getset&#x27;</span> <span class=\"built_in\">command</span> <span class=\"comment\">#报错后事务没有停止</span></span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k4 v4</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k5 v4</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span></span><br><span class=\"line\">(error) EXECABORT Transaction discarded because of previous errors.</span><br><span class=\"line\"><span class=\"comment\">#所有的命令都不会被执行</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"运行时异常\"><a href=\"#运行时异常\" class=\"headerlink\" title=\"运行时异常\"></a>运行时异常</h2><p>所有的命令中，除了报错的，都正常执行。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k1 v1</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; incr k1  <span class=\"comment\">#k1是一个字符串，不能进行incr，所以是一个会报错的命令</span></span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k2 v2</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> k3 v3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; get k3</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span></span><br><span class=\"line\">1) (error) ERR value is not an <span class=\"built_in\">integer</span> or out of range</span><br><span class=\"line\">2) OK</span><br><span class=\"line\">3) OK</span><br><span class=\"line\">4) <span class=\"string\">&quot;v3&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get k3</span><br><span class=\"line\"><span class=\"string\">&quot;v3&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Redis监视-x2F-Redis乐观锁\"><a href=\"#Redis监视-x2F-Redis乐观锁\" class=\"headerlink\" title=\"Redis监视&#x2F;Redis乐观锁\"></a>Redis监视&#x2F;Redis乐观锁</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><code>watch key</code>：监视某个key，在后面事务创建过程中，若另一个线程修改了key对应的值，那个这个事务执行会失败。</p>\n<p>正常执行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> money 100</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> out 0</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; watch money</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; multi</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; decrby money 20</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; incrby out 20</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span></span><br><span class=\"line\">1) (<span class=\"built_in\">integer</span>) 80</span><br><span class=\"line\">2) (<span class=\"built_in\">integer</span>) 20</span><br></pre></td></tr></table></figure>\n\n<p>执行失败示例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> money 10</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; watch money</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; multi  </span><br><span class=\"line\">OK <span class=\"comment\">#在这里，另一个线程执行了set money 100</span></span><br><span class=\"line\">127.0.0.1:6379&gt; incrby money 20</span><br><span class=\"line\">QUEUED</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">exec</span></span><br><span class=\"line\">(nil)  <span class=\"comment\">#由于money值被另一个线程修改，这里执行失败</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get money</span><br><span class=\"line\"><span class=\"string\">&quot;100&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>解决：重新执行流程。</p>\n<h2 id=\"命令-1\"><a href=\"#命令-1\" class=\"headerlink\" title=\"命令\"></a>命令</h2><ul>\n<li><p><code>watch key</code>：监视某个元素</p>\n</li>\n<li><p><code>unwatch</code>：放弃监视</p>\n<ul>\n<li>exec和discard后会自动执行这个命令。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Jedis\"><a href=\"#Jedis\" class=\"headerlink\" title=\"Jedis\"></a>Jedis</h1><p><em>Redis官方推荐的Java连接开发工具。使用Java操作Redis的一个中间件。</em></p>\n<p><strong>Jedis的API与Redis的命令完全一致。</strong></p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ol>\n<li>导入依赖</li>\n</ol>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>redis.clients<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jedis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.3.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba.fastjson2<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>fastjson2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.0.16<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li><p>执行</p>\n<ul>\n<li>连接数据库</li>\n<li>操作命令</li>\n<li>断开连接</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 1. new Jedis 对象</span></span><br><span class=\"line\">        <span class=\"type\">Jedis</span> <span class=\"variable\">jedis</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">6379</span>);</span><br><span class=\"line\">        System.out.println(jedis.ping());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PONG</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"事务-1\"><a href=\"#事务-1\" class=\"headerlink\" title=\"事务\"></a>事务</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisTest_TX</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Jedis</span> <span class=\"variable\">jedis</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        jedis = <span class=\"keyword\">new</span> <span class=\"title class_\">Jedis</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"number\">6379</span>);</span><br><span class=\"line\">        jedis.flushDB();</span><br><span class=\"line\">        <span class=\"comment\">//开启事务</span></span><br><span class=\"line\">        <span class=\"type\">Transaction</span> <span class=\"variable\">multi</span> <span class=\"operator\">=</span> jedis.multi();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//输入事务指令</span></span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;qweasd&quot;</span>;</span><br><span class=\"line\">            multi.set(<span class=\"string\">&quot;user:1&quot;</span>,s);</span><br><span class=\"line\"><span class=\"comment\">//            int i = 1/0;//代码抛出异常，事务执行失败</span></span><br><span class=\"line\">            <span class=\"comment\">//执行事务</span></span><br><span class=\"line\">            List&lt;Object&gt; exec = multi.exec();</span><br><span class=\"line\">            System.out.println(exec);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            System.out.println(multi.discard());</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(e);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            System.out.println(jedis.get(<span class=\"string\">&quot;user:1&quot;</span>));</span><br><span class=\"line\">            jedis.close();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SpringBoot整合Redis\"><a href=\"#SpringBoot整合Redis\" class=\"headerlink\" title=\"SpringBoot整合Redis\"></a>SpringBoot整合Redis</h1><h2 id=\"Jedis和Lettuce历史\"><a href=\"#Jedis和Lettuce历史\" class=\"headerlink\" title=\"Jedis和Lettuce历史\"></a>Jedis和Lettuce历史</h2><p>在SpringBoot2.x之后，原来使用的Jedis被替换为lettuce。</p>\n<blockquote>\n<p>区别</p>\n</blockquote>\n<ul>\n<li>Jedis：采用直连的方式，多线程操作，是不安全的。（BIO）<ul>\n<li>使用Jedis Pool连接池解决。</li>\n</ul>\n</li>\n<li>lettuce：采用netty，实例可以在多个线程中共享，不存在线程不安全的情况，可以减少线程数量。（更像NIO模式）</li>\n</ul>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>通过SpringData访问数据</p>\n<p>（在Spring访问数据库数据，都是通过SpringData执行。jdbc，redis，JPA等）</p>\n<h3 id=\"SpringBoot\"><a href=\"#SpringBoot\" class=\"headerlink\" title=\"SpringBoot\"></a>SpringBoot</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration(proxyBeanMethods = false)</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(RedisOperations.class)</span></span><br><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(RedisProperties.class)</span></span><br><span class=\"line\"><span class=\"meta\">@Import(&#123; LettuceConnectionConfiguration.class, JedisConnectionConfiguration.class &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisAutoConfiguration</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span>  <span class=\"comment\">// 当不存在redisTemplate时，则使用这个配置，可以自定义一个redisTemplate来替换</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> RedisTemplate&lt;Object, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//默认的RedisTemplate没有过多的设置，</span></span><br><span class=\"line\">        <span class=\"comment\">//两个泛型都是Object，后面使用需要强制转换</span></span><br><span class=\"line\">\t\tRedisTemplate&lt;Object, Object&gt; template = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\">\t\ttemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> template;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"meta\">@Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnMissingBean</span> <span class=\"comment\">// 由于String是redis中最常使用的类型，所以有单独一个Bean</span></span><br><span class=\"line\">\t<span class=\"meta\">@ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span></span><br><span class=\"line\">\t<span class=\"keyword\">public</span> StringRedisTemplate <span class=\"title function_\">stringRedisTemplate</span><span class=\"params\">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisTemplate</span>(redisConnectionFactory);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h2><ol>\n<li><p>导入依赖</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置连接</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.redis.url</span>=<span class=\"string\">127.0.0.1</span></span><br><span class=\"line\"><span class=\"attr\">spring.redis.port</span>=<span class=\"string\">6379</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">RedisTemplate&lt;Object,Object&gt; redisTemplate;</span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    redisTemplate.opsForValue().set(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;yn&quot;</span>);</span><br><span class=\"line\">    System.out.println(redisTemplate.opsForValue().get(<span class=\"string\">&quot;name&quot;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h2><blockquote>\n<p>1.先注入一个RedisTemplate</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">RedisTemplate&lt;Object,Object&gt; redisTemplate;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<ol start=\"2\">\n<li>然后选择操作方式</li>\n</ol>\n</blockquote>\n<p><img src=\"/2023/02/13/Redis-restudy-5/image-20230213151012866.png\" alt=\"image-20230213151012866\"></p>\n<ul>\n<li><p>Value：字符串</p>\n</li>\n<li><p>Cluster：集群</p>\n</li>\n<li><p>Geo：地理位置信息</p>\n</li>\n<li><p>Hash：哈希</p>\n</li>\n<li><p>List：列表</p>\n</li>\n<li><p>HyperLogLog：基数统计</p>\n</li>\n<li><p>Set：集合</p>\n</li>\n<li><p>Stream：流</p>\n</li>\n<li><p>…</p>\n</li>\n</ul>\n<blockquote>\n<ol start=\"3\">\n<li>对于结果</li>\n</ol>\n</blockquote>\n<p><img src=\"/2023/02/13/Redis-restudy-5/image-20230213151125584.png\" alt=\"image-20230213151125584\"></p>\n<p>与Redis基本一致，直接使用就可。</p>\n<h2 id=\"其他API\"><a href=\"#其他API\" class=\"headerlink\" title=\"其他API\"></a>其他API</h2><ul>\n<li>redisTemplate<ul>\n<li><code>ops****</code><ul>\n<li>set</li>\n<li>get</li>\n<li>…</li>\n</ul>\n</li>\n<li>multi 事务</li>\n<li>discard</li>\n<li>delete</li>\n<li>watch</li>\n<li><code>redisTemplate.getConnectionFactory().getConnection()</code> 获取连接对象<ul>\n<li>flushAll 清除所有</li>\n<li>flushDb 清除数据库</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"关于中文乱码解决\"><a href=\"#关于中文乱码解决\" class=\"headerlink\" title=\"关于中文乱码解决\"></a>关于中文乱码解决</h2><h3 id=\"原理-1\"><a href=\"#原理-1\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>在RedisTemplate.class下，默认使用的是Jdk序列化方式，Jdk序列化方式会对中文进行编码。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.defaultSerializer == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.defaultSerializer = <span class=\"keyword\">new</span> <span class=\"title class_\">JdkSerializationRedisSerializer</span>(<span class=\"built_in\">this</span>.classLoader != <span class=\"literal\">null</span> ? <span class=\"built_in\">this</span>.classLoader : <span class=\"built_in\">this</span>.getClass().getClassLoader());</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><p>自己定义一个redisTemplate。</p>\n<h2 id=\"自定义RedisTemplate\"><a href=\"#自定义RedisTemplate\" class=\"headerlink\" title=\"自定义RedisTemplate\"></a>自定义RedisTemplate</h2><h3 id=\"一般情况下关于对象的保存\"><a href=\"#一般情况下关于对象的保存\" class=\"headerlink\" title=\"一般情况下关于对象的保存\"></a>一般情况下关于对象的保存</h3><p><em>JSON</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> JsonProcessingException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//真实开发一般使用Json传递对象</span></span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"string\">&quot;yn&quot;</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>().writeValueAsString(user);<span class=\"comment\">//将对象转换为Json</span></span><br><span class=\"line\">    redisTemplate.opsForValue().set(<span class=\"string\">&quot;user&quot;</span>,s);</span><br><span class=\"line\">    System.out.println(redisTemplate.opsForValue().get(<span class=\"string\">&quot;user&quot;</span>));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义RedisTemplate-1\"><a href=\"#自定义RedisTemplate-1\" class=\"headerlink\" title=\"自定义RedisTemplate\"></a>自定义RedisTemplate</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RedisConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//编写自己的redisTemplate</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"comment\">//    @ConditionalOnMissingBean(name = &quot;redisTemplate&quot;)</span></span><br><span class=\"line\"><span class=\"comment\">//    @ConditionalOnSingleCandidate(RedisConnectionFactory.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> RedisTemplate&lt;String, Object&gt; <span class=\"title function_\">redisTemplate</span><span class=\"params\">(RedisConnectionFactory redisConnectionFactory)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//为了开发方便，一般直接使用StringObject类型</span></span><br><span class=\"line\">        RedisTemplate&lt;String, Object&gt; template = <span class=\"keyword\">new</span> <span class=\"title class_\">RedisTemplate</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//序列化配置</span></span><br><span class=\"line\">        Jackson2JsonRedisSerializer&lt;Object&gt; objectJackson2JsonRedisSerializer = <span class=\"keyword\">new</span> <span class=\"title class_\">Jackson2JsonRedisSerializer</span>&lt;Object&gt;(Object.class);</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">om</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectMapper</span>();</span><br><span class=\"line\">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class=\"line\">        objectJackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">StringRedisSerializer</span> <span class=\"variable\">stringRedisSerializer</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringRedisSerializer</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//key使用String序列化方式</span></span><br><span class=\"line\">        template.setKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">//hashKey也使用String序列化方式</span></span><br><span class=\"line\">        template.setHashKeySerializer(stringRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">//value使用jackson</span></span><br><span class=\"line\">        template.setValueSerializer(objectJackson2JsonRedisSerializer);</span><br><span class=\"line\">        <span class=\"comment\">//hashValue使用Jackson</span></span><br><span class=\"line\">        template.setHashValueSerializer(objectJackson2JsonRedisSerializer);</span><br><span class=\"line\">        template.setConnectionFactory(redisConnectionFactory);</span><br><span class=\"line\">        template.afterPropertiesSet();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> template;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["Redis"]},{"title":"Redis restudy 4 Zset Geospatial Hyperloglog Bitmaps","url":"http://zswh33.github.io/2023/02/13/Redis-restudy-4/","content":"<h1 id=\"Zset（有序集合）\"><a href=\"#Zset（有序集合）\" class=\"headerlink\" title=\"Zset（有序集合）\"></a>Zset（有序集合）</h1><p>与set基本一致，在zset里，元素是有序的；</p>\n<p>对于每一个元素，都有一个score，来表现其排序先后。</p>\n<h2 id=\"zadd-zrange\"><a href=\"#zadd-zrange\" class=\"headerlink\" title=\"zadd, zrange\"></a>zadd, zrange</h2><p><code>zadd key score member [score member ...]</code>：score为优先级，会影响排序顺序。</p>\n<p><code>zrange key start stop</code>：查询索引为start-stop的所有值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd z1 1 one  <span class=\"comment\"># 添加值</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd z1 3 three 2 two <span class=\"comment\">#添加多个值</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange z1 0 -1  <span class=\"comment\">#查询范围</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;three&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"zrangebyscore-zrevrange\"><a href=\"#zrangebyscore-zrevrange\" class=\"headerlink\" title=\"zrangebyscore, zrevrange\"></a>zrangebyscore, zrevrange</h2><p>zrangebyscore key min max [WITHSCORES] [LIMIT offset count]：排序查询set内值，升序排序</p>\n<ul>\n<li>min，max：最小值，最大值<ul>\n<li>可以为 <code>-inf</code> <code>+inf</code>，无穷小，无穷大</li>\n</ul>\n</li>\n<li>WITHSCORES：返回结果包含score</li>\n<li><code>LIMIT offset count</code>：获取从指定位置开始的指定数量。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd salary 2500 ZhangSan</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd salary 5000 Lisi</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd salary 1234 yn</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zrangebyscore salary -inf +inf withscores  <span class=\"comment\"># 查询salary在-inf到+inf之间的值 并返回score</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;yn&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;1234&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;ZhangSan&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;2500&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;Lisi&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;5000&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrangebyscore salary -inf 2600 withscores <span class=\"comment\"># 查询salary在-inf到2600之间的值 并返回score</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;yn&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;1234&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;ZhangSan&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;2500&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>zrevrange key start stop [WITHSCORES]</code>：查询有序集合中，降序排序之后，<strong>元素索引</strong>在start-stop之间的值。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ZREVRANGE salary 0 -1 withscores</span><br><span class=\"line\">1) <span class=\"string\">&quot;Lisi&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;5000&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;ZhangSan&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;2500&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;yn&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;1234&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ZREVRANGE salary 1 -1 withscores</span><br><span class=\"line\">1) <span class=\"string\">&quot;ZhangSan&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;2500&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;yn&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;1234&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"zrem\"><a href=\"#zrem\" class=\"headerlink\" title=\"zrem\"></a>zrem</h2><p><code>zrem salary value</code>：移除有序集合的指定元素</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zrange salary 0 -1 withscores</span><br><span class=\"line\">1) <span class=\"string\">&quot;yn&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;1234&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;ZhangSan&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;2500&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;Lisi&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;5000&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrem salary yn</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange salary 0 -1 withscores</span><br><span class=\"line\">1) <span class=\"string\">&quot;ZhangSan&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;2500&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;Lisi&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;5000&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"zcard\"><a href=\"#zcard\" class=\"headerlink\" title=\"zcard\"></a>zcard</h2><p><code>zcard key</code>：获取有序集合元素个数</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zcard salary</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"zcount\"><a href=\"#zcount\" class=\"headerlink\" title=\"zcount\"></a>zcount</h2><p><code>zcount key min max</code>：获取score在min-max之间的值的数量。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zcount salary 2400 2600</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zcount salary 2400 6000</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>班级成绩表，工资表排序</p>\n<p>带权重消息列表</p>\n<p>排行榜</p>\n<h1 id=\"geospatial-地理位置\"><a href=\"#geospatial-地理位置\" class=\"headerlink\" title=\"geospatial 地理位置\"></a>geospatial 地理位置</h1><p><em>Redis 的 Geo</em></p>\n<p>特性：两级无法直接添加</p>\n<p>可以进行地理位置信息的计算，如两地之间的距离，方圆几里的人</p>\n<p>有效经度：-180~+180</p>\n<p>有效纬度：-85.05112878~+85.05112878</p>\n<p><code>geoadd, geodist, geohash, geopos, georaduis, georadiusbymember</code></p>\n<p>geo的底层实现是zset，可以使用zset的方式修改geo的元素。</p>\n<h2 id=\"geoadd\"><a href=\"#geoadd\" class=\"headerlink\" title=\"geoadd\"></a>geoadd</h2><p><code>geoadd key longitude latitude member [longitude latitude member ...]</code>：添加地理位置</p>\n<ul>\n<li>longitude，latitude：经度，纬度</li>\n<li>member：成员</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 116.40 39.90 BeiJing</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 121.47 31.23 ShangHai</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 106.50 29.53 ChongQing 114.05 22.52 ShenZhen</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 120.15 30.28 ZheJiang</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; geoadd china:city 108.96 34.26 XiAn</span><br><span class=\"line\">(integer) 1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"geopos\"><a href=\"#geopos\" class=\"headerlink\" title=\"geopos\"></a>geopos</h2><p><code>geopos key member [member ...]</code>：查询值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; geopos china:city BeiJing ChongQing</span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;116.39999896287918091&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;39.90000009167092543&quot;</span></span><br><span class=\"line\">2) 1) <span class=\"string\">&quot;106.49999767541885376&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;29.52999957900659211&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"geodist\"><a href=\"#geodist\" class=\"headerlink\" title=\"geodist\"></a>geodist</h2><p><code>geodist key member1 member2 [m|km|ft|mi]</code>  获取两地之间距离</p>\n<ul>\n<li>m 米；km千米；ft英尺；mi英里</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; geodist china:city BeiJing ChongQing km  <span class=\"comment\">#BeiJing到ChongQing距离</span></span><br><span class=\"line\"><span class=\"string\">&quot;1464.0708&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; geodist china:city ShangHai ShenZhen km</span><br><span class=\"line\"><span class=\"string\">&quot;1215.9224&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"georadius\"><a href=\"#georadius\" class=\"headerlink\" title=\"georadius\"></a>georadius</h2><p>在指定的经度和纬度对应位置上，查询指定半径上的成员</p>\n<p><code>georadius key longitude latitude radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count]</code></p>\n<ul>\n<li>radius，半径</li>\n<li>WITHCOORD：包含经度纬度</li>\n<li>WITHDIST：包含距离</li>\n<li>WITHHASH：包含hash值</li>\n<li>COUNT count：数量</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; georadius china:city 110 30 1000 km <span class=\"comment\">#获取以经纬度为110,30位置为中心，查询1000km附近的城市</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;ChongQing&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;XiAn&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;ShenZhen&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;ZheJiang&quot;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; georadius china:city 110 30 500 km WITHCOORD WITHDIST WITHHASH count 1 <span class=\"comment\">#获取500km，返回包含经纬度，距离和Hash，数量指定1.</span></span><br><span class=\"line\">1) 1) <span class=\"string\">&quot;ChongQing&quot;</span></span><br><span class=\"line\">   2) <span class=\"string\">&quot;341.9374&quot;</span></span><br><span class=\"line\">   3) (<span class=\"built_in\">integer</span>) 4026042091628984</span><br><span class=\"line\">   4) 1) <span class=\"string\">&quot;106.49999767541885376&quot;</span></span><br><span class=\"line\">      2) <span class=\"string\">&quot;29.52999957900659211&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"georadiusbymember\"><a href=\"#georadiusbymember\" class=\"headerlink\" title=\"georadiusbymember\"></a>georadiusbymember</h2><p><code>georadiusbymember key member radius m|km|ft|mi [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count]</code></p>\n<p>以member为中心，查询指定半径范围内的其他member。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; georadiusbymember china:city ChongQing 1000 km</span><br><span class=\"line\">1) <span class=\"string\">&quot;ChongQing&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;XiAn&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"geohash\"><a href=\"#geohash\" class=\"headerlink\" title=\"geohash\"></a>geohash</h2><p><code>geohash key member [member ...]</code>：查询member的geohash。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; geohash china:city ChongQing BeiJing</span><br><span class=\"line\">1) <span class=\"string\">&quot;wm5xzrybty0&quot;</span>   <span class=\"comment\">#11位</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;wx4fbxxfke0&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>将二维的经纬度转换为一维的字符串。</p>\n<h2 id=\"zset相关\"><a href=\"#zset相关\" class=\"headerlink\" title=\"zset相关\"></a>zset相关</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zrange china:city 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;ChongQing&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;XiAn&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;ShenZhen&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;ZheJiang&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;ShangHai&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;BeiJing&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; zrem china:city BeiJing</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange china:city 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;ChongQing&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;XiAn&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;ShenZhen&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;ZheJiang&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;ShangHai&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Hyperloglog基数统计\"><a href=\"#Hyperloglog基数统计\" class=\"headerlink\" title=\"Hyperloglog基数统计\"></a>Hyperloglog基数统计</h1><h2 id=\"基数\"><a href=\"#基数\" class=\"headerlink\" title=\"基数\"></a>基数</h2><p><em>不重复的元素数量</em></p>\n<h2 id=\"应用场景-1\"><a href=\"#应用场景-1\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>不重复用户访问量</p>\n<h2 id=\"为什么使用Hyperloglog\"><a href=\"#为什么使用Hyperloglog\" class=\"headerlink\" title=\"为什么使用Hyperloglog\"></a>为什么使用Hyperloglog</h2><p>网站UV：一个用户访问算作一个访问量，UV指的是访问过的人数；</p>\n<p>在传统的实现方式中，使用set集合存放用户的id，然后以set集合的元素数量作为判断。</p>\n<p>但是，这个方法不好！因为这个功能的目的是为了<strong>实现计数</strong>，而不是保存用户ID；</p>\n<p>基数统计，统计的结果不一定准确，但不需要保存用户ID。</p>\n<h2 id=\"优点\"><a href=\"#优点\" class=\"headerlink\" title=\"优点\"></a>优点</h2><ul>\n<li>占用内存固定<ul>\n<li>如2^63不同的元素，这里只需要<strong>12KB内存</strong>；</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ul>\n<li>误差0.81%<ul>\n<li>若统计一些允许这样误差的信息，则是可以的。</li>\n</ul>\n</li>\n<li><strong>最大数量2^63，占用内容12KB</strong>。</li>\n</ul>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><code>pfadd key element [element ...]</code>：向Hyperloglog的key中添加元素。</p>\n<p><code>pfcount key</code>：查询数量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; pfadd p1 a b c d e f g h i j k l m n</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; pfcount p1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 14</span><br><span class=\"line\">127.0.0.1:6379&gt; pfadd p1 a b c d e o p q</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; pfcount p1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 17</span><br></pre></td></tr></table></figure>\n\n<p><code>pfmerge destkey sourcekey [sourcekey ...]</code>：合并两个基数统计集合</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; pfadd p1 a b c d</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; pfadd p2 c d e f</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; pfmerge p3 p1 p2 <span class=\"comment\"># 合并p1和p2，存放到p3</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; pfcount p1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; pfcount p2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; pfcount p3</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Bitmaps\"><a href=\"#Bitmaps\" class=\"headerlink\" title=\"Bitmaps\"></a>Bitmaps</h1><p><em>位存储</em></p>\n<p>操作二进制位记录，只有0和1两个状态。</p>\n<h2 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><code>setbit key offset value</code>：设置key的offset位置的值为value；</p>\n<ul>\n<li>value只可以是0或1；</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; setbit sign 0 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit sign 1 0</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit sign 2 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br></pre></td></tr></table></figure>\n\n<p><code>getbit key offset</code>：获取key的offset位置的值；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; getbit sign 0</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit sign 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit sign 2</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br></pre></td></tr></table></figure>\n\n<p><code>bitcount key [start end]</code>：查询位为start-end中1的数量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; bitcount sign</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用场景-2\"><a href=\"#应用场景-2\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>统计打卡天数；</p>\n<ul>\n<li>设sign为 010，表示 周一没打卡，周二打卡了，周三没打卡</li>\n<li><code>bitcount sign</code>：统计打卡天数。</li>\n</ul>\n","categories":[],"tags":["Redis"]},{"title":"Redis restudy 3 List Set Hash","url":"http://zswh33.github.io/2023/02/11/Redis-restudy-3/","content":"<h1 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h1><p>列表。</p>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>栈，队列，阻塞队列。</p>\n<p>消息队列。</p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h3 id=\"lpush-rpush-lrange\"><a href=\"#lpush-rpush-lrange\" class=\"headerlink\" title=\"lpush, rpush, lrange\"></a>lpush, rpush, lrange</h3><p><code>lpush key value [value ...]</code>：向key列表的头部插入值；</p>\n<p><code>rpush key value [value ...]</code>：向key列表的尾部插入值</p>\n<p><code>lrange key a b</code>：查询key列表a-b的值，</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush l1 one <span class=\"comment\">#在列表头部插入值</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush l1 two</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush l1 three four</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange l1 0 -1  <span class=\"comment\">#查询列表中所有值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;four&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange l1 0 1  <span class=\"comment\"># 查询列表中0-1的值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;four&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpush l1 five  <span class=\"comment\"># 列表尾部插入值</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange l1 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;four&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;five&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lpop-rpop\"><a href=\"#lpop-rpop\" class=\"headerlink\" title=\"lpop, rpop\"></a>lpop, rpop</h3><p><code>lpop key</code>：移除列表头部的元素</p>\n<p><code>rpop key</code>：移除列表尾部的元素</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange l1 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;four&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;five&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lpop l1</span><br><span class=\"line\"><span class=\"string\">&quot;four&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpop l1</span><br><span class=\"line\"><span class=\"string\">&quot;five&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange l1 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lindex-llen\"><a href=\"#lindex-llen\" class=\"headerlink\" title=\"lindex, llen\"></a>lindex, llen</h3><p><code>lindex key index</code>：获取key中index位置的值。</p>\n<p><code>llen key</code>：获取列表的长度。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange l1 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lindex l1 2  <span class=\"comment\"># 获取index为2的值</span></span><br><span class=\"line\"><span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; llen l1 <span class=\"comment\"># 获取列表长度</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lrem\"><a href=\"#lrem\" class=\"headerlink\" title=\"lrem\"></a>lrem</h3><p><code>lrem key count value </code>：移除指定数量的value值。精确匹配。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush l1 one two three one one  <span class=\"comment\"># 向列表l1插入值</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange l1 0 -1  <span class=\"comment\"># 获取值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrem l1 1 three  <span class=\"comment\">#移除1个three</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; lrem l1 2 one  <span class=\"comment\"># 移除2个one</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange l1 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;one&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p><code>ltrim key start stop</code>：裁剪列表，保留start-stop中的元素；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush l1 one two three four five</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange l1 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;five&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;four&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; ltrim l1 1 3  <span class=\"comment\"># 裁剪列表，留下index为1-3的元素</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange l1 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;four&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;two&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"rpoplpush\"><a href=\"#rpoplpush\" class=\"headerlink\" title=\"rpoplpush\"></a>rpoplpush</h3><p><code>rpoplpush source destination</code>：从列表source的尾部取出元素，插入到列表destination列表的尾部；</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange l1 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;four&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; rpoplpush l1 l2</span><br><span class=\"line\"><span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange l1 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;four&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lrange l2 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;two&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lset\"><a href=\"#lset\" class=\"headerlink\" title=\"lset\"></a>lset</h3><p><code>lset key index value</code> ：设置index位置的值为value</p>\n<ul>\n<li>只能设置key存在的列表，若key不存在则报错<ul>\n<li>(error) ERR no such key</li>\n</ul>\n</li>\n<li>不返回原值。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush l1 one two three</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange l1 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lset l1 1 four <span class=\"comment\"># 设置index为1的值为four</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange l1 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;four&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"linsert\"><a href=\"#linsert\" class=\"headerlink\" title=\"linsert\"></a>linsert</h3><p><code>linsert key BEFORE|AFTER pivot element</code></p>\n<ul>\n<li>向值为pivot的位置的前面或后面插入值element。</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange l1 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;four&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; linsert l1 before four other <span class=\"comment\"># 向four的前面插入other</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange l1 0 -1</span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;other&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;four&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;one&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ol>\n<li>本质为一个“链表”</li>\n<li>在两边插入或改动值，效率最高！</li>\n</ol>\n<h1 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h1><p>集合</p>\n<p>set中的值不能重复。</p>\n<h2 id=\"sadd-smembers-sismember-scard\"><a href=\"#sadd-smembers-sismember-scard\" class=\"headerlink\" title=\"sadd, smembers, sismember, scard\"></a>sadd, smembers, sismember, scard</h2><p><code>sadd key value [value ...]</code>：向集合添加元素</p>\n<p><code>smembers key</code>：查看元素成员列表</p>\n<p><code>sismember key value</code>：查询value是否为key集合的成员</p>\n<p><code>scard key</code>：获取集合中成员数量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd s1 hello  <span class=\"comment\"># 向集合添加元素</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd s1 yn</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd s1 llllyn</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers s1  <span class=\"comment\"># 查询集合成员</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;yn&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;llllyn&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; sismember s1 hello <span class=\"comment\"># 查看集合中是否存在某个值</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sismember s1 word</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; scard s1  <span class=\"comment\">#获取s1集合中成员数量</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"srem\"><a href=\"#srem\" class=\"headerlink\" title=\"srem\"></a>srem</h2><p><code>srem key value</code>：移除指定值</p>\n<p><code>srandmember key count</code>：随机取出集合中元素，count为数量，count默认为1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; smembers s1  <span class=\"comment\">#获取集合s1成员</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;yn&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;llllyn&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; srem s1 yn  <span class=\"comment\"># 移除s1中值为yn的成员</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers s1  <span class=\"comment\">#获取集合s1中成员</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;llllyn&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER s1 <span class=\"comment\"># 在集合s1中随机取出元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;llllyn&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER s1</span><br><span class=\"line\"><span class=\"string\">&quot;llllyn&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER s1</span><br><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; SRANDMEMBER s1 2</span><br><span class=\"line\">1) <span class=\"string\">&quot;llllyn&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"spop\"><a href=\"#spop\" class=\"headerlink\" title=\"spop\"></a>spop</h2><p><code>spop key [count]</code>：随机弹出元素，count为数量</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; smembers s1</span><br><span class=\"line\">1) <span class=\"string\">&quot;llllyn&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;four&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; spop s1 <span class=\"comment\"># 随机删除元素</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; spop s1</span><br><span class=\"line\"><span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; spop s1 2</span><br><span class=\"line\">1) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;four&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"smove\"><a href=\"#smove\" class=\"headerlink\" title=\"smove\"></a>smove</h2><p><code>smove key1 key2 value</code>：将一个集合中指定的值移动到另一个集合中。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; smembers s1  <span class=\"comment\"># s1集合中</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; smembers s2  <span class=\"comment\"># s2集合中</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; smove s1 s2 two  <span class=\"comment\">#将s1集合中two移动到s2集合中</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers s1  </span><br><span class=\"line\">1) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; smembers s2</span><br><span class=\"line\">1) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;three&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sdiff-sinter-sunion\"><a href=\"#sdiff-sinter-sunion\" class=\"headerlink\" title=\"sdiff, sinter, sunion\"></a>sdiff, sinter, sunion</h2><p><code>sdiff set1 set2</code>：获得set1与set2的差集</p>\n<p><code>sinter s1 s2</code>：查询s1和s2的交集</p>\n<p><code>sunion s1 s2</code>：查询s1和s2的并集</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd s1 a b c</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd s2 c d e</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; sdiff s1 s2  <span class=\"comment\"># 差集</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; sinter s1 s2  <span class=\"comment\"># 交集</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; sunion s1 s2  <span class=\"comment\">#并集</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;b&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;c&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;e&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;a&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;d&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Hash（哈希）\"><a href=\"#Hash（哈希）\" class=\"headerlink\" title=\"Hash（哈希）\"></a>Hash（哈希）</h1><p><code>key-&lt;key-value&gt;</code>  <code>key-Map</code></p>\n<p>值为map集合；</p>\n<h2 id=\"hset-hget-hmget-hmset-hgetall\"><a href=\"#hset-hget-hmget-hmset-hgetall\" class=\"headerlink\" title=\"hset, hget, hmget, hmset, hgetall\"></a>hset, hget, hmget, hmset, hgetall</h2><p><code>hset key field value</code>：设置值</p>\n<p><code>hget key field</code>：获取值</p>\n<p><code>hmset key field value [field value ...]</code>：设置多个值</p>\n<p><code>hmget key field [field...]</code>：获取多个值</p>\n<p><code>hgetall key</code>：获取所有值</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hset h1 f1 hello  <span class=\"comment\">#设置h1哈希的f1值为hello</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hget h1 f1  <span class=\"comment\">#获取h1哈希的f1值</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hmset h1 f2 world f3 one f4 two  <span class=\"comment\">#设置多个值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget h1 f1 f2 f3 f4  <span class=\"comment\">#获取多个值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall h1  <span class=\"comment\">#获取所有值</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;f1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;f2&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;world&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;f3&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">7) <span class=\"string\">&quot;f4&quot;</span></span><br><span class=\"line\">8) <span class=\"string\">&quot;two&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hdel-hlen\"><a href=\"#hdel-hlen\" class=\"headerlink\" title=\"hdel, hlen\"></a>hdel, hlen</h2><p><code>hdel key field [field ...]</code>：删除指定key的field，对应value同时会消失</p>\n<p><code>hlen key</code>：获取hash长度</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hdel h1 f1 f2 f3  <span class=\"comment\">#删除h1的f1，f2，f3</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall h1 <span class=\"comment\">#获取h1的所有字段</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;f4&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hlen h1  <span class=\"comment\">#获取h1的长度</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hset h1 f1 one f2 three  <span class=\"comment\">#添加字段</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; hlen h1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br></pre></td></tr></table></figure>\n\n<p><code>hexists key field</code>：判断key的field是否存在</p>\n<p><code>hkeys key</code>：获取所有field</p>\n<p><code>hvals key</code>：获取所有values</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hgetall h1</span><br><span class=\"line\">1) <span class=\"string\">&quot;f4&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;f1&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">5) <span class=\"string\">&quot;f2&quot;</span></span><br><span class=\"line\">6) <span class=\"string\">&quot;three&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hexists h1 f1  <span class=\"comment\">#查看f1是否存在</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hexists h1 f5  <span class=\"comment\">#查看f5是否存在</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; hkeys h1  <span class=\"comment\">#获取h1的所有field</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;f4&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;f1&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;f2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hvals h1  <span class=\"comment\">#获取h1的所有value</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;two&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;one&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;three&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hincrby-hsetnx\"><a href=\"#hincrby-hsetnx\" class=\"headerlink\" title=\"hincrby, hsetnx\"></a>hincrby, hsetnx</h2><p><code>hincrby key field increment</code>：执行自增，可以指定增量</p>\n<p><code>hsetnx key field value</code>：与set一致，不同的是仅用于“key值不存在”时，若存在则不进行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hset h2 f1 3  <span class=\"comment\"># 设置值</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hincrby h2 f1 10  <span class=\"comment\">#值自增，指定增量为10</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 13</span><br><span class=\"line\">127.0.0.1:6379&gt; hget h2 f1  <span class=\"comment\">#获取值</span></span><br><span class=\"line\"><span class=\"string\">&quot;13&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hsetnx h2 f2 4  <span class=\"comment\">#若f2不存在，则进行</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1  <span class=\"comment\">#进行成功</span></span><br><span class=\"line\">127.0.0.1:6379&gt; hsetnx h2 f2 10  <span class=\"comment\">#上面有f2了</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0  <span class=\"comment\">#失败</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"技巧\"><a href=\"#技巧\" class=\"headerlink\" title=\"技巧\"></a>技巧</h2><h3 id=\"对象存储\"><a href=\"#对象存储\" class=\"headerlink\" title=\"对象存储\"></a>对象存储</h3><p>设置user的id为1的用户，name为ZhangSan，age为16。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hset user:1 name ZhangSan</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hset user:1 age 16</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall user:1</span><br><span class=\"line\">1) <span class=\"string\">&quot;name&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;ZhangSan&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;age&quot;</span></span><br><span class=\"line\">4) <span class=\"string\">&quot;16&quot;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","categories":[],"tags":["Redis"]},{"title":"Redis restudy 2 基础 Redis-key String","url":"http://zswh33.github.io/2023/02/11/Redis-restudy-2/","content":"<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1><p>Redis,<strong>Re</strong>mote <strong>Di</strong>ctionary <strong>S</strong>erver，远程字典服务</p>\n<p>6379</p>\n<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><h3 id=\"是什么\"><a href=\"#是什么\" class=\"headerlink\" title=\"是什么\"></a>是什么</h3><p>是一个开源的使用ANSI C语言编写、支持网络，可基于内存亦可持久化的日志型、Key-Value数据库，并提供给多种语言的API。</p>\n<p>当下最热门的NoSQL技术之一，也被人们称为结构化数据库。</p>\n<h3 id=\"能做什么\"><a href=\"#能做什么\" class=\"headerlink\" title=\"能做什么\"></a>能做什么</h3><ol>\n<li><p>内存存储、持久化，内存中是断电即逝的，持久化很重要</p>\n<p>持久化，即rdb，aof</p>\n</li>\n<li><p>效率高，可以用于高速缓存</p>\n</li>\n<li><p>发布订阅系统</p>\n</li>\n<li><p>地图信息分析</p>\n</li>\n<li><p>计时器，计数器（浏览量）</p>\n</li>\n<li><p>…</p>\n</li>\n</ol>\n<h2 id=\"特性\"><a href=\"#特性\" class=\"headerlink\" title=\"特性\"></a>特性</h2><ol>\n<li>多样的数据类型</li>\n<li>持久化</li>\n<li>集群</li>\n<li>事务</li>\n<li>…</li>\n</ol>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ping  <span class=\"comment\">#测试连接</span></span><br><span class=\"line\">PONG</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> name yn <span class=\"comment\">#设置值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br><span class=\"line\">127.0.0.1:6379&gt; get name  <span class=\"comment\">#获取值</span></span><br><span class=\"line\"><span class=\"string\">&quot;yn&quot;</span></span><br></pre></td></tr></table></figure>\n\n <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yyn@yynlinux:~$ ps -ef | grep redis  <span class=\"comment\">#查看进程列表并筛选redis</span></span><br><span class=\"line\">redis        673       1  0 09:56 ?        00:00:48 /usr/bin/redis-server 0.0.0.0:6379</span><br><span class=\"line\">yyn         9224    9029  0 11:20 pts/0    00:00:00 grep --color=auto redis</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"测试性能\"><a href=\"#测试性能\" class=\"headerlink\" title=\"测试性能\"></a>测试性能</h2><p>redis-benchmark</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-h 指定服务器主机名 127.0.0.1</span><br><span class=\"line\">-p 指定服务器端口 6379</span><br><span class=\"line\">-s 指定服务器socket</span><br><span class=\"line\">-c 指定并发连接数 50</span><br><span class=\"line\">-n 指定请求数 10000</span><br><span class=\"line\">-d 以字节形式指定SET/GET数据大小 2</span><br><span class=\"line\">-k 1=keep alive   0=reconnect</span><br><span class=\"line\">-r <span class=\"built_in\">set</span>/get/incr使用随机key，SADD使用随机值</span><br><span class=\"line\">-P 通过管道传输&lt;numreq&gt;请求</span><br><span class=\"line\">-q 强制退出redis，仅显示query/sec值</span><br><span class=\"line\">-csv 以csv格式输出</span><br><span class=\"line\">-l 生成循环，永久执行测试</span><br><span class=\"line\">-t 仅运行以逗号分割的测试命令列表</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 测试100个并发连接， 100000请求</span></span><br><span class=\"line\">redis-benchmark -h localhost -p 6379 -c 100 -n 100000</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@yynlinux:~<span class=\"comment\"># redis-benchmark -h localhost -p 6379 -c 100 -n 10000</span></span><br><span class=\"line\">====== PING_INLINE ======</span><br><span class=\"line\">  10000 requests completed <span class=\"keyword\">in</span> 3.77 seconds <span class=\"comment\"># 10000请求</span></span><br><span class=\"line\">  100 parallel clients  <span class=\"comment\"># 100并发客户端</span></span><br><span class=\"line\">  3 bytes payload  <span class=\"comment\"># 每次写入3字节</span></span><br><span class=\"line\">  keep alive: 1  <span class=\"comment\"># 只有一台服务器处理这些请求，单机性能</span></span><br><span class=\"line\">  host configuration <span class=\"string\">&quot;save&quot;</span>: 900 1 300 10 60 10000 </span><br><span class=\"line\">  host configuration <span class=\"string\">&quot;appendonly&quot;</span>: no</span><br><span class=\"line\">  multi-thread: no</span><br><span class=\"line\"></span><br><span class=\"line\">0.01% &lt;= 6 milliseconds</span><br><span class=\"line\">0.02% &lt;= 7 milliseconds</span><br><span class=\"line\">0.17% &lt;= 8 milliseconds</span><br><span class=\"line\">...</span><br><span class=\"line\">100.00% &lt;= 56 milliseconds <span class=\"comment\"># 所有请求在56毫秒内处理完成</span></span><br><span class=\"line\">2655.34 requests per second <span class=\"comment\">#每秒处理2655个请求</span></span><br><span class=\"line\"></span><br><span class=\"line\">====== PING_BULK ======</span><br><span class=\"line\">  10000 requests completed <span class=\"keyword\">in</span> 3.72 seconds</span><br><span class=\"line\">  100 parallel clients</span><br><span class=\"line\">  3 bytes payload</span><br><span class=\"line\">  keep alive: 1</span><br><span class=\"line\">  host configuration <span class=\"string\">&quot;save&quot;</span>: 900 1 300 10 60 10000</span><br><span class=\"line\">  host configuration <span class=\"string\">&quot;appendonly&quot;</span>: no</span><br><span class=\"line\">  multi-thread: no</span><br><span class=\"line\"></span><br><span class=\"line\">0.01% &lt;= 7 milliseconds</span><br><span class=\"line\">0.33% &lt;= 8 milliseconds</span><br><span class=\"line\">...</span><br><span class=\"line\">99.94% &lt;= 73 milliseconds</span><br><span class=\"line\">100.00% &lt;= 74 milliseconds</span><br><span class=\"line\">2687.45 requests per second</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h2><p>Redis默认有16个数据库。默认使用第0个数据库；</p>\n<p>使用select进行数据库切换。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; select 1 <span class=\"comment\">#切换到数据库1</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379[1]&gt; select 2  <span class=\"comment\">#切换到数据库2</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379[2]&gt; <span class=\"built_in\">set</span> name yn  <span class=\"comment\">#设置一个值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379[2]&gt; dbsize <span class=\"comment\">#查看当前数据库大小</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379[2]&gt; keys * <span class=\"comment\">#查看所有的key</span></span><br><span class=\"line\">1) <span class=\"string\">&quot;name&quot;</span></span><br><span class=\"line\">127.0.0.1:6379[2]&gt; get name</span><br><span class=\"line\"><span class=\"string\">&quot;yn&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>select，进行数据库切换</p>\n</li>\n<li><p>dbsize，查看当前数据库大小</p>\n</li>\n<li><p><code>keys *</code> ，查看当前数据库所有的key</p>\n</li>\n<li><p>flushdb，清空当前数据库</p>\n</li>\n<li><p>flushall，清除所有数据库内容</p>\n</li>\n</ul>\n<h2 id=\"Redis是单线程的\"><a href=\"#Redis是单线程的\" class=\"headerlink\" title=\"Redis是单线程的\"></a>Redis是单线程的</h2><p>Redis很快。</p>\n<p>官方表示：Redis基于内存操作，CPU不是Redis性能瓶颈，Redis瓶颈是机器内存和网络带宽，既然可以使用单线程，所以就使用单线程了。</p>\n<p>Redis为什么单线程这么快？</p>\n<p>Redis是将所有数据全部放在内存中的，使用单线程去操作效率就是最高的，多线程会上下文切换，对于内存系统来说，如果没有上下文切换，效率就是最高的。多次读写都是在一个CPU，在内存情况下，单线程就是最佳方案。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>可以用作：<strong>数据库</strong>、<strong>缓存</strong>和<strong>消息中间件</strong></p>\n<p>支持strings字符串，hashes散列，lists列表，sets集合，sorted sets有序集合与范围查询；</p>\n<p>bitmaps，hyperloglogs和geospatial地理空间索引半径查询。</p>\n<p>内置复制replication、LUA脚本、LRU驱动事件，事务和不同级别的磁盘持久化；</p>\n<p>并通过Redis哨兵Sentinel和自动分区Cluster提高可用性。</p>\n<h2 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h2><p>五大数据类型：Redis-key，String，List，Set，Hash，Zset</p>\n<p>三种特殊数据类型：geospatial，hyperloglogs，bitmaps</p>\n<h1 id=\"–\"><a href=\"#–\" class=\"headerlink\" title=\"–\"></a>–</h1><h1 id=\"Redis-Key\"><a href=\"#Redis-Key\" class=\"headerlink\" title=\"Redis-Key\"></a>Redis-Key</h1><h2 id=\"exists，查看键值是存在。\"><a href=\"#exists，查看键值是存在。\" class=\"headerlink\" title=\"exists，查看键值是存在。\"></a>exists，查看键值是存在。</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> name yn</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; exists name  <span class=\"comment\"># 查看name是否存在</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1  <span class=\"comment\"># 1表示存在</span></span><br><span class=\"line\">127.0.0.1:6379&gt; exists names</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 0 <span class=\"comment\"># 0表示不存在</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"move，移动数据到指定数据库\"><a href=\"#move，移动数据到指定数据库\" class=\"headerlink\" title=\"move，移动数据到指定数据库\"></a>move，移动数据到指定数据库</h2><p><code>move name 1</code>将name移动到数据库1</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\"><span class=\"string\">&quot;yn&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; move name 1</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; select 1</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379[1]&gt; get name</span><br><span class=\"line\"><span class=\"string\">&quot;yn&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"expire，设置过期\"><a href=\"#expire，设置过期\" class=\"headerlink\" title=\"expire，设置过期\"></a>expire，设置过期</h2><p><code>expire key seconds</code>: 设置key到seconds秒后过期</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\"><span class=\"string\">&quot;yn&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; expire name 10 <span class=\"comment\"># 设置name在10秒后过期</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\"><span class=\"string\">&quot;yn&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; get name  <span class=\"comment\">#10秒后</span></span><br><span class=\"line\">(nil)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ttl，查看剩余多长时间\"><a href=\"#ttl，查看剩余多长时间\" class=\"headerlink\" title=\"ttl，查看剩余多长时间\"></a>ttl，查看剩余多长时间</h2><p><code>ttl key </code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> name yn</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; ttl name</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -1</span><br><span class=\"line\">127.0.0.1:6379&gt; expire name 10</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; ttl name</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 8</span><br><span class=\"line\">127.0.0.1:6379&gt; ttl name</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; ttl name</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; ttl name</span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) -2</span><br><span class=\"line\">127.0.0.1:6379&gt; get name</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"type，查看数据类型\"><a href=\"#type，查看数据类型\" class=\"headerlink\" title=\"type，查看数据类型\"></a>type，查看数据类型</h2><p><code>type key</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> name yn</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">type</span> name</span><br><span class=\"line\">string</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"String（字符串）\"><a href=\"#String（字符串）\" class=\"headerlink\" title=\"String（字符串）\"></a>String（字符串）</h1><h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h3 id=\"设置，获取，追加，获取长度\"><a href=\"#设置，获取，追加，获取长度\" class=\"headerlink\" title=\"设置，获取，追加，获取长度\"></a>设置，获取，追加，获取长度</h3><ul>\n<li><p><code>set key value</code>：设置值</p>\n</li>\n<li><p><code>get key</code> ：获取值</p>\n</li>\n<li><p><code>append key value</code>：在字符串后面追加值</p>\n<ul>\n<li>若key不存在，则新建key，然后值为追加的值。（相当于set key）</li>\n</ul>\n</li>\n<li><p><code>strlen</code>: 获取字符串长度</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> name zhang  <span class=\"comment\">#设置name值为zhang</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get name  <span class=\"comment\"># 获取name的值</span></span><br><span class=\"line\"><span class=\"string\">&quot;zhang&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; strlen name  <span class=\"comment\"># 获取name值的长度</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; append name San  <span class=\"comment\">#在name值后面追加San</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 8</span><br><span class=\"line\">127.0.0.1:6379&gt; strlen name <span class=\"comment\"># 获取name值的长度</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 8</span><br><span class=\"line\">127.0.0.1:6379&gt; get name <span class=\"comment\"># 获取name值</span></span><br><span class=\"line\"><span class=\"string\">&quot;zhangSan&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自增，自减，步长\"><a href=\"#自增，自减，步长\" class=\"headerlink\" title=\"自增，自减，步长\"></a>自增，自减，步长</h3><ul>\n<li><code>incr key</code>：若key对应值为一个整数，则实现自增1</li>\n<li><code>decr key</code>：自减1</li>\n<li><code>incrby key increment</code>：自增，可以指定步长</li>\n<li><code>decrby key increment</code>：自减，可以指定步长</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> views 0  <span class=\"comment\">#设置值  （初始浏览量为0）</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br><span class=\"line\">127.0.0.1:6379&gt; incr views  <span class=\"comment\"># 自增  （浏览量变为1）</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; incr views  </span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; get views <span class=\"comment\">#获取值   </span></span><br><span class=\"line\"><span class=\"string\">&quot;2&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; decr views  <span class=\"comment\">#自减</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; get views</span><br><span class=\"line\"><span class=\"string\">&quot;1&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; incrby views 6 <span class=\"comment\"># 自增，步长为6     </span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 7</span><br><span class=\"line\">127.0.0.1:6379&gt; decrby views 4 <span class=\"comment\"># 自减，步长为4</span></span><br><span class=\"line\">(<span class=\"built_in\">integer</span>) 3</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"截取，替换\"><a href=\"#截取，替换\" class=\"headerlink\" title=\"截取，替换\"></a>截取，替换</h3><ul>\n<li><code>getrange key a b</code>：获取key对应值从a到b的所有内容（包括a且包括b）；</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; <span class=\"built_in\">set</span> key1 <span class=\"string\">&quot;hello,ZhangSan&quot;</span> <span class=\"comment\">#设置值</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get key1</span><br><span class=\"line\"><span class=\"string\">&quot;hello,ZhangSan&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; getrange key1 0 3  <span class=\"comment\">#截取字符串</span></span><br><span class=\"line\"><span class=\"string\">&quot;hell&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; getrange key1 0 -1  <span class=\"comment\"># -1表示倒数第1个字符</span></span><br><span class=\"line\"><span class=\"string\">&quot;hello,ZhangSan&quot;</span></span><br><span class=\"line\">127.0.0.1:6379&gt; getrange key1 -3 -1 <span class=\"comment\"># 截取字符串 倒数第3个字符到倒数第1个字符的内容</span></span><br><span class=\"line\"><span class=\"string\">&quot;San&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>setrange key offset value</code>：从offset开始，替换为value。替换指定位置开始的字符串。</li>\n</ul>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"punctuation\">:</span><span class=\"number\">6379</span>&gt; get key1</span><br><span class=\"line\"><span class=\"string\">&quot;hello,ZhangSan&quot;</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"punctuation\">:</span><span class=\"number\">6379</span>&gt; setrange key1 <span class=\"number\">3</span> xxxx</span><br><span class=\"line\">(integer) <span class=\"number\">14</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span><span class=\"punctuation\">:</span><span class=\"number\">6379</span>&gt; get key1</span><br><span class=\"line\"><span class=\"string\">&quot;helxxxxhangSan&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置值同时设置过期时间\"><a href=\"#设置值同时设置过期时间\" class=\"headerlink\" title=\"设置值同时设置过期时间\"></a>设置值同时设置过期时间</h3><ul>\n<li><p>setex (set with expire)：设置值的同时设置过期时间</p>\n<ul>\n<li><p>setex key expire value</p>\n</li>\n<li><p>&#96;&#96;&#96;bash<br>127.0.0.1:6379&gt; setex key3 60 qqweasd  #设置key3的值，过期时间为60秒<br>OK<br>127.0.0.1:6379&gt; get key3<br>“qqweasd”<br>127.0.0.1:6379&gt; ttl key3<br>(integer) 50<br>127.0.0.1:6379&gt; ttl key3<br>(integer) 48</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 若值不存在则设置，否则失败</span><br><span class=\"line\"></span><br><span class=\"line\">- setnx (set if nost exist)：不存在则进行set</span><br><span class=\"line\"></span><br><span class=\"line\">  - setnx key value</span><br><span class=\"line\"></span><br><span class=\"line\">  - 在分布式锁中会常常使用。</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```bash</span><br><span class=\"line\">    127.0.0.1:6379&gt; mget key4 key5  #  key4值为qqqwwweeee，key5没有值</span><br><span class=\"line\">    1) &quot;qqqwwweeee&quot;</span><br><span class=\"line\">    2) (nil)</span><br><span class=\"line\">    127.0.0.1:6379&gt; setnx key4 qweasd  # 设置key4值为qweasd</span><br><span class=\"line\">    (integer) 0  #失败</span><br><span class=\"line\">    127.0.0.1:6379&gt; setnx key5 aaaaaa  # 设置key5值为aaaaaa</span><br><span class=\"line\">    (integer) 1  #成功</span><br><span class=\"line\">    127.0.0.1:6379&gt; mget key4 key5</span><br><span class=\"line\">    1) &quot;qqqwwweeee&quot;  # key4并没有被set</span><br><span class=\"line\">    2) &quot;aaaaaa&quot;  # key5值set成功</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"mset-mget-msetnx\"><a href=\"#mset-mget-msetnx\" class=\"headerlink\" title=\"mset, mget, msetnx\"></a>mset, mget, msetnx</h3><ul>\n<li><code>mset key value [key value ...]</code>：可以一次设置多个值；</li>\n<li><code>mget key [key ...]</code>：可以一次获取多个值</li>\n<li><code>msetnx key value [key value ...]</code>：设置多个值，若值不存在则设置。<ul>\n<li><strong>这是一个原子性操作</strong>，要么一起成功，要么一起失败。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; mset k1 v1 k2 v2 k3 v3 <span class=\"comment\"># 设置 k1=v1 k2=v2 k3=v3</span></span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; mget k1 k2 k3  <span class=\"comment\"># 获取多个值  </span></span><br><span class=\"line\">1) <span class=\"string\">&quot;v1&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;v2&quot;</span></span><br><span class=\"line\">3) <span class=\"string\">&quot;v3&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"getset\"><a href=\"#getset\" class=\"headerlink\" title=\"getset\"></a>getset</h3><ul>\n<li><code>getset key value</code>：获取值并设置值<ul>\n<li>若key不存在，则创建并赋值，返回nil</li>\n<li>若key存在，返回值并修改值</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; get k1</span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; getset k1 qweasd  <span class=\"comment\"># 获取值，但是k1没有值，此时设置值</span></span><br><span class=\"line\">(nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; get k1</span><br><span class=\"line\"><span class=\"string\">&quot;qweasd&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可以存放什么，可以做什么\"><a href=\"#可以存放什么，可以做什么\" class=\"headerlink\" title=\"可以存放什么，可以做什么\"></a>可以存放什么，可以做什么</h2><p>字符串，数字</p>\n<p>应用场景：计数器，统计数量，粉丝数，对象存储。</p>\n<h2 id=\"使用技巧\"><a href=\"#使用技巧\" class=\"headerlink\" title=\"使用技巧\"></a>使用技巧</h2><p>技巧不是Redis的基础知识，只是Redis的一些使用技巧。</p>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><p>可以通过“POJO：ID：KEY”的方式设计一个对象，如：</p>\n<p><code>mset user:1:name zhangsan user:1:age 2</code></p>\n<p>设计了一个 user的id为1，属性为：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span><span class=\"attr\">&quot;name&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;zhangsan&quot;</span><span class=\"punctuation\">,</span><span class=\"attr\">&quot;age&quot;</span><span class=\"punctuation\">:</span><span class=\"number\">2</span><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>的一个对象。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; mset user:1:name zhangsan user:1:age 4</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; mget user:1:name user:1:age</span><br><span class=\"line\">1) <span class=\"string\">&quot;zhangsan&quot;</span></span><br><span class=\"line\">2) <span class=\"string\">&quot;4&quot;</span></span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":["Redis"]},{"title":"Redis restudy 1 NoSQL","url":"http://zswh33.github.io/2023/02/11/Redis-restudy-1/","content":"<h1 id=\"NoSQL概述\"><a href=\"#NoSQL概述\" class=\"headerlink\" title=\"NoSQL概述\"></a>NoSQL概述</h1><p>为什么要用Nosql：大数据</p>\n<h2 id=\"发展\"><a href=\"#发展\" class=\"headerlink\" title=\"发展\"></a>发展</h2><blockquote>\n<ol>\n<li>单机MySQL年代</li>\n</ol>\n</blockquote>\n<p><img src=\"/2023/02/11/Redis-restudy-1/%E5%8D%95%E6%9C%BASQL.svg\" alt=\"单机SQL\"></p>\n<p>网站瓶颈：</p>\n<ol>\n<li>数据量太大，一个机器放不下；</li>\n<li>数据索引（B+ Tree）一个机器内存放不下；</li>\n<li>访问量太大；</li>\n</ol>\n<blockquote>\n<ol start=\"2\">\n<li>Memcached（缓存） + MySQL + 垂直拆分</li>\n</ol>\n</blockquote>\n<p>优化发展过程：</p>\n<ol>\n<li>优化数据结构和索引；</li>\n<li>文件缓存（IO）；</li>\n<li><strong>Memcached</strong>。（当时最热门的技术）</li>\n</ol>\n<p><img src=\"/2023/02/11/Redis-restudy-1/Memcached.svg\" alt=\"Memcached\"></p>\n<ul>\n<li>网站80%的情况都是在读，每次到数据库查询非常麻烦；为减轻数据库压力，可以设置<strong>缓存</strong>。</li>\n</ul>\n<p><img src=\"/2023/02/11/Redis-restudy-1/3.svg\" alt=\"3\"></p>\n<blockquote>\n<ol start=\"3\">\n<li>分库分表：水平拆分</li>\n</ol>\n</blockquote>\n<p>水平拆分：Mysql集群。</p>\n<p><img src=\"/2023/02/11/Redis-restudy-1/4.svg\" alt=\"4\"></p>\n<h2 id=\"为什么要用NoSQL\"><a href=\"#为什么要用NoSQL\" class=\"headerlink\" title=\"为什么要用NoSQL\"></a>为什么要用NoSQL</h2><p>用户个人信息，社交网络，地理位置。用户自己产生的数据，用户日志等等爆发式的增长！</p>\n<p>NoSQL可以很好地处理以上的情况；</p>\n<h2 id=\"什么是NoSQL\"><a href=\"#什么是NoSQL\" class=\"headerlink\" title=\"什么是NoSQL\"></a>什么是NoSQL</h2><p>NoSQL &#x3D; Not Only SQL （不仅仅是SQL）</p>\n<p>泛指：非关系型数据库</p>\n<p>随着Web2.0互联网的诞生，传统的关系型数据库已难以应付，尤其是超大规模的高并发的社区！</p>\n<p>很多数据类型用户的个人信息，社交网络，地理位置。这些数据类型的存储不需要一个固定的格式。不需要多余的操作就可以横向扩展的。使用键值对来控制。</p>\n<h2 id=\"NoSQL特点\"><a href=\"#NoSQL特点\" class=\"headerlink\" title=\"NoSQL特点\"></a>NoSQL特点</h2><ol>\n<li>方便扩展（数据之间没有关系，扩展方便！）</li>\n<li>大数据量高性能（Redis 一秒可以写8万次）</li>\n<li>数据类型多样型</li>\n<li>传统RDBMS与NoSQL区别<ul>\n<li>RDBMS<ul>\n<li>结构化组织</li>\n<li>SQL</li>\n<li>数据和关系都存储在单独的表中 row col</li>\n<li>数据操作语言，数据定义语言</li>\n<li>严格的一致性</li>\n<li>基础的事务操作</li>\n<li>…</li>\n</ul>\n</li>\n<li>NoSQL<ul>\n<li>不仅仅是数据</li>\n<li>没有固定查询语言</li>\n<li>多种存储方式：键值对存储，列存储，文档存储，图形数据库（社交关系）</li>\n<li>最终一致性</li>\n<li>CAP定理和BASE理论 （异地多活！）</li>\n<li>高性能，高可用，高可扩展性</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"大数据时代的3V-3高\"><a href=\"#大数据时代的3V-3高\" class=\"headerlink\" title=\"大数据时代的3V+3高\"></a>大数据时代的3V+3高</h1><p>3V：用来描述问题</p>\n<ul>\n<li>海量Volume，多样Variety，实时Velocity</li>\n</ul>\n<p>3高：对程序的要求</p>\n<ul>\n<li>高并发</li>\n<li>高可扩（随时水平拆分，随时扩展机器）</li>\n<li>高性能（保证用户体验和性能）</li>\n</ul>\n<h1 id=\"数据架构\"><a href=\"#数据架构\" class=\"headerlink\" title=\"数据架构\"></a>数据架构</h1><ol>\n<li>商品的基本信息<ul>\n<li>名称、价格、商家信息</li>\n<li>使用<strong>关系型数据库</strong>；</li>\n</ul>\n</li>\n<li>商品的描述，评论（文字比较多的情况）<ul>\n<li>使用<strong>文档型数据库</strong>，MongoDB</li>\n</ul>\n</li>\n<li>图片<ul>\n<li>分布式文件系统，FastDFS；</li>\n<li>淘宝自己的：TFS</li>\n<li>Google：GFS</li>\n<li>Hadoop：HDFS</li>\n<li>阿里云： OSS</li>\n</ul>\n</li>\n<li>商品的关键字（用来搜索）<ul>\n<li>搜索引擎 solr，elasticsearch</li>\n<li>淘宝用的：ISearch</li>\n</ul>\n</li>\n<li>商品的热门波段信息<ul>\n<li>内存数据库 Redis，Tair，Memcache…</li>\n</ul>\n</li>\n<li>商品的交易，外部的支付接口<ul>\n<li>三方应用。</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"大型互联网的应用问题\"><a href=\"#大型互联网的应用问题\" class=\"headerlink\" title=\"大型互联网的应用问题\"></a>大型互联网的应用问题</h1><ul>\n<li>数据类型太多了</li>\n<li>数据源繁多，经常重构</li>\n<li>数据要改造，需要大面积改造</li>\n</ul>\n<p><strong>解决方案</strong>：UDSL（统一的数据服务层）。</p>\n<p><img src=\"/2023/02/11/Redis-restudy-1/image-20230211170032442.png\" alt=\"image-20230211170032442\"></p>\n<p><img src=\"/2023/02/11/Redis-restudy-1/image-20230211170242014.png\" alt=\"image-20230211170242014\"></p>\n<h1 id=\"NoSQL四大分类\"><a href=\"#NoSQL四大分类\" class=\"headerlink\" title=\"NoSQL四大分类\"></a>NoSQL四大分类</h1><ul>\n<li><p>KV键值对：</p>\n<ul>\n<li><p>新浪：Redis</p>\n</li>\n<li><p>美团：Redis + Tair</p>\n</li>\n<li><p>阿里、百度：Redis + memcache</p>\n</li>\n</ul>\n</li>\n<li><p>文档型数据库（bson格式，与JSON一样）</p>\n<ul>\n<li>MongoDB<ul>\n<li>MongoDB（一般必须要掌握）：基于分布式文件存储的数据库，用C++编写，主要用来处理大量的文档。</li>\n<li>MongoDB是一个介于关系型数据库和非关系型数据库中间的产品。</li>\n<li>MongoDB是非关系型数据库中功能最丰富最像关系型数据库的。</li>\n</ul>\n</li>\n<li>ConthDB</li>\n</ul>\n</li>\n<li><p>列存储数据库</p>\n<ul>\n<li>HBase</li>\n<li>分布式文件系统</li>\n</ul>\n</li>\n<li><p>图形关系数据库</p>\n<ul>\n<li>不是用来存图形的</li>\n<li>存储<strong>关系</strong>，比如：朋友圈社交网络，广告推荐。</li>\n<li>Neo4j，infoGrid</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>举例</th>\n<th>典型应用场景</th>\n<th>数据模型</th>\n<th>优点</th>\n<th>缺点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>键值对</td>\n<td>Redis，Oracle BDB</td>\n<td>内容缓存，主要用于存储大量数据的高访问负载，也用于一些日志系统等等</td>\n<td>Key指向Value的键值对，通常用hash table实现</td>\n<td>查找速度快</td>\n<td>数据无结构化，通常只被当做字符串或二进制数据。</td>\n</tr>\n<tr>\n<td>列存储数据库</td>\n<td>Cassandra，HBase</td>\n<td>分布式文件系统</td>\n<td>以列簇式存储，将同一列数据存在一起</td>\n<td>查找速度快，可扩展性强，更容易进行分布式扩展</td>\n<td>功能相对局限</td>\n</tr>\n<tr>\n<td>文档型数据库</td>\n<td>CouchDB,MongoDB</td>\n<td>Web应用（与Key-Value类似，Value是结构化的，不同的是数据库能够了解Value的内容）</td>\n<td>Key-Value对应的键值对，Value为结构化数据</td>\n<td>数据结构要求不严格，表结构可变，不需要像关系数据库一样需要预先定义表结构</td>\n<td>查询性能不高，而且缺乏统一的查询语法</td>\n</tr>\n<tr>\n<td>图形数据库</td>\n<td>Neo4J，InfoGrid，Infinite Graph</td>\n<td>社交网络，推荐系统等，专注于构建关系图谱</td>\n<td>图结构</td>\n<td>利用图结构相关算法，比如最短路径寻址，N度关系查找等</td>\n<td>很多时候需要对整个图做计算才能得出需要的信息，而且这种结构不太好做分布式的集群方案</td>\n</tr>\n</tbody></table>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"垂直拆分：读写分离\"><a href=\"#垂直拆分：读写分离\" class=\"headerlink\" title=\"垂直拆分：读写分离\"></a>垂直拆分：读写分离</h2><p><img src=\"/2023/02/11/Redis-restudy-1/Memcached-1676095243317-1.svg\" alt=\"Memcached\"></p>\n<p>三个mysql服务器，</p>\n<p>可以设定，<strong>第二个</strong>负责写，<strong>其他两个</strong>负责读；</p>\n<p>写数据到2，读数据到1和3；1和3随时同步来自2的数据。</p>\n<h2 id=\"水平拆分：Mysql集群\"><a href=\"#水平拆分：Mysql集群\" class=\"headerlink\" title=\"水平拆分：Mysql集群\"></a>水平拆分：Mysql集群</h2><h3 id=\"Mysql引擎\"><a href=\"#Mysql引擎\" class=\"headerlink\" title=\"Mysql引擎\"></a>Mysql引擎</h3><p>早些年MyISAM：表锁（读写锁整个表，十分影响效率，高并发会有严重的问题）</p>\n<p>现在Innodb：行锁（读写锁一行）。</p>\n<h2 id=\"Redis数据类型\"><a href=\"#Redis数据类型\" class=\"headerlink\" title=\"Redis数据类型\"></a>Redis数据类型</h2><ul>\n<li><p>五大基础数据类型</p>\n<ul>\n<li><p>String</p>\n</li>\n<li><p>List</p>\n</li>\n<li><p>Set</p>\n</li>\n<li><p>Hash</p>\n</li>\n<li><p>Zset</p>\n</li>\n</ul>\n</li>\n<li><p>三种特殊数据类型</p>\n<ul>\n<li>geo</li>\n<li>hyperloglog</li>\n<li>bitmap</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"要学的\"><a href=\"#要学的\" class=\"headerlink\" title=\"要学的\"></a>要学的</h2><p>Redis，MongoDB，HBase，Neo4j</p>\n","categories":[],"tags":["Redis"]},{"title":"动态规划学习","url":"http://zswh33.github.io/2023/01/04/动态规划学习/","content":"<h1 id=\"题目特点\"><a href=\"#题目特点\" class=\"headerlink\" title=\"题目特点\"></a>题目特点</h1><ul>\n<li>计数<ul>\n<li>有多少种方式走到右下角</li>\n<li>有多少种方法选出k个数使得和是sum</li>\n</ul>\n</li>\n<li>求最大最小值<ul>\n<li>从左上角走到右下角路径的最大数字和</li>\n<li>最长上升子序列长度</li>\n</ul>\n</li>\n<li>求存在性<ul>\n<li>取石子游戏，先手是否必胜</li>\n<li>能不能选出k个数使得和是sum</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"动态规划组成部分\"><a href=\"#动态规划组成部分\" class=\"headerlink\" title=\"动态规划组成部分\"></a>动态规划组成部分</h1><p><a href=\"https://www.lintcode.com/problem/669/\">https://www.lintcode.com/problem/669/</a></p>\n<p>提出问题：给出面值2,5,7三种硬币，要求拼出27元，求最少需要多少硬币？</p>\n<h2 id=\"一、确定状态\"><a href=\"#一、确定状态\" class=\"headerlink\" title=\"一、确定状态\"></a>一、确定状态</h2><ul>\n<li><p>两个意识</p>\n<ul>\n<li><p>最后一步</p>\n</li>\n<li><p>子问题</p>\n</li>\n</ul>\n</li>\n<li><p>原问题：最少用多少枚拼出27</p>\n</li>\n<li><p>转化子问题：最少用多少枚硬币拼出<strong>27-a<sub>k</sub></strong></p>\n</li>\n<li><p>设状态<strong>f(X) &#x3D; 最少用多少枚硬币拼出X</strong></p>\n</li>\n<li><p>子问题：</p>\n<ul>\n<li><p>最后一枚硬币a<sub>k</sub>可能为2,5或7，</p>\n<ul>\n<li>若a<sub>k</sub>是2，则 <strong>f( 27 ) &#x3D; f( 27 - 2 ) + 1</strong></li>\n<li>若a<sub>k</sub>是5，则 <strong>f( 27 ) &#x3D; f( 27 - 5 ) + 1</strong></li>\n<li>若a<sub>k</sub>是7，则 <strong>f( 27 ) &#x3D; f( 27 - 7 ) + 1</strong></li>\n</ul>\n</li>\n<li><p>要求最少硬币数，即：<br>$$<br>f(27) &#x3D; min(f(27-2)+1,f(27-5)+1,f(27-7)+1)<br>$$</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"二、转移方程\"><a href=\"#二、转移方程\" class=\"headerlink\" title=\"二、转移方程\"></a>二、转移方程</h2><p><em>把括号换为中括号</em><br>$$<br>f[X] &#x3D; min{f[x-2]+1,f[x-5]+1,f[x-7]+1}<br>$$</p>\n<h2 id=\"三、初始条件和边界情况\"><a href=\"#三、初始条件和边界情况\" class=\"headerlink\" title=\"三、初始条件和边界情况\"></a>三、初始条件和边界情况</h2><ul>\n<li><p>边界情况</p>\n<ul>\n<li><p>若x-2，x-5或x-7小于0怎么办？什么时候停下来？</p>\n<ul>\n<li><p>若不能拼出Y，则定于<strong>f[Y]&#x3D;+∞</strong></p>\n</li>\n<li><p>如：<strong>f[-1] &#x3D; f[-2] &#x3D; … &#x3D; +∞</strong></p>\n</li>\n<li><p>此时</p>\n</li>\n<li><p>$$<br>f[1] &#x3D; min{f[-1]+1,f[-4]+1,f[-6]+1} &#x3D; +∞<br>$$</p>\n</li>\n<li><p>即：拼不出来1</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>初始条件：<strong>f[0] &#x3D; 0</strong></p>\n</li>\n</ul>\n<h2 id=\"四、计算顺序\"><a href=\"#四、计算顺序\" class=\"headerlink\" title=\"四、计算顺序\"></a>四、计算顺序</h2><ul>\n<li>计算顺序：f[0]，f[1]，f[2] …, f[27]。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li><p>确定状态</p>\n<ul>\n<li>最后一步（最优策略中使用最后一枚硬币a<sub>k</sub>）</li>\n<li>化成子问题（最少的硬币拼出更小的面值27-a<sub>k</sub>）</li>\n</ul>\n</li>\n<li><p>转移方程</p>\n<ul>\n<li>f[X] &#x3D; min ( f[X-2]+1, f[x-5]+1, f[X-7]+1 )</li>\n</ul>\n</li>\n<li><p>初始条件和边界情况</p>\n<ul>\n<li>f[0] &#x3D; 0</li>\n<li>若不能拼出Y，f[Y] &#x3D; 正无穷</li>\n</ul>\n</li>\n<li><p>计算顺序</p>\n<ul>\n<li>f[0], f[1], f[2], …</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"常见动态规划题\"><a href=\"#常见动态规划题\" class=\"headerlink\" title=\"常见动态规划题\"></a>常见动态规划题</h1><ul>\n<li>坐标型动态规划</li>\n<li>序列型动态规划</li>\n<li>划分型动态规划</li>\n<li>区间型动态规划</li>\n<li>背包型动态规划</li>\n<li>最长序列型动态规划</li>\n<li>博弈型动态规划</li>\n</ul>\n<h1 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h1><h2 id=\"序列型动态规划\"><a href=\"#序列型动态规划\" class=\"headerlink\" title=\"序列型动态规划\"></a>序列型动态规划</h2><p>…</p>\n<h2 id=\"划分型动态规划\"><a href=\"#划分型动态规划\" class=\"headerlink\" title=\"划分型动态规划\"></a>划分型动态规划</h2><h3 id=\"Decode-Ways\"><a href=\"#Decode-Ways\" class=\"headerlink\" title=\"Decode Ways\"></a>Decode Ways</h3><ul>\n<li><p>确定状态</p>\n<ul>\n<li>最后一步：最后一个字母，在数字序列中可以有<strong>N-1</strong>或<strong>N-1与N-2</strong></li>\n<li>子问题：<ul>\n<li>求数字串前N个字符的解密方式数，即需要知道数字串<strong>前N-1和N-2个字符的解密方式数</strong>；</li>\n</ul>\n</li>\n<li>状态：设数字串S前i个数字解密成字母串有**f[i]**种方式。</li>\n</ul>\n</li>\n<li><p>转移方程<br>$$<br>f[i] &#x3D; f[i-1]|S[i-1]对应一个字母  +  f[i-2]|S[i-2]S[i-1]对应一个字母<br>$$</p>\n</li>\n<li><p>初始条件和边界情况</p>\n<ul>\n<li>初始条件：f[0] &#x3D; 1，即空串有1种方式解密<ul>\n<li>解密成空串</li>\n</ul>\n</li>\n<li>边界情况，若i&#x3D;1，则只有一个数字</li>\n</ul>\n</li>\n<li><p>计算顺序</p>\n<ul>\n<li>f[0]，f[1]，f[2]，…，f[N]</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"坐标型动态规划\"><a href=\"#坐标型动态规划\" class=\"headerlink\" title=\"坐标型动态规划\"></a>坐标型动态规划</h2>","categories":[],"tags":["算法"]},{"title":"openEuler 7","url":"http://zswh33.github.io/2022/11/28/openEuler-7/","content":"<h1 id=\"网络管理\"><a href=\"#网络管理\" class=\"headerlink\" title=\"网络管理\"></a>网络管理</h1><h2 id=\"一些概念\"><a href=\"#一些概念\" class=\"headerlink\" title=\"一些概念\"></a>一些概念</h2><p>设备：主机内的网卡；</p>\n<p>广播地址：到达本网段上所有主机的地址；</p>\n<p>接口：为使用设备，驱动程序在设备上创建了接口；</p>\n<p>子网掩码：将IP地址划分成网络地址和主机地址两部分的掩码；</p>\n<p>路由：IP包跨网段访问时候的下一跳地址；</p>\n<p>链路：设备到网络的连接；</p>\n","categories":[],"tags":["Linux"]},{"title":"openEuler 6 任务管理","url":"http://zswh33.github.io/2022/11/28/openEuler-6/","content":"<h1 id=\"任务管理\"><a href=\"#任务管理\" class=\"headerlink\" title=\"任务管理\"></a>任务管理</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ul>\n<li>在系统运维过程中，可能需要在某个预设的时间执行特定任务</li>\n<li>如：定时发送邮件、备份并清空日志文件等任务；</li>\n<li>任务的内容可以看做是一系列命令或一个脚本，我们需要在特定时间去执行；</li>\n<li>at语法<ul>\n<li>at [-V] [-q 队列] [-f 文件名] [-mldbv] 时间</li>\n<li>at -c 作业[作业…]</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><p>计划执行，在特定时间运行一次：<strong>at</strong></p>\n<p>定期执行，按周期执行多次：<strong>cron</strong></p>\n<h2 id=\"计划执行at\"><a href=\"#计划执行at\" class=\"headerlink\" title=\"计划执行at\"></a>计划执行at</h2><p>at命令可以指定Linux在特定时刻运行脚本；</p>\n<p>atd是at的守护进程，在系统启动时会以后台模式运行；</p>\n<p>atd定期检查系统上<code>/var/spool/at</code>目录中，通过at命令写入的任务；</p>\n<p>这个命令至少需要指定一个命令和一个执行时间；</p>\n<p>时间上，at命令可以只指定时间，也可以时间日期一起指定；</p>\n<h3 id=\"指定时间的方式有两种\"><a href=\"#指定时间的方式有两种\" class=\"headerlink\" title=\"指定时间的方式有两种\"></a>指定时间的方式有两种</h3><p><strong>绝对计时和相对计时</strong></p>\n<h4 id=\"绝对计时\"><a href=\"#绝对计时\" class=\"headerlink\" title=\"绝对计时\"></a>绝对计时</h4><p>格式：<code>at 时间 日期</code></p>\n<ul>\n<li>当前的时间：<code>hh:mm</code>，如果时间已经过去，则会在第二天执行；</li>\n<li>使用midnight、noon、teatime来指定时间；<ul>\n<li>teatime饮茶时间，一般指下午4点；</li>\n</ul>\n</li>\n<li>采用12小时计时制，即在时间后面加上AM或PM来说明是上午还是下午；</li>\n<li>指定命令执行的具体日期，格式为：<code>month day</code> 或 <code>mm/dd/yy</code> 或 <code>dd.mm.yy</code> 。指定日期必须在指定时间的后面；</li>\n<li>也可以用<code>today</code>和<code>tommorrow</code>表示今天或明天；</li>\n</ul>\n<h4 id=\"相对计时\"><a href=\"#相对计时\" class=\"headerlink\" title=\"相对计时\"></a>相对计时</h4><p>格式：<code>at now+数量 单位</code></p>\n<ul>\n<li>格式为<code>now+count time-units </code>，<ul>\n<li>now就是当前时间</li>\n<li>time-units是时间单位；<ul>\n<li>这里可以是<ul>\n<li>minutes</li>\n<li>hours</li>\n<li>days</li>\n<li>weeks</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>count是时间的数量，<ul>\n<li>可以用数字，表示几天、几个小时等；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>可以使用<code>today</code>或<code>tomorrow</code>来表示日期；</p>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>假定目前时间为 <strong>12:30 2020年6月7日</strong>，要在今天<strong>16:30</strong>执行某个命令，命令如下：</p>\n<ul>\n<li><p>绝对计时</p>\n<ul>\n<li>at 16:30</li>\n<li>at 4:30pm</li>\n<li>at 16:30 today</li>\n<li>at 16:30 7.6.20</li>\n<li>at 16:30 6&#x2F;7&#x2F;20</li>\n<li>at 16:30 Jun 7</li>\n</ul>\n</li>\n<li><p>相对计时</p>\n<ul>\n<li><p>at now+240 minutes</p>\n</li>\n<li><p>at now+4 hours</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"执行权限\"><a href=\"#执行权限\" class=\"headerlink\" title=\"执行权限\"></a>执行权限</h3><p>对于at命令，需要定时执行的命令来自<strong>标准输入</strong>或者<strong>使用-f指定文件</strong>中读取执行；</p>\n<p>如果at命令是su切换到用户shell执行的，那么当前用户会被认为是执行用户，所有错误和输出结果都会返回给这个用户；</p>\n<p>对于其他用户，是否允许被使用at命令，主要在于<code>/etc/at.allow</code>和<code>/etc/at.deny</code>文件中指定；</p>\n<p><code>at.allow</code>的优先级高于<code>at.deny</code>。</p>\n<h3 id=\"其他管理命令\"><a href=\"#其他管理命令\" class=\"headerlink\" title=\"其他管理命令\"></a>其他管理命令</h3><p><code>at TIME</code>：增加任务</p>\n<p><code>atq</code>：查询所有任务</p>\n<p><code>atq -c &lt;id&gt;</code>：查询任务详细信息</p>\n<p><code>atrm &lt;id&gt;</code>：删除指定任务</p>\n<blockquote>\n<p>使用</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">添加一个定时事件</span></span><br><span class=\"line\">[root@localhost tmp]# at now+3hours</span><br><span class=\"line\">warning: commands will be executed using /bin/sh</span><br><span class=\"line\">at Mon Nov 28 23:24:00 2022</span><br><span class=\"line\"><span class=\"meta prompt_\">at&gt; </span><span class=\"language-bash\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;zzzcszczcs&quot;</span> &gt; /tmp/aaw.log</span></span><br><span class=\"line\"><span class=\"meta prompt_\">at&gt; </span><span class=\"language-bash\">&lt;EOT&gt;</span></span><br><span class=\"line\">job 6 at Mon Nov 28 23:24:00 2022</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查询定时事件</span></span><br><span class=\"line\">[root@localhost tmp]# atq</span><br><span class=\"line\">6       Mon Nov 28 23:24:00 2022 a root</span><br><span class=\"line\">4       Mon Nov 28 21:23:00 2022 a root</span><br><span class=\"line\">5       Mon Nov 28 22:23:00 2022 a root</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">详细查询指定定时事件</span></span><br><span class=\"line\">[root@localhost tmp]# at -c 6</span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">!/bin/sh</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">atrun uid=0 gid=0</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">mail root 0</span></span><br><span class=\"line\">umask 22</span><br><span class=\"line\">SHELL=/bin/bash; export SHELL</span><br><span class=\"line\">HISTCONTROL=ignoredups; export HISTCONTROL</span><br><span class=\"line\">HISTSIZE=1000; export HISTSIZE</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"周期性执行cron\"><a href=\"#周期性执行cron\" class=\"headerlink\" title=\"周期性执行cron\"></a>周期性执行<code>cron</code></h2><p>周期性重复执行一些命令，使用cron；</p>\n<ul>\n<li>cron会搜索<code>/var/spool/cron</code>目录，寻找以<code>/etc/passwd</code>文件中用户名命名的crontab文件，然后将crontab文件装入内存，即<strong>用户cron时间表</strong>；</li>\n<li>cron还将搜索<code>/etc/crontab</code>文件，即<strong>系统cron时间表</strong>；</li>\n<li>cron启动后，先检查是否存在需要运行的crontab文件；<ul>\n<li>若没有则转入睡眠状态，释放系统资源；</li>\n<li>之后<strong>每分钟</strong>唤醒一次，查看当前是否有需要运行的命令。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"crontab管理cron进程表格\"><a href=\"#crontab管理cron进程表格\" class=\"headerlink\" title=\"crontab管理cron进程表格\"></a>crontab管理cron进程表格</h3><p>crontab用于安装、删除或打印用于驱动cron后台进程的表格；</p>\n<p>用户把需要执行的命令序列放到crontab文件中执行，每个用户都拥有自己的crontab文件；</p>\n<p>crontab命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">crontab -u # 设置指定用户的cron服务</span><br><span class=\"line\">crontab -l # 列出指定用户的cron服务详细内容</span><br><span class=\"line\">crontab -r # 删除指定用户的cron服务</span><br><span class=\"line\">crontab -e # 编辑指定用户的cron服务</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"crontab文件中的时间表\"><a href=\"#crontab文件中的时间表\" class=\"headerlink\" title=\"crontab文件中的时间表\"></a>crontab文件中的时间表</h3><p>在crontab文件中指定需要执行的命令和执行时间；</p>\n<p>文件每行有6个域，前5个域指定命令执行的时间，最后一个是要执行的命令，格式如下：</p>\n<h4 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">minute hour day-of-month month-of-year day-of-week commands</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>minute</td>\n<td>分钟 0~59</td>\n</tr>\n<tr>\n<td>hour</td>\n<td>小时 0~23</td>\n</tr>\n<tr>\n<td>day-of-month</td>\n<td>一个月的第几天 1-31</td>\n</tr>\n<tr>\n<td>month-of-year</td>\n<td>一年的第几个月 1~12</td>\n</tr>\n<tr>\n<td>day-of-week</td>\n<td>一周的周几  0 ~ 6</td>\n</tr>\n<tr>\n<td>commands</td>\n<td>执行的命令</td>\n</tr>\n</tbody></table>\n<p>如：每周一上午8:00执行命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">00 08 * * 1 commands</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>所有取值范围内的数字</td>\n</tr>\n<tr>\n<td>&#x2F;</td>\n<td>每，如“*&#x2F;5”指的是每5个单位；</td>\n</tr>\n<tr>\n<td>-</td>\n<td>从 一个数字 到另一个数字</td>\n</tr>\n<tr>\n<td>,</td>\n<td>离散的数字</td>\n</tr>\n</tbody></table>\n<p>如：晚上11点到早上8点之间每过2小时，在&#x2F;tmp&#x2F;test.txt文件中加入sleepy文本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 23-8/2 * * * echo &quot;sleepy&quot; &gt;&gt; /tmp/test.txt </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"crontab文件-x2F-etc-x2F-ctontab\"><a href=\"#crontab文件-x2F-etc-x2F-ctontab\" class=\"headerlink\" title=\"crontab文件 &#x2F;etc&#x2F;ctontab\"></a>crontab文件 &#x2F;etc&#x2F;ctontab</h3><p>这个配置文件针对系统的任务。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SHELL=/bin/sh</span><br><span class=\"line\">PATH=/usr/bin:/usr/sbin:/bin:/usr/lib/news/bin</span><br><span class=\"line\">MAILTO=root # 如果出现错误，或有数据输出，数据作为邮件发给这个账号</span><br><span class=\"line\">HOME=/</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">run-parts01</span></span><br><span class=\"line\">* * * * root run-parts /etc/cron.hourly # 每小时执行一次/etc/cron.hourly里的脚本</span><br><span class=\"line\">02 4 * * * root run-parts /etc/cron.daily # 每天执行一次cron.daily文件里的脚本</span><br><span class=\"line\">22 4 * * 0 root run-parts /etc/cron.weekly</span><br><span class=\"line\">42 4 1 * * root run-parts /etc/cron.monthly</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"crontab使用\"><a href=\"#crontab使用\" class=\"headerlink\" title=\"crontab使用\"></a>crontab使用</h3><ul>\n<li><p><code>crontab -l</code>：查询当前定时事件；</p>\n</li>\n<li><p><code>crontab -e</code>：编辑一个定时任务；</p>\n<ul>\n<li>将打开一个vim编辑器页面，然后使用上面的表达式可以创建任务；</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li><p><code>crontab -e</code> 编辑一个定时任务；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost tmp]# crontab -e</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/1 * * * * echo &quot;qqqqq&quot; &gt; /tmp/q.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看当前定时任务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost tmp]# crontab -l</span><br><span class=\"line\">*/1 * * * * echo &quot;qqqqq&quot; &gt; /tmp/q.txt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除定时任务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost tmp]# crontab -r</span><br></pre></td></tr></table></figure></li>\n</ol>\n","categories":[],"tags":["Linux"]},{"title":"openEuler 5 文件系统 磁盘 磁盘分区 LVM","url":"http://zswh33.github.io/2022/11/27/openEuler-5/","content":"<h1 id=\"文件系统\"><a href=\"#文件系统\" class=\"headerlink\" title=\"文件系统\"></a>文件系统</h1><h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>文件系统是操作系统用于明确存储设备或分区上的文件的方法和数据结构；</p>\n<p>即：存储设备上组织文件的方法。</p>\n<p>操作系统中<strong>负责管理和存储文件信息的软件机构</strong>称为文件管理系统，简称文件系统；</p>\n<p>文件系统：</p>\n<ul>\n<li>文件系统API；<ul>\n<li>提供用户人性化接口；</li>\n</ul>\n</li>\n<li>对象操纵和管理的软件集合：<ul>\n<li>磁盘管理软件，类似于中间件；</li>\n</ul>\n</li>\n<li>对象及属性；<ul>\n<li>底层存储硬件，如磁盘或分区；</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"文件系统类型\"><a href=\"#文件系统类型\" class=\"headerlink\" title=\"文件系统类型\"></a>文件系统类型</h2><ul>\n<li><strong>FAT</strong>:包括FAT16，FAT32；</li>\n<li><strong>NTFS</strong>：NTFS是一个基于安全性的文件系统，是Windows NT所采用的文件系统结构；</li>\n<li><strong>NFS</strong>：网络文件系统，用于在UNIX系统间通过网络进行文件共享；</li>\n<li><strong>RAW</strong>：磁盘未经处理或未格式化产生的文件系统；</li>\n<li><strong>Ext</strong>：GNU&#x2F;Linux中标准的文件系统，包括Ext2，Ext3，Ext4；</li>\n<li><strong>XFS</strong>：高性能的日志文件系统；</li>\n</ul>\n<h2 id=\"openEuler的文件系统\"><a href=\"#openEuler的文件系统\" class=\"headerlink\" title=\"openEuler的文件系统\"></a>openEuler的文件系统</h2><p>openEuler内核源于Linux；</p>\n<p>Linux内核支持多种不同类型的文件系统。</p>\n<p>openEuler默认文件系统为ext4；</p>\n<table>\n<thead>\n<tr>\n<th>常用文件系统</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Ext</td>\n<td>专门为Linux设计的文件系统，目前最新版本为ext4</td>\n</tr>\n<tr>\n<td>XFS</td>\n<td>一种高性能的日志文件系统。</td>\n</tr>\n<tr>\n<td>vfat</td>\n<td>vfat是Linux对DOS，Windows下的FAT文件系统的统称</td>\n</tr>\n<tr>\n<td>NFS</td>\n<td>网络文件系统，用于在UNIX系统间通过网络进行文件共享</td>\n</tr>\n<tr>\n<td>ISO 9660</td>\n<td>光盘使用的标准文件系统</td>\n</tr>\n</tbody></table>\n<h2 id=\"SWAP交换分区\"><a href=\"#SWAP交换分区\" class=\"headerlink\" title=\"SWAP交换分区\"></a>SWAP交换分区</h2><ul>\n<li><p>Linux系统交换空间（swap）就是磁盘上的一块区域；</p>\n</li>\n<li><p>可以是一个分区，也可以是一个文件；</p>\n</li>\n<li><p>物理内存和交换空间的和就是系统可提供的虚拟内存的总量；</p>\n</li>\n<li><p>swap分区作用：</p>\n<ul>\n<li>增加系统可用内存空间：当物理内存不足，增加swap分区比增加物理内存更经济；</li>\n<li>提高系统整体性能：将不常用数据移到swap分区后，系统会有更多内存用于缓存，增加系统I&#x2F;O；</li>\n<li>有些Linux系统休眠功能依赖于swap功能；系统休眠时，会将内存数据保存到swap分区，下次启动时再加载到内存；</li>\n</ul>\n</li>\n<li><p>配置</p>\n<ul>\n<li>swap有两种形式：分区和文件；</li>\n<li>创建swap分区：fdisk创建分区，mksswap创建swap分区，swapon启用swap分区；</li>\n<li>创建swap文件：创建文件，mkswap格式化文件，swapon启用swap文件。</li>\n<li>推荐swap大小</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>RAM大小</th>\n<th>推荐交换分区</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&lt;=2GB</code></td>\n<td><code>RAM x 2</code></td>\n</tr>\n<tr>\n<td><code>2GB - 8GB</code></td>\n<td><code>= RAM</code></td>\n</tr>\n<tr>\n<td><code>&gt;8GB</code></td>\n<td><code>8GB</code></td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<h1 id=\"磁盘\"><a href=\"#磁盘\" class=\"headerlink\" title=\"磁盘\"></a>磁盘</h1><h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><ul>\n<li>磁盘材质：机械硬盘HDD，固态<strong>硬</strong>盘SSD；</li>\n<li>接口类型：IDE、SCSI、SATA、SAS、FC；</li>\n</ul>\n<h2 id=\"两大协议指令和硬盘接口\"><a href=\"#两大协议指令和硬盘接口\" class=\"headerlink\" title=\"两大协议指令和硬盘接口\"></a>两大协议指令和硬盘接口</h2><ul>\n<li><strong>两大协议指令</strong>：ATA和SCSI；</li>\n<li>ATA<ul>\n<li><strong>并行：IDE</strong><ul>\n<li>最初的硬盘通用标准；</li>\n<li>IDE属于Parallel-ATA，即并行ATA；</li>\n</ul>\n</li>\n<li><strong>串行：SATA</strong><ul>\n<li>SATA将IDE和ATA区分开来；</li>\n<li>一般来说，IDE称为并口，SATA称为串口；</li>\n<li>个人电脑和低端服务器常见硬盘；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>SCSI<ul>\n<li><strong>并行：SCSI</strong><ul>\n<li>SCSI（Small Computer System Interface）：小型计算机系统专用接口</li>\n</ul>\n</li>\n<li><strong>串行：SAS</strong><ul>\n<li>SAS（Serial Attached SCSI）：就是串口的SCSI接口；</li>\n<li>一般服务器采用这两种接口，比开始介绍的两种硬盘性能更高，稳定性更强，支持热插拔；</li>\n<li>但是价格高，容量小，噪音大；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>其他接口</p>\n<ul>\n<li><p><strong>近线SAS：NL-SAS（新产品）</strong></p>\n<ul>\n<li>介于SATA盘与SAS盘之间</li>\n<li>有SATA盘的容量和SAS盘的协议组合而成；</li>\n</ul>\n</li>\n<li><p><strong>FC（FibreChannel）</strong></p>\n<ul>\n<li><p>使用光纤通道直接作为硬盘连接接口，为高吞吐量性能密集型系统设备开辟了一条提高I&#x2F;O性能水平途经；</p>\n</li>\n<li><p>目前高端存储产品使用FC接口硬盘；</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"查看磁盘信息\"><a href=\"#查看磁盘信息\" class=\"headerlink\" title=\"查看磁盘信息\"></a>查看磁盘信息</h2><h3 id=\"fdisk-l\"><a href=\"#fdisk-l\" class=\"headerlink\" title=\"fdisk -l\"></a>fdisk -l</h3><p>查看所有磁盘的信息，包括已挂载和未挂载的磁盘；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# fdisk -l</span><br><span class=\"line\">Disk /dev/sda：16 GiB，17179869184 字节，33554432 个扇区</span><br><span class=\"line\">磁盘型号：VMware Virtual S</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\">磁盘标签类型：dos</span><br><span class=\"line\">磁盘标识符：0xde401923</span><br><span class=\"line\"></span><br><span class=\"line\">设备       启动    起点     末尾     扇区 大小 Id 类型</span><br><span class=\"line\">/dev/sda1  *       2048  2099199  2097152   1G 83 Linux</span><br><span class=\"line\">/dev/sda2       2099200 33554431 31455232  15G 8e Linux LVM</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/mapper/openeuler-root：13.2 GiB，14176747520 字节，27688960 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Disk /dev/mapper/openeuler-swap：1.79 GiB，1925185536 字节，3760128 个扇区</span><br><span class=\"line\">单元：扇区 / 1 * 512 = 512 字节</span><br><span class=\"line\">扇区大小(逻辑/物理)：512 字节 / 512 字节</span><br><span class=\"line\">I/O 大小(最小/最佳)：512 字节 / 512 字节</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"df-h\"><a href=\"#df-h\" class=\"headerlink\" title=\"df -h\"></a>df -h</h3><p>查看系统挂载、磁盘空间大小和利用率；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# df -h</span><br><span class=\"line\">文件系统                    容量  已用  可用 已用% 挂载点</span><br><span class=\"line\">devtmpfs                    4.0M     0  4.0M    0% /dev</span><br><span class=\"line\">tmpfs                       715M   24K  715M    1% /dev/shm</span><br><span class=\"line\">tmpfs                       286M   16M  271M    6% /run</span><br><span class=\"line\">tmpfs                       4.0M     0  4.0M    0% /sys/fs/cgroup</span><br><span class=\"line\">/dev/mapper/openeuler-root   13G  3.7G  8.6G   30% /</span><br><span class=\"line\">tmpfs                       715M  8.0K  715M    1% /tmp</span><br><span class=\"line\">/dev/sda1                   974M  175M  733M   20% /boot</span><br><span class=\"line\">/dev/sr0                    3.5G  3.5G     0  100% /mnt/cdrom</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"磁盘分区\"><a href=\"#磁盘分区\" class=\"headerlink\" title=\"磁盘分区\"></a>磁盘分区</h1><h2 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h2><ul>\n<li>磁盘分区可以将硬盘驱动器划分为多个逻辑存储单元，这些单元称为分区；</li>\n<li>通过将磁盘划分为多个分区，系统管理员可以使用不同的分区执行不同的功能；</li>\n<li>好处：<ul>\n<li>限制应用或用户可用空间；</li>\n<li>允许同一磁盘进行不同操作系统和多重启动；</li>\n<li>将操作系统和程序文件与用户文件分隔；</li>\n<li>创建用于操作系统虚拟内存交换的单独分区；</li>\n<li>限制磁盘空间使用情况，以提高诊断工具和备份映像的性能；</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"分区类型\"><a href=\"#分区类型\" class=\"headerlink\" title=\"分区类型\"></a>分区类型</h2><ul>\n<li>通常所说的“磁盘分区”就是指修改磁盘分区表</li>\n<li>一个硬盘只有一个扩展分区，除去主分区，其他空间都分配给扩展分区。</li>\n</ul>\n<h2 id=\"MBR分区表格式\"><a href=\"#MBR分区表格式\" class=\"headerlink\" title=\"MBR分区表格式\"></a>MBR分区表格式</h2><p><em>Master Boot Record</em></p>\n<ul>\n<li>扇区大小为512字节，第一个扇区要放两个东西：MBR和分区表<ul>\n<li>MBR：可以安装开机启动的程序，大小为446个字节</li>\n<li>分区表：记录分区信息，大小为64个字节，只能记录4个分区的信息，分别对应：三个主分区和一个扩展分区<ul>\n<li>若分区数量不足，就要在<strong>扩展分区</strong>上建立<strong>逻辑分区</strong>；</li>\n<li>逻辑分区表放在扩展分区上。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"分区命名规则\"><a href=\"#分区命名规则\" class=\"headerlink\" title=\"分区命名规则\"></a>分区命名规则</h2><p>在Linux中，没有盘符的概念，通过设备名来访问设备，设备名存放在&#x2F;dev目录中；</p>\n<p>命名规则如下：</p>\n<ul>\n<li>&#x2F;dev&#x2F;XXYN<ul>\n<li>XX：代表设备类型，通常是<ul>\n<li>hd（IDE磁盘）；</li>\n<li>sd（SCSI磁盘）；</li>\n<li>fd（软驱）；</li>\n<li>vd（virtio磁盘）；</li>\n</ul>\n</li>\n<li>y：代表分区所在的设备，如：<ul>\n<li><code>/dev/hda</code>表示<code>第一个IDE磁盘</code>；</li>\n<li><code>/dev/sdb</code>表示<code>第二个SCSI磁盘</code>；</li>\n<li>序号用a,b,c…来标识</li>\n</ul>\n</li>\n<li>N：代表分区<ul>\n<li>前四个分区（主分区和逻辑分区）用数字1-4；</li>\n<li>逻辑分区从5开始</li>\n<li>如：**&#x2F;dev&#x2F;hda3**就是第一个IDE磁盘上第三个主分区或扩展分区；</li>\n<li><strong>&#x2F;dev&#x2F;sdb6</strong>就是第二个SCSI硬盘上的第二个逻辑分区</li>\n<li>如果创建了一个主分区，然后就创建逻辑分区，逻辑分区照样从<strong>5</strong>开始，而不是<strong>2</strong>；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>注意：Linux中，SSD、SAS、SATA类型硬盘，都使用sd来标识，IDE硬盘属于IDE接口类型硬盘，用hd来标识。</p>\n<h2 id=\"磁盘分区方案MBR\"><a href=\"#磁盘分区方案MBR\" class=\"headerlink\" title=\"磁盘分区方案MBR\"></a>磁盘分区方案MBR</h2><p>MBR分区方案</p>\n<ul>\n<li><p>主启动记录（Master Boot Record）分区方案指定了在运行BIOS固件的系统上应如何对磁盘进行分区，它是存在于驱动器开始部分的一个特殊启动扇区。</p>\n</li>\n<li><p>在MBR中，</p>\n<ul>\n<li>SCSI接口硬盘最多只能有15个分区（扩展分区不计入其中，逻辑分区计入）<ul>\n<li>其中主分区最多4个，逻辑分区最多12个；</li>\n</ul>\n</li>\n<li>IDE接口硬盘最多只能有63个分区，其中主分区最多4个，逻辑分区最多60个；</li>\n</ul>\n</li>\n<li><p>由于分区大小数据以32位值存储，使用MBR方案分区时，最大磁盘和分区大小限制为2TB。</p>\n</li>\n</ul>\n<h2 id=\"磁盘分区方案GPT\"><a href=\"#磁盘分区方案GPT\" class=\"headerlink\" title=\"磁盘分区方案GPT\"></a>磁盘分区方案GPT</h2><p><em>随着硬盘驱动器容量不断增长，老旧的MBR分区方案的2TB磁盘和分区大小限制已不再是理论上的限制，在生产环境中已成为经常遇到的实际问题</em></p>\n<p>GPT正在取代传统的MBR方案进行磁盘分区；</p>\n<ul>\n<li>GPT意为GUID分区表，驱动器上的每个分区都有一个<strong>全局唯一的标识符</strong>（globally unique identifier，GUID），对于运行统一可扩展固件接口（UEFI）固件的系统，GPT是在物理硬盘上布置分区表的标准</li>\n<li>没有主分区和逻辑分区的区别；</li>\n<li>每个硬盘最多可以有128个分区，GPT为逻辑块地址分配64位，因此最大支持18EB的分区大小。</li>\n</ul>\n<h3 id=\"LBA\"><a href=\"#LBA\" class=\"headerlink\" title=\"LBA\"></a>LBA</h3><p>LBA：Logical Block Address</p>\n<ul>\n<li><p>GPT上所有的磁盘所有区域都是以LBA来规划的。</p>\n</li>\n<li><p>在GPT上，</p>\n<ul>\n<li>LBA分区有前面34个，LBA0-LBA33，用于存储GPT分区表信息；</li>\n<li>后面有33个，LBA^-1^-LBA^-33^；用于备份分区表信息。</li>\n</ul>\n</li>\n<li><p><strong>LBA0</strong>是GPT分区上第一个LBA块，LBA0又称为Prorective MBR，MBR相容区块，用来兼容MBR分区；</p>\n</li>\n<li><p><strong>LBA1</strong>叫做GPT表头记录，记录分区表本身的位置和大小，同时记录备份用的GPT分位置；</p>\n</li>\n<li><p><strong>LBA2-LBA33</strong>：记录实际的分区信息；</p>\n<ul>\n<li>每个LBA划分为4块，即每个LBA可以记录4个分区表；</li>\n<li>所以，一个GPT可以建立128个分区表（<code>32x4=128</code>）；</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"fdisk使用\"><a href=\"#fdisk使用\" class=\"headerlink\" title=\"fdisk使用\"></a>fdisk使用</h1><p>fdisk是Linux硬盘分区工具，也是Linux系统常用的一种硬盘分区工具之一，但不支持大于2TB的分区；</p>\n<ul>\n<li>语法：fdisk [OPTION] 参数</li>\n<li>选项：<ul>\n<li>-b &lt;分区大小&gt;：指定每个分区的大小；</li>\n<li>-l：列出指定外围设备的分区表状况；<ul>\n<li>-u：搭配-l参数列表，会用分区数目取代柱面数目，来标识每个分区的起始地址；</li>\n</ul>\n</li>\n<li>-s &lt;分区编号&gt;：打印指定的分区大小，单位为区块；</li>\n<li>-v：显示版本信息。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"fdisk交互模式\"><a href=\"#fdisk交互模式\" class=\"headerlink\" title=\"fdisk交互模式\"></a>fdisk交互模式</h2><blockquote>\n<p>帮助</p>\n</blockquote>\n<ul>\n<li><p>a 设置可引导标记</p>\n</li>\n<li><p>b 编辑bsd磁盘标签</p>\n</li>\n<li><p>c 设置DOS操作系统兼容标记</p>\n</li>\n<li><p>d 删除一个分区</p>\n</li>\n<li><p>l 显示已知文件系统类型，</p>\n<ul>\n<li>82为swap分区，83为linux分区；</li>\n</ul>\n</li>\n<li><p>m 显示帮助菜单</p>\n</li>\n<li><p>n 新建分区</p>\n</li>\n<li><p>o 建立空白DOS分区表</p>\n</li>\n<li><p>p 显示分区列表</p>\n</li>\n<li><p>s 新建空白SUN磁盘标签；</p>\n</li>\n<li><p>t 改变一个分区的系统ID</p>\n</li>\n<li><p>u 改变显示记录的单位</p>\n</li>\n<li><p>v 验证分区表</p>\n</li>\n<li><p>q 不保存退出</p>\n</li>\n<li><p>w 保存退出</p>\n</li>\n</ul>\n<blockquote>\n<p>建立主分区</p>\n</blockquote>\n<ol>\n<li>n 新建一个分区</li>\n<li>p 选择主分区</li>\n<li>主分区号（1-4）</li>\n<li>回车，默认起始柱面1</li>\n<li>定义分区大小 &#x2F;直接+size</li>\n<li>w 保存退出</li>\n<li>p 打印分区信息</li>\n</ol>\n<h1 id=\"parted分区工具\"><a href=\"#parted分区工具\" class=\"headerlink\" title=\"parted分区工具\"></a>parted分区工具</h1><p>parted也是Linux下常用的分区软件，支持创建2T以上的磁盘分区，相对于fdisk，parted更方便；</p>\n<p>提供动态调整分区大小的功能；</p>\n<ul>\n<li>语法：parted [options] [device [command [options …]…]]</li>\n<li>选项：<ul>\n<li>-i：交互模式</li>\n<li>-s：脚本模式；</li>\n<li>device：磁盘设备名称，如&#x2F;dev&#x2F;sda；</li>\n<li>command：parted命令，如果没有这个，parted会进入交互模式；</li>\n<li>-v：显示parted版本信息；</li>\n<li>-h：显示帮助信息；</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"交互模式\"><a href=\"#交互模式\" class=\"headerlink\" title=\"交互模式\"></a>交互模式</h2><p>选择具体硬盘后，进入交互模式进行分区操作，如：parted &#x2F;dev&#x2F;sdb</p>\n<blockquote>\n<p>说明</p>\n</blockquote>\n<ul>\n<li>align-check：检查分区N的类型（min|opt）是否对齐；</li>\n<li>mklabel：创建新的磁盘标签（分区表）；</li>\n<li>name：给指定分区命名；</li>\n<li>print：打印分区表；</li>\n<li>rescue：修复丢失的法内情；</li>\n<li>resizepart：调整分区大小</li>\n<li>rm：删除分区</li>\n<li>select：选择要编辑的设备；</li>\n<li>disk_set：更改选定设备上的标志；</li>\n<li>disk_toggle：切换选定设备上的标志状态；</li>\n<li>quit：退出；</li>\n<li>set：更改分区的标记</li>\n<li>toggle：设置或去标分区的标记；</li>\n<li>unit：设置默认单位；</li>\n<li>version：显示版本信息。</li>\n</ul>\n<blockquote>\n<p>分区流程</p>\n</blockquote>\n<ol>\n<li><code>mktable gpt</code> ：创建GPT分区表；</li>\n<li><code>mkpart</code>，新建分区；</li>\n<li>q，保存并退出。</li>\n</ol>\n<h2 id=\"非交互模式\"><a href=\"#非交互模式\" class=\"headerlink\" title=\"非交互模式\"></a>非交互模式</h2><ol>\n<li>硬盘格式改为GPT格式：parted &#x2F;dev&#x2F;sdb mklabel gpt</li>\n<li>分区：parted &#x2F;dev&#x2F;sdb mkpart primary 0 1000；</li>\n<li>格式化：mkfs -t ext4 &#x2F;dev&#x2F;sdb1</li>\n</ol>\n<h1 id=\"格式化\"><a href=\"#格式化\" class=\"headerlink\" title=\"格式化\"></a>格式化</h1><p>格式化是对硬盘或磁盘分区进行初始化的一种操作，将分区格式化成不同文件系统；</p>\n<ol>\n<li>先mkfs 然后tab，查看支持的文件系统类型；</li>\n<li><strong>mkfs.ext4 &#x2F;dev&#x2F;sdb2</strong> 格式化sdb2分区为ext4类型；</li>\n<li><strong>ll &#x2F;dev&#x2F;sdb2</strong>：查看磁盘信息；</li>\n</ol>\n<h1 id=\"格式化mkfs\"><a href=\"#格式化mkfs\" class=\"headerlink\" title=\"格式化mkfs\"></a>格式化mkfs</h1><p>mkfs，make filesystem；</p>\n<p>用来在特定分区上建立Linux文件系统；</p>\n<p>语法：mkfs [-V] [-t fstype] [fs-options] filesys [blocks]</p>\n<p>选项：</p>\n<ul>\n<li>device，预备检查的磁盘分区；</li>\n<li>-V：打印详细信息；</li>\n<li>-t：给定文件系统的格式</li>\n<li>-c：在格式化前，检查partition中是否存在坏道；</li>\n<li>-l 将坏道的block的信息输出到bad_blocks_file文件里；</li>\n<li>block，给定block的大小；</li>\n</ul>\n<h1 id=\"磁盘挂载\"><a href=\"#磁盘挂载\" class=\"headerlink\" title=\"磁盘挂载\"></a>磁盘挂载</h1><p><strong>挂载点目录</strong>：根目录下media和mnt两个目录被叫做挂载点目录；</p>\n<p><strong>临时挂载</strong>：使用<code>mount /dev/sda5 /test</code> 表示将<code>/dev/sda5</code>挂载到test目录中，重启后失效；</p>\n<p><strong>永久挂载</strong>：即开机自动挂载，编辑<code>/etc/fstab</code>文件进行操作；</p>\n<h1 id=\"fstab文件\"><a href=\"#fstab文件\" class=\"headerlink\" title=\"fstab文件\"></a>fstab文件</h1><p><code>/etc/fstab</code></p>\n<p>用来存放文件系统的静态信息的文件；</p>\n<p>系统启动时，会自动从这个文件读取信息，并自动酱紫文件中指定文件系统挂载到指定的目录，这样只需要将磁盘的挂载信息写入这个文件中就不需要每次开机启动之后手动挂载了；</p>\n<blockquote>\n<p>文件格式</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;file system&gt; &lt;dir&gt; &lt;type&gt; &lt;options&gt;         &lt;dump&gt; &lt;pass&gt;</span><br><span class=\"line\">/dev/sda1       /     ext4 defaults,noatime    0      1</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">file system 分区名称 可以用路径/dev/sda1，也可以用UUID</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">dir</span> 挂载目录</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\"><span class=\"built_in\">type</span> 文件系统类型</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">options</span> </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">dump 自带备份工具，目前已经不用了</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">pass 检测</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 一些参数</p>\n</blockquote>\n<ul>\n<li>options<ul>\n<li>auto：启动后使用mount -a时自动挂载；</li>\n<li>ro：只读方式挂载文件系统；</li>\n<li>rw：读写模式挂载文件系统；</li>\n<li>user：允许任意用户挂载文件系统；</li>\n<li>nouser：只能被root挂载；</li>\n<li>dev&#x2F;nodev： <strong>解析&#x2F;不解析</strong>文件系统上的块特殊设备；</li>\n<li>noatime&#x2F;nodiratime：不更新<strong>文件系统上&#x2F;目录上</strong>inode访问记录，可以提升性能；</li>\n<li>defaults：使用文件系统的默认挂载参数</li>\n<li>sync&#x2F;async： I&#x2F;O<strong>同步&#x2F;异步</strong>进行；</li>\n<li>suid&#x2F;nosuid： 允许&#x2F;允许suid 操作和设定sgid位，参数通常用于一些特殊任务，使一般用户运行程序时临时提升权限；</li>\n</ul>\n</li>\n<li>dump<ul>\n<li>0表示忽略，1表示进行备份，大部分用户没有安装dump，对于他们而言dump应为0；</li>\n</ul>\n</li>\n<li>pass<ul>\n<li>0,1,2。</li>\n<li>1，检查最高优先权，一般用在根目录；</li>\n<li>2，其他所有需要被检查的设备，优先级低于1；</li>\n<li>0，不会进行fsck检查；</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"逻辑卷管理\"><a href=\"#逻辑卷管理\" class=\"headerlink\" title=\"逻辑卷管理\"></a>逻辑卷管理</h1><h2 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h2><p><strong>LVM-逻辑卷管理</strong>是Linux对磁盘分区进行管理的一种机制，是建立在硬盘和分区之上，文件系统之下的一个逻辑层，可提高磁盘分区管理的灵活性；</p>\n<ul>\n<li>物理单元PE：<code>Physical Extents</code>，具有唯一编号的PE是能被LVM寻址的最小单元；<ul>\n<li>PE的大小可以指定，默认为4MB；</li>\n<li>PE大小一旦确定不能改变；</li>\n<li>同一卷组的所有物理卷的PE大小是一致的；</li>\n</ul>\n</li>\n<li>逻辑单元LE：<code>Logical Extents</code>，逻辑卷中可用于分配的最小存储单元，逻辑区域大小取决于逻辑卷所在卷组中物理区域的大小；在同一个卷组中，LE大小与PE相同，且一一对应；</li>\n<li>物理卷PV，<code>Physical Volume</code>，底层真正提供容量，存放数据的设备，可以是整个硬盘，硬盘上的分区等；</li>\n<li>卷组VG：<code>Volume Group</code>，建立在物理卷之上，由一个或多个物理卷组成，即把物理卷整合起来提供容量分配；<ul>\n<li>一个LVM系统可以有一个或多个卷组；</li>\n</ul>\n</li>\n<li>逻辑卷LV：<code>Logical Volume</code>，逻辑卷建立在卷组之上，是从卷组中“切出”的一块空间，是最终用户使用的逻辑设备，逻辑卷创建之后，其大小可以伸缩。</li>\n</ul>\n<h2 id=\"逻辑卷优点\"><a href=\"#逻辑卷优点\" class=\"headerlink\" title=\"逻辑卷优点\"></a>逻辑卷优点</h2><ul>\n<li>灵活的容量</li>\n<li>可伸缩的存储池；</li>\n<li>在线的数据再分配</li>\n<li>方便设备命名；</li>\n<li>磁盘条带化</li>\n<li>卷镜像和卷快照</li>\n</ul>\n<h2 id=\"逻辑卷创建流程\"><a href=\"#逻辑卷创建流程\" class=\"headerlink\" title=\"逻辑卷创建流程\"></a>逻辑卷创建流程</h2><ol>\n<li>物理磁盘层：fdisk格式化；</li>\n<li>物理分区层：使用pvcreate转换为物理卷；</li>\n<li>物理卷层PV：使用vgcreate创建卷组；</li>\n<li>卷组层VG：使用lvcreate创建逻辑卷；</li>\n<li>逻辑卷层LV，格式化。</li>\n</ol>\n<h2 id=\"PV\"><a href=\"#PV\" class=\"headerlink\" title=\"PV\"></a>PV</h2><p>pvcreate创建物理卷，可以使用物理磁盘或磁盘分区创建；</p>\n<p>语法：pvcreate [OPTION] 设备文件名</p>\n<ul>\n<li>-f，强制创建物理卷，无需用户确认；</li>\n<li>-u，指定设备的UUID；</li>\n<li>-y，所有问题回答yes；</li>\n</ul>\n<p>需要将分区改为LVM分区才能创建物理卷；</p>\n<ul>\n<li>使用分区创建时，磁盘分区后id为83，需要将id改为8e，才能创建物理卷，用fdisk修改id；</li>\n</ul>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ul>\n<li><p>将磁盘hda的6-9分区创建为pv；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pvcreate /dev/hda&#123;6,7,8,9&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看物理卷信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# pvs</span><br><span class=\"line\">  PV         VG        Fmt  Attr PSize   PFree</span><br><span class=\"line\">  /dev/sda2  openeuler lvm2 a--  &lt;15.00g    0</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"VG\"><a href=\"#VG\" class=\"headerlink\" title=\"VG\"></a>VG</h2><p>vgcreate创建LVM卷组；卷组将多个物理卷组织成一个整体，屏蔽了底层物理卷细节；</p>\n<p>语法：vgcreate [OPTION] 卷组名 物理卷列表</p>\n<p>选项：</p>\n<ul>\n<li>-l：卷组上允许创建的最大逻辑卷数；</li>\n<li>-p：卷组上允许添加的最大物理卷数；</li>\n<li>-s：卷组上的物理卷的PE的大小；</li>\n</ul>\n<p>参数：</p>\n<ul>\n<li>卷组名，创建卷组的名称；</li>\n<li>物理卷列表，要加入到的卷组中的物理卷列表；</li>\n</ul>\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ul>\n<li><p>使用vgcreate命令创建卷组“VG1000”，并将物理卷<code>/dev/sdb1</code>和<code>/dev/sdb2</code>添加到卷组中；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# vgcreate vg1000 /dev/sdb1 /dev/sdb2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看卷组信息，使用<code>vgdisplay、vgscan</code>；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# vgs</span><br><span class=\"line\">  VG        #PV #LV #SN Attr   VSize   VFree</span><br><span class=\"line\">  openeuler   1   2   0 wz--n- &lt;15.00g    0</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"lv\"><a href=\"#lv\" class=\"headerlink\" title=\"lv\"></a>lv</h2><p>lv用于创建LVM逻辑卷，逻辑卷创建在卷组之上；</p>\n<p>语法：lvcreate [OPTION] 逻辑卷名称</p>\n<p>选项：</p>\n<ul>\n<li>-L：指定逻辑卷的大小，单位“kKmMgGtT”字节；</li>\n<li>-l：指定逻辑卷的大小（LE数）；</li>\n</ul>\n<p>参数：</p>\n<ul>\n<li>逻辑卷：指定要创建的逻辑卷名称；</li>\n</ul>\n<p>注意：逻辑卷创建完成后，需要格式化，挂载后才能使用。</p>\n<h3 id=\"使用-2\"><a href=\"#使用-2\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>创建逻辑卷</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# vgcreate -L 200M vg1000</span><br></pre></td></tr></table></figure>\n\n<p>使用lvdisplay、lvscan查看卷组信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# lvs</span><br><span class=\"line\">  LV   VG        Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class=\"line\">  root openeuler -wi-ao---- 13.20g</span><br><span class=\"line\">  swap openeuler -wi-ao----  1.79g</span><br><span class=\"line\">[root@localhost ~]# lvscan</span><br><span class=\"line\">  ACTIVE            &#x27;/dev/openeuler/swap&#x27; [1.79 GiB] inherit</span><br><span class=\"line\">  ACTIVE            &#x27;/dev/openeuler/root&#x27; [13.20 GiB] inherit</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"逻辑卷调整基本步骤\"><a href=\"#逻辑卷调整基本步骤\" class=\"headerlink\" title=\"逻辑卷调整基本步骤\"></a>逻辑卷调整基本步骤</h2><h3 id=\"扩容\"><a href=\"#扩容\" class=\"headerlink\" title=\"扩容\"></a>扩容</h3><ol>\n<li><p>扩容前先确认是否有足够的vg空间：<code>vgs</code></p>\n</li>\n<li><p>使用命令扩容：<code>lvextend -L +SIZE lv_device</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# lvextend -L +2G /dev/vg1/lv1</span><br><span class=\"line\">  Size of logical volume vg1/lv1 changed from 2.00 GiB (512 extents) to 4.00 GiB (1024 extents).</span><br><span class=\"line\">  Logical volume vg1/lv1 successfully resized.</span><br><span class=\"line\">[root@localhost ~]# lvs</span><br><span class=\"line\">  LV   VG        Attr       LSize  Pool Origin Data%  Meta%  Move Log Cpy%Sync Convert</span><br><span class=\"line\">  root openeuler -wi-ao---- 13.20g</span><br><span class=\"line\">  swap openeuler -wi-ao----  1.79g</span><br><span class=\"line\">  lv1  vg1       -wi-ao----  4.00g</span><br></pre></td></tr></table></figure>\n\n\n</li>\n<li><p>调整文件系统的大小：<code>resize2fs LV_DEVICE</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# resize2fs /dev/vg1/lv1</span><br><span class=\"line\">resize2fs 1.46.4 (18-Aug-2021)</span><br><span class=\"line\">/dev/vg1/lv1 上的文件系统已被挂载于 /mnt/lv1；需要进行在线调整大小</span><br><span class=\"line\"></span><br><span class=\"line\">old_desc_blocks = 1, new_desc_blocks = 1</span><br><span class=\"line\">/dev/vg1/lv1 上的文件系统现在为 1048576 个块（每块 4k）。</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>注意：不需要卸载，在线扩容。</p>\n<h3 id=\"缩容\"><a href=\"#缩容\" class=\"headerlink\" title=\"缩容\"></a>缩容</h3><ol>\n<li><p>先确定缩减后目标大小，并确保目标逻辑卷大小有足够的的空间容纳原有数据；</p>\n</li>\n<li><p>卸载文件系统：<code>umount</code>，并执行强制检测：<code>e2fsck -f</code>；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# e2fsck -f /dev/vg1/lv1</span><br><span class=\"line\">e2fsck 1.46.4 (18-Aug-2021)</span><br><span class=\"line\">第 1 步：检查inode、块和大小</span><br><span class=\"line\">第 2 步：检查目录结构</span><br><span class=\"line\">第 3 步：检查目录连接性</span><br><span class=\"line\">第 4 步：检查引用计数</span><br><span class=\"line\">第 5 步：检查组概要信息</span><br><span class=\"line\">/dev/vg1/lv1：11/262144 文件（0.0% 为非连续的）， 34894/1048576 块</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>缩减文件系统：<code>resize2fs DEVICE</code>；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# resize2fs /dev/vg1/lv1 1G</span><br><span class=\"line\">resize2fs 1.46.4 (18-Aug-2021)</span><br><span class=\"line\">将 /dev/vg1/lv1 上的文件系统调整为 262144 个块（每块 4k）。</span><br><span class=\"line\">/dev/vg1/lv1 上的文件系统现在为 262144 个块（每块 4k）。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>缩减逻辑卷：<code>lvreduce</code>；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# lvchange -a n /dev/vg1/lv1 # 先将逻辑改为不活跃</span><br><span class=\"line\">[root@localhost ~]# lvreduce -L 1G /dev/vg1/lv1  # 然后缩减lv</span><br><span class=\"line\">  Size of logical volume vg1/lv1 changed from 4.00 GiB (1024 extents) to 1.00 GiB (256 extents).</span><br><span class=\"line\">  Logical volume vg1/lv1 successfully resized.</span><br><span class=\"line\">[root@localhost ~]# lvchange -a y /dev/vg1/lv1 # 再将lv改为活跃</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重新挂载使用。</p>\n</li>\n</ol>\n<h2 id=\"逻辑卷容量变更lvresize\"><a href=\"#逻辑卷容量变更lvresize\" class=\"headerlink\" title=\"逻辑卷容量变更lvresize\"></a>逻辑卷容量变更lvresize</h2><p>lvresize指令用于调整逻辑卷空间大小，可以增大空间和缩小空间，实际包含了lvextend和lvreduce的功能；</p>\n<ul>\n<li>语法：lvresize [OPTION] 逻辑卷名称；</li>\n<li>选项：<ul>\n<li>-L：指定逻辑卷的大小，单位”kKmMgGtT“；</li>\n<li>-l：指定逻辑卷大小（LE数）；</li>\n</ul>\n</li>\n<li>参数<ul>\n<li>逻辑卷：指定要创建的逻辑卷名称；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"使用-3\"><a href=\"#使用-3\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>将逻辑卷空间增加200M</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# lvresize -L +200M /dev/vg1000/lvol0</span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":["Linux"]},{"title":"openEuler 4 源代码软件安装 systemd","url":"http://zswh33.github.io/2022/11/26/openEuler-4/","content":"<h1 id=\"源代码软件安装\"><a href=\"#源代码软件安装\" class=\"headerlink\" title=\"源代码软件安装\"></a>源代码软件安装</h1><h2 id=\"源代码软件\"><a href=\"#源代码软件\" class=\"headerlink\" title=\"源代码软件\"></a>源代码软件</h2><p>Linux安装软件除了用rpm，还可以使用<strong>源代码软件安装</strong>；</p>\n<p>Linux下许多软件通过源代码包发行，源代码包移植性较好，不同用户可以编译并运行；</p>\n<blockquote>\n<p> 包管理软件优先使用软件包安装，但也会出现需要源代码安装的场景：</p>\n</blockquote>\n<ul>\n<li>软件包版本太旧；</li>\n<li>没有现成软件包可用；</li>\n<li>软件包缺乏某些特性；</li>\n<li>编译参数不适用当前业务 <strong>或</strong> 可通过优化编译参数提高性能；</li>\n</ul>\n<blockquote>\n<p>优缺点</p>\n</blockquote>\n<p>优点：</p>\n<ul>\n<li>编译过程可用指定参数，灵活性好；</li>\n<li>经过本机比阿尼，使得软件与本机兼容性最好。</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>配置及编译过程繁琐；</li>\n<li>可用由于一些问题导致没有依赖包；</li>\n</ul>\n<h2 id=\"如何进行源代码安装\"><a href=\"#如何进行源代码安装\" class=\"headerlink\" title=\"如何进行源代码安装\"></a>如何进行源代码安装</h2><p><em>configure、make、make install</em></p>\n<h3 id=\"基本步骤\"><a href=\"#基本步骤\" class=\"headerlink\" title=\"基本步骤\"></a>基本步骤</h3><ul>\n<li>下载源码并解压；</li>\n<li>查看README和INSTALL文件<ul>\n<li>这些文件记录了软件的安装方法和注意事项；</li>\n</ul>\n</li>\n<li>创建Makefile文件<ul>\n<li>执行.&#x2F;configure脚本命令生成；</li>\n</ul>\n</li>\n<li>编译<ul>\n<li>通过make命令将源码自动编译成二进制文件；</li>\n</ul>\n</li>\n<li>安装软件<ul>\n<li>make install将二进制文件安装到对应目录中。</li>\n<li>目录默认为：<code>/usr/local</code></li>\n<li>配置文件位置为：<code>/usr/local/etc/</code>或<code>/usr/local/**/etc</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Systemd\"><a href=\"#Systemd\" class=\"headerlink\" title=\"Systemd\"></a>Systemd</h1><p><em>d，deamon，守护进程</em></p>\n<p>在Linux中，systemd是与SysV和LSB初始化脚本兼容的系统和服务管理器，开启systemd服务可以提供基于守护进程的按需启动策略；</p>\n<p>支持快照和系统状态恢复，维护系统挂载和自挂载点，使得各服务之间基于从属关系实现更为精细的逻辑控制，具有更高的并行性能；</p>\n<h2 id=\"unit\"><a href=\"#unit\" class=\"headerlink\" title=\"unit\"></a>unit</h2><p>systemd服务的开启和监督系统基于unit的概念；</p>\n<p>unit由一个与配置文件对应的名称和类型组成，unit通常有以下几种类型：</p>\n<p>unit，单元：让系统直到如何进行操作和管理的资源。</p>\n<ul>\n<li>Service unit：系统服务；</li>\n<li>Target unit：一组systemd units；</li>\n<li>Automount unit：文件系统挂载点；</li>\n<li>Device unit：内核识别的设备文件；</li>\n<li>Mount unit：文件系统挂载点；</li>\n<li>Path unit：在一个文件系统中的文件或目录；</li>\n<li>Scope unit：外部创建的进程；</li>\n<li>Snapshot unit：systemd manager的保存状态。</li>\n</ul>\n<p>特性：</p>\n<ul>\n<li>更快的启动速度；</li>\n<li>提供按需启动能力；</li>\n<li>采用cgroup特性追踪和管理进程生命周期；</li>\n<li>启动挂载点和自动挂载的管理；</li>\n<li>实现事务性依赖关系管理；</li>\n<li>与SysV初始化脚本兼容；</li>\n<li>能够对系统进行快照和恢复。</li>\n</ul>\n<h2 id=\"如何使用systemd\"><a href=\"#如何使用systemd\" class=\"headerlink\" title=\"如何使用systemd\"></a>如何使用systemd</h2><p>systemd使用systemctl命令来对系统服务进行运行、关闭、重启、状态打印、启用和禁用的操作；</p>\n<p>systemctl与sysvinit（service）命令功能相似，建议用systemctl来进行系统服务管理；</p>\n<ul>\n<li><p><strong>查看当前正在运行的服务</strong>：<code>systemctl list-units --type service</code>；</p>\n<ul>\n<li>若加上 <code>--all</code> 参数，则列出所有的服务；</li>\n</ul>\n</li>\n<li><p><strong>查看特定服务的状态</strong>：<code>systemctl status NAME.service</code></p>\n<ul>\n<li><pre><code class=\"shell\">[root@localhost node-v18.12.1]# systemctl status firewalld\n● firewalld.service - firewalld - dynamic firewall daemon\n     Loaded: loaded (/usr/lib/systemd/system/firewalld.service; enabled; vendor&gt;\n     Active: active (running) since Mon 2022-10-24 02:38:05 CST; 22h ago\n       Docs: man:firewalld(1)\n   Main PID: 829 (firewalld)\n      Tasks: 2 (limit: 8932)\n     Memory: 26.8M\n     CGroup: /system.slice/firewalld.service\n             └─829 /usr/bin/python3 -s /usr/sbin/firewalld --nofork --nopid\n</code></pre>\n</li>\n<li><p>结果参数：</p>\n<ul>\n<li>Loaded：服务是否被加载，并显示对应的绝对路径是否启用；</li>\n<li>Active：服务是否正在运行，并显示时间节点；</li>\n<li>Main PID：服务的PID值；</li>\n<li>CGroup：相关控制组的其他信息</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>运行服务</strong>：<code>systemctl start NAME.service</code></p>\n</li>\n<li><p><strong>关闭服务</strong>：<code>systemctl stop NAME.service</code></p>\n</li>\n<li><p><strong>重启服务</strong>：<code>systemctl restart NAME.service</code></p>\n</li>\n<li><p><strong>启用服务</strong>（开机启动）：<code>systemctl enable NAME.service</code></p>\n</li>\n<li><p><strong>禁用服务</strong>（开机不启动）：<code>systemctl disable NAME.service</code></p>\n</li>\n</ul>\n<h2 id=\"其他操作\"><a href=\"#其他操作\" class=\"headerlink\" title=\"其他操作\"></a>其他操作</h2><ul>\n<li><strong>关闭系统</strong>：<code>systemctl poweroff</code></li>\n<li><strong>重启系统</strong>：<code>systemctl reboot</code></li>\n<li><strong>系统待机</strong>：<code>systemctl suspend</code></li>\n<li><strong>系统休眠</strong>：<code>systemctl hibernate</code><ul>\n<li>系统待机并休眠：<code>systemctl hybrid-sleep</code></li>\n</ul>\n</li>\n</ul>\n","categories":[],"tags":["Linux"]},{"title":"OpenEuler 3 文件权限设置 文件属主设置 umask DNF软件包管理","url":"http://zswh33.github.io/2022/11/26/OpenEuler-3/","content":"<h1 id=\"常用的权限设置命令\"><a href=\"#常用的权限设置命令\" class=\"headerlink\" title=\"常用的权限设置命令\"></a>常用的权限设置命令</h1><p>chmod：修改文件权限，使用权限：文件所有者；</p>\n<p>chown：修改文件主属组，使用权限：管理员；</p>\n<p>chgrp：修改文件属组，使用权限：管理员；</p>\n<p>umask：遮罩码，使用权限：管理员、普通用户。</p>\n<h2 id=\"chmod\"><a href=\"#chmod\" class=\"headerlink\" title=\"chmod\"></a>chmod</h2><p>文件调用权限针对文件所有者、所属组和其他人；</p>\n<p>语法：chmod [OPTION]… MODE[,MODE]… FILE…</p>\n<p>选项：</p>\n<ul>\n<li>操作对象<ul>\n<li>u，表示用户，文件的所有者</li>\n<li>g，表示用户组，表示文件或目录所属组；</li>\n<li>o，其他用户；</li>\n<li>a，所有用户；</li>\n</ul>\n</li>\n<li>操作符<ul>\n<li>+，添加权限；</li>\n<li>-，减少权限；</li>\n<li>&#x3D;，给定特定权限；</li>\n</ul>\n</li>\n<li>赋予的权限<ul>\n<li>r，读权限；</li>\n<li>w，写权限；</li>\n<li>x，执行权限；</li>\n</ul>\n</li>\n</ul>\n<p>根据配置场景，可以同时修改文件的一组权限，也可以只修改文件的某个权限；</p>\n<ul>\n<li>如：<ul>\n<li>chmod u+r FILE，表示给予<strong>文件所有者</strong>的<strong>读</strong>权限；</li>\n<li>chmod g-w FILE，删除<strong>文件所属组</strong>的<strong>写</strong>权限</li>\n<li>chmod ug-x FILE，删除<strong>文件所有者和文件所属组</strong>的<strong>执行</strong>权限；</li>\n<li>chmod 777 FILE，为<strong>所有操作对象</strong>赋予<strong>所有权限</strong>；</li>\n</ul>\n</li>\n<li>数字：<ul>\n<li>4：读</li>\n<li>2：写</li>\n<li>1：执行</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"chown\"><a href=\"#chown\" class=\"headerlink\" title=\"chown\"></a>chown</h2><p>chown可以修改文件的所有者，可以改为指定用户或组；</p>\n<p>语法：<code>chown [OPTION]... [OWNER][:[GROUP]] FILE...</code></p>\n<p>选项：</p>\n<ul>\n<li>-c：显示更改的部分的信息；</li>\n<li>-f：忽略错误信息；</li>\n<li>-h：修改符号链接；</li>\n<li>-v：显示详细的处理信息；</li>\n<li>-R：处理指定目录以及其子目录下所有文件；</li>\n</ul>\n<p>根据配置场景，可以只修改属主，也可以只修改属组，也可同时修改<strong>属主和属组</strong>；</p>\n<ul>\n<li>修改属主：chown OWNER；</li>\n<li>修改属组：chwon :GROUP；</li>\n<li>同时修改：chwon OWNER:GROUP；</li>\n</ul>\n<h2 id=\"chgrp\"><a href=\"#chgrp\" class=\"headerlink\" title=\"chgrp\"></a>chgrp</h2><p>修改文件或目录的所属组；</p>\n<p>语法：chgrp [OPTION]… GROUP FILE…</p>\n<p>选项：</p>\n<ul>\n<li>-c：显示修改的部分；</li>\n<li>-v：显示详细修改过程；</li>\n<li>-f：不显示错误信息；</li>\n<li>-h：只修改符号连接的文件，不修改其他任何文件；</li>\n<li>-R：递归，修改目录下所有文件和子目录；</li>\n</ul>\n<p>使用chgrp修改属组与chown修改属组是一样的，不同的是，chgrp不需要“:”；</p>\n<h2 id=\"umask-预设权限掩码\"><a href=\"#umask-预设权限掩码\" class=\"headerlink\" title=\"umask 预设权限掩码\"></a>umask 预设权限掩码</h2><p>指定在建立文件或目录时进行权限掩码的预设；</p>\n<p>修改在<strong>建立文件或目录时</strong>使用的<strong>默认权限</strong>的掩码。</p>\n<p><strong>掩码</strong>可以同时表示”<strong>文件夹</strong>“和”<strong>文件</strong>“的权限。</p>\n<p>语法：umask [OPTION] [mode]</p>\n<p>选项：</p>\n<ul>\n<li>-p，显示命令名称；</li>\n<li>-S，以文字形式查看当前文件权限掩码；</li>\n</ul>\n<blockquote>\n<p>umask计算</p>\n</blockquote>\n<p>文件夹默认权限：<code>777 - 权限掩码</code>；</p>\n<p>文件默认权限：<code>777 - 权限掩码 - 111</code>；</p>\n<blockquote>\n<p>常见umask值与之对应的文件或目录权限：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>umask值</th>\n<th>文件权限</th>\n<th>目录权限</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>022</td>\n<td>644</td>\n<td>755</td>\n</tr>\n<tr>\n<td>027</td>\n<td>640</td>\n<td>750</td>\n</tr>\n<tr>\n<td>002</td>\n<td>664</td>\n<td>775</td>\n</tr>\n<tr>\n<td>006</td>\n<td>660</td>\n<td>771</td>\n</tr>\n<tr>\n<td>007</td>\n<td>660</td>\n<td>770</td>\n</tr>\n</tbody></table>\n<h2 id=\"sudo-权限赋予\"><a href=\"#sudo-权限赋予\" class=\"headerlink\" title=\"sudo 权限赋予\"></a>sudo 权限赋予</h2><p>sudo允许普通用户执行root用户可以执行的任务；</p>\n<p>语法：sudo [OPTION]</p>\n<p>选项：</p>\n<ul>\n<li><p>-k，使用者下次执行需询问密码；</p>\n</li>\n<li><p>-l，打印使用者权限；</p>\n</li>\n<li><p>-L，打印sudos设置；</p>\n</li>\n<li><p>-V，打印版本编号；</p>\n</li>\n<li><p>在openEuler系统中，</p>\n<ul>\n<li>不能使用su切换root用户，</li>\n<li>su只能用来：让root用户能切换其他用户。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"RPM软件包管理\"><a href=\"#RPM软件包管理\" class=\"headerlink\" title=\"RPM软件包管理\"></a>RPM软件包管理</h1><p>RPM是一种用于<strong>互联网下载包打包</strong>和<strong>软件包自动安装工具</strong>；</p>\n<p>可以生成RPM后缀文件作为<strong>软件包文件</strong>；</p>\n<p>可以用来管理应用程序的<strong>安装、卸载和维护</strong>；</p>\n<p>rpm，全名<strong>red-hat package manager</strong>红帽包管理器；</p>\n<h2 id=\"RPM软件包命名格式\"><a href=\"#RPM软件包命名格式\" class=\"headerlink\" title=\"RPM软件包命名格式\"></a>RPM软件包命名格式</h2><p>name-version-release.arch.rpm</p>\n<p>软件名称-版本号-发行版号.处理器架构.rpm</p>\n<ul>\n<li>版本号<ul>\n<li>格式：x.y.z<ul>\n<li>x：主版本号</li>\n<li>y：次版本号，代表软件功能的增加；</li>\n<li>z：修正版本号，代表修正bug；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>release<ul>\n<li>也可代表是第几次编译产生的；</li>\n</ul>\n</li>\n<li>arch<ul>\n<li>常见平台：i386，i586，i686等；</li>\n<li>有时候为<strong>noarch</strong>，表示软件包可以在任何平台安装；</li>\n</ul>\n</li>\n<li>rpm<ul>\n<li>软件包后缀，表示可以用rpm安装；</li>\n<li>有时候为“.src.rpm”表示这是一个源代码包；</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h2><p>优点：</p>\n<ul>\n<li>简单便捷，兼容版本；</li>\n<li>参数信息记录在数据库中，便于查询、升级或卸载软件；</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>安装环境需与打包环境一致；</li>\n<li>具有很强的依赖关系，卸载软件时需要对依赖性软件优先处理，否则会导致其他软件无法正常使用；</li>\n</ul>\n<h2 id=\"RPM命令\"><a href=\"#RPM命令\" class=\"headerlink\" title=\"RPM命令\"></a>RPM命令</h2><p>RPM一般用来安装、删除、升级、刷新和查询；</p>\n<p>语法：rpm [OPTION…]</p>\n<p>选项：</p>\n<ul>\n<li>-i，指定安装的软件包；<ul>\n<li>-v，显示详细安装过程，显示安装过程中正在安装的软件信息；</li>\n<li>-h，使用“#”符号显示rpm软件安装过程及进度；</li>\n</ul>\n</li>\n<li><strong>-U</strong> 或 <strong>-F</strong>，升级指定软件包；<ul>\n<li>-U，若存在旧包，删除旧包并安装新包；</li>\n<li>-F，若存在旧包，则在旧包的基础上进行升级；</li>\n</ul>\n</li>\n<li>-e，卸载软件；<ul>\n<li>-nodeps，不考虑依赖问题，强制卸载。（不建议使用）；</li>\n<li>-allmatches，若软件包存在多个版本，则使用这个命令进行批量卸载；</li>\n</ul>\n</li>\n<li>-q，查询系统是否已安装指定软件包或查询指定rpm包内容信息；<ul>\n<li>-qa，查询<strong>所有</strong>安装的软件包，可以不给出文件参数；</li>\n<li><em>下面所有需要给出文件名参数</em></li>\n<li>-qf，查询<strong>所有已安装过（包括被删除的）</strong>的软件包；</li>\n<li>-qp，查询<strong>未安装</strong>的软件包；</li>\n<li>-ql，查询软件包中的<strong>文件列表和完整目录</strong>；</li>\n<li>-qi，查询软件包<strong>详细信息</strong>；</li>\n<li>-qc，查询软件包的<strong>配置文件</strong>；</li>\n<li>-qd，查询软件包<strong>帮助文档</strong>；</li>\n</ul>\n</li>\n<li>-a，查看系统已安装的所有软件包；</li>\n<li>-V，查询已安装软件包版本信息；</li>\n<li>-c，显示所有配置文件；</li>\n<li>-p，查询&#x2F;校验一个软件包的文件；</li>\n</ul>\n<blockquote>\n<p>使用示例</p>\n</blockquote>\n<p>安装软件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# rpm -ivh mysql-community-server-8.0.31-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure>\n\n<p>卸载软件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# rpm -e mysql-community-server</span><br></pre></td></tr></table></figure>\n\n<p>更新软件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# rpm -U mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新，先卸载旧的，再安装新的</span></span><br><span class=\"line\">[root@localhost ~]# rpm -Uvh mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新并展示 详细信息和进度条</span></span><br><span class=\"line\">[root@localhost ~]# rpm -F mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新，在旧的基础上升级新的</span></span><br><span class=\"line\">[root@localhost ~]# rpm -Fvh mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">更新并展示 详细信息和进度条</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 查询</p>\n</blockquote>\n<p>查询软件安装</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# rpm -q mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查软件包是否安装</span></span><br><span class=\"line\">[root@localhost ~]# rpm -qa</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查询所有安装的软件包</span></span><br></pre></td></tr></table></figure>\n\n<p>查询软件包文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# rpm -ql nano</span><br><span class=\"line\">/etc/ima/digest_lists.tlv/0-metadata_list-compact_tlv-nano-4.9.3-2.oe2209.x86_64</span><br><span class=\"line\">/etc/ima/digest_lists/0-metadata_list-compact-nano-4.9.3-2.oe2209.x86_64</span><br><span class=\"line\">/usr/bin/nano</span><br><span class=\"line\">/usr/bin/rnano</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<p>查询软件包信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# rpm -qi nano</span><br><span class=\"line\">Name        : nano</span><br><span class=\"line\">Version     : 4.9.3</span><br><span class=\"line\">Release     : 2.oe2209</span><br><span class=\"line\">Architecture: x86_64</span><br><span class=\"line\">Install Date: 2022年10月24日 星期一 01时32分28秒</span><br><span class=\"line\">Group       : Unspecified</span><br><span class=\"line\">Size        : 2088365</span><br><span class=\"line\">License     : GPLv3+</span><br><span class=\"line\">Signature   : RSA/SHA1, 2022年09月28日 星期三 14时49分19秒, Key ID d557065eb25e7f66</span><br><span class=\"line\">Source RPM  : nano-4.9.3-2.oe2209.src.rpm</span><br><span class=\"line\">Build Date  : 2021年08月02日 星期一 08时00分00秒</span><br><span class=\"line\">Build Host  : ecs-obsworker-205</span><br><span class=\"line\">Packager    : http://openeuler.org</span><br><span class=\"line\">Vendor      : http://openeuler.org</span><br><span class=\"line\">URL         : https://www.nano-editor.org</span><br><span class=\"line\">Summary     : Nano is a tiny GNU editor</span><br><span class=\"line\">Description :</span><br><span class=\"line\">Nano is a tiny GNU editor</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"DNF软件包管理\"><a href=\"#DNF软件包管理\" class=\"headerlink\" title=\"DNF软件包管理\"></a>DNF软件包管理</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><blockquote>\n<p>DNF的上一届：yum包管理</p>\n</blockquote>\n<p><em>yum，全称：Yellodog Updater modified</em></p>\n<p><em>yum是历史的产物，是光荣的牺牲者。</em></p>\n<p>软件管理工具yum基于rpm包管理；</p>\n<p>可以从指定服务器自动下载rpm服务器并安装；</p>\n<p>可以解决软件包间依赖关系，提升效率。</p>\n<p>由于<strong>yum工具有性能差、内存占用多、依赖解析速度慢、源文件依赖性较高</strong>等问题；</p>\n<p>对于这种情况，<strong>DNF工具</strong>诞生；</p>\n<p>DNF管理工具解决了一些yum工具的问题，并在各个方面得到了提升。</p>\n<blockquote>\n<p>DNF工具简述</p>\n</blockquote>\n<p>DNF，Dandified YUM，即<strong>修饰过的YUM</strong>；</p>\n<p>DNF可以查询软件包的信息，从指定软件库去获取软件包，并可以自动处理依赖关系，实现安装、卸载和更新；</p>\n<p>DNF与yum完全兼容，可以使用yum命令行使用DNF工具；</p>\n<p>使用需要root权限。</p>\n<h2 id=\"环节\"><a href=\"#环节\" class=\"headerlink\" title=\"环节\"></a>环节</h2><ul>\n<li>配置DNF<ul>\n<li>配置参数</li>\n<li>创建本地软件源仓库；</li>\n<li>添加、启用或禁用软件源</li>\n</ul>\n</li>\n<li>管理软件包&#x2F;软件包组；<ul>\n<li>列出软件包&#x2F;软件包组清单；</li>\n<li>显示RPM包信息，显示软件包信息；</li>\n<li>下载rpm包；安装rpm包；安装软件包组；</li>\n<li>删除软件包&#x2F;软件包组；</li>\n</ul>\n</li>\n<li>检查更新<ul>\n<li>更新所有包及其依赖。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"软件源\"><a href=\"#软件源\" class=\"headerlink\" title=\"软件源\"></a>软件源</h2><p>Linux系统免费的应用程序安装仓库；</p>\n<p>软件源可以是<strong>网络服务器</strong>、<strong>光盘</strong>或<strong>硬盘上的一个目录</strong>；</p>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><p>位置：<code>/etc/dnf/dnf/conf</code>；</p>\n<p>内容：</p>\n<ul>\n<li>main部分保存DNF的全局配置；<ul>\n<li>cachedir：缓存目录，存储RPM包和数据库文件；</li>\n<li>best：升级包时，总是尝试安装其最高版本，若无法安装，则提示无法安装原因并停止安装；</li>\n<li>installoney_limit：可以同时安装<strong>“installonlypkgs”命令列出的包</strong>的数量，默认为3；<ul>\n<li>installonlypkgs，指的是手动指定的<strong>只能安装，不能升级</strong>的软件包；</li>\n</ul>\n</li>\n<li>clean_requirements_on_remove：在remove时删除软件时，删除不再使用的依赖项，默认为True。这里只能删除<strong>安装其他软件包时，DNF自动安装</strong>的软件包；</li>\n</ul>\n</li>\n<li>repository允许用户自定义软件仓库。这里要求各个仓库的名称不能相同，用户可以添加一个或多个repository来修改需安装软件源位置；<ul>\n<li>name&#x3D;软件源名称；</li>\n<li>baseurl，软件仓库的地址，可以使用http、ftp和file等协议；<ul>\n<li><a href=\"http://path/to/repo\">http://path/to/repo</a></li>\n<li><a href=\"ftp://path/to/repo\">ftp://path/to/repo</a></li>\n<li>file:&#x2F;&#x2F;&#x2F;path&#x2F;to&#x2F;local&#x2F;repo</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"软件源管理\"><a href=\"#软件源管理\" class=\"headerlink\" title=\"软件源管理\"></a>软件源管理</h2><h3 id=\"添加软件源\"><a href=\"#添加软件源\" class=\"headerlink\" title=\"添加软件源\"></a>添加软件源</h3><p>添加软件源有多个方法；</p>\n<ul>\n<li><p>方法1：修改配置文件<code>/etc/dnf/dnf.conf</code>，详细查看上一节最后；</p>\n</li>\n<li><p>方法2：在&#x2F;etc&#x2F;yum.repos.d&#x2F;目录下添加“.repo”文件；</p>\n</li>\n<li><p>方法3：使用命令添加软件源：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf config-manager --add-repo repository_url</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"查询软件源\"><a href=\"#查询软件源\" class=\"headerlink\" title=\"查询软件源\"></a>查询软件源</h3><p><code>dnf repolist</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# dnf repolist</span><br><span class=\"line\">repo id                                 repo name</span><br><span class=\"line\">EPOL                                    EPOL</span><br><span class=\"line\">OS                                      OS</span><br><span class=\"line\">debuginfo                               debuginfo</span><br><span class=\"line\">everything                              everything</span><br><span class=\"line\">source                                  source</span><br><span class=\"line\">update                                  update</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启用-x2F-禁用软件源\"><a href=\"#启用-x2F-禁用软件源\" class=\"headerlink\" title=\"启用&#x2F;禁用软件源\"></a>启用&#x2F;禁用软件源</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">启用软件源</span></span><br><span class=\"line\">dnf config-manager --set-enable repo_id</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">禁用软件源</span></span><br><span class=\"line\">dnf config-manager --set-disable repo_id</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建本地软件源仓库\"><a href=\"#创建本地软件源仓库\" class=\"headerlink\" title=\"创建本地软件源仓库\"></a>创建本地软件源仓库</h3><p>可以创建本地软件源仓库，保存需要的软件包；</p>\n<p>下面是创建本地软件源的方法：</p>\n<ul>\n<li><p>安装createrepo</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf install createrepo；</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>将需要的软件包放置在目录下，如:&#x2F;mnt&#x2F;local_repo&#x2F;；</p>\n</li>\n<li><p>执行命令创建软件源；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">createrepo --database /mnt/local_repo</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"管理软件包\"><a href=\"#管理软件包\" class=\"headerlink\" title=\"管理软件包\"></a>管理软件包</h2><h3 id=\"查询软件包-search\"><a href=\"#查询软件包-search\" class=\"headerlink\" title=\"查询软件包 search\"></a>查询软件包 search</h3><p><code>dnf search 软件包名</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# dnf search mysql</span><br><span class=\"line\">Last metadata expiration check: 2:04:39 ago on 2022年10月24日 星期一 14时00分16秒.</span><br><span class=\"line\">========================= Name &amp; Summary Matched: mysql ==========================</span><br><span class=\"line\">mysql.x86_64 : MySQL client programs and shared libraries</span><br><span class=\"line\">mysql.src : MySQL client programs and shared libraries</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"列出已安装-x2F-可用软件包-list\"><a href=\"#列出已安装-x2F-可用软件包-list\" class=\"headerlink\" title=\"列出已安装&#x2F;可用软件包 list\"></a>列出已安装&#x2F;可用软件包 list</h3><p>列出所有可用软件包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf list all</span><br></pre></td></tr></table></figure>\n\n<p>查看指定软件包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# dnf list mysql</span><br><span class=\"line\">Last metadata expiration check: 2:07:14 ago on 2022年10月24日 星期一 14时00分16秒.</span><br><span class=\"line\">Available Packages</span><br><span class=\"line\">mysql.src                         8.0.29-1.oe2209                       source</span><br><span class=\"line\">mysql.x86_64                      8.0.29-1.oe2209                       OS</span><br><span class=\"line\">mysql.x86_64                      8.0.29-1.oe2209                       everything</span><br></pre></td></tr></table></figure>\n\n<p>其他查询</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dnf list installed # 列出已安装的包</span><br><span class=\"line\">dnf list available # 列出可用包</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"查询软件包信息-info\"><a href=\"#查询软件包信息-info\" class=\"headerlink\" title=\"查询软件包信息 info\"></a>查询软件包信息 info</h3><p><code>dnf info 软件包名</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# dnf info mysql</span><br><span class=\"line\">Last metadata expiration check: 2:09:03 ago on 2022年10月24日 星期一 14时00分16秒.</span><br><span class=\"line\">Available Packages</span><br><span class=\"line\">Name         : mysql</span><br><span class=\"line\">Version      : 8.0.29</span><br><span class=\"line\">Release      : 1.oe2209</span><br><span class=\"line\">Architecture : src</span><br><span class=\"line\">Size         : 620 M</span><br><span class=\"line\">Source       : None</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"下载download、安装install、删除remove\"><a href=\"#下载download、安装install、删除remove\" class=\"headerlink\" title=\"下载download、安装install、删除remove\"></a>下载download、安装install、删除remove</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">下载mysql</span></span><br><span class=\"line\">[root@localhost ~]# dnf download mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">安装mysql，若mysql不存在，则下载并安装mysql</span></span><br><span class=\"line\">[root@localhost ~]# dnf install mysql</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">移除mysql</span></span><br><span class=\"line\">[root@localhost ~]# dnf remove mysql</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"管理软件包组\"><a href=\"#管理软件包组\" class=\"headerlink\" title=\"管理软件包组\"></a>管理软件包组</h2><p>注意，这里groups和group可通用。</p>\n<ul>\n<li><p><strong>查看当前信息</strong>：<code>dnf groups summary</code></p>\n</li>\n<li><p><strong>列出软件包组和组id</strong>：<code>dnf groups list</code></p>\n<ul>\n<li>列出已安装的软件包组信息：<code>dnf groups list --installed </code><ul>\n<li>-v：列出详细信息；</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p><strong>列出软件包组必装和选装软件包组</strong>：<code>dnf groups info 包组名</code></p>\n</li>\n<li><p><strong>安装软件包组</strong>：<code>dnf group install group_name/group_id</code></p>\n</li>\n<li><p><strong>删除软件包组</strong>：<code>dnf group remove group_name/group_id</code></p>\n</li>\n</ul>\n<h2 id=\"检查并更新\"><a href=\"#检查并更新\" class=\"headerlink\" title=\"检查并更新\"></a>检查并更新</h2><p>检查所有更新：<code>dnf check-update</code></p>\n<p>更新指定软件包：<code>dnf update package_name</code></p>\n<p>更新指定软件包组：<code>dnf group update group_name</code></p>\n<h1 id><a href=\"#\" class=\"headerlink\" title></a></h1>","categories":[],"tags":["Linux"]},{"title":"openEuler 2 常见文本编辑器 文件摘选 用户管理 用户组管理 文件权限","url":"http://zswh33.github.io/2022/11/25/openEuler-2/","content":"<h1 id=\"Linux常见文本编辑器\"><a href=\"#Linux常见文本编辑器\" class=\"headerlink\" title=\"Linux常见文本编辑器\"></a>Linux常见文本编辑器</h1><ul>\n<li>emacs</li>\n<li>nano</li>\n<li>gedit</li>\n<li>kedit</li>\n<li>vi</li>\n<li>vim<ul>\n<li>基本模式：普通、插入、可视、选择、命令行、Ex</li>\n<li>派生模式：操作符等待模式、插入普通、插入可视、插入选择、替换模式；</li>\n<li>其他：Evim</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a>vim</h1><ul>\n<li><p>移动光标：</p>\n<ul>\n<li><strong>上下左右</strong> 或 <strong>jkhl</strong> 向上下左右移动光标；</li>\n<li>0 移动到行首；</li>\n<li>g0 移动到光标所在行行首；</li>\n<li><strong>home&#x2F;end</strong>：跳转到 行首&#x2F;行尾。</li>\n<li>:n 移动到第n行；</li>\n<li>gg：回到文件头部；</li>\n<li>G：到文件底部；</li>\n</ul>\n</li>\n<li><p>数据操作：</p>\n<ul>\n<li>复制<ul>\n<li>yy 或 Y：复制整行文本；</li>\n<li>[n]yy：复制n行文本</li>\n<li>y[n]w：复制一{n}个单词；</li>\n</ul>\n</li>\n<li>粘贴（分为：一行数据、一个字段）<ul>\n<li>p：粘贴在当前行下面&#x2F;粘贴在光标后面；</li>\n<li>P：粘贴在当前行上面&#x2F;粘贴在光标前；</li>\n</ul>\n</li>\n<li>删除<ul>\n<li>d[n]w：删除（剪切）1{n}个单词；</li>\n<li>[n]dd：删除（剪切）1{n}行。</li>\n</ul>\n</li>\n<li>查找<ul>\n<li>:&#x2F;word 在光标之后查找字符串word，按n向后继续搜索，shift+n向上搜索；</li>\n<li>:?word 在光标之前查找字符串word，按n向后继续搜索；</li>\n</ul>\n</li>\n<li>替换<ul>\n<li>:1,5s&#x2F;word1&#x2F;word2&#x2F;g，将文档中1-5行word1替换为word2，不加g表示只替换每行第一个word1</li>\n<li>%s&#x2F;word1&#x2F;word2&#x2F;gi，将文档所有word1替换为word2，不区分大小写；</li>\n<li>**&#x2F;<strong>表示替换光标后的第一个word，</strong>?**表示替换光标前第一个word。</li>\n<li>1,5 表示1-5行；</li>\n<li>%表示所有行；</li>\n<li>i表示不区分大小写。</li>\n</ul>\n</li>\n<li>撤销和重做<ul>\n<li>u 撤销最近的改变；</li>\n<li>U 撤销当前行自从光标定位在上面开始的所有改变；</li>\n<li>ctrl-r 重做最后一次撤销。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>一些命令</p>\n<ul>\n<li><strong>set nu</strong>：显示行编号；</li>\n<li><strong>set nonu</strong>：隐藏行编号。</li>\n<li><strong>set hlsearch</strong>： 高亮所有搜索结果</li>\n</ul>\n</li>\n<li><p>保存文件并退出</p>\n<ul>\n<li>在插入模式下按esc退出插入模式</li>\n<li>:w 保存</li>\n<li>:q 退出</li>\n<li>:wq 保存并退出</li>\n<li>:q! 强制退出</li>\n<li>:wq! 强制保存并退出</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"查看文件cat\"><a href=\"#查看文件cat\" class=\"headerlink\" title=\"查看文件cat\"></a>查看文件cat</h1><ul>\n<li>cat是一个文本文件查看和链接工具；<ul>\n<li>cat filename，查看文件内容；</li>\n<li>cat &gt; filename，编辑一个文件；</li>\n<li>cat file1 file2 &gt; file3，将几个文件合并为一个文件；</li>\n<li>一个 <code>&gt;</code> 表示<strong>覆盖</strong>，两个 <code>&gt;&gt;</code> 表示<strong>追加</strong>。</li>\n</ul>\n</li>\n<li>常用选项；<ul>\n<li>-n：从1开始对所有行编号并显示在每行开头；</li>\n<li>-b：对非空行编号；</li>\n<li>-s：当有多个空行，则只输出一个空行；</li>\n<li>-E：在每行结尾增加**$**；</li>\n<li>–help：显示帮助信息；</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"more\"><a href=\"#more\" class=\"headerlink\" title=\"more\"></a>more</h1><p>选项：</p>\n<ul>\n<li>+n，从第n行开始显示；</li>\n<li>-n，定义屏幕大小为n行；</li>\n<li>-c，从顶部清屏，然后显示；</li>\n<li>-s，把连续的多个空行显示为一行。</li>\n</ul>\n<p>操作</p>\n<ul>\n<li>Enter：向下滚动一行；</li>\n<li>Ctrl+F：下一页；</li>\n<li>空格：下一页；</li>\n<li>Ctrl+B：上一页；</li>\n<li>b：上一页；</li>\n<li>&#x3D;：输出当前行号；</li>\n<li>q：退出</li>\n</ul>\n<h1 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a>less</h1><p>格式：less [option] 文件；</p>\n<ul>\n<li>-f：强制打开特殊文件，如外围设备代号，目录和二进制文件；</li>\n<li>-g：只高亮最后搜到的关键字；</li>\n<li>-i：忽略索索大小写；</li>\n<li>-N：显示每行行号；</li>\n<li>-s：当有多个空行在一起时只输出一个空行；</li>\n<li>-o &lt;文件名&gt;：将less输出的内容保存到指定文件；</li>\n</ul>\n<p>操作：</p>\n<ul>\n<li><code>/或?</code>：向上或向下搜索字符；</li>\n<li>b：向上一页</li>\n<li><strong>空格</strong> 或 <strong>f</strong>：向下一页</li>\n<li>u：向上半页</li>\n<li>d：向下半页；</li>\n<li>y：向上一行；</li>\n<li>Enter：向下一行；</li>\n<li>h：帮助页面；</li>\n<li>q：退出；</li>\n</ul>\n<h1 id=\"文件摘选head\"><a href=\"#文件摘选head\" class=\"headerlink\" title=\"文件摘选head\"></a>文件摘选head</h1><p>head用来显示文件开头到标准输出；</p>\n<p>head默认显示前10行；</p>\n<p>命令格式：head [option]… [file]…</p>\n<p>选项：</p>\n<ul>\n<li>-q：输出时隐藏文件名，head默认不显示文件名；</li>\n<li>-v：显示文件名；</li>\n<li>-c num：显示前num个字节；</li>\n<li>-n num：显示前num行。</li>\n</ul>\n<h1 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"tail\"></a>tail</h1><p>显示文件末尾到标准输入，默认为文件后10行；</p>\n<p>格式：tail [option]… [file]…</p>\n<p>选项：</p>\n<ul>\n<li>-f：循环读取，对于日志文件的监控有用；</li>\n<li>-q：不显示文件名，tail默认不显示文件名；</li>\n<li>-v：显示文件名；</li>\n<li>-c num：显示文件最后num个字节；</li>\n<li>-n num：显示文件最后num行；</li>\n<li>-s：与-f结合使用，表示每次反复的时间间隔休眠s秒；</li>\n</ul>\n<h1 id=\"cut\"><a href=\"#cut\" class=\"headerlink\" title=\"cut\"></a>cut</h1><p>提取<strong>列</strong>或字段；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cut -d: -f1 /etc/passwd # 显示/etc/passwd文件以:间隔的第一列</span><br></pre></td></tr></table></figure>\n\n<p>格式：cut [option]… [file]</p>\n<p>选项：</p>\n<ul>\n<li>-b：仅显示行中指定直接范围的内容；</li>\n<li>-c [范围]：仅显示行中指定范围的字符；</li>\n<li>-d：指定字段的分隔符，默认分隔符为TAB；</li>\n<li>-f [范围]：显示指定第num个字段的内容，可以用逗号隔开显示多个字段；</li>\n<li>范围指定：<ul>\n<li>N：每行第N个字节，字符或字段；</li>\n<li>N-：每行第N个字节、字符或字段<strong>到每行的末尾</strong>；</li>\n<li>-M：每行的第一个字节、字符或字段到每行的第M个；</li>\n<li>N-M：每行的第N到第M个字节、字符或字段；</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h1><ul>\n<li>Linux是一个多用户的操作系统；</li>\n<li>一个系统可以建立多个用户，多个用户可以在同一时间内登录到同一系统执行不同的任务；</li>\n<li>每个用户都会分配一个uid。</li>\n</ul>\n<h2 id=\"用户UID\"><a href=\"#用户UID\" class=\"headerlink\" title=\"用户UID\"></a>用户UID</h2><ul>\n<li>UID指的是用户的ID，一个用户UID标识一个给定用户，UID是用户的唯一标识符；</li>\n<li>通过UID也可以区分不同用户的类别；<ul>\n<li>超级用户：也称root，它的UID为0，超级用户拥有系统的完全控制权；</li>\n<li>普通用户：也称一般用户，UID在1000-60000之间，普通用户可以对自己目录下文件进行访问，也可对经过授权的文件进行访问；</li>\n<li>虚拟用户：也称系统用户，UID为1-999，虚拟用户最大的特点是不提供密码登录系统，存在的目的是方便系统的管理。</li>\n</ul>\n</li>\n<li>通过id命令可以查看不同用户的uid；<ul>\n<li>id [option] [user_name]；<ul>\n<li>id命令会输出：<strong>用户的有效ID</strong>，<strong>用户所在组的ID</strong>和<strong>用户所在的用户组</strong></li>\n<li>有效ID：系统用于区分用户对文件有效权限的UID</li>\n<li>真实ID：系统在用户登录系统时对用户进行区分的UID；</li>\n<li>通常情况下，有效ID与真实ID相同。</li>\n</ul>\n</li>\n<li>参数：<ul>\n<li>-u，-user，只输出有效的uid；</li>\n<li>-g，只输出有效的gid</li>\n<li>-n，-name，对于-ugG选项输出名字而不是数值，需要配合-ugG选项使用；</li>\n<li>-r，-real，输出真实ID而不是有效id，需要配合-ugG选项使用；</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# id yyn</span><br><span class=\"line\">用户id=1000(yyn) 组id=1000(yyn) 组=1000(yyn),10(wheel)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"用户管理命令\"><a href=\"#用户管理命令\" class=\"headerlink\" title=\"用户管理命令\"></a>用户管理命令</h2><h3 id=\"创建用户-useradd\"><a href=\"#创建用户-useradd\" class=\"headerlink\" title=\"创建用户 useradd\"></a>创建用户 useradd</h3><p>创建用户账号，保存在&#x2F;etc&#x2F;passwd文件中；</p>\n<p>语法：useradd [options] user_name</p>\n<ul>\n<li><p>这里的用户名对大小写敏感，可以出现数字、字母、下划线和减号（减号不能放在首位）。</p>\n</li>\n<li><p>-u，指定用户UID；</p>\n</li>\n<li><p>-o，允许UID重复，需要配合-u属性；</p>\n</li>\n<li><p>-g，指明用户所属基本组，这里可以为<strong>组名</strong>，也可为<strong>GID</strong>（组必须存在）；</p>\n</li>\n<li><p>-d，指定用户home目录，并自动创建用户home目录；</p>\n</li>\n<li><p>-M，不创建家目录；</p>\n</li>\n<li><p>-s，指明用户的默认shell程序；</p>\n<ul>\n<li>默认为&#x2F;bin&#x2F;bash。</li>\n<li>另外也可以有&#x2F;usr&#x2F;sbin&#x2F;nologin；</li>\n</ul>\n</li>\n<li><p>-D，显示或更改默认配置。</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cat /etc/passwd | tail -n3</span><br><span class=\"line\">chrony:x:983:980::/var/lib/chrony:/sbin/nologin</span><br><span class=\"line\">tcpdump:x:72:72::/:/sbin/nologin</span><br><span class=\"line\">yyn:x:1000:1000:yyn:/home/yyn:/bin/bash</span><br><span class=\"line\">用户名:密码:UID:GID:描述信息:家目录:默认Shell</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改用户-usermod\"><a href=\"#修改用户-usermod\" class=\"headerlink\" title=\"修改用户 usermod\"></a>修改用户 usermod</h3><p>修改用户账号的各类信息。</p>\n<p>语法：usermod [options] user_name</p>\n<ul>\n<li>-u，修改用户UID；</li>\n<li>-g，修改用户所属用户组；</li>\n<li>-l，修改用户账号名称；</li>\n<li>-L，锁定指定用户，让其无法登录；</li>\n<li>-d，修改用户home目录；</li>\n<li>-s，修改用户默认shell程序；</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# usermod -u 1003 yyn</span><br><span class=\"line\">[root@localhost ~]# id yyn</span><br><span class=\"line\">用户id=1003(yyn) 组id=1000(yyn) 组=1000(yyn),10(wheel)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除用户-userdel\"><a href=\"#删除用户-userdel\" class=\"headerlink\" title=\"删除用户 userdel\"></a>删除用户 userdel</h3><p>删除指定的用户以及该用户相关的文件；</p>\n<p>默认只删除用户，不删除用户相关文件。</p>\n<p>语法：userdel [options] user_name</p>\n<ul>\n<li>-f，强制删除用户账号，即使用户当前处于登录状态；</li>\n<li>-r，删除用户，同时删除与用户相关的所有文件；</li>\n<li>-h，显示命令帮助信息；</li>\n</ul>\n<h3 id=\"修改密码-passwd\"><a href=\"#修改密码-passwd\" class=\"headerlink\" title=\"修改密码 passwd\"></a>修改密码 passwd</h3><p>passwd修改用户密码。</p>\n<p>语法：passwd [OPTION…] user_name</p>\n<ul>\n<li>-n，设置修改密码最短天数；</li>\n<li>-x，修改密码最长天数；</li>\n<li>-w，设置用户在密码过期前多少天收到警告消息；<ul>\n<li>-1，立即让用户密码过期；</li>\n</ul>\n</li>\n<li>-i，设置密码过期多少天后禁用账户；<ul>\n<li>-l，立即锁定一个用户；</li>\n<li>-u，立即解除用户锁定；</li>\n</ul>\n</li>\n<li>-d，删除用户密码，若用户处于锁定状态，会进行解锁；</li>\n<li>-s，显示用户密码信息。</li>\n</ul>\n<p>root用户可以修改任何用户的密码，普通用户只能修改自己的密码。</p>\n<p>与密码有关的配置文件都保存在&#x2F;etc&#x2F;login.dfs文件中，其中包含PASS_MAX_DAYS、PASS_MIN_DAYS、PASS_WARN_AGE。分别表示：密码最长使用天数、密码两次修改最短间隔天数，密码过期前几天提醒用户。</p>\n<ul>\n<li>若最短间隔天数为0，则表示任何时候都可以修改密码；</li>\n</ul>\n<blockquote>\n<p>示例</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# cat /etc/shadow | grep yyn</span><br><span class=\"line\">yyn:!::0:99999:7:::</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">用户名:密码</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">!表示用户没有设置密码。</span></span><br></pre></td></tr></table></figure>\n\n<p>查看用户密码信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# passwd -S yyn</span><br><span class=\"line\">yyn PS 1969-12-31 0 99999 7 -1 (Password set, SM3 crypt.)</span><br></pre></td></tr></table></figure>\n\n<p>创建用户</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# useradd u1</span><br><span class=\"line\">[root@localhost ~]# useradd u2 -d /home/aaa</span><br><span class=\"line\">[root@localhost ~]# useradd u3 -u 2234</span><br><span class=\"line\">[root@localhost ~]# tail -3 /etc/passwd</span><br><span class=\"line\">u1:x:1004:1004::/home/u1:/bin/bash</span><br><span class=\"line\">u2:x:1005:1005::/home/aaa:/bin/bash</span><br><span class=\"line\">u3:x:2234:2234::/home/u3:/bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>修改用户用户名</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# usermod -l u4  u3</span><br><span class=\"line\">[root@localhost ~]# tail -1 /etc/passwd</span><br><span class=\"line\">u4:x:2234:2234::/home/u3:/bin/bash</span><br></pre></td></tr></table></figure>\n\n<p>修改用户家目录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# mkdir /home/aaaww</span><br><span class=\"line\">[root@localhost ~]# usermod -d /home/aaaww u4  # 这里应为home，写错了，但是好像成功了</span><br><span class=\"line\">[root@localhost ~]# tail -1 /etc/passwd</span><br><span class=\"line\">u4:x:2234:2234::/home/aaaww:/bin/bash</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ul>\n<li>使用who查看登录用户的信息；</li>\n<li>id，查看用户信息；</li>\n</ul>\n<h1 id=\"用户组\"><a href=\"#用户组\" class=\"headerlink\" title=\"用户组\"></a>用户组</h1><ul>\n<li>具有相同特性用户的逻辑集合，通过组的形式使得具有相同特性的多个用户拥有相同的权限，便于管理；</li>\n<li>每个用户都拥有自己的私有组；</li>\n<li>同一组内所有游湖可以共享该组下的文件；</li>\n<li>每个用户组都会被分配一个gid；</li>\n</ul>\n<h2 id=\"用户组GID\"><a href=\"#用户组GID\" class=\"headerlink\" title=\"用户组GID\"></a>用户组GID</h2><p>与UID类似，GID作为唯一标识符来标示一个用户组；</p>\n<ul>\n<li>添加用户时，默认情况下回同时建立一个与用户同名且UID和GID相同的组；</li>\n<li>GID与UID为0，都表示超级用户组或超级用户；</li>\n<li>系统预留一些较前的GID给虚拟用户（也称为系统用户）。</li>\n</ul>\n<p>可以通过<code>id [option] [user_name]</code>，查看用户组gid及每个用户组拥有的用户数量；</p>\n<h2 id=\"用户组分类\"><a href=\"#用户组分类\" class=\"headerlink\" title=\"用户组分类\"></a>用户组分类</h2><ul>\n<li>普通用户组：可以加入多个用户；</li>\n<li>系统组：一般加入的用户为系统用户；</li>\n<li>私有组：也称基本组，在创建用户时，若没有指明所属用户组，则会为该用户定义一个私有的用户组，且用户组名与用户名同名。<ul>\n<li>私有组在有其他用户加入时，就会变成一个普通用户组。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"管理命令\"><a href=\"#管理命令\" class=\"headerlink\" title=\"管理命令\"></a>管理命令</h2><h3 id=\"创建组-groupadd\"><a href=\"#创建组-groupadd\" class=\"headerlink\" title=\"创建组 groupadd\"></a>创建组 groupadd</h3><p>创建一个新的用户组，并将新用户组信息添加到系统文件中；</p>\n<p>语法：groupadd [options] group_name</p>\n<ul>\n<li>-f，强制创建，<ul>\n<li>若组已存在，则不输出错误信息；</li>\n</ul>\n</li>\n<li>-g，为新用户组指定GID；</li>\n<li>-o，允许创建拥有重复GID的组；</li>\n<li>-p，为新用户组使用加密过的密码；</li>\n<li>-r，创建一个系统账户；</li>\n<li>-h，展示帮助信息；</li>\n</ul>\n<blockquote>\n<p> 示例</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# groupadd yynGroup</span><br><span class=\"line\">[root@localhost ~]# tail -1 /etc/group</span><br><span class=\"line\">yynGroup:x:2235:</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改用户组-groupmod\"><a href=\"#修改用户组-groupmod\" class=\"headerlink\" title=\"修改用户组 groupmod\"></a>修改用户组 groupmod</h3><p>修改组gid或名称；</p>\n<p>语法：groupmod [options] group_name</p>\n<ul>\n<li>-g，指定要使用的GID；</li>\n<li>-o，允许重复GID；</li>\n<li>-n，修改组名称；</li>\n<li>-p，修改密码；</li>\n<li>-h，展示帮助信息。</li>\n</ul>\n<blockquote>\n<p>示例</p>\n</blockquote>\n<p>修改用户组GID</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# id yyn</span><br><span class=\"line\">用户id=1003(yyn) 组id=1000(yyn) 组=1000(yyn),10(wheel)</span><br><span class=\"line\">[root@localhost ~]# groupmod -g 1006 yyn</span><br><span class=\"line\">[root@localhost ~]# id yyn</span><br><span class=\"line\">用户id=1003(yyn) 组id=1006(yyn) 组=1006(yyn),10(wheel)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"删除用户组-groupdel\"><a href=\"#删除用户组-groupdel\" class=\"headerlink\" title=\"删除用户组 groupdel\"></a>删除用户组 groupdel</h3><p>删除用户组；</p>\n<p>若用户组存在一些用户，需要<strong>先删除用户</strong>，才能<strong>删除用户组</strong>；</p>\n<p>语法：groupdel [options] group_name</p>\n<ul>\n<li>-f，强制删除，可以解决一些无法删除的组；<ul>\n<li>如：一些私有组。</li>\n</ul>\n</li>\n<li>-h，展示帮助信息；</li>\n</ul>\n<h3 id=\"关联用户和组-gpasswd\"><a href=\"#关联用户和组-gpasswd\" class=\"headerlink\" title=\"关联用户和组 gpasswd\"></a>关联用户和组 gpasswd</h3><p>gpasswd添加或删除用户到组中。</p>\n<p>语法：gpasswd [option] group_name</p>\n<ul>\n<li>-a，向组group中添加用户user；</li>\n<li>-d，从组group中删除用户；</li>\n<li>-M，向组添加多个成员；</li>\n<li>-A user1,…，设置组的管理员（可以有多个）；</li>\n<li>-r，删除组密码；</li>\n<li>-R，限制用户登入组，只有组成员擦可以用newgrp加入该组；</li>\n<li>-Q，要chroot进的目录</li>\n</ul>\n<blockquote>\n<p>示例</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# gpasswd -a yyn yynGroup</span><br><span class=\"line\">正在将用户“yyn”加入到“yynGroup”组中</span><br><span class=\"line\">[root@localhost ~]# groups yyn</span><br><span class=\"line\">yyn : yyn wheel yynGroup</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"用户与组的关联文件\"><a href=\"#用户与组的关联文件\" class=\"headerlink\" title=\"用户与组的关联文件\"></a>用户与组的关联文件</h2><ul>\n<li><p>&#x2F;etc&#x2F;passwd：用户账号信息文件；</p>\n<ul>\n<li><pre><code class=\"shell\">[root@localhost ~]# tail -1 /etc/passwd\nu2:x:1005:1005::/home/aaa:/bin/bash\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - 用户名:密码:UID:GID:备注信息:HOME目录:默认SHELL</span><br><span class=\"line\"></span><br><span class=\"line\">- /etc/shadow：用户账号信息加密文件；</span><br><span class=\"line\"></span><br><span class=\"line\">  - 存储密码信息；</span><br><span class=\"line\"></span><br><span class=\"line\">  - 只有root用户具有读权限；</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```shell</span><br><span class=\"line\">    [root@localhost ~]# tail -1 /etc/shadow</span><br><span class=\"line\">    u2:!:19289:0:99999:7:::</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><p>用户名:加密密码:最后一次修改时间:最小修改时间间隔:密码有效期:密码需要变更前警告天数:密码宽限时间:账号失效时间:保留字段</p>\n</li>\n<li><p>密码字段为!或*，表示用户当前无法登录；</p>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"用户组关联文件\"><a href=\"#用户组关联文件\" class=\"headerlink\" title=\"用户组关联文件\"></a>用户组关联文件</h2><ul>\n<li><p>&#x2F;etc&#x2F;group：组信息文件；</p>\n<ul>\n<li><p>每一行记录代表一个用户组；</p>\n</li>\n<li><p>一个组中可以有多个用户，一个用户可以属于不同的组；</p>\n</li>\n<li><pre><code class=\"shell\">[root@localhost ~]# tail -1 /etc/group\nyynGroup:x:2235:yyn\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">  - 组名:组密码:GID:组内用户列表</span><br><span class=\"line\"></span><br><span class=\"line\">- /etc/gshadow：组信息加密文件；</span><br><span class=\"line\"></span><br><span class=\"line\">  - 保存组加密信息，如用户组管理密码；</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```shell</span><br><span class=\"line\">    [root@localhost ~]# tail -1 /etc/gshadow</span><br><span class=\"line\">    yynGroup:!::yyn</span><br></pre></td></tr></table></figure>\n</code></pre>\n</li>\n<li><p>组名:组密码:用户组管理员:用户组附加用户</p>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>示例</p>\n</blockquote>\n<p>向用户组添加用户。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# gpasswd -M u1,u2,yyn yynGroup</span><br><span class=\"line\">[root@localhost ~]# tail -1 /etc/group</span><br><span class=\"line\">yynGroup:x:2235:u1,u2,yyn</span><br></pre></td></tr></table></figure>\n\n<p>指定GID，修改GID</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# groupadd -g 1234 yynGroup2</span><br><span class=\"line\">[root@localhost ~]# tail -1 /etc/group</span><br><span class=\"line\">yynGroup2:x:1234:</span><br><span class=\"line\">[root@localhost ~]# groupmod -g 2345 yynGroup2</span><br><span class=\"line\">[root@localhost ~]# tail -1 /etc/group</span><br><span class=\"line\">yynGroup2:x:2345:</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"文件权限\"><a href=\"#文件权限\" class=\"headerlink\" title=\"文件权限\"></a>文件权限</h1><h2 id=\"权限\"><a href=\"#权限\" class=\"headerlink\" title=\"权限\"></a>权限</h2><p>权限时操作系统用来限制对资源访问的一种机制，权限分为：<strong>读、写、执行</strong>；</p>\n<p>在Linux系统中，每个文件或目录都具有特定的访问权限，所属用户及所属组；</p>\n<p>一个文件或目录有三种权限：<strong>文件属主的访问、用户组成员访问和系统中任何用户访问</strong>；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# ls -l</span><br><span class=\"line\">总用量 44</span><br><span class=\"line\">drwxr-xr-x. 2 root root  4096 10月 24 06:53 d</span><br><span class=\"line\">drwxr-xr-x. 2 root root  4096 10月 24 06:56 d2</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">文件类型权限 连结数 所有者 所属组 文件容量 最后修改日期 文件名</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">其中</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">drwxr-xr-x</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第一位是文件类型，剩余9位是文件权限位；</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>连结数</p>\n</blockquote>\n<ul>\n<li>若是一个文件，则表示当前文件的连结数量；</li>\n<li>若是一个目录，则表示目录下的子目录数量，其中另包含“.”和”..”两个；</li>\n</ul>\n<blockquote>\n<p>文件容量</p>\n</blockquote>\n<ul>\n<li>对于一个文件，则表示文件字节大小；</li>\n<li>对于一个目录，则表示目录符的大小，不包含其中的文件；</li>\n</ul>\n<blockquote>\n<p>文件名</p>\n</blockquote>\n<ul>\n<li>不同类型文件有不同颜色；<ul>\n<li>白色，普通文件；</li>\n<li>蓝色，目录文件；</li>\n<li>绿色，可执行文件；</li>\n<li>青色，软链接文件；</li>\n<li>红色，压缩文件；</li>\n<li>…</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p> 文件类型</p>\n</blockquote>\n<ul>\n<li>-：普通文件，除去其他6种类型文件；</li>\n<li>d：目录</li>\n<li>b：块设备文件，可随机存取装置；</li>\n<li>c：字符设备文件 -&gt; 键盘、鼠标等一次性读取装置；</li>\n<li>l：符号链接文件；</li>\n<li>p：命名管道文件（piep）</li>\n<li>s：套接字文件（socket）</li>\n</ul>\n<p>b和c一般出现在&#x2F;dev目录下；</p>\n<blockquote>\n<p>权限位说明</p>\n</blockquote>\n<p><em>drwxr-xr-x</em></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>文件类型</th>\n<th>属主权限</th>\n<th>属组权限</th>\n<th>其他用户权限</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>位置</td>\n<td>0</td>\n<td>1 2 3</td>\n<td>4 5 6</td>\n<td>7 8 9</td>\n</tr>\n<tr>\n<td>表示</td>\n<td>d</td>\n<td>r w x</td>\n<td>r - x</td>\n<td>r - x</td>\n</tr>\n<tr>\n<td>描述</td>\n<td>目录文件</td>\n<td>读 写 执行</td>\n<td>读 写 执行</td>\n<td>读 写 执行</td>\n</tr>\n</tbody></table>\n","categories":[],"tags":["Linux"]},{"title":"Java 并发 Tools Note","url":"http://zswh33.github.io/2022/11/15/Java-并发-Tools-Note/","content":"<h1 id=\"性能分析工具\"><a href=\"#性能分析工具\" class=\"headerlink\" title=\"性能分析工具\"></a>性能分析工具</h1><p>Lmbench3、vmstat</p>\n<h2 id=\"vmstat\"><a href=\"#vmstat\" class=\"headerlink\" title=\"vmstat\"></a>vmstat</h2><p><a href=\"https://www.cnblogs.com/ggjucheng/archive/2012/01/05/2312625.html\">https://www.cnblogs.com/ggjucheng/archive/2012/01/05/2312625.html</a></p>\n<p><code>vmstat</code>是Linux下的一个监控工具，可以用来</p>\n<ul>\n<li>CPU使用率</li>\n<li>内存使用</li>\n<li>虚拟内存交换IO读写情况；</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">vmstat 2 1</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第一个参数表示采样的时间间隔数</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">第二个参数表示采样的次数，是可选参数，不输入表示一直采样</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yyn@yynlinux:~$ vmstat 1</span><br><span class=\"line\">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class=\"line\"> r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st</span><br><span class=\"line\"> 0  0      0 2560392  36372 699792    0    0   365   226  173  465  1  2 96  0  0</span><br><span class=\"line\"> 0  0      0 2560392  36372 699792    0    0     0     0  143  347  1  1 98  0  0</span><br><span class=\"line\"> 1  0      0 2560392  36372 699792    0    0     0     0  147  344  1  1 98  0  0</span><br><span class=\"line\"> 1  0      0 2560392  36372 699792    0    0     0     0  150  341  1  1 98  0  0</span><br><span class=\"line\"> 5  0      0 2560392  36372 699792    0    0     0     0  146  339  0  1 99  0  0</span><br><span class=\"line\"> 0  0      0 2560392  36372 699792    0    0     0     0  144  344  1  0 99  0  0</span><br><span class=\"line\"> 0  0      0 2560392  36372 699792    0    0     0     0  148  338  1  1 98  0  0</span><br><span class=\"line\"> 2  0      0 2560392  36372 699792    0    0     0     0  134  334  0  0 100  0  0</span><br><span class=\"line\"> 0  0      0 2560392  36372 699792    0    0     0     0  145  335  1  0 99  0  0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里表示vmstat每1秒采集一次数据；</p>\n<ul>\n<li>r表示运行队列，即<strong>多少进程真的分配到CPU</strong>；<ul>\n<li>当这个值超过CPU数目，就会出现CPU瓶颈；</li>\n</ul>\n</li>\n<li>b：阻塞的进程；</li>\n<li>swpd：虚拟内存使用大小，如果大于0，表示物理内存不足了；</li>\n<li>free：空闲物理内存大小（内存&#x2F;<del>运存</del>）；</li>\n<li>buff：Linux用来存储目录索引，权限等缓存；</li>\n<li>cache：打开的文件的文件缓冲区；</li>\n<li>si：每秒从<strong>磁盘</strong>读入<strong>虚拟内存</strong>的大小，值大于0表示<strong>物理内存不够用</strong>或<strong>内存泄漏</strong></li>\n<li>so：每秒从<strong>虚拟内存</strong>写入<strong>磁盘</strong>的大小；</li>\n<li>bi：<strong>块设备</strong>每秒接收的块数量；<ul>\n<li>块设备指：系统上的所有磁盘和其他块设备，默认块大小1024byte。比如：磁盘写入速度；</li>\n</ul>\n</li>\n<li>bo：块设备每秒发送的块数量；<ul>\n<li>比如：磁盘读入速度；</li>\n<li>bi和bo的值一般要接近0，否则就是<strong>IO过于频繁，需要调整</strong>；</li>\n</ul>\n</li>\n<li>in：每秒CPU中断次数，包括时间中断；</li>\n<li>cs：每秒上下文切换次数，比如：调用系统函数，线程的切换等会触发上下文切换。这个值越小越好，太大要考虑调低线程或者进程的数目；</li>\n<li>us：用户CPU时间；</li>\n<li>sy：系统CPU时间。如果太高，表示系统调用时间长，如IO操作频繁；</li>\n<li>id：空闲CPU时间，一般来说：<code>id + us + sy = 100</code></li>\n<li>wt：等待IO CPU时间。</li>\n</ul>\n","categories":[],"tags":["Java"]},{"title":"Java 并发编程艺术 Note","url":"http://zswh33.github.io/2022/11/15/Java-并发编程艺术-Note/","content":"<p>《Java并发编程的艺术》阅读笔记</p>\n<h1 id=\"如何减少上下文切换\"><a href=\"#如何减少上下文切换\" class=\"headerlink\" title=\"如何减少上下文切换\"></a>如何减少上下文切换</h1><p>减少上下文切换</p>\n<ul>\n<li>无锁并发编程。<ul>\n<li>多线程竞争锁，会引发上下文切换 -&gt; 考虑避免使用锁；</li>\n<li>如，将数据的ID按照Hash算法取模分段，不同线程处理不同段的数据；</li>\n</ul>\n</li>\n<li>CAS算法<ul>\n<li>Java的Atomic包使用CAS算法来更新数据，不需要加锁；</li>\n</ul>\n</li>\n<li>使用最少线程<ul>\n<li>避免创建不必要的线程；</li>\n</ul>\n</li>\n<li>协程：在单线程实现多任务的调度，在单线程里维持多个任务间的切换；</li>\n</ul>\n<h1 id=\"避免死锁\"><a href=\"#避免死锁\" class=\"headerlink\" title=\"避免死锁\"></a>避免死锁</h1><ul>\n<li>避免一个线程同时获取多个锁；</li>\n<li>避免一个线程在锁内同时占用多个资源，尽量保证每个锁只占用一个资源；</li>\n<li>尝试使用定时锁，使用<code>lock.tryLock(timeout)</code>来替代使用内部锁机制；</li>\n<li>对于数据库锁，加锁和解锁必须在一个数据库连接里，否则可能出现解锁失败的情况；</li>\n</ul>\n<h1 id=\"服务器集群\"><a href=\"#服务器集群\" class=\"headerlink\" title=\"服务器集群\"></a>服务器集群</h1><p>可以使用ODPS或Hadoop搭建一个服务器集群。</p>\n<h1 id=\"volatile\"><a href=\"#volatile\" class=\"headerlink\" title=\"volatile\"></a>volatile</h1><p>定义：Java编程语言允许线程访问共享变量，为了确保共享变量能被准确和一致地更新，线程应却表通过排它锁单独获得这个变量；</p>\n<h2 id=\"CPU术语\"><a href=\"#CPU术语\" class=\"headerlink\" title=\"CPU术语\"></a>CPU术语</h2><p>《Java并发编程的艺术》Page.9</p>\n<table>\n<thead>\n<tr>\n<th>术语</th>\n<th>英文</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>内存屏障</td>\n<td>memory barriers</td>\n<td>是一组处理器指令，用于实现对内存操作的顺序限制。</td>\n</tr>\n<tr>\n<td>缓冲行</td>\n<td>cache line</td>\n<td>CPU高速缓存中可以分配的最小存储单位。处理器填写缓存行会加载整个缓存行，现存CPU需要执行几百次CPU指令。</td>\n</tr>\n<tr>\n<td>原子操作</td>\n<td>atomic operations</td>\n<td>不可中断的一个或一系列操作。</td>\n</tr>\n<tr>\n<td>缓存行填充</td>\n<td>cache line fill</td>\n<td>当处理器识别到从内存中读取操作数是可缓存的，处理器读取整个高速缓存行到适当的缓存（L1，L2，L3或所有）。</td>\n</tr>\n<tr>\n<td>缓存命中</td>\n<td>cache hit</td>\n<td>如果进行高速缓存行填充操作的内存位置仍然是下次处理器访问的地址时，处理器从缓存中读取操作数，而不是从内存读取。</td>\n</tr>\n<tr>\n<td>写命中</td>\n<td>write hit</td>\n<td>当处理器将操作数写回到一个内存缓存的区域时，它首先会检查这个缓存的内存地址是否在缓存行中，如果存在一个有效的缓存行，则处理器将这个操作数写回到缓存，而不是写回到内存，这个操作称为写命中。</td>\n</tr>\n<tr>\n<td>写缺失</td>\n<td>write misses the cache</td>\n<td>一个有效的缓存行被写入到不存在的内存区域。</td>\n</tr>\n</tbody></table>\n<h2 id=\"如何实现可见性\"><a href=\"#如何实现可见性\" class=\"headerlink\" title=\"如何实现可见性\"></a>如何实现可见性</h2><ul>\n<li>如果对volatile变量进行写操作，JVM就会向处理器发送一条Lock前缀的指令，将这个变量所在缓存行的数据协会到系统内存；</li>\n<li>为了保证各个处理器的缓存是一致的，实现了<strong>缓存一致性协议</strong><ul>\n<li>每个处理器通过<strong>嗅探</strong>总线上传播的数据来检查自己的缓存值<strong>是否过期</strong>，</li>\n<li>当处理器发现自己缓存行对应的内存地址被修改，就会将当前处理器的缓存行设置为无效状态，</li>\n<li>当处理器对这个数据进行修改操作，会重新从系统内存中把数据读到处理器缓存里。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"实现原则\"><a href=\"#实现原则\" class=\"headerlink\" title=\"实现原则\"></a>实现原则</h2><ol>\n<li><p>Lock前缀指令会引起处理器缓存协会到内存。</p>\n</li>\n<li><p>一个处理器的缓存回写到内存会导致其他处理器的缓存无效</p>\n<ul>\n<li>IA-32处理器和Intel 64处理器使用MESI（修改，独占，共享，无效）控制协议去维护内部缓存和其他处理器缓存的一致性；</li>\n<li>IA-32和Intel 64处理器能<strong>嗅探</strong>其他处理器访问系统内存和他们的内部缓存。处理器<strong>使用嗅探技术保证它的内部缓存、系统内存和其他处理器的缓存的数据在总线上保持一致</strong>；</li>\n<li>在Pentium和P6 family处理器中，如果有<strong>处理器</strong>嗅探到别的处理器打算写内存地址，而这个地址处于共享状态，那么这个处理器会使它的缓存行无效，在下次访问相同内存地址时，强制执行<strong>缓存行填充</strong>。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"案例：追加字节数提高volatile\"><a href=\"#案例：追加字节数提高volatile\" class=\"headerlink\" title=\"案例：追加字节数提高volatile\"></a>案例：追加字节数提高volatile</h2><p>《Java并发编程的艺术》Page.10</p>\n<p>著名Java并发编程大师Dong lea在<strong>JDK 7</strong> 里新增了一个<strong>队列集合类LinkedTransferQueue</strong>，在使用volatile变量时，使用追加字节的方式来优化队列出队，入队的性能：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">final</span> PaddedAtomicReference&lt;QNode&gt; head;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">transient</span> <span class=\"keyword\">final</span> PaddedAtomicReference&lt;QNode&gt; tail;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">PaddedAtomicReference</span> &lt;T&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">AtomicReference</span> &lt;T&gt;&#123;</span><br><span class=\"line\">    Object p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,pa,pb,pc,pd,pe;</span><br><span class=\"line\">    PaddedAtomicReference(T r)&#123;supre(r);&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AtomicReference</span> &lt;V&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">java</span>.io.Serializable&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> V value;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这里的目的是：<strong>将对象追加到64字节</strong>；<ul>\n<li>一个对象引用<strong>4字节</strong>，有15个变量即<strong>60个字节</strong>,再加上父类<strong>value变量</strong>，一共<strong>64个字节</strong>；</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>为什么要添加到64字节？</p>\n</blockquote>\n<p>对于英特尔酷睿i7，酷睿、Atom和NetBurst，以及Core Solo和Pentium M处理器上的L1、L2、L3缓存的高速缓存行是64个字节宽，不支持部分填充缓存行；</p>\n<p>这意味着，若队列头结点和尾节点不足64字节的话，处理器会将他们读到同一个高速缓存行中；</p>\n<p><strong>当一个处理器试图修改头结点，会将整个缓存行锁定</strong>；在缓存一致性机制下，其他处理器会不能访问高速缓存的尾节点；</p>\n<p>而<strong>队列的入队和出队操作需要不停修改头结点尾节点</strong>，在多处理器情况下会严重影响到队列的入队和出队效率；</p>\n<p>追加到64字节，填满高速缓冲区的缓存行，避免头结点和尾节点加载到同一个缓存行，使头、尾节点不互相锁定。</p>\n<blockquote>\n<p>是不是所有的volatile变量都要追加到64字节呢？</p>\n</blockquote>\n<p>不是。</p>\n<ul>\n<li>缓存行非64位宽的处理器不能；<ul>\n<li>如P6系列和奔腾处理器，他们的L1和L2高速缓存行是<strong>32个字节宽</strong>；</li>\n</ul>\n</li>\n<li>共享变量不会被频繁地写。<ul>\n<li>追加字节的方式需要处理器读取更多字节到高速缓冲区，本身带来一定性能损耗，如果变量本身不被频繁写，锁的几率是非常小的，就没必要通过追加字节的方式来避免互相锁定。</li>\n</ul>\n</li>\n</ul>\n<p>其他：该写法Java7下不生效，Java7会淘汰或重新排列无用字段；</p>\n<h1 id=\"Synchronized原理\"><a href=\"#Synchronized原理\" class=\"headerlink\" title=\"Synchronized原理\"></a>Synchronized原理</h1><p>synchronized实现同步的基础：Java中每个对象都可以作为锁；</p>\n<ul>\n<li>对于普通同步方法，锁的是<strong>当前实例对象</strong>；</li>\n<li>对于静态同步方法，锁是<strong>当前类的Class对象</strong>；</li>\n<li>对于同步代码块，锁是<strong>Synchronized括号里配置的对象</strong>。</li>\n</ul>\n<blockquote>\n<p>在JVM中原理</p>\n</blockquote>\n<p>当一个线程视图访问同步代码块时，首先必须得到锁，退出或抛出异常时必须释放锁；</p>\n<p>在JVM中，代码块的同步是<strong>使用monitorenter和monitorexit指令</strong>实现的：</p>\n<ul>\n<li>monitorenter插入到同步代码块的开始位置，monitorexit插入到同步代码块的结束和异常位置；</li>\n<li>JVM保证：<strong>每个monitorenter必须有对应的monitorexit与之配对；</strong></li>\n<li>任何一个对象都有一个monitor与之关联，当一个monitor被持有后，它将处于锁定状态；</li>\n<li>线程执行到monitorenter指令时，将会尝试获取对象所对应的monitor所有权，即尝试获取monitor的锁。</li>\n</ul>\n<h2 id=\"Java对象头\"><a href=\"#Java对象头\" class=\"headerlink\" title=\"Java对象头\"></a>Java对象头</h2><p>synchronized用的锁在Java的对象头里；</p>\n<ul>\n<li>若对象是数组类型，则虚拟机用3个字宽存储对象头；</li>\n<li>若对象是非数组类型，则用2个字宽存储对象头；</li>\n<li>在32位虚拟机中，1字宽等于4字节，即32bit；</li>\n</ul>\n<p><strong>Java对象头的长度</strong></p>\n<table>\n<thead>\n<tr>\n<th>长度</th>\n<th>内容</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>32&#x2F;64bit</td>\n<td>Mark Word</td>\n<td>对象的hashCode或锁信息等</td>\n</tr>\n<tr>\n<td>32&#x2F;64bit</td>\n<td>Class Metadata Address</td>\n<td>对象类型数据的指针</td>\n</tr>\n<tr>\n<td>32&#x2F;32bit</td>\n<td>Array Length</td>\n<td>数组的长度（若对象是数组）</td>\n</tr>\n</tbody></table>\n<p>Java对象头的Mark Word默认存储对象的：<strong>HashCode，分代年龄</strong>和<strong>锁标记位</strong>。</p>\n<p><strong>32位JVM  Mark Word   Java对象头存储结构</strong></p>\n<table>\n<thead>\n<tr>\n<th>锁状态</th>\n<th>25bit</th>\n<th>4bit</th>\n<th>1bit 是否偏向锁</th>\n<th>2bit 锁标志位</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>无锁状态</td>\n<td>对象的hashCode</td>\n<td>对象分代年龄</td>\n<td>0</td>\n<td>01</td>\n</tr>\n</tbody></table>\n<p><strong>Mark Word 运行期间变化</strong></p>\n<table>\n    <tr>\n        <th rowspan=\"2\">锁状态</th>\n        <th colspan=\"2\">25bit</th>\n        <th rowspan=\"2\">4bit</th>\n        <th>1bit</th>\n        <th>2bit</th>\n    </tr>\n    <tr>\n        <th>23bit</th>\n        <th>2bit</th>\n        <th>是否是偏向锁</th>\n        <th>锁标志位</th>\n    </tr>\n    <tr>\n        <td>轻量级锁</td>\n        <td colspan=\"4\">指向栈中锁记录的指针</td>\n        <td>00</td>\n    </tr>\n    <tr>\n        <td>重量级锁</td>\n        <td colspan=\"4\">指向互斥量（重量级锁）的指针</td>\n        <td>10</td>\n    </tr>\n    <tr>\n        <td>GC标记</td>\n        <td colspan=\"4\">空</td>\n        <td>11</td>\n    </tr>\n    <tr>\n        <td>偏向锁</td>\n        <td>线程ID</td>\n        <td>Epoch</td>\n        <td>对象分代年龄</td>\n        <td>1</td>\n        <td>01</td>\n    </tr>\n</table>\n\n<p>在64位虚拟机下，Mark Word是64bit大小的；</p>\n<p><strong>64位虚拟机下，Mark Word 存储结构</strong></p>\n<table>\n    <tr>\n        <th rowspan=\"2\">锁状态</th>\n        <th>25bit</th>\n        <th>31bit</th>\n        <th>1bit</th>\n        <th>4bit</th>\n        <th>1bit</th>\n        <th>2bit</th>\n    </tr>\n    <tr>\n        <th></th>\n        <th></th>\n        <th>cms_free</th>\n        <th>分代年龄</th>\n        <th>偏向锁</th>\n        <th>锁标志位</th>\n    </tr>\n    <tr>\n        <td>无锁</td>\n        <td>unused</td>\n        <td>hashCode</td>\n        <td></td>\n        <td></td>\n        <td>0</td>\n        <td>01</td>\n    </tr>\n    <tr>\n        <td>偏向锁</td>\n        <td colspan=\"2\">ThreadId(54bit) Epoch(2bit)</td>\n        <td></td>\n        <td></td>\n        <td>1</td>\n        <td>01</td>\n    </tr>\n</table>\n\n<h2 id=\"锁的升级和对比\"><a href=\"#锁的升级和对比\" class=\"headerlink\" title=\"锁的升级和对比\"></a>锁的升级和对比</h2><p>Java SE1.6为了减少锁和释放锁带来的性能消耗，引入了<strong>偏向锁</strong>和<strong>轻量级锁</strong>；</p>\n<p>在Java SE 1.6中，锁一共有4种状态，级别从低到高依次是：<strong>无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态</strong>。</p>\n<p>锁可以升级但不能降级，即偏向锁升级成轻量级锁后不能降低到偏向锁，<strong>目的</strong>是为了<strong>提高获得和释放锁的效率</strong>。</p>\n<h2 id=\"偏向锁\"><a href=\"#偏向锁\" class=\"headerlink\" title=\"偏向锁\"></a>偏向锁</h2><p>HotSpot作者研究发现，大多数情况下，锁不仅不存在多线程竞争，而且总是由同一个线程多次获得。为了让线程获得锁的代价更低而引入了偏向锁；</p>\n<p>当一个线程访问同步块并获得锁时，会在<strong>对象头和栈帧中的锁记录</strong>里存储<strong>偏向的线程ID</strong>，以后该线程在进入和退出同步块时不需要进行CAS操作来加锁和解锁，只需简单地测试一下对象头的Mark Word里是否存储指向当前线程的偏向锁。若测试成功，表示线程已经获得了锁。若测试失败，则需要再测试一下Mark Word中偏向锁的标志是否为1（表示当前是偏向锁）；若没有设置，则使用CAS竞争锁；若设置了，则尝试使用CAS将对象头的偏向锁指向当前线程。</p>\n<blockquote>\n<p>偏向锁执行流程</p>\n</blockquote>\n<ol>\n<li>一个线程访问同步块</li>\n<li>测试对象头的Mark Word是否存储指向当前线程的偏向锁<ul>\n<li>存在<ul>\n<li><strong>线程获得锁</strong></li>\n</ul>\n</li>\n<li>不存在<ul>\n<li>测试Mark Word中偏向锁的标志是否为1<ul>\n<li>是：<strong>尝试使用CAS将对象头的偏向锁指向当前线程</strong></li>\n<li>不是：<strong>使用CAS竞争锁</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>偏向锁的撤销</p>\n</blockquote>\n<p>偏向锁使用了<strong>一种等到竞争出现才释放锁的机制</strong>，所以当其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁；</p>\n<p>偏向锁的撤销，需要等待一个<strong>全局安全点</strong>（这个时间点没有正在执行的字节码）；</p>\n<p>当出现竞争，首先暂停拥有偏向锁的线程，然后检查持有偏向锁的线程是否活着，若线程不活跃，则将对象头设置为无锁状态；若线程存活，拥有偏向锁的栈会被执行，遍历偏向对象的锁记录，栈中的锁记录和对象头的Mark Word要么重新偏向于其他线程，要么恢复到无锁或标记对象不适合作为偏向锁，最后唤醒暂停的线程；</p>\n<p><strong>撤销流程</strong></p>\n<ol>\n<li>出现竞争</li>\n<li>暂停拥有偏向锁的线程</li>\n<li>检查持有偏向锁的线程是否存活<ul>\n<li>未存活<ul>\n<li>对象头设置为无锁状态；</li>\n</ul>\n</li>\n<li>存活<ul>\n<li>拥有偏向锁的栈会被执行</li>\n<li>遍历对象的锁记录</li>\n<li>栈中的锁记录和对象头的Mark Word<ul>\n<li>要么重新偏向于其他线程，</li>\n<li>要么恢复好无锁或标记对象不适合作为偏向锁</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>唤醒暂停的线程</li>\n</ol>\n","categories":[],"tags":["Java"]},{"title":"平衡二叉树以及其拓展 Note","url":"http://zswh33.github.io/2022/11/09/平衡二叉树以及其拓展-Note/","content":"<h1 id=\"二叉平衡树\"><a href=\"#二叉平衡树\" class=\"headerlink\" title=\"二叉平衡树\"></a>二叉平衡树</h1><p><a href=\"http://c.biancheng.net/view/3432.html\">http://c.biancheng.net/view/3432.html</a></p>\n<p><a href=\"https://blog.csdn.net/u014454538/article/details/120103527\">https://blog.csdn.net/u014454538/article/details/120103527</a></p>\n<p>平衡二叉树，又称为AVL树，遵循：</p>\n<ul>\n<li>每棵子树的左子树和右子树深度差不能超过1；</li>\n<li>二叉树每棵子树都要求是平衡二叉树。</li>\n</ul>\n<h2 id=\"平衡因子\"><a href=\"#平衡因子\" class=\"headerlink\" title=\"平衡因子\"></a>平衡因子</h2><p>表示<strong>左子树深度和右子树深度的差</strong>，取值可能为0、1和-1；</p>\n<h2 id=\"情况\"><a href=\"#情况\" class=\"headerlink\" title=\"情况\"></a>情况</h2><p><em>LL、RR、LR、RL</em></p>\n<h3 id=\"右旋\"><a href=\"#右旋\" class=\"headerlink\" title=\"右旋\"></a>右旋</h3><ul>\n<li>将<strong>根节点绕左儿子顺时针</strong>下压</li>\n<li>条件： LL：新插入节点在<strong>根节点</strong>的<strong>左儿子</strong>的<strong>左子树</strong>上；</li>\n</ul>\n<h3 id=\"左旋\"><a href=\"#左旋\" class=\"headerlink\" title=\"左旋\"></a>左旋</h3><ul>\n<li>将<strong>根节点绕右儿子逆时针</strong>下压</li>\n<li>条件：RR： 新插入节点在<strong>根节点</strong>的<strong>右儿子</strong>的<strong>右子树</strong>上；</li>\n</ul>\n<h3 id=\"LR\"><a href=\"#LR\" class=\"headerlink\" title=\"LR\"></a>LR</h3><ul>\n<li>条件： LR：新插入节点在<strong>根节点</strong>的<strong>左儿子</strong>的<strong>右子树</strong>上；</li>\n<li>操作：<ul>\n<li>以<strong>左儿子为根节点左旋</strong>，再将<strong>原根节点右旋</strong>；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"RL\"><a href=\"#RL\" class=\"headerlink\" title=\"RL\"></a>RL</h3><ul>\n<li>条件： RL：新插入结点在<strong>根节点</strong>的<strong>右儿子</strong>的<strong>左子树</strong>上；</li>\n<li>操作<ul>\n<li>以<strong>右儿子为根节点右旋</strong>，再将<strong>原根节点左旋</strong>；</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h1>","categories":[],"tags":["Note"]},{"title":"Nginx Note Variable","url":"http://zswh33.github.io/2022/11/01/Nginx-Note-Variable/","content":"<h1 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h1><h2 id=\"地址\"><a href=\"#地址\" class=\"headerlink\" title=\"地址\"></a>地址</h2><h3 id=\"binary-remote-addr和-remote-addr\"><a href=\"#binary-remote-addr和-remote-addr\" class=\"headerlink\" title=\"$binary_remote_addr和$remote_addr\"></a>$binary_remote_addr和$remote_addr</h3><p>$remote_addr长度为7-15bytes；</p>\n<p>$binary_remote_addr长度为4bytes。</p>\n<p>都是客户端地址；</p>\n<h3 id=\"server-name\"><a href=\"#server-name\" class=\"headerlink\" title=\"$server_name\"></a>$server_name</h3><p>上游服务器的地址；</p>\n<h3 id=\"query-string\"><a href=\"#query-string\" class=\"headerlink\" title=\"$query_string\"></a>$query_string</h3><p>请求连接的地址；</p>\n<p>比如：<a href=\"https://www.baidu.com/s?&amp;wd=qwe\">https://www.baidu.com/s?&amp;wd=qwe</a></p>\n","categories":[],"tags":["Nginx"]},{"title":"Nginx Note","url":"http://zswh33.github.io/2022/11/01/Nginx-Note/","content":"<p><a href=\"https://blog.csdn.net/remotesupport/article/details/6016245\">https://blog.csdn.net/remotesupport/article/details/6016245</a></p>\n<p><a href=\"https://blog.51cto.com/qiangsh/1765013\">https://blog.51cto.com/qiangsh/1765013</a></p>\n<h1 id=\"限制连接数\"><a href=\"#限制连接数\" class=\"headerlink\" title=\"限制连接数\"></a>限制连接数</h1><h2 id=\"limit-zone\"><a href=\"#limit-zone\" class=\"headerlink\" title=\"limit_zone\"></a>limit_zone</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit_zone ZONENAME KEY THE_SIZE</span><br></pre></td></tr></table></figure>\n\n<p>定义一个数据区，记录会话状态信息；</p>\n<ul>\n<li><p>ZONENAME：zone_name，数据区域的名字；</p>\n</li>\n<li><p>KEY：这里可以是一个变量$variable，是判断会话的变量，唯一指定一个会话的变量；</p>\n</li>\n<li><p>THE_SIZE：the_size，记录区的总容量。</p>\n</li>\n</ul>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit_zone one $binary_remote_addr 10m</span><br></pre></td></tr></table></figure>\n\n<p>定义一个名为“one”的区域，容量10m，</p>\n<p>以变量**$binary_remote_addr<strong>为判断会话的基准，即</strong>一个地址一个会话**。</p>\n<p>$remote_addr长度为7-15bytes，会话信息长度为32-64bytes；</p>\n<p>$binary_remote_addr长度为4bytes，会话信息长度为32bytes。</p>\n<h2 id=\"limit-conn\"><a href=\"#limit-conn\" class=\"headerlink\" title=\"limit_conn\"></a>limit_conn</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit_conn ZONE_NAME THE_SIZE</span><br></pre></td></tr></table></figure>\n\n<p>指定一个区域<sup>会话</sup>最大的并发连接数；</p>\n<p>当连接数超过指定的并发连接数，会返回503错误；</p>\n<ul>\n<li>ZONE_NAME：zone_name，区域的名字，由limit_zone定义；</li>\n<li>THE_SIZE：the_size，允许的并发连接数。</li>\n</ul>\n<h3 id=\"例子-1\"><a href=\"#例子-1\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit_zone one $binary_remote_addr 10m;</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\tlocation /download/&#123;</span><br><span class=\"line\">\t\tlimit_conn one 5;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>定义一个名为one的区域，容量为10m（这里容量指的是：10MB），一个地址一个会话；</p>\n<p>在&#x2F;download&#x2F;目录下，一个会话只能发起5个连接，超过的进行503处理。</p>\n<h2 id=\"limit-conn-zone\"><a href=\"#limit-conn-zone\" class=\"headerlink\" title=\"limit_conn_zone\"></a>limit_conn_zone</h2><p><em>位于：http</em></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit_conn_zone KEY zone=NAME:SIZE</span><br></pre></td></tr></table></figure>\n\n<p>定义一个区域：唯一标识一个会话、名字、大小；</p>\n<ul>\n<li><p>KEY：这里一般为$binary_remote_addr，唯一标识一个区域<sup>会话</sup>的变量；$binary_remote_addr即为用一个IP表示一个区域<sup>会话</sup>。</p>\n</li>\n<li><p>NAME：区域的名字；</p>\n</li>\n<li><p>SIZE：大小，单位字节；10m表示10MB。</p>\n</li>\n</ul>\n<h3 id=\"例子-2\"><a href=\"#例子-2\" class=\"headerlink\" title=\"例子\"></a>例子</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit_conn_zone $binary_remote_addr zone=addr:10m</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\tlocation /&#123;</span><br><span class=\"line\">\t\tlimit_conn addr 5;</span><br><span class=\"line\">\t\tlimit_rate 100k;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>定义一个区域，名字为<strong>addr</strong>，判断会话用变量**$binary_remote_addr<strong>，区域名字为</strong>addr<strong>，大小</strong>10MB**；</li>\n<li>在<strong>location&#x2F;<strong>下面，在名为</strong>addr</strong>的区域，一个会话允许最大连接数为5，速度限制100K；</li>\n</ul>\n<h2 id=\"limit-conn-log-level\"><a href=\"#limit-conn-log-level\" class=\"headerlink\" title=\"limit_conn_log_level\"></a>limit_conn_log_level</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit_conn_log_level info|notice|warn|error;</span><br><span class=\"line\">Default: limit_conn_log_level error;</span><br><span class=\"line\">Context: http, server, location</span><br></pre></td></tr></table></figure>\n\n<p>当达到最大连接数，记录日志的等级。</p>\n<h2 id=\"limit-conn-status\"><a href=\"#limit-conn-status\" class=\"headerlink\" title=\"limit_conn_status\"></a>limit_conn_status</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Syntax: limit_conn_status code;</span><br><span class=\"line\">Default: limit_conn_status 503;</span><br><span class=\"line\">Context: http, server, location</span><br></pre></td></tr></table></figure>\n\n<p>超过限制后，返回的相应状态码，默认503.</p>\n<h1 id=\"案例：根据请求参数限制连接\"><a href=\"#案例：根据请求参数限制连接\" class=\"headerlink\" title=\"案例：根据请求参数限制连接\"></a>案例：根据请求参数限制连接</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">limit_conn_zone $mp_limit_key zone=mp:10m;</span><br><span class=\"line\">server&#123;</span><br><span class=\"line\">\tset $mp_limit_key $binary_remote_addr; # 为key设置默认值</span><br><span class=\"line\">\tif ( $query_string ~ .*mp=(\\d+).* )&#123;</span><br><span class=\"line\">\t\tset $mp_limit_key $1;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tlocation /&#123;</span><br><span class=\"line\">\t\tlimit_conn mp 10;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>依据**$mp_limit_key**定义一个会话，区域名为mp，限制大小10MB；</p>\n<p>使用正则表达式<code>.*mp=(\\d+).*</code>取出参数<strong>mp</strong>并设置值到<strong>mp_limit_key</strong>；</p>\n<p>限制连接数为10。</p>\n","categories":[],"tags":["Nginx"]},{"title":"Java 数据结构 Note","url":"http://zswh33.github.io/2022/10/30/Java-数据结构-Note/","content":"<h1 id=\"Java中的队列\"><a href=\"#Java中的队列\" class=\"headerlink\" title=\"Java中的队列\"></a>Java中的队列</h1><h2 id=\"Queue\"><a href=\"#Queue\" class=\"headerlink\" title=\"Queue\"></a>Queue</h2><h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>抛出异常</th>\n<th>返回false或null</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>添加</td>\n<td>add()</td>\n<td>offer()</td>\n</tr>\n<tr>\n<td>查询不删除</td>\n<td>element()</td>\n<td>peek()</td>\n</tr>\n<tr>\n<td>查询并删除</td>\n<td>remove()</td>\n<td>poll()</td>\n</tr>\n</tbody></table>\n<h3 id=\"Deque\"><a href=\"#Deque\" class=\"headerlink\" title=\"Deque\"></a>Deque</h3><p>双端队列</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>抛出异常</th>\n<th>返回false或null</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>添加到队列尾部</td>\n<td>add()</td>\n<td>offer()</td>\n</tr>\n<tr>\n<td></td>\n<td>addLast()</td>\n<td>offerLast()</td>\n</tr>\n<tr>\n<td>添加到队列头部</td>\n<td>push()</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>addFirst()</td>\n<td>offerFirst()</td>\n</tr>\n<tr>\n<td>查询不删除头部</td>\n<td>element()</td>\n<td>peek()</td>\n</tr>\n<tr>\n<td></td>\n<td>getFirst()</td>\n<td>peekFirst()</td>\n</tr>\n<tr>\n<td>查询不删除尾部</td>\n<td>getLast()</td>\n<td>peekLast()</td>\n</tr>\n<tr>\n<td>查询并删除头部</td>\n<td>remove()&#x2F;pop()</td>\n<td>poll()</td>\n</tr>\n<tr>\n<td></td>\n<td>removeFirst()</td>\n<td>pollFirst()</td>\n</tr>\n<tr>\n<td>查询并删除尾部</td>\n<td>removeLast()</td>\n<td>pollLast()</td>\n</tr>\n</tbody></table>\n<h3 id=\"BlockingQueue\"><a href=\"#BlockingQueue\" class=\"headerlink\" title=\"BlockingQueue\"></a>BlockingQueue</h3><p>阻塞队列，线程安全</p>\n<table>\n<thead>\n<tr>\n<th>功能</th>\n<th>抛出异常</th>\n<th>返回false或null</th>\n<th>阻塞</th>\n<th>阻塞等待，超时抛出异常</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>添加</td>\n<td>add()</td>\n<td>offer()</td>\n<td>put()</td>\n<td>offer(E e,long timeout,TimeUnit unit)</td>\n</tr>\n<tr>\n<td>查询并删除</td>\n<td></td>\n<td></td>\n<td>take()</td>\n<td>poll(long timeout,TimeUnit unit)</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>其他API</p>\n</blockquote>\n<p><code>int remainingCapacity()</code>：返回剩余容量；</p>\n<p><code>boolean remove(Object o)</code>：删除一个指定元素，成功返回true；</p>\n<p><code>boolean contains(Object o)</code>：若队列包含指定元素，返回true；</p>\n<p><code>int drainTo(Collection&lt;? super E&gt; c)</code>：队列中删除所有元素，并将元素添加到指定集合；</p>\n<p><code>int drainTo(Collection&lt;? super E&gt; c,int maxElements)</code>：同上，可以指定最大元素数量；</p>\n<h3 id=\"BlockingDeque\"><a href=\"#BlockingDeque\" class=\"headerlink\" title=\"BlockingDeque\"></a>BlockingDeque</h3><p>阻塞队列和双端队列的结合；</p>\n<blockquote>\n<p> 新增的API</p>\n</blockquote>\n<p><strong>等待</strong></p>\n<p><code>takeFirst</code> &#x2F; <code>take</code>：查询并删除队列第一个元素，如果没有则阻塞；</p>\n<p><code>takeLast</code>：查询并删除队列最后一个元素，没有则阻塞；</p>\n<p><code>putFirst</code> &#x2F; <code>putLast</code>：插入元素，若队列满则阻塞等待；</p>\n<p><strong>等待超时</strong></p>\n<p><code>offerFirst(E e, long timeout,TimeUnit unit)</code>：添加元素到队首，若队列满则等待；</p>\n<p><code>offer</code> 或 <code>offerLast(E e,long timeout,TimeUnit unit)</code>：同上；</p>\n<p><code>pollFirst(long timeout,TimeUnit unit)</code>：查询并删除第一个元素，队列空则等待，超时则抛出错误；</p>\n<p><code>pollLast(long timeout,TimeUnit unit)</code>：同上；</p>\n<h4 id=\"LinkedBlockingDeque\"><a href=\"#LinkedBlockingDeque\" class=\"headerlink\" title=\"LinkedBlockingDeque\"></a>LinkedBlockingDeque</h4><p>链表实现的双端阻塞队列</p>\n<h4 id=\"ArrayBlockingQueue\"><a href=\"#ArrayBlockingQueue\" class=\"headerlink\" title=\"ArrayBlockingQueue\"></a>ArrayBlockingQueue</h4><p>数组实现的阻塞队列</p>\n<p>可以给定容量和访问策略</p>\n<ul>\n<li>ArrayBlockingQueue(int capacity)</li>\n<li>ArrayBlockingQueue(int capacity,boolean fair)</li>\n<li>ArrayBlockingQueue(int capacity,boolean fair,Collection&lt;?extends E&gt; c)</li>\n</ul>\n<h4 id=\"PriorityBlockingQueue\"><a href=\"#PriorityBlockingQueue\" class=\"headerlink\" title=\"PriorityBlockingQueue\"></a>PriorityBlockingQueue</h4><p>优先队列的阻塞版本</p>\n<p>不允许有null元素</p>\n<h4 id=\"SynchronousQueue\"><a href=\"#SynchronousQueue\" class=\"headerlink\" title=\"SynchronousQueue\"></a>SynchronousQueue</h4><ul>\n<li><p>没有容量的同步队列。</p>\n</li>\n<li><p>一旦有<strong>消费或生产</strong>过程，就必须有<strong>相应的生产或消费</strong>过程，否则阻塞；</p>\n</li>\n<li><p>队列中没有容量，在这个队列中，不参与等待的API一律返回null，比如：</p>\n<ul>\n<li>remove、containsAll、removeAll、retainAll永远返回false；</li>\n<li>peek永远返回null。</li>\n</ul>\n</li>\n</ul>\n<p>可以指定访问策略</p>\n<ul>\n<li>SynchronousQueue()，创建一个不公平的同步队列；</li>\n<li>SynchronousQueue(boolean fair)，指定公平&#x2F;不公平。</li>\n</ul>\n<h5 id=\"API-1\"><a href=\"#API-1\" class=\"headerlink\" title=\"API\"></a>API</h5><p>put(E e)：将元素添加到队列，然后阻塞等待另一个线程接收元素；</p>\n<p>offer(E e, long timeout,TimeUnit unit)：将元素插入到队列中，等待消费者消费，超时则hole..；</p>\n<p>offer(E e)：若有另一个线程在等待接收元素，则将元素插入到队列中，否则返回false；</p>\n<p>take()：查询队列首元素，删除元素并返回，若队列中没有数据则阻塞等待；</p>\n<p>poll(long timeout,TimeUnit unit)：查询队列首元素，删除元素并返回，若队列空则等待，超时返回null；</p>\n<p>poll()：查询队列首元素，删除元素并返回，若队列空则返回null；</p>\n<h3 id=\"TransferQueue\"><a href=\"#TransferQueue\" class=\"headerlink\" title=\"TransferQueue\"></a>TransferQueue</h3><p>这个队列可以实现<strong>生产者消费者程序</strong>，并<strong>协调消息</strong>使消息能够从生产者传输到消费者；</p>\n<h4 id=\"新增API\"><a href=\"#新增API\" class=\"headerlink\" title=\"新增API\"></a>新增API</h4><p><code>getWaitingConsumerCount()</code>：获取等待的消费者数量；</p>\n<p><code>hasWaitingConsumer()</code>：获取是否有消费者在等待；</p>\n<p><code>transfer()</code>：将元素交给消费者，如果没有消费者，则等待；</p>\n<p><code>tryTransfer()</code>：将元素交给消费者，若没有消费者，则抛弃元素，返回false；</p>\n<p><code>tryTransfer(E e,long timeout,Timeunit unit)</code>：将元素交给消费者，若没有消费者，则等待，超时则抛弃元素，返回false；</p>\n<h4 id=\"LinkedTransferQueue\"><a href=\"#LinkedTransferQueue\" class=\"headerlink\" title=\"LinkedTransferQueue\"></a>LinkedTransferQueue</h4><p>链表实现的TransferQueue。</p>\n<h5 id=\"特别的API\"><a href=\"#特别的API\" class=\"headerlink\" title=\"特别的API\"></a>特别的API</h5><ul>\n<li>transfer：将元素转移给消费者，若没有消费者，则等待；<ul>\n<li>将元素插入到队列尾部，然后等待消费者消费；</li>\n</ul>\n</li>\n<li>tryTransfer(E e, long timeout, TimeUnit unit)：将元素插入队列，然后等待消费者消费；若超时，则取消阻塞，返回false；成功返回true；</li>\n<li>take：从队列的头中取出元素，若没有元素则等待；</li>\n<li>poll(long timeout, TimeUnit unit)：take的超时版本，从队列的头中取出元素，若没有元素则等待，超时返回null；</li>\n<li>poll()：从队列头部取出元素，若没有元素，则返回null；</li>\n<li>peek()：查询不删除队列头部元素，若队列空，则返回null；</li>\n</ul>\n<h3 id=\"AbstractQueue\"><a href=\"#AbstractQueue\" class=\"headerlink\" title=\"AbstractQueue\"></a>AbstractQueue</h3><h4 id=\"API-2\"><a href=\"#API-2\" class=\"headerlink\" title=\"API\"></a>API</h4><p>add(E e)：添加元素，失败抛出异常；</p>\n<p>addAll(Collection&lt;? extends E&gt; c)：添加元素，失败抛出异常；</p>\n<p>clear：删除所有元素；</p>\n<p>element：查询不删除头部元素；</p>\n<p>remove：查询并删除头部元素；</p>\n<h4 id=\"ConcurrentLinkedQueue\"><a href=\"#ConcurrentLinkedQueue\" class=\"headerlink\" title=\"ConcurrentLinkedQueue\"></a>ConcurrentLinkedQueue</h4><p>基于<strong>链表</strong>，<strong>无界</strong>的<strong>线程安全</strong>队列；</p>\n<h3 id=\"LinkList\"><a href=\"#LinkList\" class=\"headerlink\" title=\"LinkList\"></a>LinkList</h3><p><strong>线程不安全</strong>，基于<strong>链表</strong>的队列；</p>\n<h3 id=\"PriorityQueue优先队列\"><a href=\"#PriorityQueue优先队列\" class=\"headerlink\" title=\"PriorityQueue优先队列\"></a>PriorityQueue优先队列</h3><h4 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h4><ol>\n<li>无限长的队列，并且动态增长，默认初始容量可以用构造参数initialCapacity参数覆盖；</li>\n<li>不允许有NULL对象；</li>\n<li>添加到PriorityQueue的对象必须有可比性；</li>\n<li>默认情况下，队列按自然顺序排序；</li>\n<li>比较器可用于队列中对象的自定义排序；</li>\n<li>线程不安全；</li>\n<li>add和poll方法复杂度：O(log(n))</li>\n</ol>\n<h4 id=\"API-3\"><a href=\"#API-3\" class=\"headerlink\" title=\"API\"></a>API</h4><ul>\n<li><p>boolean add(object) 将指定对象插入；</p>\n</li>\n<li><p>boolean offer(object) 将指定对象插入；</p>\n</li>\n<li><p>boolean remove(object) 从此队列删除指定元素的单个实例；</p>\n</li>\n<li><p>Object poll()：删除并返回队列的头部，若队列为空，返回null；</p>\n</li>\n<li><p>Object element()：获取队列头部；</p>\n</li>\n<li><p>Object peek()：获取队列头部；</p>\n</li>\n<li><p>clear()：从队列中删除所有元素；</p>\n</li>\n<li><p>comparator()：返回队列的比较器；</p>\n</li>\n<li><p>contains(Object o)：是否包含指定元素。</p>\n</li>\n</ul>\n<h4 id=\"一些API的区别\"><a href=\"#一些API的区别\" class=\"headerlink\" title=\"一些API的区别\"></a>一些API的区别</h4><p>add、remove、element：抛出异常；</p>\n<p>offer、poll、peek：不抛出异常，返回null；</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>抛出异常</th>\n<th>不抛出异常</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>添加</td>\n<td>add</td>\n<td>offer</td>\n</tr>\n<tr>\n<td>删除</td>\n<td>remove</td>\n<td>poll</td>\n</tr>\n<tr>\n<td>获取首元素</td>\n<td>element</td>\n<td>peek</td>\n</tr>\n</tbody></table>\n","categories":[],"tags":["Java"]},{"title":"openEuler 1 Linux操作系统 版本更新 登录和电源管理 文件管理 文件查看 文件查找 压缩解压 软链接硬链接","url":"http://zswh33.github.io/2022/10/23/openEuler-1/","content":"<p><a href=\"https://ilearningx.huawei.com/courses/course-v1:HuaweiX+EBG2020CCHW1100063+Self-paced/courseware/6abdf02386a84e38b9fd85e020966057/fccbc4b5a17b45d99cbef50dd9ff5466/\">https://ilearningx.huawei.com/courses/course-v1:HuaweiX+EBG2020CCHW1100063+Self-paced/courseware/6abdf02386a84e38b9fd85e020966057/fccbc4b5a17b45d99cbef50dd9ff5466/</a></p>\n<h1 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h1><p><strong>操作系统</strong>：是指控制和管理整个计算机系统的<strong>硬件和软件资源</strong>、并合理地组织调度<strong>计算机的工作</strong>和<strong>资源的分配</strong>，以提供给<strong>用户和其他软件</strong>方便的<strong>接口和环境</strong>的<strong>程序集合</strong>。</p>\n<h1 id=\"Linux版本介绍\"><a href=\"#Linux版本介绍\" class=\"headerlink\" title=\"Linux版本介绍\"></a>Linux版本介绍</h1><ul>\n<li>内核版本<ul>\n<li>Linux内核版本号由3个数字组成：<strong>5.19.16</strong><ul>\n<li>第一个数字：目前发布的内核版本</li>\n<li>第二个数字：偶数表示<strong>稳定版本</strong>，奇数表示<strong>开发中版本</strong>。</li>\n<li>第三个数字：错误修补的次数。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>发行版本<ul>\n<li>商业发行版：由商业公司维护，提供收费的服务，如升级补丁；</li>\n<li>社区发行版：由社区组织维护。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"openEuler操作系统\"><a href=\"#openEuler操作系统\" class=\"headerlink\" title=\"openEuler操作系统\"></a>openEuler操作系统</h1><p>是一款开源、免费的操作系统，由openEuler社区运作。内核源于Linux，支持鲲鹏及其他多种处理器，适用于数据库、大数据、云计算、人工智能等应用场景。</p>\n<h2 id=\"版本号\"><a href=\"#版本号\" class=\"headerlink\" title=\"版本号\"></a>版本号</h2><ul>\n<li>创新版本：相对较新，半年一版本；</li>\n<li>LTS：稳定版，两年一版本。</li>\n</ul>\n<h2 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h2><ul>\n<li>swap：交换分区。在内存空间不足时，用于置换内存中的脏数据。<ul>\n<li>内存较小时建议为<strong>内存大小的两倍</strong>；</li>\n<li>内存较大时，根据情况分配。</li>\n</ul>\n</li>\n<li>boot：系统引导程序</li>\n<li>boot&#x2F;efi：EFI固件要启动的引导器和应用程序</li>\n<li>&#x2F;：根分区</li>\n</ul>\n<h2 id=\"安装选择\"><a href=\"#安装选择\" class=\"headerlink\" title=\"安装选择\"></a>安装选择</h2><ul>\n<li>最小安装<ul>\n<li>最小化安装Linux。</li>\n</ul>\n</li>\n<li>服务器<ul>\n<li>安装服务器场景涉及到的软件。</li>\n</ul>\n</li>\n<li>虚拟化主机<ul>\n<li>虚拟化场景设计的相关软件。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Linux的GUI和CLI\"><a href=\"#Linux的GUI和CLI\" class=\"headerlink\" title=\"Linux的GUI和CLI\"></a>Linux的GUI和CLI</h1><p>GUI，图形用户界面；</p>\n<p>CLI，命令行界面；</p>\n<h1 id=\"登录Linux\"><a href=\"#登录Linux\" class=\"headerlink\" title=\"登录Linux\"></a>登录Linux</h1><ul>\n<li>本地登录<ul>\n<li>一个典型的Linux将运行6个虚拟控制台和1个图形控制台。openEuler目前没有图形控制台；</li>\n<li>可以通过ctrl + alt + F1-F6 在虚拟控制台之间切换；</li>\n</ul>\n</li>\n<li>远程登录<ul>\n<li>软件：putty，xshell等。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Shell\"><a href=\"#Shell\" class=\"headerlink\" title=\"Shell\"></a>Shell</h1><ul>\n<li><p><strong>常见的Shell</strong>：bash，sh，csh，ksh。</p>\n</li>\n<li><p>系统默认提示符：[当前用户名@主机名 当前所在位置]$</p>\n<ul>\n<li>其中最后的符号，root用户为#，其他用户为$</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"用户\"><a href=\"#用户\" class=\"headerlink\" title=\"用户\"></a>用户</h1><ul>\n<li>为保障系统安全：<ul>\n<li>初次登录系统修改密码</li>\n<li>定期修改密码</li>\n<li>设计高复杂度密码<ul>\n<li>八位以上字符，包含大写、小写字母，数字和特殊字符中三种及以上的字符。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>修改密码：passwd</li>\n<li>root用户拥有最高权限</li>\n<li>切换用户使用：su [用户名]<ul>\n<li>无参默认切换root用户</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Shell快捷操作\"><a href=\"#Shell快捷操作\" class=\"headerlink\" title=\"Shell快捷操作\"></a>Shell快捷操作</h1><ul>\n<li><p>tab：命令补全；</p>\n</li>\n<li><p>history：查看历史命令；</p>\n<ul>\n<li>history n：执行编号为n的历史命令；</li>\n</ul>\n</li>\n<li><p>↑&#x2F;↓：历史命令切换，上一个命令&#x2F;下一个命令；</p>\n</li>\n<li><p>home&#x2F;end：切换到行首&#x2F;行尾；</p>\n</li>\n<li><p>Ctrl + A 移动光标到行首</p>\n</li>\n<li><p>Ctrl + E 移动光标到行尾</p>\n</li>\n<li><p>Ctrl + C 终止当前程序</p>\n</li>\n<li><p>clear或Ctrl + L：快速清屏。</p>\n</li>\n</ul>\n<h2 id=\"二\"><a href=\"#二\" class=\"headerlink\" title=\"二\"></a>二</h2><ul>\n<li>双击Tab可以列出所有可用命令；</li>\n</ul>\n<h1 id=\"Linux命令分类\"><a href=\"#Linux命令分类\" class=\"headerlink\" title=\"Linux命令分类\"></a>Linux命令分类</h1><table>\n<thead>\n<tr>\n<th>分类</th>\n<th>命令</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>登录和电源管理</td>\n<td>login, shutdown, halt, reboot, install, exit, last等</td>\n</tr>\n<tr>\n<td>文件处理</td>\n<td>file, mkdir, grep, dd, find, mv, ls, diff, cat, ln等</td>\n</tr>\n<tr>\n<td>系统管理</td>\n<td>df, top, free, quota, at, ip, kill, crontab等</td>\n</tr>\n<tr>\n<td>网络操作</td>\n<td>ifconfig, ip, ping, netstat, telnet, ftp, route, rlogin, rcp, finger, mail, nslookup等</td>\n</tr>\n<tr>\n<td>系统安全</td>\n<td>passwd, su, umask, chgrp, chmod, chown, chattr, sudo ps, who等</td>\n</tr>\n<tr>\n<td>其他</td>\n<td>tar, unzip, gunzip, unarj, mtools, man</td>\n</tr>\n</tbody></table>\n<h2 id=\"登录和管理电源\"><a href=\"#登录和管理电源\" class=\"headerlink\" title=\"登录和管理电源\"></a>登录和管理电源</h2><h3 id=\"login\"><a href=\"#login\" class=\"headerlink\" title=\"login\"></a>login</h3><p>Linux是一个多用户操作系统，可以同时接收多个用户登录，还允许一个用户进行多次登录；</p>\n<p>虚拟控制台切换使用“<strong>alt和一个功能键</strong>”实现，通常使用<strong>F1-F6</strong>；</p>\n<h3 id=\"last\"><a href=\"#last\" class=\"headerlink\" title=\"last\"></a>last</h3><p>查看最近的登录记录</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@localhost ~]# last</span><br><span class=\"line\">root     pts/0        192.168.227.1    Sun Oct 23 23:01   still logged in</span><br><span class=\"line\">yyn      tty1                          Sun Oct 23 18:39   still logged in</span><br><span class=\"line\">reboot   system boot  5.10.0-106.18.0. Mon Oct 24 02:38   still running</span><br></pre></td></tr></table></figure>\n\n<p><strong>last -n 3或 last -3</strong>：显示最近的3条登录记录；</p>\n<p><strong>last tty2</strong>：tty2虚拟控制台的登录记录；</p>\n<p><strong>last root</strong>：root用户的登录记录；</p>\n<h3 id=\"exit\"><a href=\"#exit\" class=\"headerlink\" title=\"exit\"></a>exit</h3><p>退出登录。</p>\n<h3 id=\"shutdown\"><a href=\"#shutdown\" class=\"headerlink\" title=\"shutdown\"></a>shutdown</h3><h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><ul>\n<li><p>shutdown作用是关闭计算机，权限是超级用户。</p>\n</li>\n<li><p>参数：</p>\n<ul>\n<li>-h：关机后关闭电源；</li>\n<li>-r：关机后打开电源（重启）；</li>\n<li>-t：改变到其他运行级别之前，告诉init程序多久以后关机；</li>\n<li>-k：不关机，送警告信号给每位登陆者；</li>\n<li>-F：在重启计算机时强迫fsck；</li>\n<li>-f：关机时，不做fsck动作；</li>\n<li>-t seconds：设定关机前时间；</li>\n<li>-C：取消自动关机</li>\n</ul>\n</li>\n<li><p>shutdown命令可以安全地将系统关机，直接断掉电源方式关闭Linux十分危险；</p>\n<ul>\n<li>Linux后台运行着许多进程；强制关机会导致进程数据丢失；使系统处于不稳定状态，甚至可能损坏硬件设备。</li>\n</ul>\n</li>\n<li><p>使用shutdown可以向其他用户通知警告信息，并冻结login命令，禁止登录。</p>\n</li>\n</ul>\n<h3 id=\"halt\"><a href=\"#halt\" class=\"headerlink\" title=\"halt\"></a>halt</h3><p>halt命令的作用是关闭系统，使用权限是超级用户；</p>\n<ul>\n<li>主要参数<ul>\n<li>-n：方式sync系统调用，它用在用fsck修复根分区后，以阻止内核用老版本的超级块覆盖修补过的超级块；</li>\n<li>-w：不重启和关机，只是写wtmp（&#x2F;var&#x2F;log&#x2F;wtmp）记录；</li>\n<li>-f：不调用shutdown，强制关机或重启；</li>\n<li>-i：关机或重启前，关闭所有网络接口；</li>\n<li>-d：关闭系统，不留下记录。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"reboot\"><a href=\"#reboot\" class=\"headerlink\" title=\"reboot\"></a>reboot</h3><p>reboot命令作用是重启计算机，权限：系统管理者；</p>\n<ul>\n<li>主要参数：<ul>\n<li>-n：保存数据后重启系统；</li>\n<li>-w：不重启，只是把记录写到&#x2F;var&#x2F;log&#x2F;wtmp文件里；</li>\n<li>-d：不写记录到&#x2F;var&#x2F;log&#x2F;wtmp文件里；</li>\n<li>-i：关闭网络设置后再重启系统；</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"文件管理\"><a href=\"#文件管理\" class=\"headerlink\" title=\"文件管理\"></a>文件管理</h2><h3 id=\"目录介绍\"><a href=\"#目录介绍\" class=\"headerlink\" title=\"目录介绍\"></a>目录介绍</h3><ul>\n<li><p>&#x2F;：根目录</p>\n<ul>\n<li><p>&#x2F;bin：所有用户使用的二进制程序目录</p>\n</li>\n<li><p>&#x2F;boot：引导加载程序文件目录</p>\n</li>\n<li><p>&#x2F;dev：设备文件目录</p>\n</li>\n<li><p>&#x2F;etc：配置文件目录</p>\n</li>\n<li><p>&#x2F;lib：系统库目录，动态链接共享库</p>\n</li>\n<li><p>&#x2F;lib64：64位的系统库目录</p>\n</li>\n<li><p>&#x2F;media：可移动媒体设备目录</p>\n</li>\n<li><p>&#x2F;mnt：挂载目录</p>\n</li>\n<li><p>&#x2F;opt：应用软件存放目录</p>\n</li>\n<li><p>&#x2F;proc：进程信息目录</p>\n</li>\n<li><p>&#x2F;root：root用户主目录</p>\n</li>\n<li><p>&#x2F;run：内存文件系统目录，临时文件目录，存储系统运行以来的文件目录，系统重启后目录会被清空；</p>\n</li>\n<li><p>&#x2F;sbin：系统管理员用户使用的二进制程序目录；</p>\n</li>\n<li><p>&#x2F;srv：服务数据目录；</p>\n</li>\n<li><p>&#x2F;sys：内核设备树目录，Linux2.6内核新出现的文件系统sysfs；</p>\n</li>\n<li><p>&#x2F;tmp：存放临时文件的目录</p>\n</li>\n<li><p>&#x2F;usr：用户应用程序和配置目录，类似于windows的Program Files目录；</p>\n</li>\n<li><p>&#x2F;var：动态目录，用于存放经常被修改的文件，比如日志；</p>\n</li>\n<li><p>&#x2F;home：用户用其存储个人配置。</p>\n</li>\n</ul>\n</li>\n<li><p>路径分为<strong>绝对路径</strong>和<strong>相对路径</strong>；</p>\n</li>\n</ul>\n<h3 id=\"pwd\"><a href=\"#pwd\" class=\"headerlink\" title=\"pwd\"></a>pwd</h3><p>打印当前的工作目录；</p>\n<ul>\n<li>运行参数：<ul>\n<li>-L，目录连接链接时，输出连接路径；</li>\n<li>-P：输出物理路径，即文件在设备中的路径；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"cd\"><a href=\"#cd\" class=\"headerlink\" title=\"cd\"></a>cd</h3><p>用于改变当前工作目录；</p>\n<ul>\n<li>使用<ul>\n<li>cd &#x2F;usr：进入&#x2F;usr目录</li>\n<li>cd ..</li>\n<li>cd . 进入当前目录</li>\n<li><code>cd</code> 或 <code>cd ~</code> ：回到家目录</li>\n<li><code>cd -</code> ：回到前一个目录，可以在两个目录间跳转；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ls\"><a href=\"#ls\" class=\"headerlink\" title=\"ls\"></a>ls</h3><p>列出目录内容或文件信息</p>\n<ul>\n<li>参数<ul>\n<li>-a：显示所有文件及目录，包括隐藏文件和目录；</li>\n<li>-l：除文件名外，打印另包含文件形态，权限，拥有者，文件大小等；</li>\n<li>-t：将文件按照建立时间先后次序列出；</li>\n<li>-S：将文件按文件大小依次列出；</li>\n<li>-R：若目录下有文件，则将目录下文件也列出；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"mkdir\"><a href=\"#mkdir\" class=\"headerlink\" title=\"mkdir\"></a>mkdir</h3><p>创建目录（文件夹）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir dir1 # 创建一个dir1文件夹</span><br><span class=\"line\">mkdir dir2 dir3 dir4 # 创建三个文件夹</span><br><span class=\"line\">mkdir -p dir/dir5 # 创建dir，然后在dir下创建dir5；若dir不存在，需要添加 -p 参数</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cp\"><a href=\"#cp\" class=\"headerlink\" title=\"cp\"></a>cp</h3><p>复制文件或目录，可以复制单个文件，可以复制多个文件；</p>\n<ul>\n<li>语法：cp [OPTION]… SOURCE… DIRECTORY<ul>\n<li>-a：保留链接，文件属性，并复制目录下所有内容；</li>\n<li>-p：除文件内容外，还把修改时间和放文件权限也复制到新文件；</li>\n<li>-r：若源文件是目录文件，则复制包含目录下<strong>所有子目录和文件</strong>；</li>\n<li>-l：不复制文件，只是生成链接文件。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"mv\"><a href=\"#mv\" class=\"headerlink\" title=\"mv\"></a>mv</h3><p>移动文件或目录。</p>\n<p>若源文件和目标文件在同一个父目录里面，则mv命令效果相当于给文件命名；</p>\n<ul>\n<li>语法：mv [选项] 源文件或目录 目标文件或目录<ul>\n<li>-b：若需要覆盖文件，覆盖前进行备份；</li>\n<li>-f：force强制，若目标文件存在，不询问直接覆盖；</li>\n<li>-i：若目标文件存在，询问是否覆盖；</li>\n<li>-u：若目标文件存在，且源文件比较新，则覆盖；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"rm\"><a href=\"#rm\" class=\"headerlink\" title=\"rm\"></a>rm</h3><p>删除文件或目录；</p>\n<ul>\n<li>语法：rm [OPTION] file_or_dir<ul>\n<li>-f，–force：忽略不存在的文件，不给出提示，直接删除；</li>\n<li>-i，–interactive：进行交互式删除；</li>\n<li>-r，-R，–recursive：指示rm将参数中列出的全部目录和子目录递归删除，即删除目标目录包含其子目录及文件；</li>\n<li>-v，–verbose：输出删除日志；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"cat\"><a href=\"#cat\" class=\"headerlink\" title=\"cat\"></a>cat</h3><p>读取文件全部内容，或将几个文件合并为一个文件；</p>\n<ul>\n<li>语法：cat [OPTION] [FILE]<ul>\n<li>-A，–show-all：等价于-vET；</li>\n<li>-b，–number-nonblank：对非空输出行编号；</li>\n<li>-E，–show-ends：每行结尾处显示$；</li>\n<li>-n，–number：所有行显示行号，从1开始；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"head\"><a href=\"#head\" class=\"headerlink\" title=\"head\"></a>head</h3><p>显示文件开头的内容，head命令默认打印文件开头10行；</p>\n<ul>\n<li>语法：head [OPTION] [FILE]<ul>\n<li>-q：隐藏文件名，默认开启；</li>\n<li>-v：显示文件名；</li>\n<li>-c&lt;字节&gt; 指定打印结果的字节数；</li>\n<li>-n&lt;行数&gt;：指定打印行数。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"tail\"><a href=\"#tail\" class=\"headerlink\" title=\"tail\"></a>tail</h3><p>读取文件尾部；</p>\n<ul>\n<li>语法：tail [OPTION]… [FILE]…<ul>\n<li>-f：循环读取；</li>\n<li>-q：不显示处理信息；</li>\n<li>-v：显示详细的处理信息；</li>\n<li>-c&lt;数目&gt; 指定打印结果的字节数；</li>\n<li>-n&lt;行数&gt; 指定显示行数；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"more\"><a href=\"#more\" class=\"headerlink\" title=\"more\"></a>more</h3><p>逐页阅读文件。more会加载整个文件；</p>\n<ul>\n<li>使用按键<ul>\n<li><strong>space</strong> 或 <strong>Ctrl+F</strong>：下一页</li>\n<li><strong>b,back</strong> 或 <strong>Ctrl+B</strong>：上一页</li>\n<li><strong>Enter</strong>：<strong>向下</strong>n行，默认n为1；</li>\n<li>**&#x3D;**：输出当前行行号；</li>\n<li><strong>v</strong>：使用vi编辑器</li>\n<li>!：调用Shell，并执行命令；</li>\n<li>q：退出</li>\n</ul>\n</li>\n<li>语法：more [OPTION] [FILE]<ul>\n<li>+n 从第n行开始显示；</li>\n<li>-n 定义屏幕大小为n行；</li>\n<li>+&#x2F;pattern 在文件打开前进行表达式搜索，然后从该子串之后开始显示；</li>\n<li>-c 先进行清屏，然后显示</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"less\"><a href=\"#less\" class=\"headerlink\" title=\"less\"></a>less</h3><p>可以随意浏览文件；less运行后不会加载整个文件。</p>\n<ul>\n<li><p>语法：less [OPTION]… [FILE]…</p>\n</li>\n<li><p>操作：</p>\n<ul>\n<li><p>&#x2F;字符串：向下搜索字符串；</p>\n</li>\n<li><p>?字符串：向上搜索字符串；</p>\n</li>\n<li><p>q：退出；</p>\n</li>\n<li><p>space：下一页；</p>\n</li>\n<li><p>Enter：下一行；</p>\n</li>\n<li><p>PageUp：上一页；</p>\n</li>\n<li><p>PageDown：下一页。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find\"></a>find</h3><p>查找指定目录下的文件；</p>\n<p>可以指定一些匹配条件，如按文件名、文件类型、用户甚至是时间戳查找文件；</p>\n<ul>\n<li>语法：find [path…] [expression]<ul>\n<li>-name 按照文件名查找文件；</li>\n<li>-perm 按照文件权限查找文件；</li>\n<li>-user 按照文件属主来查找文件；</li>\n<li>-mtime -n +n 按照文件更改时间来查找文件；</li>\n<li>-type，按照类型查找文件<ul>\n<li>d 目录</li>\n<li>f 一般文件 </li>\n<li>l 软链接</li>\n<li>使用：-type d 表示查找目录文件</li>\n</ul>\n</li>\n<li>-empty 查找空文件和空目录</li>\n<li>-empty -delete 找到空文件并删除</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"which\"><a href=\"#which\" class=\"headerlink\" title=\"which\"></a>which</h3><p>在PATH指定目录主查找可执行文件；</p>\n<p>查找命令的执行文件的路径；</p>\n<ul>\n<li>语法：which [options] programname […]</li>\n</ul>\n<h3 id=\"gzip\"><a href=\"#gzip\" class=\"headerlink\" title=\"gzip\"></a>gzip</h3><p>压缩和解压缩；</p>\n<p>存疑：不能将多个文件打包到同一个文件夹中。</p>\n<p>压缩率60%-70%；</p>\n<p>压缩结果为gzip文件；</p>\n<ul>\n<li>语法：gzip [options] [file or directory]<ul>\n<li>-d，–decompress或–uncompress，解压缩文件；</li>\n<li>-f或–force，强行压缩文件，不考虑<strong>文件名是否存在</strong>或<strong>文件是否为符号链接</strong>；</li>\n<li>-l或–list，列出压缩文件的相关信息；</li>\n<li>-r或–recursive，递归处理，将指定目录下所有文件和子目录一并处理；</li>\n<li>-v或–verbose，显示指令执行过程。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"tar\"><a href=\"#tar\" class=\"headerlink\" title=\"tar\"></a>tar</h3><p>将多个文件打包为一个文件；</p>\n<ul>\n<li>语法：tar [OPTION…] [FILE]<ul>\n<li>-c 建立新的压缩文件；</li>\n<li>-x 从压缩的文件中提取文件；</li>\n<li>-t 显示压缩文件的内容；</li>\n<li>-z 支持gzip解压文件</li>\n<li>-j 支持bzip2解压文件；</li>\n<li>-v 显示操作过程；</li>\n<li>-C 指定操作目录</li>\n</ul>\n</li>\n<li>实战<ul>\n<li><strong>tar -czf dir.tar.gz dir</strong>，创建压缩文件；</li>\n<li><strong>tar -xvf dir.tar.gz -C dir2</strong> ，解压缩文件；</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"ln\"><a href=\"#ln\" class=\"headerlink\" title=\"ln\"></a>ln</h3><p>创建链接文件；</p>\n<p>Linux中链接分为软链接和硬链接；</p>\n<ul>\n<li>软链接：<ul>\n<li>以路径形式存在，类似于Windows的快捷方式</li>\n<li>删除源文件后链接失效；</li>\n<li>可以对目录进行链接；</li>\n<li>可以跨文件系统；</li>\n</ul>\n</li>\n<li>硬链接：<ul>\n<li>以文件副本形式存在，不占用实际空间；</li>\n<li>删除源文件后无影响；</li>\n<li>不可以对目录进行链接；</li>\n<li>不可以跨文件系统。</li>\n</ul>\n</li>\n</ul>\n<p>ln命令默认创建硬链接；</p>\n<ul>\n<li><p>语法：ln [-f | -n] [ -s ] SourceFile [Targetfile]</p>\n<ul>\n<li>-b，删除，覆盖以前建立的链接；</li>\n<li>-d，允许超级用户制作目录的硬链接；</li>\n<li>-f，强制执行；</li>\n<li>-i，交互模式，文件存在提示用户是否覆盖；</li>\n<li>-n，对目录创建符号链接时，创建的符号链接可以视为一般目录，也就是可以cd；</li>\n<li>-s，软链接（符号链接）。</li>\n</ul>\n</li>\n<li><p>注意</p>\n<ul>\n<li>SourceFile为一个路径表达式，若为“.&#x2F;w.c”表示当前目录的w.c文件；若为”&#x2F;home&#x2F;yyn&#x2F;w.c”则表示yyn目录下的w.c文件；<strong>这里可以是相对位置也可以是绝对位置</strong>，创建时源文件可以不存在；</li>\n</ul>\n</li>\n</ul>\n<p>​\t</p>\n","categories":[],"tags":["openEuler Linux"]},{"title":"Java并发 2","url":"http://zswh33.github.io/2022/10/20/Java并发-2/","content":"<h1 id=\"创建线程，实现接口优于继承Thread\"><a href=\"#创建线程，实现接口优于继承Thread\" class=\"headerlink\" title=\"创建线程，实现接口优于继承Thread\"></a>创建线程，实现接口优于继承Thread</h1><ol>\n<li>Java不支持多继承，因此继承了Thread类就无法继承其他类；</li>\n<li>类可能只要求可执行就可，继承Thread开销过大。</li>\n</ol>\n<h1 id=\"基础线程机制\"><a href=\"#基础线程机制\" class=\"headerlink\" title=\"基础线程机制\"></a>基础线程机制</h1><h2 id=\"Executor\"><a href=\"#Executor\" class=\"headerlink\" title=\"Executor\"></a>Executor</h2><p>Executor管理多个异步任务的执行，无需程序员显式地管理线程的生命周期。</p>\n<p>目前有三种Executor：</p>\n<ul>\n<li><code>CachedThreadPool</code>：一个任务创建一个线程；</li>\n<li><code>FixedThreadPool</code>：所有任务使用固定数量的线程，多出来的排队或丢弃，取决于初始化参数；</li>\n<li><code>SingleThreadExecutor</code>：大小为1的<code>FixedThreadPool</code>。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExecutorStudy</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(<span class=\"number\">5</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\">            executorService.execute(()-&gt;&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; Execute.&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    TimeUnit.MILLISECONDS.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        executorService.shutdown();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Daemon\"><a href=\"#Daemon\" class=\"headerlink\" title=\"Daemon\"></a>Daemon</h2><p>Daemon，即守护线程。</p>\n<p>守护线程是程序运行时在后台提供服务的线程，<strong>不是程序中不可或缺的部分</strong>。</p>\n<p>当所有非守护线程结束时，程序也将终止，同时会杀死所有守护线程。</p>\n<p>主线程不是守护线程；</p>\n<p>使用<code>setDaemon()</code>可以设置一个线程为守护线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;这即将是一个守护线程&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">thread.setDaemon(<span class=\"literal\">true</span>);<span class=\"comment\">//设置守护线程</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"sleep\"><a href=\"#sleep\" class=\"headerlink\" title=\"sleep()\"></a>sleep()</h2><p>休眠当前线程为指定时间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;这是一个线程&quot;</span>);</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">       Thread.sleep(<span class=\"number\">3000</span>);<span class=\"comment\">//线程休眠3秒</span></span><br><span class=\"line\">   &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;e.printStackTrace();&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield()\"></a>yield()</h2><p><code>Thread.yield()</code>表示当前线程已经完成了生命周期中最重要的部分。</p>\n<p>这个方法只是给线程调度器一个建议，且只是建议<strong>具有相同优先级的其他线程</strong>可以运行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;这是一个线程&quot;</span>);</span><br><span class=\"line\">    Thread.yield();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"线程中断\"><a href=\"#线程中断\" class=\"headerlink\" title=\"线程中断\"></a>线程中断</h1><p>一个线程执行完毕后会自动结束，如果在运行过程中发生异常也会提前结束.</p>\n<h2 id=\"InterruptedException\"><a href=\"#InterruptedException\" class=\"headerlink\" title=\"InterruptedException\"></a>InterruptedException</h2><p>当对一个线程使用了interrupt()方法，若线程处于阻塞、限期等待或无限期等待状态，就会抛出InterruptedException异常，从而提前结束该线程。</p>\n<p>不能终端I&#x2F;O阻塞和synchronized阻塞。</p>\n<blockquote>\n<p> 示例：sleep()限期阻塞。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cnt</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;执行 &quot;</span> + cnt++);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;一个线程&quot;</span>);</span><br><span class=\"line\">    thread.start();<span class=\"comment\">//启动线程</span></span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">3500</span>);<span class=\"comment\">//等待thread线程执行一会</span></span><br><span class=\"line\">    thread.interrupt();<span class=\"comment\">//发出中断线程请求</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行 0</span><br><span class=\"line\">执行 1</span><br><span class=\"line\">执行 2</span><br><span class=\"line\">执行 3</span><br><span class=\"line\">java.lang.InterruptedException: sleep interrupted</span><br><span class=\"line\">\tat java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">\tat com.yn.ExecutorStudy.lambda$main$0(ExecutorStudy.java:37)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"interrupted\"><a href=\"#interrupted\" class=\"headerlink\" title=\"interrupted()\"></a>interrupted()</h2><p>如果一个线程的run()无限循环且没有sleep()方法，此时调用interrupt()方法就无法使线程提前结束。</p>\n<p>在线程内可以用interrupted()来获取线程是否执行过interrupt，在线程内控制是否接收interrupt中断。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">cnt</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!Thread.interrupted()) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;执行 &quot;</span> + cnt++);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程结束&quot;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;一个线程&quot;</span>);</span><br><span class=\"line\">    thread.start();<span class=\"comment\">//启动线程</span></span><br><span class=\"line\">    thread.interrupt();<span class=\"comment\">//发出中断线程请求</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Executor的中断操作\"><a href=\"#Executor的中断操作\" class=\"headerlink\" title=\"Executor的中断操作\"></a>Executor的中断操作</h2><p>Executor可以通过shutdown()方法或shutdownNow()方法来关闭Executor服务。</p>\n<p>shutdown()会等待线程执行完毕后在进行服务关闭；</p>\n<p>shutdownNow()会调用每个线程的interrupt方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExecutorStudy2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newCachedThreadPool();</span><br><span class=\"line\">        executorService.execute(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">&quot;线程执行&quot;</span>);</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">300</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;e.printStackTrace();&#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;线程结束&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        executorService.shutdownNow();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">线程执行</span><br><span class=\"line\">线程结束</span><br><span class=\"line\">java.lang.InterruptedException: sleep interrupted</span><br><span class=\"line\">\tat java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">\tat com.yn.ExecutorStudy2.lambda$main$0(ExecutorStudy2.java:13)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>通过submit()方法提交任务，可以获得一个Future对象，通过future对象可以独立控制单个线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newCachedThreadPool();</span><br><span class=\"line\">    Future&lt;?&gt; submit = executorService.submit(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;线程执行&quot;</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">300</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程结束&quot;</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    submit.cancel(<span class=\"literal\">true</span>);<span class=\"comment\">//类似于interrupt()</span></span><br><span class=\"line\">    executorService.shutdown();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">线程执行</span><br><span class=\"line\">线程执行</span><br><span class=\"line\">线程执行</span><br><span class=\"line\">线程执行</span><br><span class=\"line\">java.lang.InterruptedException: sleep interrupted</span><br><span class=\"line\">\tat java.lang.Thread.sleep(Native Method)</span><br><span class=\"line\">\tat com.yn.FutureStudy.lambda$main$0(FutureStudy.java:14)</span><br><span class=\"line\">\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)</span><br><span class=\"line\">\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\">线程结束</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"线程互斥同步\"><a href=\"#线程互斥同步\" class=\"headerlink\" title=\"线程互斥同步\"></a>线程互斥同步</h1><p>Java提供了两种锁机制来控制多个线程对共享资源的互斥访问。</p>\n<ul>\n<li>JVM实现的synchronized 同步</li>\n<li>JDK实现的ReentrantLock 可重入锁</li>\n</ul>\n<h2 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h2><p>使用synchronized使用多个方式实现同步。</p>\n","categories":[],"tags":["Java并发"]},{"title":"Java并发 1","url":"http://zswh33.github.io/2022/10/19/Java并发-1/","content":"<p><a href=\"https://www.pdai.tech/md/java/thread/java-thread-x-theorty.html\">https://www.pdai.tech/md/java/thread/java-thread-x-theorty.html</a></p>\n<p>不想看书，这个文章是基于上面文章的再总结。</p>\n<h1 id=\"重排序\"><a href=\"#重排序\" class=\"headerlink\" title=\"重排序\"></a>重排序</h1><p><strong>三种类型</strong>：编译器优化的重排序，指令级并行的重排序，内存系统的重排序。</p>\n<p><strong>编译器优化的重排序</strong>：编译器在不改变单线程程序语义的前提下，可以重新安排语句的执行顺序；</p>\n<p><strong>指令级并行的重排序</strong>：现代处理器都有采用指令集秉性技术（ILP），这种技术<strong>将多条指令重叠执行</strong>。如果不存在数据依赖性，处理器可以改变语句对应机器指令的执行顺序；</p>\n<p><strong>内存系统的重排序</strong>：由于处理器<strong>使用缓存和读写缓冲区</strong>，使得加载和存储操作可能在乱序执行。</p>\n<p>从Java源代码到最终实际执行指令序列，会经历三种重排序。</p>\n<p><img src=\"/2022/10/19/Java%E5%B9%B6%E5%8F%91-1/%E6%8C%87%E4%BB%A4%E9%87%8D%E6%8E%92%E5%BA%8F.svg\" alt=\"指令重排序\"></p>\n<p>JMM的编译器重排序规则会禁止特定类型的编译器重排序；</p>\n<p>JMM的处理器重排序规则会要求Java再生成指令序列时，插入特定的<strong>内存屏障</strong>（memory barriers，Intel为memory fence）指令，通过内存屏障指令来禁止特定类型的处理器重排序。</p>\n<h1 id=\"Java如何解决并发问题：JMM（Java内存模型）\"><a href=\"#Java如何解决并发问题：JMM（Java内存模型）\" class=\"headerlink\" title=\"Java如何解决并发问题：JMM（Java内存模型）\"></a>Java如何解决并发问题：JMM（Java内存模型）</h1><p><strong>JMM本质</strong>：Java内存模型规范了JVM如何提供按需禁用缓存和编译优化的方法。</p>\n<ul>\n<li><p>理解1：</p>\n<ul>\n<li><p>volatile，synchronized和final；</p>\n</li>\n<li><p>Happens-Before规则。</p>\n</li>\n</ul>\n</li>\n<li><p>理解2：可见性、有序性、原子性。</p>\n</li>\n</ul>\n<h2 id=\"原子性\"><a href=\"#原子性\" class=\"headerlink\" title=\"原子性\"></a>原子性</h2><p>即，不可再分的操作</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x = <span class=\"number\">10</span>; <span class=\"comment\">// 将10赋值给x  为原子性操作</span></span><br><span class=\"line\">y = x;  <span class=\"comment\">//1. 读取x的值   2. 将值赋值给y</span></span><br><span class=\"line\">x++;    <span class=\"comment\">//1. 读取x的值   2.将值进行+1操作  3. 将值赋值给x</span></span><br><span class=\"line\">x = x + <span class=\"number\">1</span>;<span class=\"comment\">// 同上一行</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可见性\"><a href=\"#可见性\" class=\"headerlink\" title=\"可见性\"></a>可见性</h2><p>在程序运行过程中，对于一个变量：</p>\n<p>使用时，将变量从“主存”放到“工作内存”，<strong>访问&#x2F;赋值操作</strong>优先对<strong>工作内存</strong>的值进行操作，而不是<strong>主存</strong>。</p>\n<p>在多线程下，不同线程使用不同的工作内存，可能导致变量的更新无法及时同步导致错误。</p>\n<p>在java中，将变量用volatile修饰，可以实现变量的可见性。</p>\n<h2 id=\"有序性\"><a href=\"#有序性\" class=\"headerlink\" title=\"有序性\"></a>有序性</h2><p>即，代码有序执行，禁止指令重排。</p>\n<h1 id=\"Happens-Before规则\"><a href=\"#Happens-Before规则\" class=\"headerlink\" title=\"Happens-Before规则\"></a>Happens-Before规则</h1><p>JMM规定了先行发生原则。（即，定义了一些需要正确执行的规则）</p>\n<ol>\n<li><p>单一线程原则 Single Thread Rule</p>\n<p>在一个线程内，程序前面的操作先行于发生于后面的操作；</p>\n</li>\n<li><p>管程锁定规则 Monitor Lock Rule</p>\n<p>一个<strong>unlock操作</strong>先于对<strong>同一个锁</strong>的<strong>lock操作</strong>；</p>\n</li>\n<li><p>volatile变量规则 Volatile Variable Rule</p>\n<p>对于一个Volatile变量，写操作先于读操作执行。</p>\n</li>\n<li><p>线程启动规则 Thread Start Rule</p>\n<p>Thread对象的start()方法调用先于此线程的每一个动作。</p>\n</li>\n<li><p>线程加入规则 Thread Join Rule</p>\n<p>Thread对象的结束先于join()方法返回。</p>\n<p><strong>线程的结束</strong>先于<strong>对线程对象的join()方法返回</strong>。</p>\n</li>\n<li><p>线程中断规则 Thread Interruption Rule</p>\n<p>对线程的<strong>interrupt()方法</strong>先于<strong>线程对中断的检测</strong>；</p>\n<p>也就是interrupt()先于interrupted()</p>\n</li>\n<li><p>对象终结规则 Finalizer Rule</p>\n<p>一个对象的构造函数执行先于finalize()方法。</p>\n</li>\n<li><p>传递性 Transitivity</p>\n<p>若操作A先于操作B，操作B先于操作C，则操作A先于操作B。</p>\n</li>\n</ol>\n<h1 id=\"线程安全不是一个非真即假的命题\"><a href=\"#线程安全不是一个非真即假的命题\" class=\"headerlink\" title=\"线程安全不是一个非真即假的命题\"></a>线程安全不是一个非真即假的命题</h1><p>线程安全不是一个非真即假的命题，按照共享数据安全强弱顺序可以分为：不可变、绝对线程安全、相对线程安全、线程兼容和线程对立。</p>\n<ol>\n<li><p>不可变</p>\n<p>不可变的对象一定是线程安全的。多线程环境下，尽量使对象不可变，来满足线程安全。</p>\n<p>实现不可变：</p>\n<ul>\n<li><p>final、String、枚举类型</p>\n</li>\n<li><p><code>Nubmer</code>部分子类，如Long和Double等，<code>BigInteger</code>和<code>BigDecimal</code>等；</p>\n</li>\n<li><p>注意：<code>AtomicInteger</code>和<code>AtomicLong</code>是可变的。</p>\n</li>\n<li><p>对于集合类型，可以使用<code>Collections.unmodifiableXXX()</code>方法来实现一个不可变集合。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnmodifiableMap</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Map&lt;String,String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;String,String&gt;()&#123;&#123;</span><br><span class=\"line\">            put(<span class=\"string\">&quot;name&quot;</span>,<span class=\"string\">&quot;ZHangsan&quot;</span>);put(<span class=\"string\">&quot;age&quot;</span>,<span class=\"string\">&quot;12&quot;</span>);</span><br><span class=\"line\">        &#125;&#125;;</span><br><span class=\"line\">        Map&lt;String,String&gt; unmodifiableMap = Collections.unmodifiableMap(map);</span><br><span class=\"line\">        unmodifiableMap.put(<span class=\"string\">&quot;height&quot;</span>,<span class=\"string\">&quot;195&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;main&quot; java.lang.UnsupportedOperationException</span><br><span class=\"line\">\tat java.util.Collections$UnmodifiableMap.put(Collections.java:1457)</span><br><span class=\"line\">\tat com.yn.UnmodifiableMap.main(UnmodifiableMap.java:13)</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 1</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>绝对线程安全</p>\n<p>不论运行环境如何，调用者都无需做额外的操作；</p>\n</li>\n<li><p>相对线程安全</p>\n<p>相对线程安全要求保证对这个对象<strong>单独的操作</strong>是线程安全的，而对于一系列<strong>连续的操作</strong>需要额外的同步手段来保证正确性。</p>\n<p>如：对于Vector的使用，若其中有10个对象，此时有一个线程对Vector进行遍历，另一个线程进行remove，对于第一个线程就会出现<code>ArrayIndexOutOfBoundsException</code>错误。</p>\n<p>此时就需要额外的同步手段来保证正确性。</p>\n</li>\n<li><p>线程兼容</p>\n<p><strong>对象本身不是线程安全</strong>的，但可以通过<strong>调用端正确的使用同步手段</strong>来保证对象在并发环境中可以安全的使用。</p>\n</li>\n<li><p>线程对立</p>\n<p>线程对立指的是不论调用端如何采取同步措施，都无法在多线程环境中并发使用的代码。</p>\n</li>\n</ol>\n<h1 id=\"线程安全的实现\"><a href=\"#线程安全的实现\" class=\"headerlink\" title=\"线程安全的实现\"></a>线程安全的实现</h1><h2 id=\"互斥同步\"><a href=\"#互斥同步\" class=\"headerlink\" title=\"互斥同步\"></a>互斥同步</h2><p><code>synchronized</code>和<code>ReentrantLock</code></p>\n<p>互斥同步最主要的问题就是线程阻塞和唤醒带来的<strong>性能问题</strong>，因此互斥同步也称为<strong>阻塞同步</strong>。</p>\n<p>互斥同步是一种悲观的并发策略，无论共享数据是否会真的出现竞争，它都要进行加锁。</p>\n<h2 id=\"非阻塞同步\"><a href=\"#非阻塞同步\" class=\"headerlink\" title=\"非阻塞同步\"></a>非阻塞同步</h2><p>非阻塞同步，也就是CAS。Compare-And-Swap,CAS,比较并交换。</p>\n<p>随着硬件指令集的发展，硬件开始支持一些原子性操作，如：CAS，比较并交换。CAS指令需要有3个操作数，分别是<strong>内存地址V，预期值A和新值B</strong>，当执行操作时，当V<strong>等于</strong>A，则将V的值更新为B，否则不断尝试。</p>\n<p>非阻塞同步是一种基于冲突监测的乐观并发策略。在多线程下，需要进行操作时，先进行操作，如果没有其他线程争用共享数据，则操作成功，否则不断尝试，直到成功为止。</p>\n<h3 id=\"AtomicInteger中的CAS\"><a href=\"#AtomicInteger中的CAS\" class=\"headerlink\" title=\"AtomicInteger中的CAS\"></a><code>AtomicInteger</code>中的CAS</h3><p>在JUC包下有<code>AtomicInteger</code>就使用了Unsafe类的CAS操作。</p>\n<p>首先是使用：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">    AtomicInteger atomicInteger;</span><br><span class=\"line\">    atomicInteger = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    atomicInteger.getAndIncrement();<span class=\"comment\">//自增，这是一个原子性操作</span></span><br><span class=\"line\">    atomicInteger.compareAndSet(<span class=\"number\">2</span>,<span class=\"number\">3</span>);<span class=\"comment\">//期待值 目标值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndIncrement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"built_in\">this</span>, valueOffset, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//AtomicInteger中的getAndIncrement用到了Unsafe类的方法</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获得并设置 var1为变量 var2为期望值，var4为目标值</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndSetInt</span><span class=\"params\">(Object var1, <span class=\"type\">long</span> var2, <span class=\"type\">int</span> var4)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> var5;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        var5 = <span class=\"built_in\">this</span>.getIntVolatile(var1, var2);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(!<span class=\"built_in\">this</span>.compareAndSwapInt(var1, var2, var5, var4));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> var5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">native</span> <span class=\"type\">boolean</span> <span class=\"title function_\">compareAndSwapInt</span><span class=\"params\">(Object var1, <span class=\"type\">long</span> var2, <span class=\"type\">int</span> var4, <span class=\"type\">int</span> var5)</span>;</span><br><span class=\"line\"><span class=\"comment\">//这是一个native方法</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ABA问题\"><a href=\"#ABA问题\" class=\"headerlink\" title=\"ABA问题\"></a>ABA问题</h3><p>如果一个变量在初次读取的时候是A值，<strong>此时另一个线程将值改为B，又改为A</strong>，CAS操作就会认为<strong>该值</strong>并没有被改变过，这样就会影响CAS操作的正确性。</p>\n<p>JUC提供了一个带有标记的原子引用类AtomicStampedReference来解决这个问题，AtomicStampedReference为变量添加了版本功能，当值发生改变，版本就会更新，通过检测版本，就可以观察到变量是否被改变。</p>\n<p>在现实中<strong>大部分</strong>情况下，ABA问题都不会影响并发的正确性，</p>\n<p><strong>如果要解决ABA问题，改用传统的互斥同步可能比原子类更高效</strong>。</p>\n<h2 id=\"无同步方案\"><a href=\"#无同步方案\" class=\"headerlink\" title=\"无同步方案\"></a>无同步方案</h2><p>要保证线程安全，并不是一定就要同步。</p>\n<p>如果方法本来就不涉及共享数据，则不需要同步措施去保证正确性。</p>\n<ol>\n<li><p>栈封闭</p>\n<p>局部变量线程私有，多个线程访问同一个方法的局部变量，不会出现线程安全问题。</p>\n</li>\n<li><p>线程本地存储</p>\n<p><code>java.lang.ThreadLocal</code>可以为每个线程实现线程本地存储功能，每个线程访问<code>ThreadLocal</code>中的对象都会调用到只属于当前线程的对象。</p>\n<p>ThreadLocal理论上并不是用来解决多线程并发问题的。</p>\n<p>其他注意事项：ThreadLocal有内存泄漏情况，应该尽可能在每次使用ThreadLocal后手动调用remove()，以避免出现ThreadLocal内存泄露风险。</p>\n</li>\n<li><p>可重入代码</p>\n<p>若一个程序或子程序可以安全地被并行执行，则称为<strong>可重入</strong>。</p>\n<p>（e..栈封闭？）</p>\n</li>\n</ol>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ol>\n<li>虚拟机会优化掉很大一部分不必要的加锁、用户态核心态转换、维护锁计数器和检查是否有被阻塞的线程的需要唤醒等操作。</li>\n</ol>\n","categories":[],"tags":["Java并发"]},{"title":"数据结构","url":"http://zswh33.github.io/2022/10/18/数据结构/","content":"<p>静态链表</p>\n<p><img src=\"/2022/10/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221018151443290.png\" alt=\"image-20221018151443290\"></p>\n<p>right为链表每个元素的后继下标；</p>\n<p>双向静态链表</p>\n<p><img src=\"/2022/10/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/image-20221018152051057.png\" alt=\"image-20221018152051057\"></p>\n<p>双向链表，有前驱有后继。</p>\n<p>8的后继为0，表示这是一个循环链表 </p>\n<p>​      56 9 12 23 49 20 16 62</p>\n<p>0 &gt; 1 &gt;2&gt;3&gt; 4 &gt;5 &gt;6 &gt;7 &gt; 8 &gt; 0</p>\n<h1 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h1><p>n个节点可以构成不相似的二叉树的数量有：</p>\n<p>b<sub>n</sub>表示n个结点构成的不同形态的二叉树的数量。<br>$$<br>b_n&#x3D;<br>\\begin{cases}<br>b_0&#x3D;1\\<br>b_n&#x3D;\\sum_{i&#x3D;0}^{n-1}b_ib_{n-i-1}<br>\\end{cases}<br>$$<br>结论：<br>$$<br>b_n &#x3D; \\frac{1}{n+1}·C^n_{2n}<br>$$</p>\n<h1 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h1><p>vertex n.顶点</p>\n<h1 id=\"重连通图\"><a href=\"#重连通图\" class=\"headerlink\" title=\"重连通图\"></a>重连通图</h1><p>即，任意两个顶点之间含有不止一条通路，这个图就称为<strong>重连通图</strong>；</p>\n<p><strong>关节点：</strong>如果删除某个顶点及其相关联的边后，原来的图被分割为两个及以上的联通分量，则称该顶点为无向图的一个关节点。</p>\n<h2 id=\"判断一个重连通图\"><a href=\"#判断一个重连通图\" class=\"headerlink\" title=\"判断一个重连通图\"></a>判断一个重连通图</h2><p>判断图中是否有关节点，没有则表示图为重连通图。</p>\n<h1 id=\"拓扑算法\"><a href=\"#拓扑算法\" class=\"headerlink\" title=\"拓扑算法\"></a>拓扑算法</h1><p>n: 拓扑序列</p>\n<p>拓扑排序：从某个集合上的一个偏序得到该集合上的一个全序，这个操作称之为拓扑排序。</p>\n<h1 id=\"Dijkstra算法\"><a href=\"#Dijkstra算法\" class=\"headerlink\" title=\"Dijkstra算法\"></a>Dijkstra算法</h1><p>带权单源最短路径算法。</p>\n<p>图来源：<a href=\"https://blog.csdn.net/xiaoxi_hahaha/article/details/110257368\">https://blog.csdn.net/xiaoxi_hahaha/article/details/110257368</a></p>\n<p><img src=\"https://img2.uwupu.tk/dijkstra.gif\" alt=\"Dijkstra演示图\"></p>\n<h1 id=\"Floyd算法\"><a href=\"#Floyd算法\" class=\"headerlink\" title=\"Floyd算法\"></a>Floyd算法</h1><p>带权最短路径</p>\n<h1 id=\"查找表\"><a href=\"#查找表\" class=\"headerlink\" title=\"查找表\"></a>查找表</h1><h2 id=\"静态查找表和动态查找表\"><a href=\"#静态查找表和动态查找表\" class=\"headerlink\" title=\"静态查找表和动态查找表\"></a>静态查找表和动态查找表</h2><p>静态查找表：只进行查找操作，不改动表中数据元素；</p>\n<p>动态查找表：在查找的同时进行数据的增加和删除操作。</p>\n<h2 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h2><p>表中元素的属性，可以作为关键字。比如学生有<strong>姓名、学号、年龄</strong>等属性，这些都可以作为关键字。</p>\n<h3 id=\"主关键字和次关键字\"><a href=\"#主关键字和次关键字\" class=\"headerlink\" title=\"主关键字和次关键字\"></a>主关键字和次关键字</h3><p>主关键字：唯一标识一个数据元素，比如学号；</p>\n<p>次关键字：与主关键字相反，如姓名、年龄。</p>\n<h1 id=\"一些名词\"><a href=\"#一些名词\" class=\"headerlink\" title=\"一些名词\"></a>一些名词</h1><ul>\n<li>静态查找树<ul>\n<li>次优查找树</li>\n<li>二叉排序树</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"哈希表\"><a href=\"#哈希表\" class=\"headerlink\" title=\"哈希表\"></a>哈希表</h1><p><a href=\"http://c.biancheng.net/view/3437.html\">http://c.biancheng.net/view/3437.html</a></p>\n<h2 id=\"哈希函数\"><a href=\"#哈希函数\" class=\"headerlink\" title=\"哈希函数\"></a>哈希函数</h2><ul>\n<li><p>直接定值法：<code>H(key) = key</code>  或 <code>H(key) = a * key + b</code></p>\n</li>\n<li><p>数字分析法：取出每个值中不同部分较多的地方作为哈希地址；</p>\n</li>\n<li><p>平方取中法：对关键字进行平方操作，取中间几位作为哈希地址；</p>\n</li>\n<li><p>折叠法：将关键字分为几个部分，然后取这几部分的叠加和作为哈希地址；</p>\n</li>\n<li><p>除留余数法：若已知哈希表长度m，取一个不大于m的数字p，然后对关键字进行取余运算</p>\n<ul>\n<li><code>H(key) = key % p</code></li>\n</ul>\n</li>\n<li><p>随机数法：取关键字的一个随机函数值作为哈希地址，即<code>H(key) = random(key)</code>;</p>\n</li>\n</ul>\n<h2 id=\"选择一个哈希函数\"><a href=\"#选择一个哈希函数\" class=\"headerlink\" title=\"选择一个哈希函数\"></a>选择一个哈希函数</h2><p>需要注意的地方：</p>\n<ul>\n<li><p>若关键字长度不等，可以用随机数法；</p>\n</li>\n<li><p>关键字位数多，折叠法或数字分析法；</p>\n</li>\n<li><p>关键字位数较短，平方取中法；</p>\n</li>\n<li><p>哈希表大小已知，可以选择除留余数法；</p>\n</li>\n<li><p>关键字分布情况；</p>\n</li>\n<li><p>查找表的查找频率；</p>\n</li>\n<li><p>计算哈希函数需要的时间；</p>\n</li>\n</ul>\n<h2 id=\"处理冲突\"><a href=\"#处理冲突\" class=\"headerlink\" title=\"处理冲突\"></a>处理冲突</h2><ul>\n<li><p>开放定址法：H(key) &#x3D; [ H(key) + d ] MOD m;</p>\n<ul>\n<li><p>$$<br>H(key) &#x3D; [ H(key) + d ]\\ %\\ m<br>$$</p>\n</li>\n<li><p>m为哈希表表长</p>\n</li>\n<li><p>d的取值</p>\n<ul>\n<li>线性探测法：d &#x3D; 1,2,3, …, m-1</li>\n<li>二次探测法：d&#x3D;12, -12, 22 , -22, 32 …</li>\n<li>伪随机数探测法：d&#x3D;伪随机数</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>再哈希法：</p>\n<ul>\n<li>若发生冲突，再使用另一个哈希函数进行计算，直到冲突不再发生；</li>\n</ul>\n</li>\n<li><p>链地址法</p>\n<ul>\n<li>将处于一个地址的值放在一个链表中；</li>\n</ul>\n</li>\n<li><p>建立一个公共溢出区</p>\n<ul>\n<li>建立两张表，一张基本表，一张溢出表；</li>\n<li>将哈希函数结果产生冲突，就将数据放到公共溢出区；</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"B-树-B-Tree\"><a href=\"#B-树-B-Tree\" class=\"headerlink\" title=\"B-树 (B-Tree)\"></a>B-树 (B-Tree)</h1><h2 id=\"名字\"><a href=\"#名字\" class=\"headerlink\" title=\"名字\"></a>名字</h2><p><strong>这里不是B减树</strong>，B-树，指的就是B树。换言之，B树，就是B-树。</p>\n<p><strong>B+树</strong>是B树的plus，不存在B减树；</p>\n<h2 id=\"满足下列要求的m叉树\"><a href=\"#满足下列要求的m叉树\" class=\"headerlink\" title=\"满足下列要求的m叉树\"></a>满足下列要求的m叉树</h2><ol>\n<li><p>树中每个结点至多有m个孩子结点（即，至多有m-1个关键字）</p>\n</li>\n<li><p>每个结点的结构如下：</p>\n<p><img src=\"/2022/10/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/m%E5%8F%89%E6%A0%91%E8%8A%82%E7%82%B9%E7%BB%93%E6%9E%84.svg\" alt=\"m叉树节点结构\"></p>\n<p>\\</p>\n<p>\\</p>\n<p><img src=\"/2022/10/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/m%E5%8F%89%E6%A0%91%E8%8A%82%E7%82%B9%E7%BB%93%E6%9E%842.svg\" alt=\"m叉树节点结构2\"></p>\n</li>\n<li><p>除根节点外，其他结点至少有<code>⌈m/2⌉</code>个孩子结点；</p>\n</li>\n<li><p>若根节点不是叶子节点，则根节点至少有两个孩子结点，（即根节点没有只有一个孩子结点的情况）；</p>\n</li>\n<li><p>所有的叶子节点都在同一层上，即<strong>B树是所有节点平衡因子均等于0的多路查找树</strong>。</p>\n</li>\n<li><p>除根节点外，其他结点都包含n个key，这里<code>⌈m/2⌉-1 &lt;= n &lt;= m-1</code><br>$$<br>\\lceil m&#x2F;2 \\rceil - 1 \\leq n \\leq m-1<br>$$</p>\n</li>\n</ol>\n","categories":[],"tags":["Note"]},{"title":"Effective Java 2","url":"http://zswh33.github.io/2022/10/17/Effective-2/","content":"<h1 id=\"6-避免创建不必要的对象\"><a href=\"#6-避免创建不必要的对象\" class=\"headerlink\" title=\"6. 避免创建不必要的对象\"></a>6. 避免创建不必要的对象</h1><p>最好能重用单个对象，而不是每次需要的时候就创建一个相同功能的新对象；</p>\n<p>可以提高效率。</p>\n<h2 id=\"String避免多次创建对象\"><a href=\"#String避免多次创建对象\" class=\"headerlink\" title=\"String避免多次创建对象\"></a>String避免多次创建对象</h2><p>错误的做法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;It&#x27;s a text.&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>每次执行的时候都会创建一个String对象，而且参数<code>(&quot;It&#39;s a text.&quot;)</code>本来就是一个对象，这样使用会影响效率；</p>\n<p>如果在一个频繁调用的方法中出现，就会创建成千上万个对象；</p>\n<p>正确的做法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s= <span class=\"string\">&quot;It&#x27;s a text.&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>这样就只使用了一个String实例，而不是每次运行都会创建一个示例；</p>\n<p>在JVM里这样做，对于不同的String引用，如果它们的字符串是相同的，它们对应对象就是一样的，而不是多个对象。</p>\n<h2 id=\"对于提供了静态工厂方法的类，一般优先使用静态工厂方法而非构造器。\"><a href=\"#对于提供了静态工厂方法的类，一般优先使用静态工厂方法而非构造器。\" class=\"headerlink\" title=\"对于提供了静态工厂方法的类，一般优先使用静态工厂方法而非构造器。\"></a>对于提供了静态工厂方法的类，一般优先使用静态工厂方法而非构造器。</h2><p>如使用<code>Boolean.valueOf()</code>而不是<code>Boolean()</code>。</p>\n<blockquote>\n<p>有些对象创建成本较高，如果内容不变，可以考虑将这些对象缓存下来多次使用。</p>\n</blockquote>\n<p>比如Pattern实例；</p>\n<p>Pattern实例创建成本较高，若多次创建对性能影响较大；</p>\n<p>可以考虑将正则表达式显式地编译成一个Pattern实例，并让他成为类初始化的一部分；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">Pattern</span> <span class=\"variable\">pattern</span> <span class=\"operator\">=</span> Pattern.compile(<span class=\"string\">&quot;&gt;(.*)&lt;\\/div&gt;&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优先使用基本类型而非装箱基本类型\"><a href=\"#优先使用基本类型而非装箱基本类型\" class=\"headerlink\" title=\"优先使用基本类型而非装箱基本类型\"></a>优先使用基本类型而非装箱基本类型</h2><p>使用基本类型比装箱基本类型效率较高，因为装箱基本类型需要创建对象；</p>\n<p>错误的做法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class 使用基本数据类型而非装箱基本类型 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0L</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> ; i &lt; Integer.MAX_VALUE ; i++)&#123;</span><br><span class=\"line\">            res += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>正确的做法：只需要将Long改为long就可。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class 使用基本数据类型而非装箱基本类型 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">res</span> <span class=\"operator\">=</span> <span class=\"number\">0L</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> ; i &lt; Integer.MAX_VALUE ; i++)&#123;</span><br><span class=\"line\">            res += i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(res);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"7-消除过期的对象引用\"><a href=\"#7-消除过期的对象引用\" class=\"headerlink\" title=\"7. 消除过期的对象引用\"></a>7. 消除过期的对象引用</h1><h2 id=\"使用栈来学习“无意识的内存泄露”。\"><a href=\"#使用栈来学习“无意识的内存泄露”。\" class=\"headerlink\" title=\"使用栈来学习“无意识的内存泄露”。\"></a>使用栈来学习“无意识的内存泄露”。</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Stack</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] elements;<span class=\"comment\">//栈内引用</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">size</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">//当前大小</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">DEFAULT_INITIAL_CAPACITY</span> <span class=\"operator\">=</span> <span class=\"number\">16</span>;<span class=\"comment\">//默认初始化容量</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Stack</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        elements = <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>[DEFAULT_INITIAL_CAPACITY];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//向栈中添加内容</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">push</span><span class=\"params\">(Object e)</span>&#123;</span><br><span class=\"line\">        ensureCapacity();</span><br><span class=\"line\">        elements[size++] = e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//从栈中取出内容</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">pop</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (size==<span class=\"number\">0</span>)<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EmptyStackException</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> elements[--size];</span><br><span class=\"line\">        <span class=\"comment\">//当size--，旧的对象并没有被清理，如果对象很大且很多，就会引发内存泄露</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//确保容量，如果数组大小不够了，就扩容。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">ensureCapacity</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elements.length == size)&#123;</span><br><span class=\"line\">            elements = Arrays.copyOf(elements,<span class=\"number\">2</span>*size+<span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果栈内元素先push，然后pop，旧的对象并没有被清理，且由于被引用，不会被gc清理掉。</p>\n<p>有概率引发内存泄漏；</p>\n<p>解决方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> Object <span class=\"title function_\">pop</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (size==<span class=\"number\">0</span>)<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">EmptyStackException</span>();</span><br><span class=\"line\">    <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> elements[--size];<span class=\"comment\">//先取出对象</span></span><br><span class=\"line\">    elements[size] = <span class=\"literal\">null</span>;<span class=\"comment\">//将数组内引用清除</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>先取出对象，将数组内引用清除，这样就不会引用对象，最后返回对象；</p>\n<p>若对象在后续过程中使用结束，对象将会被gc清理，而不是无法被清理。</p>\n<h2 id=\"为缓存设置生命周期\"><a href=\"#为缓存设置生命周期\" class=\"headerlink\" title=\"为缓存设置生命周期\"></a>为缓存设置生命周期</h2><h2 id=\"监听器和其他回调\"><a href=\"#监听器和其他回调\" class=\"headerlink\" title=\"监听器和其他回调\"></a>监听器和其他回调</h2><blockquote>\n<p>为API回调使用WeakHashMap</p>\n</blockquote>\n<p>如果实现了一个API，客户端在这个API进行注册回调，却没有显式地取消注册，这样的注册会逐渐堆积起来，引发可能的内存泄漏；</p>\n<p>确保回调被回收的方法就是<strong>只保存他们的弱引用</strong>，比如将他们保存成WeakHashMap的键。</p>\n","categories":[],"tags":["Effective Java"]},{"title":"Effective Java 1","url":"http://zswh33.github.io/2022/10/07/Effective-Java-1/","content":"<h1 id=\"1-用静态工厂方法代替构造器\"><a href=\"#1-用静态工厂方法代替构造器\" class=\"headerlink\" title=\"1. 用静态工厂方法代替构造器\"></a>1. 用静态工厂方法代替构造器</h1><h2 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>在方法内部添加一个静态方法，用于获取一个对象，代替构造器的功能；</p>\n<p>比如，在<code>boolean</code>包装Boolean类中，就有<code>valueOf</code>方法可以代替构造方法获得一个Boolean对象；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Boolean <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">boolean</span> b)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (b ? TRUE : FALSE);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h2><ol>\n<li><p>静态方法有名字，可以指定一个功能作为方法名；</p>\n</li>\n<li><p>实现对象重用，优化程序运行；</p>\n<ul>\n<li><p>在对象使用结束后，可以将对象缓存起来，若下次调用可以再次使用；</p>\n</li>\n<li><p>相对<strong>对象重用</strong>，<strong>创建一个新的对象</strong>损耗可能会更大；</p>\n</li>\n<li><p>在情况允许时，尽量多地使用<strong>对象重用</strong>，减少创建对象造成额外损耗；</p>\n</li>\n<li><p>如Boolean类：Boolean类加载结束后，默认会创建两个Boolean对象，分别表示true和false，在使用<strong>静态工厂创建对象</strong>时，直接将代表true或false的对象返回，以节约内存使用和程序效率。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Boolean</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">java</span>.io.Serializable,</span><br><span class=\"line\">                                      Comparable&lt;Boolean&gt;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"comment\">//默认创建两个Boolean对象，用于表示TRUE和FALSE</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Boolean</span> <span class=\"variable\">TRUE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Boolean</span> <span class=\"variable\">FALSE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Boolean</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// 包装了boolean类，这里存值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> value;</span><br><span class=\"line\">\t<span class=\"comment\">// 构造方法新创建了一个Boolean对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Boolean</span><span class=\"params\">(<span class=\"type\">boolean</span> value)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//使用valueOf方法，直接返回Boolean类加载时创建的两个静态对象，无需再次创建对象。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Boolean <span class=\"title function_\">valueOf</span><span class=\"params\">(<span class=\"type\">boolean</span> b)</span> &#123;<span class=\"keyword\">return</span> (b ? TRUE : FALSE);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Boolean <span class=\"title function_\">valueOf</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> parseBoolean(s) ? TRUE : FALSE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>依据不同的参数，可以返回任何子类的对象，也可以返回不同的对象；</p>\n<ul>\n<li>应用：<ul>\n<li>静态方法可以返回对象，而无需将对象的类设为公有的；</li>\n<li><strong>静态方法可以通过接口返回不同的对象</strong>。<code>EnumSet</code>没有构造器，只能通过静态工厂创建对象，在OpenJDK实现中，EnmuSet的实现有两种类型：<code>RegalarEumSet</code>和<code>JumboEnumSet</code>；当枚举元素数量等于小于64时，静态工厂方法返回RegalarEumSet对象；当枚举元素数量大于64时，静态工厂方法返回JumboEnumSet对象。（对于调用者，无需知道背后的实现原理，直接使用就好；对于EnumSet开发者，此做法用于代码优化。）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>方法返回的对象所属的类，在编写静态工厂方法的类时可以不存在；</p>\n<ul>\n<li>如mysql和JDBC；</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"缺点\"><a href=\"#缺点\" class=\"headerlink\" title=\"缺点\"></a>缺点</h2><ol>\n<li><p>类如果不包含public的构造器，则不能被继承；</p>\n</li>\n<li><p>静态工厂方法需要程序员主动去寻找，而非构造方法可以直接使用；</p>\n<ul>\n<li>示例：</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Apple</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String type;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String status;</span><br><span class=\"line\">\t<span class=\"comment\">//构造方法名与类名相同，可以直接使用</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Apple</span><span class=\"params\">(String type, String status)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.type = type;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.status = status;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//静态工厂方法需要在API中寻找，没有构造方法方便</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Apple <span class=\"title function_\">getNewApple</span><span class=\"params\">()</span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Apple</span>(<span class=\"string\">&quot;redApple&quot;</span>,<span class=\"string\">&quot;fresh&quot;</span>);&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>一些惯例</p>\n<ul>\n<li><p>from，从别的类型进行转换，只有一个参数；</p>\n</li>\n<li><p>of，将多个参数合并；</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将多个参数合并到一起</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Set&lt;Apple&gt; <span class=\"title function_\">of</span><span class=\"params\">(String ...colors)</span>&#123;</span><br><span class=\"line\">    Set&lt;Apple&gt; apples = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String s : colors) &#123;</span><br><span class=\"line\">        apples.add(<span class=\"keyword\">new</span> <span class=\"title class_\">Apple</span>(<span class=\"string\">&quot;Red&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> apples;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>valueOf，也是类型转换；</li>\n<li>createInstance或getInstance，通过参数获取一个对象，参数可以与成员变量不同；<ul>\n<li>createInstance或netInstance，保证每次返回一个新创建的实例；</li>\n<li>getInstance一般用在单例模式。</li>\n</ul>\n</li>\n<li>getType（这里可以是getApple），与getInstance一致；</li>\n<li>newType，与netInstance类似；</li>\n<li>type，getType和newType的简化版。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"2-遇到多个构造器参数，可以考虑使用构建器（Builder）\"><a href=\"#2-遇到多个构造器参数，可以考虑使用构建器（Builder）\" class=\"headerlink\" title=\"2. 遇到多个构造器参数，可以考虑使用构建器（Builder）\"></a>2. 遇到多个构造器参数，可以考虑使用构建器（Builder）</h1><h2 id=\"说明-1\"><a href=\"#说明-1\" class=\"headerlink\" title=\"说明\"></a>说明</h2><p>若一个类有多个参数，且对象使用构建器进行创建；</p>\n<ul>\n<li>有些参数有些时候不需要输入，但构造器中必须填入一个值；</li>\n<li>JavaBeans模式，即一堆setter方法，这样可以解决上面的问题，但JavaBeans模式有严重的缺点，<strong>在构造过程中JavaBean可能处于不一致状态</strong>，即<strong>线程不安全</strong>。</li>\n</ul>\n<p>这个时候，就可以考虑使用<strong>建造者Builder模式</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> class 建造者模式 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Cat</span> <span class=\"variable\">cat</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>.Builder(<span class=\"string\">&quot;小黑&quot;</span>)</span><br><span class=\"line\">                .age(<span class=\"number\">12</span>).color(<span class=\"string\">&quot;White&quot;</span>).build();</span><br><span class=\"line\">        System.out.println(cat);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Cat</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String color;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String owner;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Builder</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//必要参数</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">        <span class=\"comment\">//可选参数</span></span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"type\">int</span> age;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String color;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> String owner;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Builder</span><span class=\"params\">(String name)</span> &#123;<span class=\"built_in\">this</span>.name = name;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Builder <span class=\"title function_\">age</span><span class=\"params\">(<span class=\"type\">int</span> val)</span>&#123;age=val;<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Builder <span class=\"title function_\">color</span><span class=\"params\">(String val)</span>&#123;color=val;<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Builder <span class=\"title function_\">owner</span><span class=\"params\">(String val)</span>&#123;owner=val;<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> Cat <span class=\"title function_\">build</span><span class=\"params\">()</span>&#123;<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Cat</span>(<span class=\"built_in\">this</span>);&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Cat</span><span class=\"params\">(Builder builder)</span> &#123;</span><br><span class=\"line\">        owner = builder.owner;</span><br><span class=\"line\">        color = builder.color;</span><br><span class=\"line\">        age = builder.age;</span><br><span class=\"line\">        name = builder.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">// toString </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Builder模拟了具有名字的可选参数，这样的客户端易于编写，易于阅读；</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//这里先创建一个抽象类FriedRice</span></span><br><span class=\"line\"><span class=\"comment\">//然后分别创建两个类继承FriedRice，分别为FriedRiceWithHam和FriedRiceWithEgg</span></span><br><span class=\"line\"><span class=\"comment\">//fried rice 炒饭 可以添加 老干妈LaoGanMa、辣条LaTiao、再加一个鸡蛋Egg等</span></span><br><span class=\"line\"><span class=\"comment\">// ham 火腿   egg鸡蛋</span></span><br><span class=\"line\"><span class=\"comment\">//FriedRiceWithHam 火腿炒饭，可以有：大、中、小 三种  LARGE MEDIUM SMALL</span></span><br><span class=\"line\"><span class=\"comment\">//FriedRiceWithEgg 蛋炒饭，spicy辣度 可以选择：little微辣 general中辣 very特辣</span></span><br><span class=\"line\"><span class=\"comment\">//具体开发中不要使用中文，也不要使用拼音</span></span><br><span class=\"line\"><span class=\"comment\">//先整一个抽象类FriedRice</span></span><br><span class=\"line\"><span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FriedRice</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//额外要加的东西</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Ingredient</span>&#123;老干妈,辣条,Egg&#125;<span class=\"comment\">//实际开发不要使用中文</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Set&lt;Ingredient&gt; ingredientSet;</span><br><span class=\"line\">    <span class=\"keyword\">abstract</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Builder</span>&lt;T <span class=\"keyword\">extends</span> <span class=\"title class_\">Builder</span>&lt;T&gt;&gt;&#123;</span><br><span class=\"line\">        EnumSet&lt;Ingredient&gt; ingredients = EnumSet.noneOf(Ingredient.class);<span class=\"comment\">//默认没有配料</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> T <span class=\"title function_\">addIngredient</span><span class=\"params\">(Ingredient val)</span>&#123;ingredients.add(val);<span class=\"keyword\">return</span> self();&#125;<span class=\"comment\">//添加配料</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> FriedRice <span class=\"title function_\">build</span><span class=\"params\">()</span>;</span><br><span class=\"line\">        <span class=\"keyword\">protected</span> <span class=\"keyword\">abstract</span> T <span class=\"title function_\">self</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    FriedRice(Builder&lt;?&gt; builder)&#123;</span><br><span class=\"line\">        ingredientSet = builder.ingredients.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个FriedRiceWithHam火腿炒饭</span></span><br><span class=\"line\"><span class=\"meta\">@ToString(callSuper = true)</span><span class=\"comment\">//是Lombok插件的注解，可以自动生成toString方法，文章主要讲解内容不包含这部分，忽略就好</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FriedRiceWithHam</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">FriedRice</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Size</span>&#123;SMALL,MEDIUM,LARGE&#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Size size;<span class=\"comment\">//大小</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Builder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">FriedRice</span>.Builder&lt;Builder&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Size size;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Builder</span><span class=\"params\">(Size size)</span>&#123;<span class=\"built_in\">this</span>.size = size;&#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span> <span class=\"keyword\">public</span> FriedRice <span class=\"title function_\">build</span><span class=\"params\">()</span> &#123;<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FriedRiceWithHam</span>(<span class=\"built_in\">this</span>);&#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span> <span class=\"keyword\">protected</span> Builder <span class=\"title function_\">self</span><span class=\"params\">()</span> &#123;<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    FriedRiceWithHam(Builder builder) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(builder);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.size = builder.size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建一个FriedRiceWithEgg鸡蛋炒饭</span></span><br><span class=\"line\"><span class=\"meta\">@ToString(callSuper = true)</span><span class=\"comment\">//是Lombok插件的注解，可以自动生成toString方法，文章主要讲解内容不包含这部分，忽略就好</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">FriedRiceWithEgg</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">FriedRice</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Spicy</span>&#123;LITTLE,GENERAL,VERY&#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Spicy spicy;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Builder</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">FriedRice</span>.Builder&lt;Builder&gt;&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Spicy spicy;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"title function_\">Builder</span><span class=\"params\">(Spicy spicy)</span>&#123;<span class=\"built_in\">this</span>.spicy = spicy;&#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span> <span class=\"keyword\">public</span> FriedRice <span class=\"title function_\">build</span><span class=\"params\">()</span> &#123;<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FriedRiceWithEgg</span>(<span class=\"built_in\">this</span>);&#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span> <span class=\"keyword\">protected</span> Builder <span class=\"title function_\">self</span><span class=\"params\">()</span> &#123;<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>;&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    FriedRiceWithEgg(Builder builder) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(builder);</span><br><span class=\"line\">        spicy = builder.spicy;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Builder</span>模式也适用于类层次结构 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建一个鸡蛋炒饭，中辣，添加老干妈</span></span><br><span class=\"line\">        <span class=\"type\">FriedRice</span> <span class=\"variable\">friedRiceWithEgg</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FriedRiceWithEgg</span>.Builder(FriedRiceWithEgg.Spicy.GENERAL)</span><br><span class=\"line\">                .addIngredient(FriedRice.Ingredient.老干妈).build();</span><br><span class=\"line\">        <span class=\"comment\">//创建一个火腿炒饭，大份，添加鸡蛋</span></span><br><span class=\"line\">        <span class=\"type\">FriedRice</span> <span class=\"variable\">friedRiceWithHam</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FriedRiceWithHam</span>.Builder(FriedRiceWithHam.Size.LARGE)</span><br><span class=\"line\">                .addIngredient(FriedRice.Ingredient.Egg).build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-用私有构造器或枚举类型强化Singleton属性\"><a href=\"#3-用私有构造器或枚举类型强化Singleton属性\" class=\"headerlink\" title=\"3. 用私有构造器或枚举类型强化Singleton属性\"></a>3. 用私有构造器或枚举类型强化Singleton属性</h1><p>Singleton，即单例模式；对于一个类，只会被实例化一次，后续通过静态方法获取对象也只能获取到这一个对象，不会再次创建新的对象。</p>\n<h2 id=\"创建一个Singleton，有两种方式\"><a href=\"#创建一个Singleton，有两种方式\" class=\"headerlink\" title=\"创建一个Singleton，有两种方式\"></a>创建一个Singleton，有两种方式</h2><h3 id=\"私有构造器\"><a href=\"#私有构造器\" class=\"headerlink\" title=\"私有构造器\"></a>私有构造器</h3><p>将构造器私有化，然后通过getInstance方法创建并获取对象。</p>\n<h4 id=\"发展\"><a href=\"#发展\" class=\"headerlink\" title=\"发展\"></a>发展</h4><h5 id=\"默认情况下，可以通过以下方式实现单例模式。\"><a href=\"#默认情况下，可以通过以下方式实现单例模式。\" class=\"headerlink\" title=\"默认情况下，可以通过以下方式实现单例模式。\"></a>默认情况下，可以通过以下方式实现单例模式。</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Chopsticks n.筷子</span></span><br><span class=\"line\"><span class=\"comment\">//这里假定筷子只能有一根</span></span><br><span class=\"line\"><span class=\"comment\">//这里创建一个单例对象</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Chopstick</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Chopstick</span> <span class=\"variable\">INSTANCE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Chopstick</span>();<span class=\"comment\">//类加载后，自动创建一个Chopstick对象，</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Chopstick</span><span class=\"params\">()</span>&#123;&#125;<span class=\"comment\">//构造器私有化，禁止二次创建</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Chopstick <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;<span class=\"keyword\">return</span> INSTANCE;&#125;<span class=\"comment\">//获取实例</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"但是，这个单例是可以通过反射进行破坏；\"><a href=\"#但是，这个单例是可以通过反射进行破坏；\" class=\"headerlink\" title=\"但是，这个单例是可以通过反射进行破坏；\"></a>但是，这个单例是可以通过反射进行破坏；</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"type\">Chopstick</span> <span class=\"variable\">instance</span> <span class=\"operator\">=</span> Chopstick.getInstance();<span class=\"comment\">//第一个实例对象</span></span><br><span class=\"line\">    <span class=\"comment\">//第二个实例对象</span></span><br><span class=\"line\">    Class&lt;?&gt; aClass = Class.forName(<span class=\"string\">&quot;com.yn.study.chapter1.Chopstick&quot;</span>);<span class=\"comment\">//获取Class对象</span></span><br><span class=\"line\">    Constructor&lt;?&gt; declaredConstructor = aClass.getDeclaredConstructor();<span class=\"comment\">//获取Constru对象</span></span><br><span class=\"line\">    declaredConstructor.setAccessible(<span class=\"literal\">true</span>);<span class=\"comment\">//跳过private检查</span></span><br><span class=\"line\">    <span class=\"type\">Chopstick</span> <span class=\"variable\">chopstick</span> <span class=\"operator\">=</span> (Chopstick) declaredConstructor.newInstance();<span class=\"comment\">//创建实例对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(instance);</span><br><span class=\"line\">    System.out.println(chopstick);</span><br><span class=\"line\">    <span class=\"comment\">/**输出结果如下：</span></span><br><span class=\"line\"><span class=\"comment\">         * com.yn.study.chapter1.Chopstick@7f31245a</span></span><br><span class=\"line\"><span class=\"comment\">         * com.yn.study.chapter1.Chopstick@6d6f6e28</span></span><br><span class=\"line\"><span class=\"comment\">         * 表示这两个对象不是同一个对象</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"所以，可以在构造方法里面添加判断，让第二次创建过程抛出错误来解决破坏；\"><a href=\"#所以，可以在构造方法里面添加判断，让第二次创建过程抛出错误来解决破坏；\" class=\"headerlink\" title=\"所以，可以在构造方法里面添加判断，让第二次创建过程抛出错误来解决破坏；\"></a>所以，可以在构造方法里面添加判断，让第二次创建过程抛出错误来解决破坏；</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Chopstick</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Chopstick</span> <span class=\"variable\">INSTANCE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Chopstick</span>();<span class=\"comment\">//类加载后，自动创建一个Chopstick对象，</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Chopstick</span><span class=\"params\">()</span> &#123;<span class=\"keyword\">if</span> (INSTANCE!=<span class=\"literal\">null</span>)<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;请不要二次创建对象&quot;</span>);&#125;<span class=\"comment\">//构造器私有化，禁止二次创建</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Chopstick <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;<span class=\"keyword\">return</span> INSTANCE;&#125;<span class=\"comment\">//获取实例</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"如果要使对象变得可序列化，必须声明readResolve方法\"><a href=\"#如果要使对象变得可序列化，必须声明readResolve方法\" class=\"headerlink\" title=\"如果要使对象变得可序列化，必须声明readResolve方法\"></a>如果要使对象变得可序列化，必须声明readResolve方法</h5><p>如果要使对象变得可序列化，仅仅在声明中加上<code>implements Serializable</code>是不够的，为了维护Singleton，必须声明所有实例域是transient（瞬时）的，并声明readResolve方法；</p>\n<p>否则，每当反序列化一个对象，都会创建一个新的对象；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">//单例破解方案——序列化：将对象存储于文件中，然后从文件中读取</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//创建一个单例对象</span></span><br><span class=\"line\">    <span class=\"type\">Chopstick</span> <span class=\"variable\">chopstick1</span> <span class=\"operator\">=</span> Chopstick.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//将对象写入文件</span></span><br><span class=\"line\">    <span class=\"type\">File</span> <span class=\"variable\">file</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;Chopstick.dat&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">FileOutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileOutputStream</span>(file);</span><br><span class=\"line\">    <span class=\"type\">ObjectOutputStream</span> <span class=\"variable\">oos</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectOutputStream</span>(os);</span><br><span class=\"line\">    oos.writeObject(chopstick1);</span><br><span class=\"line\">    oos.close();os.close();</span><br><span class=\"line\">    <span class=\"comment\">//将对象从文件中读取</span></span><br><span class=\"line\">    <span class=\"type\">FileInputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FileInputStream</span>(file);</span><br><span class=\"line\">    <span class=\"type\">ObjectInputStream</span> <span class=\"variable\">ois</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ObjectInputStream</span>(is);</span><br><span class=\"line\">    <span class=\"type\">Chopstick</span> <span class=\"variable\">chopstick2</span> <span class=\"operator\">=</span> (Chopstick) ois.readObject();<span class=\"comment\">//第二个实例化对象</span></span><br><span class=\"line\">    System.out.println(chopstick1);</span><br><span class=\"line\">    System.out.println(chopstick2);</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 输出结果</span></span><br><span class=\"line\"><span class=\"comment\">     * com.yn.study.chapter1.Chopstick@2503dbd3</span></span><br><span class=\"line\"><span class=\"comment\">     * com.yn.study.chapter1.Chopstick@7ef20235</span></span><br><span class=\"line\"><span class=\"comment\">     * 表示这两个对象不是一个对象</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>声明readResolve方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Object <span class=\"title function_\">readResolve</span><span class=\"params\">()</span>&#123;<span class=\"keyword\">return</span> INSTANCE;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样，上面的结果获得的将是同一个对象。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.yn.study.chapter1.Chopstick@2503dbd3</span><br><span class=\"line\">com.yn.study.chapter1.Chopstick@2503dbd3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//Chopsticks n.筷子</span></span><br><span class=\"line\"><span class=\"comment\">//这里假定筷子只能有一根</span></span><br><span class=\"line\"><span class=\"comment\">//这里创建一个单例对象</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Chopstick</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Serializable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Chopstick</span> <span class=\"variable\">INSTANCE</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Chopstick</span>();<span class=\"comment\">//类加载后，自动创建一个Chopstick对象，</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Chopstick</span><span class=\"params\">()</span> &#123;<span class=\"keyword\">if</span> (INSTANCE!=<span class=\"literal\">null</span>)<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(<span class=\"string\">&quot;请不要二次创建对象&quot;</span>);&#125;<span class=\"comment\">//构造器私有化，禁止二次创建</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Chopstick <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;<span class=\"keyword\">return</span> INSTANCE;&#125;<span class=\"comment\">//获取实例</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object <span class=\"title function_\">readResolve</span><span class=\"params\">()</span>&#123;<span class=\"keyword\">return</span> INSTANCE;&#125;<span class=\"comment\">//写readResolve方法，防止反序列化破坏单例</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"枚举类\"><a href=\"#枚举类\" class=\"headerlink\" title=\"枚举类\"></a>枚举类</h3><p>枚举本就是一个单例对象，而且不可破坏。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">ChopstickPlus</span>&#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">    ChopstickPlus <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;<span class=\"keyword\">return</span> INSTANCE;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-通过私有构造器，使得类不可实例化\"><a href=\"#4-通过私有构造器，使得类不可实例化\" class=\"headerlink\" title=\"4. 通过私有构造器，使得类不可实例化\"></a>4. 通过私有构造器，使得类不可实例化</h1><p>有些类只包含静态方法或静态域，这样的类不希望会被实例化，因为这些类被实例化是没有意义的；</p>\n<p>这里我表示疑惑：应该一般情况下没有人会去尝试实例化一个只有静态方法的类，嗯..但是…，书上说有一些时候会无意识的初始化该类？？下面继续记笔记。</p>\n<p>对于没有特别声明构造器的类，其构造器默认是public的，</p>\n<ul>\n<li><p>这里可以通过将构造器私有化，来避免不必要的实例化。</p>\n</li>\n<li><p>同样，为避免通过反射创建对象，可以在构造方法里添加抛出错误，防止类实例化。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//EasyMath 一个简单的，无意义的，仅用于学习的，计算类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">EasyMath</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">long</span> <span class=\"title function_\">sum</span><span class=\"params\">(<span class=\"type\">long</span> a,<span class=\"type\">long</span> b)</span>&#123;<span class=\"keyword\">return</span> a+b;&#125;<span class=\"comment\">//一个求和的静态方法</span></span><br><span class=\"line\">    <span class=\"comment\">//不希望不必要的工具类实例化</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">EasyMath</span><span class=\"params\">()</span>&#123;<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AssertionError</span>();&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但这样有个缺点：这个类不能有父类。</p>\n<h1 id=\"5-优先考虑依赖注入引用资源\"><a href=\"#5-优先考虑依赖注入引用资源\" class=\"headerlink\" title=\"5. 优先考虑依赖注入引用资源\"></a>5. 优先考虑依赖注入引用资源</h1><p>这里..就只写个标题吧。。</p>\n<p>详见Effective Java 第三版 P16页。</p>\n","categories":[],"tags":["Effective Java"]},{"title":"C++ 1","url":"http://zswh33.github.io/2022/10/06/C-1/","content":"<p>C++在C语言的基础上扩充了一些特有的内容：bool类型、重载函数、模板、STL等</p>\n<h1 id=\"头文件\"><a href=\"#头文件\" class=\"headerlink\" title=\"头文件\"></a>头文件</h1><p>C语言中头文件要加“.h”后缀，C++头文件不需要加后缀；</p>\n<p>一些替换：</p>\n<table>\n<thead>\n<tr>\n<th>C</th>\n<th>C++</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>string.h</td>\n<td>cstring</td>\n</tr>\n<tr>\n<td>math</td>\n<td>cmath</td>\n</tr>\n</tbody></table>\n<h2 id=\"iostream\"><a href=\"#iostream\" class=\"headerlink\" title=\"iostream\"></a>iostream</h2><p>输入输出头文件；</p>\n<p>Input 输入  Output 输出  stream流</p>\n<h1 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h1><p>using namespace &lt;命名空间&gt;</p>\n<p>C++标准库中所有标识符定义在std命名空间中；</p>\n<p>std <strong>standard adj.标准的</strong></p>\n<p>使用：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">using namespace <span class=\"built_in\">std</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h1><p><code>&lt;&lt;</code> 输入</p>\n<p><code>&gt;&gt;</code>输出</p>\n<h2 id=\"预定义的标准流对象\"><a href=\"#预定义的标准流对象\" class=\"headerlink\" title=\"预定义的标准流对象\"></a>预定义的标准流对象</h2><p>cin是isream类的对象，用于<strong>标准输入</strong>；</p>\n<p>cout是ostream类的对象，用于<strong>标准输出</strong>；</p>\n<p>cerr和clog是ostream类的对象，处理<strong>标准错误信息</strong>。</p>\n","categories":[],"tags":["C"]},{"title":"Git Hook 学习使用","url":"http://zswh33.github.io/2022/10/05/Git-Hook-学习使用/","content":"<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>Git能够做到进行某些操作后，触发一些自定义脚本，这个功能叫做<strong>Git Hook（Git钩子）</strong>。</p>\n<p>要实现这个功能，只需要将需要执行的脚本按照<strong>指定文件名</strong>放入<strong>项目目录</strong>的<code>.git\\hooks</code>文件夹下；</p>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p><img src=\"/2022/10/05/Git-Hook-%E5%AD%A6%E4%B9%A0%E4%BD%BF%E7%94%A8/image-20221010225118225.png\" alt=\"image-20221010225118225\"></p>\n<p>默认情况下，<code>.git/hooks</code>里会有一堆后缀为<code>.sample</code>的文件，这些都是git提供的一些<strong>示例文件</strong>，只需要将<code>.sample</code>后缀去掉，就可以使这些脚本生效；</p>\n<p>即：</p>\n<ul>\n<li>向<code>.git/hooks</code>文件夹放一些<strong>没有.xxx后缀的文件</strong>，文件名与要绑定的操作相关，详细见下面；</li>\n<li>在文件里写入<strong>要执行的脚本</strong>，脚本可以使用Linux Shell语言，也可以使用Ruby或Python语言；</li>\n</ul>\n<p>这样就实现了<strong>Git Hook</strong>功能：进行指定的Git操作，自动触发写好的脚本；</p>\n<h1 id=\"一个示例\"><a href=\"#一个示例\" class=\"headerlink\" title=\"一个示例\"></a>一个示例</h1><p>这里先写一个示例进行解释。</p>\n<ol>\n<li>首先到</li>\n</ol>\n<p>文件名与操作如下：</p>\n<p>pre-commit</p>\n<p>在commit之前会运行这个脚本，可以使用这个脚本实现代码检查；可以使用</p>\n<p>prepare-commit-msg</p>\n<p>commit之前，</p>\n<h2 id=\"第一个git服务器\"><a href=\"#第一个git服务器\" class=\"headerlink\" title=\"第一个git服务器\"></a>第一个git服务器</h2><ol>\n<li><p>首先找一个Linux系统（e…嗯 ），安装应用git；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">sudo apt install git <span class=\"comment\"># ubuntu发行版本Linux安装git命令</span></span></span><br></pre></td></tr></table></figure>\n\n<p>阿里云使用yum包管理器下使用以下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为git添加用户和用户组</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">groupadd git</span></span><br><span class=\"line\"><span class=\"meta prompt_\">$ </span><span class=\"language-bash\">useradd git -g git</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建一个证书登录</p>\n</li>\n</ol>\n<h1 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h1><p><a href=\"https://www.runoob.com/git/git-server.html\">https://www.runoob.com/git/git-server.html</a></p>\n","categories":[],"tags":["git"]},{"title":"Git 1","url":"http://zswh33.github.io/2022/09/29/Git-1/","content":"<p><a href=\"https://www.runoob.com/git\">https://www.runoob.com/git</a></p>\n<h1 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h1><p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目；</p>\n<p><img src=\"/2022/09/29/Git-1/git%E5%B7%A5%E4%BD%9C%E6%B5%81%E7%A8%8B.drawio.svg\" alt=\"git工作流程.drawio\"></p>\n<h1 id=\"Git工作区、暂存区、版本库\"><a href=\"#Git工作区、暂存区、版本库\" class=\"headerlink\" title=\"Git工作区、暂存区、版本库\"></a>Git工作区、暂存区、版本库</h1><p><strong>工作区</strong>：在电脑里看到的目录，本地文件；</p>\n<p><strong>暂存区</strong>：放在<code>.git</code>目录下的index文件（.git&#x2F;index），暂存区有时也叫索引；</p>\n<p><strong>版本库</strong>：工作区有一个隐藏目录<code>.git</code>,不算工作区，是Git的版本库。</p>\n<p><img src=\"/2022/09/29/Git-1/git%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84%E5%9B%BE.svg\" alt=\"git目录结构图\"></p>\n<ul>\n<li>HEAD是指向master分支的一个游标；</li>\n<li>objects是git的对象库，位于**.git&#x2F;objects**下，包含了创建的各种对象和内容；</li>\n<li>当对工作区修改或新增文件时执行<strong>git add</strong>命令，<ul>\n<li>暂存区的目录树会被更新；</li>\n<li>工作区修改或新增的内容被写入到对象库的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中；</li>\n</ul>\n</li>\n<li>当执行<strong>git commit</strong>提交操作时，暂存区的目录树写到版本库中，master分支会做相应的更新；</li>\n<li>执行<strong>git reset HEAD</strong>命令，暂存区的目录树会被重写，被master分支指向的目录树所替换，工作区不受影响；</li>\n<li>执行**git rm –cached &lt;file&gt;**命令，会直接从暂存区删除文件，工作区不做改变；</li>\n<li>执行**git checkout .<strong>或</strong>git checkout – &lt;file&gt;**命令，会用暂存区全部或指定的文件替换工作区的文件；</li>\n<li></li>\n</ul>\n","categories":[],"tags":["git"]},{"title":"Nginx 2","url":"http://zswh33.github.io/2022/09/26/Nginx-2/","content":"<p>《深入理解Nginx：模块开发与架构解析（第2版） 》</p>\n<h1 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h1><ol>\n<li><p>epoll是Linux上处理大并发网络连接的利器，准备一个Linux内核2.6以上版本的操作系统；</p>\n<ul>\n<li><p>使用uname -a查询Linux内核版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yyn@yyn:~$ uname -a</span><br><span class=\"line\">Linux yyn 5.15.0-47-generic #51-Ubuntu SMP Thu Aug 11 07:51:15 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>软件要求</p>\n<ol>\n<li>GCC编译器，用于编译Nginx源代码文件 （<code>yum install -y gcc</code>）；</li>\n<li>G++编译器，后续用于编写Nginx HTTP模块（<code>yum install -y gcc-c++</code>）；</li>\n<li>PCRE库（Perl兼容正则表达式），支持正则表达式，为Nginx提供正则表达式支持（<code>yum install -y pcre pcre-devel</code>）；pcre-devel是使用PCRE做二次开发时所需要的开发库，包括头文件等；</li>\n<li>zlib库用于对HTTP包的内容做gzip的压缩；允许在nginc.conf配置了gzip on，并指定对于某些类型（content-type）的HTTP响应使用gzip来进行压缩以减少网络传输量；（<code>yum install -y zlib zlib-devel</code>）</li>\n<li>OpenSSL开发库，用于让Nginx支持SSL协议的HTTP；也提供MD5、SHA1等散列函数；（<code>yum install -y openssl openssl-devel</code>）</li>\n</ol>\n</li>\n<li><p>目录</p>\n<ol>\n<li><p>Nginx的源代码目录</p>\n<p>存放Nginx的源代码文件，第三方或自己所写的模块源代码文件；</p>\n</li>\n<li><p>Nginx编译阶段产生的中间文件</p>\n<p>用于将<strong>configure</strong>命令执行后所生成的源文件及目录，</p>\n<p>以及<strong>make命令</strong>执行后生成的目标文件和最终连接成功的二进制文件</p>\n<p>默认情况下，configure命令会将该目录命名为objs，并放在<strong>Nginx源代码</strong>目录下</p>\n</li>\n<li><p>部署目录</p>\n<p>存放Nginx服务运行期间所需要的二进制文件、配置文件等；默认位于**&#x2F;usr&#x2F;local&#x2F;nginx**下；</p>\n</li>\n<li><p>日志文件</p>\n</li>\n</ol>\n</li>\n<li><p>内核参数优化</p>\n<p>Linux内核参数考虑是最通用的场景，不符合Web服务器的定义；</p>\n<p>所以需要修改Linux内核参数，使得Nginx获得更高的性能；</p>\n<p>Nginx作为静态Web服务器、反向代理服务器或是提供图片缩略图功能的服务器时，内核参数的调整都是不同的；</p>\n<p>可以通过修改&#x2F;etc&#x2F;sysctl.conf来修改内核参数。</p>\n<p>最常用的配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">fs.filemax</span> = <span class=\"string\">999999</span></span><br><span class=\"line\"><span class=\"attr\">net.ipv4.tcp</span> <span class=\"string\">tw_reuse = 1</span></span><br><span class=\"line\"><span class=\"attr\">net.ipv4.tcp</span> <span class=\"string\">keepalive_time = 600</span></span><br><span class=\"line\"><span class=\"attr\">net.ipv4.tcp_fin_timeout</span> = <span class=\"string\">30</span></span><br><span class=\"line\"><span class=\"attr\">net.ipv4.tcp_max_tw_buckets</span> = <span class=\"string\">5000</span></span><br><span class=\"line\"><span class=\"attr\">net.ipv4.ip_local_port_range</span> = <span class=\"string\">1024 61000</span></span><br><span class=\"line\"><span class=\"attr\">net.ipv4.tcp_rmem</span> = <span class=\"string\">4096 32768 262142</span></span><br><span class=\"line\"><span class=\"attr\">net.ipv4.tcp_wmem</span> = <span class=\"string\">4096 32768 262142</span></span><br><span class=\"line\"><span class=\"attr\">net.core.netdev_max_backlog</span> = <span class=\"string\">8096</span></span><br><span class=\"line\"><span class=\"attr\">net.core.rmem_default</span> = <span class=\"string\">262144</span></span><br><span class=\"line\"><span class=\"attr\">net.core.wmem_default</span> = <span class=\"string\">262144</span></span><br><span class=\"line\"><span class=\"attr\">net.core.rmem_max</span> = <span class=\"string\">2097152</span></span><br><span class=\"line\"><span class=\"attr\">net.core.wmem_max</span> = <span class=\"string\">2097152</span></span><br><span class=\"line\"><span class=\"attr\">net.ipv4.tcp_syncookies</span> = <span class=\"string\">1</span></span><br><span class=\"line\"><span class=\"attr\">net.ipv4.tcp_max_syn.backlog</span> = <span class=\"string\">1024</span></span><br></pre></td></tr></table></figure>\n\n<p>修改后使用sysctl-p命令，使上述修改生效。</p>\n<p>参数解释：</p>\n<ul>\n<li>file-max：进程可以同时打开的最大句柄数，这个参数直接限制最大并发连接数，根据实际情况配置</li>\n<li>tcp_tw_reuse：这个参数设置为1，表示允许TIME-WAIT状态的socket重新用于新的TCP连接；</li>\n<li>tcp_keepalive_time：表示当keepalive启用时，TCP发送keepalive消息的频率；默认是2小时，若设置得更小一些，可以更快地清理无效的连接；</li>\n<li>tcp_fin_timeout：当服务器主动关闭连接时，socket保持在FIN-WAIT-2状态的最大时间；</li>\n<li>tcp_max_tw_buckets：操作系统允许TIME_WAIT套接字数量的最大值，若超过这个数字，TIME_WAIT套接字将立刻被清除并打印警告信息；参数默认为180000，过多TIME_WAIT套接字会使Web服务器变慢；</li>\n<li>tcp_max_syn_backlog：表示TCP三次握手建立阶段接收SYN请求队列的最大长度，默认为1024，设置得大一些可以使Nginx繁忙来不及accept新连接的情况时，Linux不至于丢失客户端发起的连接请求；</li>\n<li>ip_local_port_range：定义了UDP和TCP连接中本地端口的取值范围。</li>\n<li>net.ipv4.tcp_rmem：定义了TCP接收缓存的最小值、默认值和最大值；</li>\n<li>net.ipv4_wmem：定义了TCP发送缓存的最小值、默认值和最大值；</li>\n<li>netdev_max_backlog：当网卡接收数据包的速度大于内核处理的速度时，会有一个队列保存这些数据包；这个参数表示该队列的最大值；</li>\n<li>rmem_default：这个参数表示内核套接字接收缓存区默认的大小；</li>\n<li>wmem_default：这个参数表示内核套接字发送缓存区默认的大小；</li>\n<li>rmem_max：这个参数表示内核套接字接收缓存区的最大大小；</li>\n<li>wmem_max：这个参数表示内核套接字发送缓存区的最大大小。</li>\n</ul>\n</li>\n<li><p>注意：</p>\n<ol>\n<li>滑动窗口的大小与套接字缓存区会在一定程度上影响并发连接的数目；每个TCP连接都会为维护TCP滑动窗口而消耗内存，这个窗口会根据服务器的处理速度收缩或扩张</li>\n<li>参数wmem_max的设置，需要平衡物理内存的总大小，Nginx并发处理的最大链接数量而决定（由nginx.conf中的work_processes和worker_connections参数决定）；</li>\n<li>滑动窗口过小会影响大数据量的传输速度；</li>\n<li>rmem_default、wmem_default、rmem_max、wmem_max这4个参数设置要根据业务特性以及实际的硬件成本综合考虑。</li>\n<li>tcp_syncookies：该参数与性能无关，用于解决TCP的SYN攻击。</li>\n</ol>\n<p>p31页 1.3.5获取Nginx源码。</p>\n</li>\n</ol>\n","categories":[],"tags":["Nginx"]},{"title":"Redis 6 Stream消息队列","url":"http://zswh33.github.io/2022/09/23/Redis-6/","content":"<h1 id=\"Stream消息队列\"><a href=\"#Stream消息队列\" class=\"headerlink\" title=\"Stream消息队列\"></a>Stream消息队列</h1><p><a href=\"https://pdai.tech/md/db/nosql-redis/db-redis-data-type-stream.html\">https://pdai.tech/md/db/nosql-redis/db-redis-data-type-stream.html</a></p>\n<p>Stream是一个新的强大的支持多播的可持久化的消息队列。</p>\n<h2 id=\"Stream结构\"><a href=\"#Stream结构\" class=\"headerlink\" title=\"Stream结构\"></a>Stream结构</h2><p><img src=\"/2022/09/23/Redis-6/Stream%E7%BB%93%E6%9E%84.drawio.svg\" alt=\"Stream结构.drawio\"></p>\n<p>consumer Group：消费组，使用XGROUP CREATE创建，一个消费组有多个消费者，这些消费者之间是竞争关系；</p>\n<p>last_delivered_id：游标，每个消费组会有个游标last_delivered_id，任意一个消费者读取了消息都会使游标last_delivered_id往前移动；</p>\n<p>Pending Entries List：pending_ids。维护并存放<strong>消费者读取消息的状态（消费者是否已经向服务器回应ACK）</strong>；pending_ids记录了当前已被客户端读取的消息，但还没有ack的消息；一旦某个消息被ack，这个队列会将消息id移除，表示消费者收到了该消息；用于确保客户端消费了消息一次，而不是在网络传输途中丢失了没处理。</p>\n<p><strong>消息ID</strong>：即Stream创建Entry时会生成的ID。</p>\n<ul>\n<li>格式：timestampInMillis-sequence   12345567-9  毫米时间戳-序号；</li>\n<li>序号为在同一时间戳内生成的消息的序号，用于区分在同一时间戳生成的多个消息；</li>\n<li>格式必须为 <code>整数-整数</code>，后面加入的消息ID必须大于前面的消息ID；</li>\n</ul>\n<p><strong>消息内容</strong>：消息内容就是Entry的键值对；</p>\n<h2 id=\"生产者命令\"><a href=\"#生产者命令\" class=\"headerlink\" title=\"生产者命令\"></a>生产者命令</h2><p><strong>XADD</strong>：添加消息到末尾；</p>\n<p><strong>XTRIM</strong>：对流进行修剪；</p>\n<p><strong>XDEL</strong>：删除消息；</p>\n<p><strong>XLEN</strong>：获取流包含的元素数量；</p>\n<p><strong>XRANGE</strong>：获取消息列表；</p>\n<p>xxxxxxxxxx http {    include       mime.types;    default_type  application&#x2F;octet-stream;    upstream yupstream{        # 服务器资源        server 127.0.0.1:8080 weight&#x3D;1;   # 权重为1        server 127.0.0.1:8081 weight&#x3D;1;    }            server{        listen  801;        server_name localhost;        # 代理​​​        # 根目录请求        location &#x2F; {                root html;                index index.html,index.htm;                proxy_pass <a href=\"http://yupstream/\">http://yupstream</a>;   # 反向代理        }        location &#x2F;admin {                }            }​}​perl</p>\n<p><strong>XREAD</strong>：以阻塞或非阻塞方式获取消息列表。</p>\n<h2 id=\"消费组消费\"><a href=\"#消费组消费\" class=\"headerlink\" title=\"消费组消费\"></a>消费组消费</h2><p><img src=\"/2022/09/23/Redis-6/%E6%B6%88%E8%B4%B9%E7%BB%84%E6%B6%88%E8%B4%B9%E7%BB%93%E6%9E%84%E7%BB%84.drawio.svg\" alt=\"消费组消费结构组.drawio\"></p>\n<h2 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h2><p>XGROUP CREATE 创建消费者组</p>\n<p>XREADGROUP GROUP 读取消费组中的消息</p>\n<p>XACK 将消息标记为已处理</p>\n<p>XGROUP SETID 为消费者组设置新的最后递送消息ID</p>\n<p>XGROUP DELCONSUMER 删除消费者</p>\n<p>XGROUP DESTROY 删除消费者组</p>\n<p>XPENDING 显示待处理消息的相关信息</p>\n<p>XCLAIM 转移消息的归属权</p>\n<p>XINFO 查看流和消费者组的相关信息</p>\n<p>XINFO GROUPS 查询组信息</p>\n<p>XINFO STREAM 打印流信息</p>\n<p>XINFO CONSUMERS 组成员信息</p>\n<h3 id=\"创建组-x2F-查询信息\"><a href=\"#创建组-x2F-查询信息\" class=\"headerlink\" title=\"创建组&#x2F;查询信息\"></a>创建组&#x2F;查询信息</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; xadd st1 * apple 1 banana 23</span><br><span class=\"line\">&quot;1664179267483-0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xadd st1 * apple 12 banana 2 # 为st1添加两个消息</span><br><span class=\"line\">&quot;1664179271399-0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xgroup create st1 g1 0-0 # 为st1创建一个消费者组g1，从0-0开始消费</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; xgroup create st1 g2 $ # 为st1创建一个消费者组g2，仅获取最新的消息</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; xinfo stream st1  # 获取st1的stream信息</span><br><span class=\"line\"> 1) &quot;length&quot;</span><br><span class=\"line\"> 2) (integer) 2  # 长度</span><br><span class=\"line\"> 3) &quot;radix-tree-keys&quot;</span><br><span class=\"line\"> 4) (integer) 1</span><br><span class=\"line\"> 5) &quot;radix-tree-nodes&quot;</span><br><span class=\"line\"> 6) (integer) 2</span><br><span class=\"line\"> 7) &quot;last-generated-id&quot;</span><br><span class=\"line\"> 8) &quot;1664179271399-0&quot; # 最后生成的id</span><br><span class=\"line\"> 9) &quot;max-deleted-entry-id&quot;</span><br><span class=\"line\">10) &quot;0-0&quot;</span><br><span class=\"line\">11) &quot;entries-added&quot;</span><br><span class=\"line\">12) (integer) 2</span><br><span class=\"line\">13) &quot;recorded-first-entry-id&quot;</span><br><span class=\"line\">14) &quot;1664179267483-0&quot;</span><br><span class=\"line\">15) &quot;groups&quot;</span><br><span class=\"line\">16) (integer) 2</span><br><span class=\"line\">17) &quot;first-entry&quot;  # 第一个entry</span><br><span class=\"line\">18) 1) &quot;1664179267483-0&quot;</span><br><span class=\"line\">    2) 1) &quot;apple&quot;</span><br><span class=\"line\">       2) &quot;1&quot;</span><br><span class=\"line\">       3) &quot;banana&quot;</span><br><span class=\"line\">       4) &quot;23&quot;</span><br><span class=\"line\">19) &quot;last-entry&quot;  # 最后一个entry</span><br><span class=\"line\">20) 1) &quot;1664179271399-0&quot;</span><br><span class=\"line\">    2) 1) &quot;apple&quot;</span><br><span class=\"line\">       2) &quot;12&quot;</span><br><span class=\"line\">       3) &quot;banana&quot;</span><br><span class=\"line\">       4) &quot;2&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xinfo groups st1 #获取st1的组信息</span><br><span class=\"line\">1)  1) &quot;name&quot;</span><br><span class=\"line\">    2) &quot;g1&quot;</span><br><span class=\"line\">    3) &quot;consumers&quot;</span><br><span class=\"line\">    4) (integer) 0</span><br><span class=\"line\">    5) &quot;pending&quot;</span><br><span class=\"line\">    6) (integer) 0</span><br><span class=\"line\">    7) &quot;last-delivered-id&quot;</span><br><span class=\"line\">    8) &quot;0-0&quot;</span><br><span class=\"line\">    9) &quot;entries-read&quot;</span><br><span class=\"line\">   10) (nil)</span><br><span class=\"line\">   11) &quot;lag&quot;</span><br><span class=\"line\">   12) (integer) 2</span><br><span class=\"line\">2)  1) &quot;name&quot;</span><br><span class=\"line\">    2) &quot;g2&quot;</span><br><span class=\"line\">    3) &quot;consumers&quot;</span><br><span class=\"line\">    4) (integer) 0</span><br><span class=\"line\">    5) &quot;pending&quot;</span><br><span class=\"line\">    6) (integer) 0</span><br><span class=\"line\">    7) &quot;last-delivered-id&quot;</span><br><span class=\"line\">    8) &quot;1664179271399-0&quot;</span><br><span class=\"line\">    9) &quot;entries-read&quot;</span><br><span class=\"line\">   10) (nil)</span><br><span class=\"line\">   11) &quot;lag&quot;</span><br><span class=\"line\">   12) (integer) 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"消费组\"><a href=\"#消费组\" class=\"headerlink\" title=\"消费组\"></a>消费组</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">消费者消费数据  xreadgroup group 组名 消费者名 count 数量 streams steam名</span></span><br><span class=\"line\">127.0.0.1:6379&gt; xreadgroup group g1 consumer001 count 1 streams st1 &gt;</span><br><span class=\"line\">1) 1) &quot;st1&quot;</span><br><span class=\"line\">   2) 1) 1) &quot;1664179267483-0&quot;</span><br><span class=\"line\">         2) 1) &quot;apple&quot;</span><br><span class=\"line\">            2) &quot;1&quot;</span><br><span class=\"line\">            3) &quot;banana&quot;</span><br><span class=\"line\">            4) &quot;23&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">消费者consumer001再次从流st1、组g1消费一个数据</span></span><br><span class=\"line\">127.0.0.1:6379&gt; xreadgroup group g1 consumer001 count 1 streams st1 &gt;</span><br><span class=\"line\">1) 1) &quot;st1&quot;</span><br><span class=\"line\">   2) 1) 1) &quot;1664179271399-0&quot;</span><br><span class=\"line\">         2) 1) &quot;apple&quot;</span><br><span class=\"line\">            2) &quot;12&quot;</span><br><span class=\"line\">            3) &quot;banana&quot;</span><br><span class=\"line\">            4) &quot;2&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">st1中已经没有数据，再次读取返回nil</span></span><br><span class=\"line\">127.0.0.1:6379&gt; xreadgroup group g1 consumer001 count 1 streams st1 &gt;</span><br><span class=\"line\">(nil)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">尝试带阻塞读取数据</span>  </span><br><span class=\"line\">127.0.0.1:6379&gt; xreadgroup group g1 consumer001 block 0 count 1 streams st1 &gt;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">此处阻塞</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">在另一个终端向st1中添加数据后取消阻塞</span></span><br><span class=\"line\">1) 1) &quot;st1&quot;</span><br><span class=\"line\">   2) 1) 1) &quot;1664179863235-0&quot;</span><br><span class=\"line\">         2) 1) &quot;apple&quot;</span><br><span class=\"line\">            2) &quot;12&quot;</span><br><span class=\"line\">            3) &quot;qwe&quot;</span><br><span class=\"line\">            4) &quot;11&quot;</span><br><span class=\"line\">(17.78s)  # 等待时间</span><br><span class=\"line\">127.0.0.1:6379&gt; xinfo groups st1  # 获取st1的组信息</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">包含 组名，消费者数量，获取的数量等数据</span></span><br><span class=\"line\">1)  1) &quot;name&quot;</span><br><span class=\"line\">    2) &quot;g1&quot;</span><br><span class=\"line\">    3) &quot;consumers&quot;</span><br><span class=\"line\">    4) (integer) 1</span><br><span class=\"line\">    5) &quot;pending&quot;</span><br><span class=\"line\">    6) (integer) 3</span><br><span class=\"line\">    7) &quot;last-delivered-id&quot;</span><br><span class=\"line\">    8) &quot;1664179863235-0&quot;</span><br><span class=\"line\">    9) &quot;entries-read&quot;</span><br><span class=\"line\">   10) (integer) 3</span><br><span class=\"line\">   11) &quot;lag&quot;</span><br><span class=\"line\">   12) (integer) 0</span><br><span class=\"line\">2)  1) &quot;name&quot;</span><br><span class=\"line\">    2) &quot;g2&quot;</span><br><span class=\"line\">    3) &quot;consumers&quot;</span><br><span class=\"line\">    4) (integer) 0</span><br><span class=\"line\">    5) &quot;pending&quot;</span><br><span class=\"line\">    6) (integer) 0</span><br><span class=\"line\">    7) &quot;last-delivered-id&quot;</span><br><span class=\"line\">    8) &quot;1664179271399-0&quot;</span><br><span class=\"line\">    9) &quot;entries-read&quot;</span><br><span class=\"line\">   10) (nil)</span><br><span class=\"line\">   11) &quot;lag&quot;</span><br><span class=\"line\">   12) (nil)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">获取组g1的流st1的消费者数据</span></span><br><span class=\"line\">127.0.0.1:6379&gt; xinfo consumers st1 g1</span><br><span class=\"line\">1) 1) &quot;name&quot;</span><br><span class=\"line\">   2) &quot;consumer001&quot;  # 消费者名</span><br><span class=\"line\">   3) &quot;pending&quot;</span><br><span class=\"line\">   4) (integer) 3  # 未处理的数据</span><br><span class=\"line\">   5) &quot;idle&quot;</span><br><span class=\"line\">   6) (integer) 61034</span><br><span class=\"line\">127.0.0.1:6379&gt; xack st1 g1 1664179271399-0  # 使用ack表示数据已消费</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; xinfo consumers st1 g1 # 查看st1 g1下的消费者数据</span><br><span class=\"line\">1) 1) &quot;name&quot;</span><br><span class=\"line\">   2) &quot;consumer001&quot;</span><br><span class=\"line\">   3) &quot;pending&quot;</span><br><span class=\"line\">   4) (integer) 2  # 未处理的数据减少了</span><br><span class=\"line\">   5) &quot;idle&quot;</span><br><span class=\"line\">   6) (integer) 325172</span><br><span class=\"line\">127.0.0.1:6379&gt; xack st1 g1 1664179863235-0</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; xack st1 g1 1664179267483-0 # 将剩余的数据进行消费</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; xinfo consumers st1 g1 # 再次查询</span><br><span class=\"line\">1) 1) &quot;name&quot;</span><br><span class=\"line\">   2) &quot;consumer001&quot;</span><br><span class=\"line\">   3) &quot;pending&quot;</span><br><span class=\"line\">   4) (integer) 0  # 没有数据需要处理了</span><br><span class=\"line\">   5) &quot;idle&quot;</span><br><span class=\"line\">   6) (integer) 382595</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一些命令\"><a href=\"#一些命令\" class=\"headerlink\" title=\"一些命令\"></a>一些命令</h2><h3 id=\"XGROUP-组操作\"><a href=\"#XGROUP-组操作\" class=\"headerlink\" title=\"XGROUP 组操作\"></a>XGROUP 组操作</h3><h4 id=\"XGROUP-CREATE-创建组\"><a href=\"#XGROUP-CREATE-创建组\" class=\"headerlink\" title=\"XGROUP CREATE 创建组\"></a>XGROUP CREATE 创建组</h4><p><code>XGROUP CREATE key groupname &lt;id | $&gt; [MKSTREAM] [ENTRIESTREAD entries_read]</code></p>\n<p>为key创建一个消费者组，名为groupname；</p>\n<p>每个组的名字在同一个key里是惟一的；若尝试创建一个已经存在的组，会返回错误</p>\n<p>参数：</p>\n<p><code>&lt;id | $&gt;</code>：从什么开始消费，其中id为指定id，$只接受新的消息，如：</p>\n<ul>\n<li>123-1 为从id为123-1的节点开始；</li>\n<li>0-0 为<strong>从头开始</strong>；</li>\n<li>$，只接受<strong>新的消息</strong>。</li>\n</ul>\n<p><strong>MKSTREAM</strong>：添加这个参数后，若指定流不存在，不再返回错误，而是创建名为key的流；</p>\n<p><strong>ENTRIESREAD</strong>：hole…</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; xadd st2 123-2 apple 3 stone 5  # 为st2添加数据（一般不用指定id，这里仅学习使用）</span><br><span class=\"line\">&quot;123-2&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xadd st2 * apple 3 stone 123 # 为st2添加数据，id为自动生成，目前st2的最大id就是下面这个了</span><br><span class=\"line\">&quot;1664183965455-0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xgroup create st2 cg1 $ # 创建一个消费者组，指定$表示获取最新数据</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; xinfo groups st2</span><br><span class=\"line\">1)  1) &quot;name&quot;</span><br><span class=\"line\">    2) &quot;cg1&quot;</span><br><span class=\"line\">    3) &quot;consumers&quot;</span><br><span class=\"line\">    4) (integer) 0</span><br><span class=\"line\">    5) &quot;pending&quot;</span><br><span class=\"line\">    6) (integer) 0</span><br><span class=\"line\">    7) &quot;last-delivered-id&quot;</span><br><span class=\"line\">    8) &quot;1664183965455-0&quot; # 使用</span><br><span class=\"line\">    9) &quot;entries-read&quot;</span><br><span class=\"line\">   10) (nil)</span><br><span class=\"line\">   11) &quot;lag&quot;</span><br><span class=\"line\">   12) (integer) 0</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"XGROUP-DESTROY-删除组\"><a href=\"#XGROUP-DESTROY-删除组\" class=\"headerlink\" title=\"XGROUP DESTROY 删除组\"></a>XGROUP DESTROY 删除组</h4><p><code>XGROUP DESTROY key groupname</code></p>\n<p>完全删除一个消费者组；</p>\n<p>不论消费者组中是否存在<strong>活跃的消费者</strong>或是<strong>未处理的数据</strong>，会<strong>直接将消费者组删除</strong>；</p>\n<p>返回成功删除的消费者组的数量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; xgroup create st1 cg1 0-0 # 创建消费者组，名为cg1，绑定的流为st1，起点0-0</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; xgroup destroy st1 cg1 # 删除消费者组，名为cg1，绑定的流为st1</span><br><span class=\"line\">(integer) 1</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"XGROUP-SETID-设置组的消费id\"><a href=\"#XGROUP-SETID-设置组的消费id\" class=\"headerlink\" title=\"XGROUP SETID 设置组的消费id\"></a>XGROUP SETID 设置组的消费id</h4><p><code>XGROUP SETID key groupname &lt;id | $&gt; [ENTRIESREAD entries_read]</code></p>\n<p>设置消费者组要获取数据的起点id；</p>\n<p>ENTRIESREAD：hole…</p>\n<h4 id=\"XGROUP-CREATECONSUMER-创建消费者\"><a href=\"#XGROUP-CREATECONSUMER-创建消费者\" class=\"headerlink\" title=\"XGROUP CREATECONSUMER  创建消费者\"></a>XGROUP CREATECONSUMER  创建消费者</h4><p><code>XGROUP CREATECONSUMER key groupname consumername</code></p>\n<p>创建一个消费者，key为流的名字，groupname为组的名字，consumername为消费者的名字；</p>\n<p>可以使用XREADGROUP进行数据消费；</p>\n<p>返回值为1或0，表示消费者是否被成功创建</p>\n<h4 id=\"XGROUP-DELCONSUMER-删除消费者\"><a href=\"#XGROUP-DELCONSUMER-删除消费者\" class=\"headerlink\" title=\"XGROUP DELCONSUMER 删除消费者\"></a>XGROUP DELCONSUMER 删除消费者</h4><p><code>XGROUP DELCONSUMER key groupname consumername</code></p>\n<p>删除消费者，key为流的名字，groupname为组的名字，consumername为消费者的名字；</p>\n<h3 id=\"XINFO-信息查询\"><a href=\"#XINFO-信息查询\" class=\"headerlink\" title=\"XINFO 信息查询\"></a>XINFO 信息查询</h3><h4 id=\"XINFO-CONSUMERS\"><a href=\"#XINFO-CONSUMERS\" class=\"headerlink\" title=\"XINFO CONSUMERS\"></a>XINFO CONSUMERS</h4><p><code>XINFO CONSUMERS key groupname</code></p>\n<p>返回绑定key的消费者组下的消费者信息；</p>\n<h4 id=\"XINFO-GROUPS\"><a href=\"#XINFO-GROUPS\" class=\"headerlink\" title=\"XINFO GROUPS\"></a>XINFO GROUPS</h4><p><code>XINFO GROUPS key</code></p>\n<p>返回绑定key的所有消费者组；</p>\n<h4 id=\"XINFO-STREAM\"><a href=\"#XINFO-STREAM\" class=\"headerlink\" title=\"XINFO STREAM\"></a>XINFO STREAM</h4><p><code>XINFO STREAM key [FULL [COUNT count]]</code></p>\n<p>返回流的信息；</p>\n<p>信息包含：</p>\n<ul>\n<li>length：流中实体的数量；</li>\n<li>radix-tree-keys：</li>\n<li>radix-tree-nodes：</li>\n<li>groups：定义在流中消费者组的数量</li>\n<li>last-generated-id：最后一个实体使用的id；</li>\n<li>max-deleted-entry-id：流中删除的最大id的条目；</li>\n<li>entries-added：在流存活期间，所有添加过的实体的数量；</li>\n<li>first-entry：第一个entry的信息；</li>\n<li>last-entry：最后一个entry的信息。</li>\n</ul>\n<p>可选参数：</p>\n<ul>\n<li>FULL：将返回更多的信息；<ul>\n<li>对于entries属性，以升序<strong>全部</strong>或<strong>指定数量</strong>的实体信息；</li>\n<li>对于groups属性，包括XINFO GROUPS和XINFO CONSUMERS返回的信息。</li>\n</ul>\n</li>\n<li>COUNT：指定FULL中返回实体的数量</li>\n</ul>\n<h3 id=\"消费者操作\"><a href=\"#消费者操作\" class=\"headerlink\" title=\"消费者操作\"></a>消费者操作</h3><p><code>XPENDING key group [[IDLE min-idle-time] start end count [consumer]]</code></p>\n<p>获取消费组内<strong>被读取但未处理完毕</strong>的信息；</p>\n<p>应用场景：为了解决组内数据被读取但在处理期间消费者<strong>崩溃</strong>的问题。</p>\n","categories":[],"tags":["Redis"]},{"title":"Redis 5 HyperLogLogs Bitmaps  Geospatial","url":"http://zswh33.github.io/2022/09/22/Redis-5/","content":"<h1 id=\"Redis-三种特殊类型\"><a href=\"#Redis-三种特殊类型\" class=\"headerlink\" title=\"Redis 三种特殊类型\"></a>Redis 三种特殊类型</h1><h2 id=\"HyperLogLogs（基数统计）\"><a href=\"#HyperLogLogs（基数统计）\" class=\"headerlink\" title=\"HyperLogLogs（基数统计）\"></a>HyperLogLogs（基数统计）</h2><p>用于统计一些准确度要求不高的数据；</p>\n<ul>\n<li>允许容错，可以接受一定误差；</li>\n<li>基数，指内容不可重复；A&#x3D;{1,2,3,4,5}，B&#x3D;{3,5,6,7,9}，基数&#x3D;1,2,4,6,7,9；</li>\n</ul>\n<h3 id=\"用来做什么\"><a href=\"#用来做什么\" class=\"headerlink\" title=\"用来做什么\"></a>用来做什么</h3><p>可以用来统计各种计数，如注册IP数，每日访问IP数，在线用户数，共同好友数等；</p>\n<h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><p>可以使用少量固定的内存去存储并识别集合中的唯一元素，估算的基数不一定准确，有0.81%标准错误近似值；</p>\n<p>如：</p>\n<p>一个IP消耗15个字节，100W个IP就是15M，HyperLogLog在Redis中每个键占用内容都是12K，理论存储近似接近2^64个值；不论存储的内容是什么，它有一个基于基数估算的算法，只能比较准确地估算出基数，可以使用少量固定的内存去存储并识别集合的唯一元素；</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; pfadd k1 a b c d e f g h i  # k1 =&#123;a,b,c,d,e,f,g,h,i&#125;</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; pfcount k1  # 获取数量</span><br><span class=\"line\">(integer) 9</span><br><span class=\"line\">127.0.0.1:6379&gt; pfadd k2 a z b x c s d r e  # k2 = &#123;a,b,c,d,e,z,x,s,r&#125;</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; pfcount k2 </span><br><span class=\"line\">(integer) 9</span><br><span class=\"line\">127.0.0.1:6379&gt; pfmerge k3 k1 k2  # 合并k1和k2 存放到k3</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; pfcount k3  # k3的数量</span><br><span class=\"line\">(integer) 13</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Bitmap（位存储）\"><a href=\"#Bitmap（位存储）\" class=\"headerlink\" title=\"Bitmap（位存储）\"></a>Bitmap（位存储）</h2><p>位图数据结构，通过操作二进制数来进行记录，只有0和1两个状态；</p>\n<h3 id=\"用来做什么-1\"><a href=\"#用来做什么-1\" class=\"headerlink\" title=\"用来做什么\"></a>用来做什么</h3><p>比如用户每天的打卡情况；</p>\n<p>设置打卡情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; setbit sign:year 0 1  # 用户第0天打卡了</span><br><span class=\"line\">(integer) 0 </span><br><span class=\"line\">127.0.0.1:6379&gt; setbit sign:year 1 0 # 用户第1天没打卡</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit sign:year 2 1 # 用户第二天打卡了</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit sign:year 3 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit sign:year 4 0  # 用户第4天没打卡</span><br><span class=\"line\">(integer) 0</span><br></pre></td></tr></table></figure>\n\n<p>获取打卡情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; getbit sign:year 4  # 用户第4天没打卡</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit sign:year 3  # 用户第三天打卡了</span><br><span class=\"line\">(integer) 1</span><br></pre></td></tr></table></figure>\n\n<p>获取所有的打卡情况</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; bitcount sign:year</span><br><span class=\"line\">(integer) 3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Geospatial（地理位置）\"><a href=\"#Geospatial（地理位置）\" class=\"headerlink\" title=\"Geospatial（地理位置）\"></a>Geospatial（地理位置）</h2><p>geospatial可以存放一个坐标，地理位置，基于经纬度；</p>\n<h3 id=\"底层实现原理\"><a href=\"#底层实现原理\" class=\"headerlink\" title=\"底层实现原理\"></a>底层实现原理</h3><p>Geo的底层实现就是SortedSet，可以通过SortedSet命令控制geo；</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>Redis Geo使用<strong>Geohash</strong>实现位置的存储；</p>\n<p>Geohash将经纬度编码成为一个52bit的整型，而此时有序集合的score就可以存储52bit的整型且不失精度；</p>\n<h3 id=\"一些命令\"><a href=\"#一些命令\" class=\"headerlink\" title=\"一些命令\"></a>一些命令</h3><h4 id=\"geoadd-添加地理位置\"><a href=\"#geoadd-添加地理位置\" class=\"headerlink\" title=\"geoadd 添加地理位置\"></a>geoadd 添加地理位置</h4><h5 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h5><p><code>GEOADD key [NX | XX] [CH] longitude latitude member [longitude latitude member ...]</code></p>\n<p>添加指定的位置信息到key中；</p>\n<p>数据存储为一个有序集合；</p>\n<p>可以通过GEOSEARCH命令获取这些信息；</p>\n<h5 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h5><blockquote>\n<p>longitude 经度   latitude 纬度</p>\n</blockquote>\n<p>命令支持标准的x，y坐标，经度必须放置在纬度的前面；</p>\n<p>极其接近极点的坐标无法被索引：</p>\n<ul>\n<li>有效经度范围：-180到180；</li>\n<li>有效纬度范围：-85.05112878到85.05112878</li>\n</ul>\n<p>若使用范围之外的经纬度会返回错误；</p>\n<blockquote>\n<p>XX</p>\n</blockquote>\n<p>仅更新已有元素，不添加新元素；</p>\n<blockquote>\n<p>NX</p>\n</blockquote>\n<p>不更新已有元素，只添加新元素；</p>\n<blockquote>\n<p>CH</p>\n</blockquote>\n<p>GEOADD默认返回值为新添加的元素的数量，使用CH之后将返回值改为<strong>改变的元素的数量</strong>，不计入原值和输入值相同的情况。一个双score有序集合可以存储一个52bit的整数且不失精度；</p>\n<p>注意：XX与NX不可一起使用</p>\n<h4 id=\"geopos-获取指定成员经纬度\"><a href=\"#geopos-获取指定成员经纬度\" class=\"headerlink\" title=\"geopos 获取指定成员经纬度\"></a>geopos 获取指定成员经纬度</h4><p><code>GEOPOS key member [member ...]</code></p>\n<p>返回所有指定成员的经度和纬度；</p>\n<p>通过key使用有序集合进行索引；</p>\n<p>由于存储数据时采用geohash方法，获取到的数据可能会出现一些误差；</p>\n<p>若元素不存在则返回一个由null组成的数组；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; geoadd g1 116 40 &quot;BeiJing&quot; 112 37 &quot;TaiYuan&quot;  # 添加TaiYuan和BeiJing的经纬度</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; GEOPOS g1 BeiJing TaiYuan NonExistMember # 查询TaiYuan和BeiJing还有一个没有输入的值的经纬度</span><br><span class=\"line\">1) 1) &quot;116.00000113248825073&quot;</span><br><span class=\"line\">   2) &quot;39.99999991084916218&quot;</span><br><span class=\"line\">2) 1) &quot;112.00000137090682983&quot;</span><br><span class=\"line\">   2) &quot;37.00000026605963654&quot;</span><br><span class=\"line\">3) (nil) # member不存在，返回nil</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"geodist-两个成员的距离\"><a href=\"#geodist-两个成员的距离\" class=\"headerlink\" title=\"geodist 两个成员的距离\"></a>geodist 两个成员的距离</h4><p><code>GEODIST key member1 member2 [M | KM | FT | MI]</code></p>\n<p>返回两个成员之间的距离；</p>\n<p>如果有一个或两个成员不存在，则返回null；</p>\n<p>最后的参数为<strong>单位</strong>，默认为米：</p>\n<ul>\n<li>m 米；</li>\n<li>km 千米；</li>\n<li>mi 英里；</li>\n<li>ft 尺  <del style=\"color:rgba(0,0,0,0.2)\">步数</del></li>\n</ul>\n<p>距离的计算基于假定地球是一个完美的球体，所以计算结果会有0.5%的误差；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; GEOPOS g1 BeiJing TaiYuan</span><br><span class=\"line\">1) 1) &quot;116.00000113248825073&quot;</span><br><span class=\"line\">   2) &quot;39.99999991084916218&quot;</span><br><span class=\"line\">2) 1) &quot;112.00000137090682983&quot;</span><br><span class=\"line\">   2) &quot;37.00000026605963654&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; GEODIST g1 BeiJing TaiYuan m</span><br><span class=\"line\">&quot;482157.6407&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"geohash\"><a href=\"#geohash\" class=\"headerlink\" title=\"geohash\"></a>geohash</h4><p>GEOHASH key member [memebr …]</p>\n<p>返回geohash字符串</p>\n<p>（geohash是一个可以将纬度和精度编码为一个52bit的散列函数）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; GEOHASH g1 BeiJing TaiYuan</span><br><span class=\"line\">1) &quot;wx47x9u8gu0&quot;</span><br><span class=\"line\">2) &quot;wqxdkxeut50&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"geosearch\"><a href=\"#geosearch\" class=\"headerlink\" title=\"geosearch\"></a>geosearch</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GEOSEARCH key </span><br><span class=\"line\">\t&lt;</span><br><span class=\"line\">\t\tFROMMEMBER member | </span><br><span class=\"line\">\t\tFROMLONLAT longitude latitude</span><br><span class=\"line\"><span class=\"meta prompt_\">\t&gt; </span><span class=\"language-bash\"><span class=\"comment\"># 二选一  从成员   从经纬度</span></span></span><br><span class=\"line\">\t&lt;</span><br><span class=\"line\">\t\tBYRADIUS radius &lt;M | KM | FT | MI&gt; | </span><br><span class=\"line\">\t\tBYBOX width height &lt;M | KM | FI | MI&gt;</span><br><span class=\"line\"><span class=\"meta prompt_\">\t&gt; </span><span class=\"language-bash\"><span class=\"comment\"># 通过圆形  通过矩形</span></span></span><br><span class=\"line\">\t[ASC | DESC] </span><br><span class=\"line\">\t[COUNT count [ANY]] </span><br><span class=\"line\">\t[WITHCOORD] </span><br><span class=\"line\">\t[WITHDIST] </span><br><span class=\"line\">\t[WITHHASH]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h5><p>返回给定形状范围内的member列表；</p>\n<p>支持搜索圆形区域和方形取悦；</p>\n<p>命令代替了GEORADIUS和GEORADIUSBYMEMBER；</p>\n<h5 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h5><blockquote>\n<p>形状的中心</p>\n</blockquote>\n<p><strong>FROMMEMBER</strong>：以成员为形状的原点；</p>\n<p><strong>FROMLONLAT</strong>：以指定经纬度为形状的原点；</p>\n<blockquote>\n<p>形状的参数</p>\n</blockquote>\n<p><strong>BYRADIUS</strong>：形状为圆形，根据给定radius参数为圆形的半径</p>\n<p><strong>BYBOX</strong>：形状为矩形，根据给定的width和height为形状的长宽；</p>\n<blockquote>\n<p>需要返回对象的其他参数</p>\n</blockquote>\n<p><strong>WITHDIST</strong>：返回原点到各个成员的距离；</p>\n<p><strong>WITHCOORD</strong>：返回成员的经纬度；</p>\n<p><strong>WITHHASH</strong>：返回成员的GEOHASH值。</p>\n<blockquote>\n<p>是否排序</p>\n</blockquote>\n<p>若未指定以下两个参数，则默认不排序；</p>\n<p><strong>ASC</strong>：排序顺序为距离原点，最近的元素到最远的元素；</p>\n<p><strong>DESC</strong>：距离原点，最远的元素到最近的元素；</p>\n<blockquote>\n<p>返回数量</p>\n</blockquote>\n<p><code>COUNT &lt;count&gt; [ANY]</code></p>\n<p>默认返回所有的元素；</p>\n<p>通过<code>COUNT &lt;count&gt;</code>参数可以限制返回的数量；</p>\n<p>若提供ANY，Redis查询过程会在查到指定数量的结果后直接返回不排序，且不考虑远近问题；</p>\n<p>若不提供ANY，Redis会返回排序后的所有结果。不提供ANY时，命令执行的速度会相对慢一点；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; GEODIST g1 BeiJing TaiYuan m # 查询得知，TaiYuan到BeiJing的距离为482157m，换算48.22km</span><br><span class=\"line\">&quot;482157.6407&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; GEOSEARCH g1 FROMMEMBER TaiYuan BYRADIUS 500 KM ASC COUNT 2 WITHCOORD WITHDIST WITHHASH</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">查询g1中 以TaiYuan为圆心，半径为500KM，两个对象， 要求返回结果中有距离圆心的距离、对象的经纬度还有对象的GEOHASH</span></span><br><span class=\"line\">1) 1) &quot;TaiYuan&quot;</span><br><span class=\"line\">   2) &quot;0.0000&quot;</span><br><span class=\"line\">   3) (integer) 4041790908459398</span><br><span class=\"line\">   4) 1) &quot;112.00000137090682983&quot;</span><br><span class=\"line\">      2) &quot;37.00000026605963654&quot;</span><br><span class=\"line\">2) 1) &quot;BeiJing&quot;</span><br><span class=\"line\">   2) &quot;482.1576&quot;</span><br><span class=\"line\">   3) (integer) 4069855081124858</span><br><span class=\"line\">   4) 1) &quot;116.00000113248825073&quot;</span><br><span class=\"line\">      2) &quot;39.99999991084916218&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"geosearchstore\"><a href=\"#geosearchstore\" class=\"headerlink\" title=\"geosearchstore\"></a>geosearchstore</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GEOSEARCHSTORE destination source</span><br><span class=\"line\">\t&lt;</span><br><span class=\"line\">\t\tFROMMEMBER member |  # 原点为对象</span><br><span class=\"line\">\t\tFROMLONLAT logitude latitude  # 原点为经纬度</span><br><span class=\"line\">    &gt;</span><br><span class=\"line\">    &lt;</span><br><span class=\"line\">    \tBYRADIUS radius &lt;M | KM | FT |MI&gt; | # 圆，半径，单位</span><br><span class=\"line\">    \tBYBOX width height &lt;M | KM | FT | MI&gt; # 矩形，宽，高，单位</span><br><span class=\"line\">   \t&gt;</span><br><span class=\"line\">   \t[ASC | DESC] # 从近到远 从远到近</span><br><span class=\"line\">   \t[COUNT count [ANY]] # 数量  ANY任意对象</span><br><span class=\"line\">   \t[STOREDIST] # </span><br></pre></td></tr></table></figure>\n\n<p>与GEOSEARCH类似；</p>\n<p>不同的是，GEOSEARCHSTORE会将获得的结果存放到destination中；</p>\n<p>默认将<strong>获得的对象以及其GEOHASH</strong>以SortedSet方式存放；</p>\n<p>使用STOREDIST参数后，存放内容为<strong>获得的对象和距离原点的距离</strong>。</p>\n<p>STOREDIST，</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; GEOSEARCHSTORE ss1 g1 FROMMEMBER BeiJing BYRADIUS 500 KM ASC COUNT 2 ANY</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; GEOSEARCHSTORE ss2 g1 FROMMEMBER BeiJing BYRADIUS 500 KM ASC COUNT 2 ANY STOREDIST</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss1 0 -1 WITHSCORES</span><br><span class=\"line\">1) &quot;TaiYuan&quot;</span><br><span class=\"line\">2) &quot;4041790908459398&quot;</span><br><span class=\"line\">3) &quot;BeiJing&quot;</span><br><span class=\"line\">4) &quot;4069855081124858&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss2 0 -1 WITHSCORES</span><br><span class=\"line\">1) &quot;BeiJing&quot;</span><br><span class=\"line\">2) &quot;0&quot;</span><br><span class=\"line\">3) &quot;TaiYuan&quot;</span><br><span class=\"line\">4) &quot;482.15764068388631&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"georadius-通过半径获取附近的人的地址（弃用）\"><a href=\"#georadius-通过半径获取附近的人的地址（弃用）\" class=\"headerlink\" title=\"georadius 通过半径获取附近的人的地址（弃用）\"></a>georadius 通过半径获取附近的人的地址（弃用）</h4><p><code>GEORADIUS key longitud latitude raduis &lt;M | KM | FI | MI&gt; [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC] [STORE key] [STOREDIST key]</code></p>\n<h4 id=\"georadiusbymember-通过半径获取成员附近的地址（弃用）\"><a href=\"#georadiusbymember-通过半径获取成员附近的地址（弃用）\" class=\"headerlink\" title=\"georadiusbymember 通过半径获取成员附近的地址（弃用）\"></a>georadiusbymember 通过半径获取成员附近的地址（弃用）</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GEORADIUSBYMEMBER key member radius &lt;M | KM | FT | MI&gt; [WITHCOORD]</span><br><span class=\"line\">  [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC] [STORE key]</span><br><span class=\"line\">  [STOREDIST key]</span><br></pre></td></tr></table></figure>\n\n<h4 id><a href=\"#\" class=\"headerlink\" title></a></h4>","categories":[],"tags":["Redis"]},{"title":"Redis 4 Stream","url":"http://zswh33.github.io/2022/09/21/Redis-4/","content":"<h1 id=\"Stream\"><a href=\"#Stream\" class=\"headerlink\" title=\"Stream\"></a>Stream</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><a href=\"https://redis.io/docs/data-types/streams-tutorial/\">https://redis.io/docs/data-types/streams-tutorial/</a></p>\n<h3 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明\"></a>说明</h3><p>Stream是一个只能添加数据的数据结构；依赖于添加命令XADD，Stream可以添加新的entry到指定流；</p>\n<p>每个Stream Entry都是一个field-value；</p>\n<h3 id=\"示例1：XADD使用\"><a href=\"#示例1：XADD使用\" class=\"headerlink\" title=\"示例1：XADD使用\"></a>示例1：XADD使用</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; XADD myStream * sensor-id 12 temperature 11.1</span><br><span class=\"line\">&quot;1663848814626-0&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的命令中，</p>\n<ul>\n<li>XADD为myStream添加了{sensor-id:12, temperature:11.1}属性；</li>\n<li>第一个参数myStream为指定的key的名字；</li>\n<li>第二个参数是一个ID，每个entry都有一个ID；这里使用“*”，意为让服务器自动生成一个ID；</li>\n<li>服务器生成的ID会依据生成先后自动增加；</li>\n<li>大多数情况下都使用服务器自动生成的结果作为ID，无需手动提供ID；</li>\n<li>后面的参数即field-value，用于提供要保存的键值对。</li>\n</ul>\n<h3 id=\"示例2：XLEN\"><a href=\"#示例2：XLEN\" class=\"headerlink\" title=\"示例2：XLEN\"></a>示例2：XLEN</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; XLEN myStream</span><br><span class=\"line\">(integer) 1</span><br></pre></td></tr></table></figure>\n\n<p>XLEN可以获取流的长度。</p>\n<h3 id=\"Entry-ID介绍\"><a href=\"#Entry-ID介绍\" class=\"headerlink\" title=\"Entry ID介绍\"></a>Entry ID介绍</h3><p>Entry ID的格式如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;millisecondsTime&gt;-&lt;sequenceNumber&gt;</span><br></pre></td></tr></table></figure>\n\n<p>millisecondsTime即当前本地的时间；</p>\n<p>Entry ID都是逐步递增的，如果<strong>Redis获取的时间</strong>在<strong>上个提交的Entry时间</strong>之前，Redis将使用最新的进行记录（即<strong>上个提交的Entry时间</strong>）；</p>\n<p><del>为什么用时间作为ID？</del>。（从文档翻译）用时间作为ID可能会很奇怪，有些读者可能想知道问什么这样做。原因是Redis支持依据ID值的范围进行查询Entry，如果将时间作为ID，就可以很方便地依据时间去查询Entry。（e…Long型的时间好像也不方便…）</p>\n<p>Entry最小的ID是0-1，Redis不允许ID小于上一次添加的Entry的ID；</p>\n<h3 id=\"示例3：ID可以仅提供milliseconds部分，由系统去生成后半部分\"><a href=\"#示例3：ID可以仅提供milliseconds部分，由系统去生成后半部分\" class=\"headerlink\" title=\"示例3：ID可以仅提供milliseconds部分，由系统去生成后半部分\"></a>示例3：ID可以仅提供milliseconds部分，由系统去生成后半部分</h3><p>如果用的Redis版本是7或以上，可以提供ID的前半部分，后半部分使用*代替，Redis会自动生成后半部分且逐次递增；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; XADD s5 0-* apple 1</span><br><span class=\"line\">&quot;0-1&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; XADD s5 0-* apple 2</span><br><span class=\"line\">&quot;0-2&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; XADD s5 0-* apple 3</span><br><span class=\"line\">&quot;0-3&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例4：查询的操作\"><a href=\"#示例4：查询的操作\" class=\"headerlink\" title=\"示例4：查询的操作\"></a>示例4：查询的操作</h3><h4 id=\"可以用时间范围去查询Entry\"><a href=\"#可以用时间范围去查询Entry\" class=\"headerlink\" title=\"可以用时间范围去查询Entry\"></a>可以用时间范围去查询Entry</h4><p>只需要指定两个ID来表示起点和终点，就可以查询一个流；</p>\n<p>两个特殊的参数“-”和“+”分别表示最小ID和最大ID。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; XADD s5 0-* apple 1</span><br><span class=\"line\">&quot;0-1&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; XADD s5 0-* apple 2</span><br><span class=\"line\">&quot;0-2&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; XADD s5 0-* apple 3</span><br><span class=\"line\">&quot;0-3&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xrange s5 - +</span><br><span class=\"line\">1) 1) &quot;0-1&quot;</span><br><span class=\"line\">   2) 1) &quot;apple&quot;</span><br><span class=\"line\">      2) &quot;1&quot;</span><br><span class=\"line\">2) 1) &quot;0-2&quot;</span><br><span class=\"line\">   2) 1) &quot;apple&quot;</span><br><span class=\"line\">      2) &quot;2&quot;</span><br><span class=\"line\">3) 1) &quot;0-3&quot;</span><br><span class=\"line\">   2) 1) &quot;apple&quot;</span><br><span class=\"line\">      2) &quot;3&quot;</span><br></pre></td></tr></table></figure>\n\n<p>每个entry返回一个含有field-value的数组；</p>\n<p>在XADD指定ID时使用*，则ID的左半部分表示当时的时间，这将意味着我们可以使用XRANGE去查询一个时间范围内的所有Entry；</p>\n<p>因为使用毫秒时间作为ID的左半部分，所以XRANGE查询的时间甚至可以精确到毫秒；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; xadd s6 * apple 1</span><br><span class=\"line\">&quot;1663850754240-0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xadd s6 * apple 2</span><br><span class=\"line\">&quot;1663850755536-0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xadd s6 * apple 3</span><br><span class=\"line\">&quot;1663850756295-0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xrange s6 1663850754240 1663850754241 # 查询1毫秒间的日志</span><br><span class=\"line\">1) 1) &quot;1663850754240-0&quot;</span><br><span class=\"line\">   2) 1) &quot;apple&quot;</span><br><span class=\"line\">      2) &quot;1&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"XRANGE可以限制查询数量\"><a href=\"#XRANGE可以限制查询数量\" class=\"headerlink\" title=\"XRANGE可以限制查询数量\"></a>XRANGE可以限制查询数量</h4><p>有时候，在有些范围内，可能会有特别多的Entry，这样查询起来可能会麻烦；</p>\n<p>使用XRANGE的COUNT参数可以限制查询的数量；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; xadd s6 * apple 1</span><br><span class=\"line\">&quot;1663850754240-0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xadd s6 * apple 2</span><br><span class=\"line\">&quot;1663850755536-0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xadd s6 * apple 3</span><br><span class=\"line\">&quot;1663850756295-0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xrange s6 - + COUNT 2</span><br><span class=\"line\">1) 1) &quot;1663850754240-0&quot;</span><br><span class=\"line\">   2) 1) &quot;apple&quot;</span><br><span class=\"line\">      2) &quot;1&quot;</span><br><span class=\"line\">2) 1) &quot;1663850755536-0&quot;</span><br><span class=\"line\">   2) 1) &quot;apple&quot;</span><br><span class=\"line\">      2) &quot;2&quot;</span><br></pre></td></tr></table></figure>\n\n<p>XRANGE可以查询接下来的两个Entry；</p>\n<p>将查询结果的最后一个ID作为查询的起点，使用“(”前缀，可以查询接下来的两个Entry；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; xrange s6 (1663850755536-0 + COUNT 2</span><br><span class=\"line\">1) 1) &quot;1663850756295-0&quot;</span><br><span class=\"line\">   2) 1) &quot;apple&quot;</span><br><span class=\"line\">      2) &quot;3&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">左括号表示不包含当前项</span>   </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">+表示最高ID</span>  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">COUNT 2 表示查询两个Entry</span></span><br></pre></td></tr></table></figure>\n\n<p>XRANGE的复杂度是O(log(N))，返回M个元素则另外包含O(M)，复杂度是对数，这样效率是比较高的，所以可以代替XSCAN；</p>\n<h4 id=\"XREVRANGE\"><a href=\"#XREVRANGE\" class=\"headerlink\" title=\"XREVRANGE\"></a>XREVRANGE</h4><p>XREVRANGE等效于XRANGE，不同的是XREVRANGE的顺序是相反的；</p>\n<p>通过XREVRANGE获取最新的Entry：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; xrevrange s6 + - COUNT 1</span><br><span class=\"line\">1) 1) &quot;1663850756295-0&quot;</span><br><span class=\"line\">   2) 1) &quot;apple&quot;</span><br><span class=\"line\">      2) &quot;3&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例5：XREAD-监听新元素的添加\"><a href=\"#示例5：XREAD-监听新元素的添加\" class=\"headerlink\" title=\"示例5：XREAD 监听新元素的添加\"></a>示例5：XREAD 监听新元素的添加</h3><p>有时候我们可能不需要通过一个返回从流中获取数据，仅仅只是想获取流中新抵达的元素（订阅流中新抵达的元素）；</p>\n<p>这就是Redis的发布&#x2F;订阅；</p>\n<h4 id=\"阻塞队列与Stream是不同的\"><a href=\"#阻塞队列与Stream是不同的\" class=\"headerlink\" title=\"阻塞队列与Stream是不同的\"></a>阻塞队列与Stream是不同的</h4><ol>\n<li>Stream收到的新的元素，会平等的发送到每个等待的消费者；而在阻塞队列中，消费者获取到的元素是不同的；</li>\n<li>Stream会将收到的元素无限期地存储在流中（除非用户指定），而阻塞队列在pop后会将元素删除；</li>\n<li>Streams Consumer Groups提供了Pub&#x2F;Sub的控制级别功能；每个消费者会被手动地分配到不同组，对于不同组，则有不同的访问范围；StreamsConsumerGroups能够记录项目是否被完成，同时记录消费者处理事务的历史，对于每个消费者，只能获取到自己处理的事务；</li>\n</ol>\n<p>对于消费者，使用XREAD来监听流的新到元素；</p>\n<h4 id=\"通过XREAD获取流中的最新数据\"><a href=\"#通过XREAD获取流中的最新数据\" class=\"headerlink\" title=\"通过XREAD获取流中的最新数据\"></a>通过XREAD获取流中的最新数据</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; XREAD COUNT 2 STREAMS s6 0</span><br><span class=\"line\">1) 1) &quot;s6&quot;</span><br><span class=\"line\">   2) 1) 1) &quot;1663850754240-0&quot;</span><br><span class=\"line\">         2) 1) &quot;apple&quot;</span><br><span class=\"line\">            2) &quot;1&quot;</span><br><span class=\"line\">      2) 1) &quot;1663850755536-0&quot;</span><br><span class=\"line\">         2) 1) &quot;apple&quot;</span><br><span class=\"line\">            2) &quot;2&quot;</span><br></pre></td></tr></table></figure>\n\n<p>其中，STREAMS是必要参数，用于指定key和一个ID；</p>\n<p>Redis会返回流中大于指定ID的entry；</p>\n<p>STREAMS参数后面可以跟多个key，key后面根同等数量的ID，如：STREAMS s1 s2 0 0；因此STREAMS参数必须放在命令的最后面；</p>\n<h4 id=\"XREAD可以阻塞网络直到有新的entry被添加\"><a href=\"#XREAD可以阻塞网络直到有新的entry被添加\" class=\"headerlink\" title=\"XREAD可以阻塞网络直到有新的entry被添加\"></a>XREAD可以阻塞网络直到有新的entry被添加</h4><p>添加一个BLOCK参数就可以阻塞网络直到获取到新的被添加entry；</p>\n<p>BLOCK后面根超时时间，0表示无限等待；</p>\n<p>使用“$”表示流内最新的Entry的ID；</p>\n<p><img src=\"/2022/09/21/Redis-4/image-20220922212844763.png\" alt=\"image-20220922212844763\"></p>\n<p>在示例中：</p>\n<ul>\n<li>XREAD被阻塞<ul>\n<li>0表示无限期等待</li>\n<li>STREAMS用于指定key和ID；</li>\n<li>$表示s6下最新的ID</li>\n</ul>\n</li>\n<li>当XADD执行结束后，XREAD阻塞取消，返回新添加的值；</li>\n</ul>\n<p>XREAD BLOCK 可以不使用$作为id；</p>\n<p>在此模式下，STREAMS可以提供多个key和ID，此时如果其中一个流添加了新的数据，将从该流读取出现的新数据并返回。</p>\n<p>XREAD不会删除数据，仅仅只是读取数据。</p>\n<h2 id=\"使用示例\"><a href=\"#使用示例\" class=\"headerlink\" title=\"使用示例\"></a>使用示例</h2><p>添加几个温度记录到Stream</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; xadd temperatures:table:1001 apple 23.2 bread 18.2 milk 11.2 # 苹果23.2 面包18.2 牛奶11.2 一般这里表示硬件温度；</span><br><span class=\"line\">(error) ERR Invalid stream ID specified as stream command argument</span><br><span class=\"line\">127.0.0.1:6379&gt; xadd temperatures:table:1001 * apple 23.2 bread 18.2 milk 11.2</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;1663773543545-0&quot;  # 返回的streamID</span><br><span class=\"line\">127.0.0.1:6379&gt; xadd temperatures:table:1001 * apple 24.1 bread 14.7 milk 12.3</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;1663773560847-0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xadd temperatures:table:1001 * apple 21.1 bread 12.7 milk 15.3</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;1663773569889-0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xrange temperatures:table:1001 1663773543545-0 + COUNT 3 #查询</span><br><span class=\"line\">1) 1) &quot;1663773543545-0&quot;</span><br><span class=\"line\">   2) 1) &quot;apple&quot;</span><br><span class=\"line\">      2) &quot;23.2&quot;</span><br><span class=\"line\">      3) &quot;bread&quot;</span><br><span class=\"line\">      4) &quot;18.2&quot;</span><br><span class=\"line\">      5) &quot;milk&quot;</span><br><span class=\"line\">      6) &quot;11.2&quot;</span><br><span class=\"line\">2) 1) &quot;1663773560847-0&quot;</span><br><span class=\"line\">   2) 1) &quot;apple&quot;</span><br><span class=\"line\">      2) &quot;24.1&quot;</span><br><span class=\"line\">      3) &quot;bread&quot;</span><br><span class=\"line\">      4) &quot;14.7&quot;</span><br><span class=\"line\">      5) &quot;milk&quot;</span><br><span class=\"line\">      6) &quot;12.3&quot;</span><br><span class=\"line\">3) 1) &quot;1663773569889-0&quot;</span><br><span class=\"line\">   2) 1) &quot;apple&quot;</span><br><span class=\"line\">      2) &quot;21.1&quot;</span><br><span class=\"line\">      3) &quot;bread&quot;</span><br><span class=\"line\">      4) &quot;12.7&quot;</span><br><span class=\"line\">      5) &quot;milk&quot;</span><br><span class=\"line\">      6) &quot;15.3&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在流的尾部，读取100个新的stream entries，如果没有entries被写入则阻塞等待300ms；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">XREAD COUNT 100 BLOCK 300 STREAMS temperatures:table $</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h2><p>XADD：添加一个新的entry到stream；</p>\n<p>XREAD：在给定的位置开始并向前读取，读取一个或多个entries；</p>\n<p>XRANGE：返回给定两个ID指向的entry之间的entry；</p>\n<p>XLEN：返回流的长度；</p>\n<h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><p>添加entry到stream是O(1)；</p>\n<p>访问任意单个entry是O(n)，n为ID的length；</p>\n<h2 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h2><table>\n<thead>\n<tr>\n<th>增</th>\n<th>删</th>\n<th>查</th>\n<th>赋权</th>\n<th>XGROUP</th>\n<th>XINFO</th>\n<th>整理</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>XADD</td>\n<td>XACK</td>\n<td>XLEN</td>\n<td>XAUTOCLAIM</td>\n<td>CREATE</td>\n<td>COMSUMERS</td>\n<td>XTRIM</td>\n</tr>\n<tr>\n<td></td>\n<td>XDEL</td>\n<td>XPENDING</td>\n<td>XCLAIM</td>\n<td>CREATECONSUMER</td>\n<td>GROUPS</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>XRANGE</td>\n<td></td>\n<td>DELCONSUMER</td>\n<td>STREAM</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>XREVRANGE</td>\n<td></td>\n<td>DESTROY</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>XREAD</td>\n<td></td>\n<td>SETID</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>XREADGROUP</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"TRIM-整理-x2F-修剪\"><a href=\"#TRIM-整理-x2F-修剪\" class=\"headerlink\" title=\"TRIM 整理&#x2F;修剪\"></a>TRIM 整理&#x2F;修剪</h3><p><code>TRIM key &lt;MAXLEN | MINID&gt; [= | ~] threshold [LIMIT count]</code></p>\n<p>TRIM可以使流在需要时移除旧的entries；</p>\n<h4 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li><p><strong>MAXLEN</strong>：指定流要控制的长度，这样做会移除旧的entries直到流的长度控制为指定长度，长度必须为整数；（在文档里，这里用threshold来表示需要控制的长度）</p>\n</li>\n<li><p><strong>MINID</strong>：移除id低于threshold的entries；</p>\n</li>\n<li><p>**~**：仅在使用MAXLEN时使用。使用参数后，Redis可能不会准确地将entries数量修剪到指定长度，而是比指定长度多一点或等于指定长度；</p>\n<ul>\n<li>使用~后，Redis会尽早的停止修剪，以促进性能节约；</li>\n<li>有时候，用户并非需要精确地将流裁剪为指定长度，可以有些误差，但不能少于指定值，使用“~”后，可以达到要求的同时提高性能。</li>\n</ul>\n</li>\n<li><p><strong>LIMIT</strong>：限制TRIM移除的entries最大大小；</p>\n<ul>\n<li>有时候，如果需要修剪entries过多，可能会影响性能，通过LIMIT限制本次操作要清理的entries数量，可以尽快地结束操作进行；</li>\n<li>若没有指定LIMIT参数，将以<strong>entries的数量x100</strong>作为count值；</li>\n<li>指定count&#x3D;0，可以禁止移除数量限制。</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h4><p>被移除的entries数量。</p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><h5 id=\"修剪流使流达到指定长度\"><a href=\"#修剪流使流达到指定长度\" class=\"headerlink\" title=\"修剪流使流达到指定长度\"></a>修剪流使流达到指定长度</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; xtrim s MAXLEN 1000 # 这里指定长度为1000</span><br><span class=\"line\">(integer) 0</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"移除ID小于指定值的entries\"><a href=\"#移除ID小于指定值的entries\" class=\"headerlink\" title=\"移除ID小于指定值的entries\"></a>移除ID小于指定值的entries</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; xadd s * a 2 b 3  # a=2 b=3</span><br><span class=\"line\">&quot;1663845075734-0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xadd s * a 12 b 123 # a=12 b=123</span><br><span class=\"line\">&quot;1663845081393-0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xtrim s MINID 1663845075735 # 修剪1663845075735，这个值比上面第一个大1.</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; xrange s 1663845075734-0 + COUNT 3 #输出从1663845075734开始往后数3个</span><br><span class=\"line\">1) 1) &quot;1663845081393-0&quot;</span><br><span class=\"line\">   2) 1) &quot;a&quot;</span><br><span class=\"line\">      2) &quot;12&quot;</span><br><span class=\"line\">      3) &quot;b&quot;</span><br><span class=\"line\">      4) &quot;123&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"增\"></a>增</h3><h4 id=\"XADD-增加entry到流\"><a href=\"#XADD-增加entry到流\" class=\"headerlink\" title=\"XADD 增加entry到流\"></a>XADD 增加entry到流</h4><p><code>XADD key [NOMKSTREAM] [&lt;MAXLEN | MINID&gt;] [= | ~] threshold [LIMIT count]] &lt;* | id&gt; field value [field value ...]</code></p>\n<p>添加entry到指定流；</p>\n<p>一个entry由一个键值对组成；</p>\n<p>XRANGE和XREAD可以用来从流中读取数据；</p>\n<p>XADD可以向流中添加数据；</p>\n<p>XDEL和XTRIM可以从流中删除数据。</p>\n<h5 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h5><h6 id=\"使用参数指定Stream-ID\"><a href=\"#使用参数指定Stream-ID\" class=\"headerlink\" title=\"使用参数指定Stream ID\"></a>使用参数指定Stream ID</h6><p>如果使用“*”指定ID，XADD命令将为流自动生成唯一的Stream ID；</p>\n<p>ID一般由Redis生成，但也可以自己手动指定ID：</p>\n<ul>\n<li>ID的格式为：123456789-33</li>\n<li>两个数字都是64bit的数字，ID生成过程中，第一个数字使用Unix时间生成，第二部分是一个序列号，用于区分在同一时间生成的不同数据；</li>\n<li>可以手动指定一个不完整的id，如：123456789-*。用*表示的第二部分将由Redis去生成；</li>\n<li>ID保证生成过程是递增的；若在某次插入过程中，指定的ID比之前大得多，在后来的插入过程，将按照这个指定的ID继续进行递增；</li>\n</ul>\n<h6 id=\"限制流的大小\"><a href=\"#限制流的大小\" class=\"headerlink\" title=\"限制流的大小\"></a>限制流的大小</h6><p>若流的内容条数等于指定的允许大小（也就是满了），在新添加内容时，XADD将最旧的条目逐出流，然后将新的条目添加进去；</p>\n<p><code>[&lt;MAXLEN | MINID&gt;] [= | ~] threshold [LIMIT count]]</code>的用法详见<strong>XTRIM</strong>。</p>\n<h5 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h5><p><strong>NOMKSTREAM</strong>：若key不存在，不创建新的对象；</p>\n<h3 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"删\"></a>删</h3><h4 id=\"XDEL\"><a href=\"#XDEL\" class=\"headerlink\" title=\"XDEL\"></a>XDEL</h4><p><code>XDEL key id [id ...]</code></p>\n<p>从流中移除指定的entry，返回被移除的entry的数量；</p>\n<h5 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h5><p>XDEL并非真正地将entry从radix tree中移除，仅仅只是将entry标注为被删除；</p>\n<p>如果一个宏节点中所有的entry被删除，整个节点会被销毁，内存将会被回收；</p>\n<p>对于流来说，为保持流的性能，XDEL仅仅只是将entry标注为deleted，因此会产生大量的碎片，这是一个较为严重的问题；</p>\n<p>在未来的版本中，Redis可能会添加垃圾回收机制去清理被删除的节点，但是这样会增加复杂度，这不是一个好主意（<strong>即有内存碎片，但是目前不打算解决</strong>）</p>\n<h5 id=\"使用-2\"><a href=\"#使用-2\" class=\"headerlink\" title=\"使用\"></a>使用</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; xadd s3 * apple 1 cat 2</span><br><span class=\"line\">&quot;1663847348847-0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xadd s3 * apple 12 cat 22</span><br><span class=\"line\">&quot;1663847354912-0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xdel s3 1663847348847-0</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; xrange s3 1663847348847-0 + COUNT 10</span><br><span class=\"line\">1) 1) &quot;1663847354912-0&quot;</span><br><span class=\"line\">   2) 1) &quot;apple&quot;</span><br><span class=\"line\">      2) &quot;12&quot;</span><br><span class=\"line\">      3) &quot;cat&quot;</span><br><span class=\"line\">      4) &quot;22&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查\"><a href=\"#查\" class=\"headerlink\" title=\"查\"></a>查</h3><h4 id=\"XREAD\"><a href=\"#XREAD\" class=\"headerlink\" title=\"XREAD\"></a>XREAD</h4><p><code>XREAD [COUNT count] [BLOCK milliseconds]  STREAMS key [key ...] id [id ...]</code></p>\n<p>读取一个或多个流，只返回带有id或大于id的数据表；</p>\n<p>参数：</p>\n<p>COUNT：数量</p>\n<p>BLOCK：若当前没有数据则阻塞，直到有新的数据输入，0表示无限期阻塞等待，非0表示超时等待；</p>\n<p>STREAMS：可以提供多个流和id，将从多个流中读取数据；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; xadd stream001 * apple 3 stone 5  # 插入一个数据</span><br><span class=\"line\">&quot;1664182678233-0&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; xread COUNT 1 STREAMS stream001 0-0  # 查询一个数据</span><br><span class=\"line\">1) 1) &quot;stream001&quot;</span><br><span class=\"line\">   2) 1) 1) &quot;1664182678233-0&quot;</span><br><span class=\"line\">         2) 1) &quot;apple&quot;</span><br><span class=\"line\">            2) &quot;3&quot;</span><br><span class=\"line\">            3) &quot;stone&quot;</span><br><span class=\"line\">            4) &quot;5&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内部命令\"><a href=\"#内部命令\" class=\"headerlink\" title=\"内部命令\"></a>内部命令</h3><blockquote>\n<p>XSETID</p>\n</blockquote>\n<p>XSETID key last-id [ENTRIESADDED entries_added] [MAXDELETEDID max_deleted_entry_id]</p>\n<p>用于让Redis复制最后交付的流的ID；</p>\n<p>RPC</p>\n","categories":[],"tags":["Redis"]},{"title":"Redis 3 Hash SortedSet","url":"http://zswh33.github.io/2022/09/21/Redis-3/","content":"<h1 id=\"Hash\"><a href=\"#Hash\" class=\"headerlink\" title=\"Hash\"></a>Hash</h1><p>Hash用于存储field和value的映射表，适用于存储对象。</p>\n<p>每个hash中可以存储2^32-1个field-value pair；</p>\n<h2 id=\"使用-x2F-场景\"><a href=\"#使用-x2F-场景\" class=\"headerlink\" title=\"使用&#x2F;场景\"></a>使用&#x2F;场景</h2><h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><p><strong>缓存</strong>：更直观地维护缓存信息，如用户信息、饰品信息；</p>\n<h3 id=\"例子：存储用户的属性\"><a href=\"#例子：存储用户的属性\" class=\"headerlink\" title=\"例子：存储用户的属性\"></a>例子：存储用户的属性</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hset user:001 username ZhangSan firstName San lastName zhang age 21  # 在user:001中存储键值对 </span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">其中分别为 username:ZhangSan  firstName:San lastName:zhang age:21</span></span><br><span class=\"line\">(integer) 4  # 返回field value对的数量</span><br><span class=\"line\">127.0.0.1:6379&gt; hget user:001 username  # 查询user:001的username</span><br><span class=\"line\">&quot;ZhangSan&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall user:001  # 获取user:001的所有 field-value pair</span><br><span class=\"line\">1) &quot;username&quot;</span><br><span class=\"line\">2) &quot;ZhangSan&quot;</span><br><span class=\"line\">3) &quot;firstName&quot;</span><br><span class=\"line\">4) &quot;San&quot;</span><br><span class=\"line\">5) &quot;lastName&quot;</span><br><span class=\"line\">6) &quot;zhang&quot;</span><br><span class=\"line\">7) &quot;age&quot;</span><br><span class=\"line\">8) &quot;21&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"例子：存储设备的访问状态\"><a href=\"#例子：存储设备的访问状态\" class=\"headerlink\" title=\"例子：存储设备的访问状态\"></a>例子：存储设备的访问状态</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hincrby device:2:stats pings 1  # device:2:stats的pings加一</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hincrby device:2:stats pings 1</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; hincrby device:2:stats pings 1</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; hincrby device:2:stats requests 1  # device:2:stats的requests加一</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hincrby device:2:stats errors 1  # device:2:stats的errors加一</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hget device:2:stats pings # 获取device:2:stats的pings</span><br><span class=\"line\">&quot;3&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget device:2:stats requests errors  # 获取device:2:stats的requests和errors</span><br><span class=\"line\">1) &quot;1&quot;</span><br><span class=\"line\">2) &quot;1&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基础命令\"><a href=\"#基础命令\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h2><p><strong>hset</strong>：hash设置值；</p>\n<p><strong>hget</strong>：hash获取值；</p>\n<p><strong>hmget</strong>：hash获取多个值；</p>\n<p><strong>hincrby</strong>：若value可以为整数，则增加value的值。</p>\n<h2 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h2><table>\n<thead>\n<tr>\n<th>增</th>\n<th>删</th>\n<th>查</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>HSET</td>\n<td>HDEL</td>\n<td>HGET</td>\n</tr>\n<tr>\n<td>HSETNX</td>\n<td></td>\n<td>HMGET</td>\n</tr>\n<tr>\n<td>HINCRBY</td>\n<td></td>\n<td>HEXISTS</td>\n</tr>\n<tr>\n<td>HINCRBYFLOAT</td>\n<td></td>\n<td>HLEN</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>HSTRLEN</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>HRANDFIELD</td>\n</tr>\n</tbody></table>\n<h3 id=\"HSET-设置值-可以多个\"><a href=\"#HSET-设置值-可以多个\" class=\"headerlink\" title=\"HSET 设置值 可以多个\"></a>HSET 设置值 可以多个</h3><p><code>hset key field value [field value ...]</code></p>\n<p>设置hash的多个field-value对；</p>\n<p>返回添加的field-value对数量。</p>\n<h3 id=\"HSETNX-当field不存在则设置值\"><a href=\"#HSETNX-当field不存在则设置值\" class=\"headerlink\" title=\"HSETNX 当field不存在则设置值\"></a>HSETNX 当field不存在则设置值</h3><p><code>hsetnx key field value</code></p>\n<p>当集合中没有指定field时，为集合添加field-value对；若集合中存在指定field，则不进行操作；</p>\n<p>若key对应的set不存在，则创建一个集合；</p>\n<p>返回值：</p>\n<ul>\n<li>若成功添加返回1；</li>\n<li>若field已存在，操作没有执行，返回0。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hsetnx user:1 age 3</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hsetnx user:1 age 5</span><br><span class=\"line\">(integer) 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HGET-获得field的value\"><a href=\"#HGET-获得field的value\" class=\"headerlink\" title=\"HGET 获得field的value\"></a>HGET 获得field的value</h3><p><code>hget key field</code></p>\n<p>获取集合中field对应的值；</p>\n<p>若集合中没有field或集合不存在则返回nil；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hsetnx user:1 age 3  # 设置user:1的age的值为3</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hget user:1 age  # 获取user:1的age值</span><br><span class=\"line\">&quot;3&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HMGET-获取field的value-可以多个\"><a href=\"#HMGET-获取field的value-可以多个\" class=\"headerlink\" title=\"HMGET 获取field的value 可以多个\"></a>HMGET 获取field的value 可以多个</h3><p><code>hmget key field [field ...]</code></p>\n<p>获取集合中field对应的value。</p>\n<p>返回一个数组，包含每个field对应的value；</p>\n<p>若field不存在，则为nil；</p>\n<p>若key不存在，视作空hash，将返回一个值为nil的数组；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hset user:3 name zhangsan age 12 psw 1234565</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget user:3 name age pass</span><br><span class=\"line\">1) &quot;zhangsan&quot;</span><br><span class=\"line\">2) &quot;12&quot;</span><br><span class=\"line\">3) (nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; hmget user:4 name age</span><br><span class=\"line\">1) (nil)</span><br><span class=\"line\">2) (nil)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HGETALL-获得所有field-value\"><a href=\"#HGETALL-获得所有field-value\" class=\"headerlink\" title=\"HGETALL 获得所有field-value\"></a>HGETALL 获得所有field-value</h3><p><code>hgetall key</code></p>\n<p>获取集合中所有的field-value对；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hset user:2 name ZhangSan age 12 psw 123456</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall user:2</span><br><span class=\"line\">1) &quot;name&quot;</span><br><span class=\"line\">2) &quot;ZhangSan&quot;</span><br><span class=\"line\">3) &quot;age&quot;</span><br><span class=\"line\">4) &quot;12&quot;</span><br><span class=\"line\">5) &quot;psw&quot;</span><br><span class=\"line\">6) &quot;123456&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"HDEL-删除field-可以多个\"><a href=\"#HDEL-删除field-可以多个\" class=\"headerlink\" title=\"HDEL 删除field 可以多个\"></a>HDEL 删除field 可以多个</h3><p><code>hdel key field [field ...]</code></p>\n<p>删除集合中的field-value 对；</p>\n<p>返回成功删除的field的数量；</p>\n<p>若key不存在，则返回0；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hgetall user:2</span><br><span class=\"line\">1) &quot;name&quot;</span><br><span class=\"line\">2) &quot;ZhangSan&quot;</span><br><span class=\"line\">3) &quot;age&quot;</span><br><span class=\"line\">4) &quot;12&quot;</span><br><span class=\"line\">5) &quot;psw&quot;</span><br><span class=\"line\">6) &quot;123456&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hdel user:2 name age</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; hgetall user:2</span><br><span class=\"line\">1) &quot;psw&quot;</span><br><span class=\"line\">2) &quot;123456&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"HEXISTS-查询field存在\"><a href=\"#HEXISTS-查询field存在\" class=\"headerlink\" title=\"HEXISTS 查询field存在\"></a>HEXISTS 查询field存在</h3><p><code>hexists key field</code></p>\n<p>若集合中存在field返回1，否则返回0；</p>\n<h3 id=\"HLEN-获得field数量\"><a href=\"#HLEN-获得field数量\" class=\"headerlink\" title=\"HLEN 获得field数量\"></a>HLEN 获得field数量</h3><p><code>hlen key</code></p>\n<p>返回集合field的数量。</p>\n<h3 id=\"HSTRLEN-获得value的长度\"><a href=\"#HSTRLEN-获得value的长度\" class=\"headerlink\" title=\"HSTRLEN 获得value的长度\"></a>HSTRLEN 获得value的长度</h3><p><code>hstrlen key field</code></p>\n<p>返回集合中field对应的value的长度，若key或field不存在返回0；</p>\n<h3 id=\"HINCRBY-增加整型的值\"><a href=\"#HINCRBY-增加整型的值\" class=\"headerlink\" title=\"HINCRBY  增加整型的值\"></a>HINCRBY  增加整型的值</h3><p><code>hincrby key field increment</code></p>\n<p>增加集合中field整型变量的值；</p>\n<p>若key不存在，则自动创建一个集合，若field不存在，则在操作执行前将field的值设为0；</p>\n<p>（即若key或field不存在，设集合key的field值为1）</p>\n<p>（increment非可选变量，是必选变量）</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hincrby user:5 age 1</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hget user:5 age</span><br><span class=\"line\">&quot;1&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HINCRBYFLOAT-增加浮点数的值\"><a href=\"#HINCRBYFLOAT-增加浮点数的值\" class=\"headerlink\" title=\"HINCRBYFLOAT  增加浮点数的值\"></a>HINCRBYFLOAT  增加浮点数的值</h3><p><code>hincrbyfloat key field increment</code></p>\n<p><em>Hash INCREment FLOAT</em></p>\n<p>功能与hincrby类似，不同的是hincrbyfloat可以增加浮点数。</p>\n<p>若increment为负，则为减少指定的值；</p>\n<p>若key或field不存在，则在操作执行前，将key集合的field设为0（即操作执行后，值为1）</p>\n<p>若<strong>field的value的类型不是数字</strong>或<strong>value的值不可被解析为一个浮点数</strong>，将返回错误信息；</p>\n<p>若执行成功，返回增加后的值。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hset user:6 age 3</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hincrbyfloat user:6 age 1.23</span><br><span class=\"line\">&quot;4.23&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hset user:6 name ZhangSan</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; hincrbyfloat user:6 name 1.23</span><br><span class=\"line\">(error) ERR hash value is not a float</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HRANDFIELD-随机获取field\"><a href=\"#HRANDFIELD-随机获取field\" class=\"headerlink\" title=\"HRANDFIELD 随机获取field\"></a>HRANDFIELD 随机获取field</h3><p>hrandfield key [count [WITHVALUES]]</p>\n<p>获取集合中随机的field值；</p>\n<p>若包含WITHVALUES参数，则返回field-value对；</p>\n<p>关于count的使用：</p>\n<ul>\n<li>若count为正，返回指定数量的field，若count大于集合的基数，则返回集合的基数数量的field；</li>\n<li>若count为负，返回|count|数量的field，且<strong>返回值可能存在重复</strong>；不论count与集合的基数大小关系，返回的结果的数量绝对是|count|；</li>\n</ul>\n<p>返回值：</p>\n<ul>\n<li>若没有count参数，则返回一个value；若key不存在返回nil；</li>\n<li>若有count参数，则返回一个数组，若key不存在返回空数组；若包含WITHVALUES参数，则返回field和它对应的value。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hrandfield user:7 2</span><br><span class=\"line\">1) &quot;name&quot;</span><br><span class=\"line\">2) &quot;psw&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hrandfield user:7 10</span><br><span class=\"line\">1) &quot;name&quot;</span><br><span class=\"line\">2) &quot;age&quot;</span><br><span class=\"line\">3) &quot;psw&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hrandfield user:7 2 WITHVALUES</span><br><span class=\"line\">1) &quot;name&quot;</span><br><span class=\"line\">2) &quot;XiaoMing&quot;</span><br><span class=\"line\">3) &quot;psw&quot;</span><br><span class=\"line\">4) &quot;xm123&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HVALS-获取所有的values\"><a href=\"#HVALS-获取所有的values\" class=\"headerlink\" title=\"HVALS 获取所有的values\"></a>HVALS 获取所有的values</h3><p><code>HVALS key</code></p>\n<p><em>Hash VALueS</em></p>\n<p>返回所有的values；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; hgetall user:7</span><br><span class=\"line\">1) &quot;name&quot;</span><br><span class=\"line\">2) &quot;XiaoMing&quot;</span><br><span class=\"line\">3) &quot;age&quot;</span><br><span class=\"line\">4) &quot;15&quot;</span><br><span class=\"line\">5) &quot;psw&quot;</span><br><span class=\"line\">6) &quot;xm123&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; hvals user:7</span><br><span class=\"line\">1) &quot;XiaoMing&quot;</span><br><span class=\"line\">2) &quot;15&quot;</span><br><span class=\"line\">3) &quot;xm123&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"HMSET（弃用）-与hset一致\"><a href=\"#HMSET（弃用）-与hset一致\" class=\"headerlink\" title=\"HMSET（弃用） 与hset一致\"></a>HMSET（弃用） 与hset一致</h3><p>与hset功能相同，即将被弃用</p>\n<h1 id=\"Sorted-Set\"><a href=\"#Sorted-Set\" class=\"headerlink\" title=\"Sorted Set\"></a>Sorted Set</h1><p>带有排序功能的set；</p>\n<p><strong>排序方式：</strong>按照scores顺序存储字符串，若字符串有相同scores，则按照字典序存储字符串；</p>\n<p>应用举例：</p>\n<ul>\n<li>游戏排名最高分；</li>\n<li>通过滑动窗口限制同一时间内的API请求数量。</li>\n</ul>\n<h2 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h2><p>Redis Sorted Set实现原理</p>\n<ol>\n<li><strong>压缩列表（ziplist）</strong>：ziplist是为了<strong>提高存储效率</strong>而设计的一种特殊编码的<strong>双向链表</strong>，可以存储<strong>字符串</strong>或<strong>整数</strong>；存储整数采用<strong>二进制而不是字符串</strong>；Ziplist能在O(1)的复杂度下完成list两端的push和pop操作；每次操作都需要重新分配ziplist的内存，实际复杂度与ziplist的内存使用量有关；</li>\n<li><strong>跳跃表(zSkiplist)：</strong>跳跃表的性能可以保障查找、删除和添加等操作在对数期望时间内完成，跳跃表的复杂度是O(log(n))；</li>\n</ol>\n<h2 id=\"例子：游戏排名最高分\"><a href=\"#例子：游戏排名最高分\" class=\"headerlink\" title=\"例子：游戏排名最高分\"></a>例子：游戏排名最高分</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd leaderboard 100 user:1 # 设置user:1的得分是100</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd leaderboard 89 user:2 # 设置user:2的得分是89</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd leaderboard 201 user:3 # 设置user:3的得分是201</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd leaderboard 23 user:4</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd leaderboard 111 user:5</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange leaderboard 0 2 REV WITHSCORES # 获取范围 0 2，REV逆序，WITHSCORES包含分数</span><br><span class=\"line\">1) &quot;user:3&quot;</span><br><span class=\"line\">2) &quot;201&quot;</span><br><span class=\"line\">3) &quot;user:5&quot;</span><br><span class=\"line\">4) &quot;111&quot;</span><br><span class=\"line\">5) &quot;user:1&quot;</span><br><span class=\"line\">6) &quot;100&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"基础命令-1\"><a href=\"#基础命令-1\" class=\"headerlink\" title=\"基础命令\"></a>基础命令</h2><p>ZADD：添加新的对象和分数到有序集合中，若对象存在，则更新分数；</p>\n<p>ZRANGE：返回排序后的对象列表，可以选择排行榜的范围；</p>\n<p>ZRANK：返回对象所在的排名；</p>\n<p>ZREVRANK：返回集合在逆序下，对象所在的排名。</p>\n<h2 id=\"性能\"><a href=\"#性能\" class=\"headerlink\" title=\"性能\"></a>性能</h2><p>zrange：O(log(n))</p>\n<p>其他：O(log(n)+m)</p>\n<h2 id=\"其他命令-1\"><a href=\"#其他命令-1\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h2><table>\n<thead>\n<tr>\n<th>增</th>\n<th>删</th>\n<th>查</th>\n<th>自增</th>\n<th>并</th>\n<th>交</th>\n<th>差</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ZADD</td>\n<td>ZREM</td>\n<td>ZCARD</td>\n<td>ZINCRBY</td>\n<td>ZUNION</td>\n<td>ZINTER</td>\n<td>ZDIFF</td>\n</tr>\n<tr>\n<td></td>\n<td>ZREMRANGEBYLEX</td>\n<td>ZCOUNT</td>\n<td></td>\n<td>ZUNIONSTORE</td>\n<td>ZINTERCARD</td>\n<td>ZDIFFSTORE</td>\n</tr>\n<tr>\n<td></td>\n<td>ZREMRANGEBYRANK</td>\n<td>ZLEXCOUNT</td>\n<td></td>\n<td></td>\n<td>ZINTERSTORE</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>ZREMRANGEBYSCORE</td>\n<td>ZSCORE</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>ZPOPMAX</td>\n<td>ZMSCORE</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>ZPOPMIN</td>\n<td>ZRANDMEMBER</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>ZMPOP</td>\n<td>ZRANGE</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>ZRANGEBYLEX</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>ZRANGEBYSCORE</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>ZRANGESTORE</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>ZREVRANGE</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>ZREVRANGEBYLEX</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>ZREVRANGEBYSCORE</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>ZRANK</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>ZREVRANK</td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"增\"><a href=\"#增\" class=\"headerlink\" title=\"增\"></a>增</h3><h4 id=\"ZADD\"><a href=\"#ZADD\" class=\"headerlink\" title=\"ZADD\"></a>ZADD</h4><h5 id=\"介绍-x2F-使用\"><a href=\"#介绍-x2F-使用\" class=\"headerlink\" title=\"介绍&#x2F;使用\"></a>介绍&#x2F;使用</h5><p><code>ZADD key [MX | XX] [GT | LT] [CH] [INCR] score member [score member ...]</code></p>\n<ul>\n<li><p>向有序集合中添加指定的对象和scores，可以指定多个member-score对；</p>\n</li>\n<li><p>如果集合中已存在要添加的member，则更新member的score为新输入的score；</p>\n</li>\n<li><p>如果key不存在，则创建相应的有序集合并将对象和score放进集合中；若key存在且类型不为有序集合，则返回错误；</p>\n</li>\n<li><p>score的值应为双精度浮点数的string格式；</p>\n</li>\n</ul>\n<h5 id=\"可以用的参数\"><a href=\"#可以用的参数\" class=\"headerlink\" title=\"可以用的参数\"></a>可以用的参数</h5><ul>\n<li>XX：仅更新已存在的元素，不添加新的元素；</li>\n<li>NX：仅添加新的元素，不更新已存在的元素；</li>\n<li>LT：若输入的score值小于原本的score值，则更新存在的值；</li>\n<li>GT：若输入的score值大于原本的score值，则更新存在的值；</li>\n<li>CH：返回值改为更新的元素数量；</li>\n<li>INCR：将ZADD的作用变为ZINCRBY，此时只能指定一个score-element对；</li>\n</ul>\n<p>注意：GT、LT和NX三者是互斥的。</p>\n<h5 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h5><p>Redis采用64位双精度浮点数来表示score，依据IEEE 754实现，能够精确的表示-(2^53 )到+(2^53)之间的数字。</p>\n<h5 id=\"返回值\"><a href=\"#返回值\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><p>默认返回添加到有序集合的元素数量；</p>\n<p>如果指定CH选项，则返回改变的元素的数量；</p>\n<p>如果指定incr选项，若执行成功返回对象的score，操作取消则返回nil（被XX或NX选项阻止）。</p>\n<h5 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd ss 10 a 20 b  # 设置 a=10 b=20</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd ss XX CH 20 a 30 b  # 仅更新值，不添加新的元素</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss 0 -1 WITHSCORES</span><br><span class=\"line\">1) &quot;a&quot;</span><br><span class=\"line\">2) &quot;20&quot;</span><br><span class=\"line\">3) &quot;b&quot;</span><br><span class=\"line\">4) &quot;30&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd ss NX 5 c 69 b  # 仅添加新的元素，不更新值</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss 0 -1 WITHSCORES</span><br><span class=\"line\">1) &quot;c&quot;  # c被添加</span><br><span class=\"line\">2) &quot;5&quot;</span><br><span class=\"line\">3) &quot;a&quot;</span><br><span class=\"line\">4) &quot;20&quot;</span><br><span class=\"line\">5) &quot;b&quot;</span><br><span class=\"line\">6) &quot;30&quot;  # b没有被更新</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd ss LT 19 a 31 b # 仅当输入值小于原来的值时更新 </span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss 0 -1 WITHSCORES</span><br><span class=\"line\">1) &quot;c&quot;</span><br><span class=\"line\">2) &quot;5&quot;</span><br><span class=\"line\">3) &quot;a&quot;</span><br><span class=\"line\">4) &quot;19&quot;   # a被更新</span><br><span class=\"line\">5) &quot;b&quot;</span><br><span class=\"line\">6) &quot;30&quot;  # b没有被更新</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd ss INCR 1 a   # 自增</span><br><span class=\"line\">&quot;20&quot;</span><br></pre></td></tr></table></figure>\n\n<p>LT : less than    &lt;</p>\n<p>GT : great than  &gt;</p>\n<p>LE : less equal  &lt;&#x3D;</p>\n<p>GE : great equal  &gt;&#x3D;</p>\n<h3 id=\"删\"><a href=\"#删\" class=\"headerlink\" title=\"删\"></a>删</h3><h4 id=\"ZREM\"><a href=\"#ZREM\" class=\"headerlink\" title=\"ZREM\"></a>ZREM</h4><p>ZREM key member [member …]</p>\n<p>删除指定的对象；</p>\n<p>成功返回移除的对象数量，不包含不存在的对象；若key不存在返回错误。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd ss 1 a 2 b 3 c</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; zrem ss a d # 删除a成功， d不存在被忽略</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss 0 -1</span><br><span class=\"line\">1) &quot;b&quot;</span><br><span class=\"line\">2) &quot;c&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ZREMRANGEBYLEX\"><a href=\"#ZREMRANGEBYLEX\" class=\"headerlink\" title=\"ZREMRANGEBYLEX\"></a>ZREMRANGEBYLEX</h4><p><code>ZREMRANGEBYLEX key min max</code></p>\n<p>删除<strong>字典序</strong>排序从min到max的元素；</p>\n<p>返回被移除的元素数量。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd ss 1 a 2 d 3 e 4 g 5 i 6 w 7 y 8 z</span><br><span class=\"line\">(integer) 8</span><br><span class=\"line\">127.0.0.1:6379&gt; zremrangebylex ss [e [w</span><br><span class=\"line\">(integer) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss 0 -1</span><br><span class=\"line\">1) &quot;a&quot;</span><br><span class=\"line\">2) &quot;d&quot;</span><br><span class=\"line\">3) &quot;y&quot;</span><br><span class=\"line\">4) &quot;z&quot;</span><br></pre></td></tr></table></figure>\n\n<p>在命令内部使用 “[字符串”表示范围，如：[assd</p>\n<h4 id=\"ZREMRANGEBYSCORE\"><a href=\"#ZREMRANGEBYSCORE\" class=\"headerlink\" title=\"ZREMRANGEBYSCORE\"></a>ZREMRANGEBYSCORE</h4><p><code>ZREMRANGEBYSCORE key min max</code></p>\n<p>删除<strong>score值</strong>是从min到max的元素。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zrange ss2 0 -1 WITHSCORES</span><br><span class=\"line\"> 1) &quot;w&quot;</span><br><span class=\"line\"> 2) &quot;7&quot;</span><br><span class=\"line\"> 3) &quot;s&quot;</span><br><span class=\"line\"> 4) &quot;8&quot;</span><br><span class=\"line\"> 5) &quot;c&quot;</span><br><span class=\"line\"> 6) &quot;9&quot;</span><br><span class=\"line\"> 7) &quot;x&quot;</span><br><span class=\"line\"> 8) &quot;10&quot;</span><br><span class=\"line\"> 9) &quot;l&quot;</span><br><span class=\"line\">10) &quot;11&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; ZREMRANGEBYSCORE ss2 8 9  # 删除scores范围为 8 ~ 9 的值。</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss2 0 -1 WITHSCORES</span><br><span class=\"line\">1) &quot;w&quot;</span><br><span class=\"line\">2) &quot;7&quot;</span><br><span class=\"line\">3) &quot;x&quot;</span><br><span class=\"line\">4) &quot;10&quot;</span><br><span class=\"line\">5) &quot;l&quot;</span><br><span class=\"line\">6) &quot;11&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ZREMRANGEBYRANK\"><a href=\"#ZREMRANGEBYRANK\" class=\"headerlink\" title=\"ZREMRANGEBYRANK\"></a>ZREMRANGEBYRANK</h4><p><code>ZREMRANGEBYRANK key start stop</code></p>\n<p>删除<strong>排名</strong>从start到stop的元素；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zrange ss 0 -1</span><br><span class=\"line\">1) &quot;a&quot;</span><br><span class=\"line\">2) &quot;c&quot;</span><br><span class=\"line\">3) &quot;d&quot;</span><br><span class=\"line\">4) &quot;w&quot;</span><br><span class=\"line\">5) &quot;f&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; zremrangebyrank ss 1 3  # 删除排名位于 1 ~ 3 的元素</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss 0 -1</span><br><span class=\"line\">1) &quot;a&quot;</span><br><span class=\"line\">2) &quot;f&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ZPOPMAX、ZPOPMIN\"><a href=\"#ZPOPMAX、ZPOPMIN\" class=\"headerlink\" title=\"ZPOPMAX、ZPOPMIN\"></a>ZPOPMAX、ZPOPMIN</h4><p><code>ZPOPMAX key [count]</code></p>\n<p><code>ZPOPMIN key [count]</code></p>\n<p>移除scores值 MAX最高（MIN最低）的count个元素；</p>\n<p>若没有count属性，默认count为1；</p>\n<p>返回多个元素，score最大（MAX为最大的，MIN为最小的）的元素在首位，其他依次向下排列；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zrange ss2 0 -1 WITHSCORES</span><br><span class=\"line\">1) &quot;w&quot;</span><br><span class=\"line\">2) &quot;7&quot;</span><br><span class=\"line\">3) &quot;x&quot;</span><br><span class=\"line\">4) &quot;10&quot;</span><br><span class=\"line\">5) &quot;l&quot;</span><br><span class=\"line\">6) &quot;11&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; zpopmax ss2 2</span><br><span class=\"line\">1) &quot;l&quot;</span><br><span class=\"line\">2) &quot;11&quot;</span><br><span class=\"line\">3) &quot;x&quot;</span><br><span class=\"line\">4) &quot;10&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss2 0 -1 WITHSCORES</span><br><span class=\"line\">1) &quot;w&quot;</span><br><span class=\"line\">2) &quot;7&quot;</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"ZMPOP-依据提供的方向删除指定集合指定数量的元素\"><a href=\"#ZMPOP-依据提供的方向删除指定集合指定数量的元素\" class=\"headerlink\" title=\"ZMPOP 依据提供的方向删除指定集合指定数量的元素\"></a>ZMPOP 依据提供的方向删除指定集合指定数量的元素</h4><p>ZMPOP numkeys key [key …] &lt;MIN | MAX&gt; [COUNT count]</p>\n<p>从给定的集合中从前往后寻找非空集合，删除并返回多个元素。</p>\n<p>可以指定多个集合；</p>\n<p>在MIN下，将对在非空集合中score最低的元素进行pop；MAX反之；</p>\n<p>COUNT指定要pop的数量；</p>\n<p>返回值：</p>\n<ul>\n<li>返回一个二维数组（<code>[n][2]</code>），子数组包含删除元素的对象和score；</li>\n<li>若没有元素被pop则返回nil</li>\n</ul>\n<h3 id=\"查\"><a href=\"#查\" class=\"headerlink\" title=\"查\"></a>查</h3><h4 id=\"ZCARD\"><a href=\"#ZCARD\" class=\"headerlink\" title=\"ZCARD\"></a>ZCARD</h4><p><code>ZCARD key</code></p>\n<p>查询集合的基数。</p>\n<h4 id=\"ZCOUNT、ZLEXCOUNT\"><a href=\"#ZCOUNT、ZLEXCOUNT\" class=\"headerlink\" title=\"ZCOUNT、ZLEXCOUNT\"></a>ZCOUNT、ZLEXCOUNT</h4><p><code>ZCOUNT key min max</code>  获取score在min到max之间的元素。O(log(N))。</p>\n<p><code>ZLEXCOUNT key min max</code> 依据字典序获得min到max之间的元素。O(log(N))。</p>\n<p>返回指定结果数量；</p>\n<h4 id=\"ZSCORE\"><a href=\"#ZSCORE\" class=\"headerlink\" title=\"ZSCORE\"></a>ZSCORE</h4><p><code>ZSCORE key member</code></p>\n<p>返回成员的score；</p>\n<p>若成员或key不存在，返回nil；</p>\n<h4 id=\"ZMSCORE\"><a href=\"#ZMSCORE\" class=\"headerlink\" title=\"ZMSCORE\"></a>ZMSCORE</h4><p><code>ZMSCORE key member [member ...]</code></p>\n<p>返回多个成员的score；</p>\n<p>对于每个成员，若member不存在，则score以nil代替。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd ss 1 a 2 b 3 c</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; zmscore ss a b</span><br><span class=\"line\">1) &quot;1&quot;</span><br><span class=\"line\">2) &quot;2&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ZRANDMEMBER\"><a href=\"#ZRANDMEMBER\" class=\"headerlink\" title=\"ZRANDMEMBER\"></a>ZRANDMEMBER</h4><p><code>ZRANDMEMBER key [count [WITHSCORES]]</code></p>\n<p>若只有key参数，则在集合中随机获取一个元素并返回其成员名；</p>\n<p>若有count参数，</p>\n<ul>\n<li>若count为正数，在集合中随机获取多个元素并返回其成员名，数量取count和基数的最小值；</li>\n<li>若count为负数，获取的结果会有重复，返回的数量绝对为count，不受基数大小限制。</li>\n</ul>\n<p>若加上WITHSCORES，返回参数包含成员名及其scores。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; ZRANDMEMBER ss 2</span><br><span class=\"line\">1) &quot;c&quot;</span><br><span class=\"line\">2) &quot;a&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANDMEMBER ss 2 WITHSCORES</span><br><span class=\"line\">1) &quot;b&quot;</span><br><span class=\"line\">2) &quot;2&quot;</span><br><span class=\"line\">3) &quot;a&quot;</span><br><span class=\"line\">4) &quot;1&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ZRANGE\"><a href=\"#ZRANGE\" class=\"headerlink\" title=\"ZRANGE\"></a>ZRANGE</h4><h5 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h5><p><code>ZRANGE key start stop [BYSCORE | BYLEX] [REV] [LIMIT offset count] [WITHSCORES]</code></p>\n<p>依据条件进行查询，返回结果顺序默认从低到高；若start大于基数或stop，则返回空集合；若stop大于基数，视为最后一个元素。</p>\n<p>ZRANGE可以查询来自不同类型范围的元素；</p>\n<h5 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h5><p>start，stop：值的起点和终点，即值的范围为 start ~ stop；</p>\n<ul>\n<li>第一个元素用0表示，第二个为1，其他依次类推；</li>\n<li>start&#x2F;stop值也可以为负，-1表示倒数第一个，-2表示倒数第二个；</li>\n<li>对于不同的<strong>排序依据</strong>，可以使用的值不同；<ul>\n<li>默认情况下<ul>\n<li>start&#x2F;stop表示查询地范围，结果包含start&#x2F;stop索引所在位置的值；</li>\n</ul>\n</li>\n<li>对于BYSCORE<ul>\n<li>默认情况下，结果包含start&#x2F;stop指定的索引位置，可以通过添加前缀”**(**“来表示不包含start&#x2F;stop指定的索引位置的值；</li>\n<li>默认情况下，start表示最小score，stop表示最大score；</li>\n<li>也可以为 “+inf”或“-inf”，分别表示正无穷和负无穷。</li>\n<li>若使用REV参数，就必须将start和stop的值反过来使用，也就是start &gt; stop，否则将获得一个空的结果；start表示最大score，stop表示最score。</li>\n</ul>\n</li>\n<li>对于BYLEX<ul>\n<li>start&#x2F;stop值必须包含“(”或“[”表示不包含或包含start&#x2F;stop指定的索引位置的值；</li>\n<li>可以使用“+”或者“-”表示正无穷和负无穷；</li>\n<li>若使用REV参数，就必须将start和stop的值反过来，也就是 start &gt; stop，否则将返回一个空的结果。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>BYSCORE：依据score；</p>\n<p>BYLEX：依据字典序；在此模式下不支持REV参数，会返回错误；</p>\n<p>REV：查询结果默认排序为从低到高，使用REV参数后排序改为从高到低；</p>\n<p>LIMIT：在获得结果中取出指定范围的数据进行返回；offset为起点；count为取出的数量，若count为负则取出从offset到最后所有的元素；注意若offset很大，需要遍历从offset到最后一个元素之间的所有元素，时间复杂度为O(N)；</p>\n<p>WITHSCORES：返回值包含score；</p>\n<h5 id=\"返回值-1\"><a href=\"#返回值-1\" class=\"headerlink\" title=\"返回值\"></a>返回值</h5><p>返回数组，包含元素列表；若有WITHSCORES，则同时包含scores。</p>\n<h5 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h5><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd ss 12 a 23 b 34 c 45 d 56 e 67 f</span><br><span class=\"line\">(integer) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss 0 -1 # 查询队列中所有的元素</span><br><span class=\"line\">1) &quot;a&quot;</span><br><span class=\"line\">2) &quot;b&quot;</span><br><span class=\"line\">3) &quot;c&quot;</span><br><span class=\"line\">4) &quot;d&quot;</span><br><span class=\"line\">5) &quot;e&quot;</span><br><span class=\"line\">6) &quot;f&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss 2 -1 WITHSCORES # 查询队列中从位置2到最后的元素，包含scores</span><br><span class=\"line\">1) &quot;c&quot;</span><br><span class=\"line\">2) &quot;34&quot;</span><br><span class=\"line\">3) &quot;d&quot;</span><br><span class=\"line\">4) &quot;45&quot;</span><br><span class=\"line\">5) &quot;e&quot;</span><br><span class=\"line\">6) &quot;56&quot;</span><br><span class=\"line\">7) &quot;f&quot;</span><br><span class=\"line\">8) &quot;67&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss 45 56 BYSCORE WITHSCORES # 查询score从45到56范围内的元素</span><br><span class=\"line\">1) &quot;d&quot;</span><br><span class=\"line\">2) &quot;45&quot;</span><br><span class=\"line\">3) &quot;e&quot;</span><br><span class=\"line\">4) &quot;56&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss 56 45 REV BYSCORE WITHSCORES # 逆序，start/stop需要倒过来</span><br><span class=\"line\">1) &quot;e&quot;</span><br><span class=\"line\">2) &quot;56&quot;</span><br><span class=\"line\">3) &quot;d&quot;</span><br><span class=\"line\">4) &quot;45&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss (c [e REV BYLEX WITHSCORES # 使用BYLEX不能使用WITHSCORES</span><br><span class=\"line\">(error) ERR syntax error, WITHSCORES not supported in combination with BYLEX</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss (c [e REV BYLEX # 使用REV需要将start/stop的值倒过来，否则返回空数组</span><br><span class=\"line\">(empty array)</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss (c [e BYLEX # 不包含c，包含e的结果。</span><br><span class=\"line\">1) &quot;d&quot;</span><br><span class=\"line\">2) &quot;e&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss (c [e BYLEX LIMIT 1 1 # 取出结果中从索引1开始，1个元素</span><br><span class=\"line\">1) &quot;e&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ZRANGESTORE\"><a href=\"#ZRANGESTORE\" class=\"headerlink\" title=\"ZRANGESTORE\"></a>ZRANGESTORE</h4><p><code>ZRANGESTORE dst src min max [BYSCORE | BYLEX] [REV] [LIMIT offset count]</code></p>\n<p>查询方式与ZRANGE一致；</p>\n<p>不同的是，可以将返回结果存储到指定集合中；</p>\n<p>返回值为结果集的元素数量；</p>\n<p>注意：不能使用WITHSCORES。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zrange ss 45 56 BYSCORE WITHSCORES</span><br><span class=\"line\">1) &quot;d&quot;</span><br><span class=\"line\">2) &quot;45&quot;</span><br><span class=\"line\">3) &quot;e&quot;</span><br><span class=\"line\">4) &quot;56&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; zrangestore ss2 ss 45 56 BYSCORE</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange ss2 0 -1 WITHSCORES</span><br><span class=\"line\">1) &quot;d&quot;</span><br><span class=\"line\">2) &quot;45&quot;</span><br><span class=\"line\">3) &quot;e&quot;</span><br><span class=\"line\">4) &quot;56&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ZRANK\"><a href=\"#ZRANK\" class=\"headerlink\" title=\"ZRANK\"></a>ZRANK</h4><p><code>ZRANK key member</code></p>\n<p>将集合按照score大小进行排序，返回排序结果中member的位置。</p>\n<p>排序顺序<strong>从小到大</strong>；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zrange ss 0 -1</span><br><span class=\"line\">1) &quot;a&quot; #  0 5</span><br><span class=\"line\">2) &quot;b&quot; #  1 4</span><br><span class=\"line\">3) &quot;c&quot; #  2 3  c的正序位置在2，逆序位置在3</span><br><span class=\"line\">4) &quot;d&quot; #  3 2</span><br><span class=\"line\">5) &quot;e&quot; #  4 1</span><br><span class=\"line\">6) &quot;f&quot; #  5 0</span><br><span class=\"line\">127.0.0.1:6379&gt; zrank ss c</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; zrevrank ss c</span><br><span class=\"line\">(integer) 3</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ZREVRANK\"><a href=\"#ZREVRANK\" class=\"headerlink\" title=\"ZREVRANK\"></a>ZREVRANK</h4><p><code>ZREVRANK key member</code></p>\n<p>返回集合按照score排行，反转后的member的位置；</p>\n<p>排行按照从高到低；</p>\n<p>返回值：若成员存在，返回成员的排行；若成员或key不存在，返回nil；</p>\n<h4 id=\"ZRANGEBYLEX、ZRANGEBYSCORE-（弃用）\"><a href=\"#ZRANGEBYLEX、ZRANGEBYSCORE-（弃用）\" class=\"headerlink\" title=\"ZRANGEBYLEX、ZRANGEBYSCORE （弃用）\"></a>ZRANGEBYLEX、ZRANGEBYSCORE （弃用）</h4><p>将会被ZRANGE取代；</p>\n<p><code>ZRANGEBYLEX key min max [LIMIT offset count]</code></p>\n<p><code>ZRANGEBYSCORE key min max [LIMIT offset count] WITHSCORES</code></p>\n<h4 id=\"ZREVRANGE（弃用）\"><a href=\"#ZREVRANGE（弃用）\" class=\"headerlink\" title=\"ZREVRANGE（弃用）\"></a>ZREVRANGE（弃用）</h4><p><code>ZREVRANGE key start stop [WITHSCORES]</code></p>\n<h4 id=\"ZREVRANGEBYLEX（弃用）\"><a href=\"#ZREVRANGEBYLEX（弃用）\" class=\"headerlink\" title=\"ZREVRANGEBYLEX（弃用）\"></a>ZREVRANGEBYLEX（弃用）</h4><p><code>ZREVRANGEBYLEX key max min [LIMIT offset count]</code></p>\n<h4 id=\"ZRANGEBYSCORE（弃用）\"><a href=\"#ZRANGEBYSCORE（弃用）\" class=\"headerlink\" title=\"ZRANGEBYSCORE（弃用）\"></a>ZRANGEBYSCORE（弃用）</h4><p><code>ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]</code></p>\n<h3 id=\"并集\"><a href=\"#并集\" class=\"headerlink\" title=\"并集\"></a>并集</h3><h4 id=\"ZUNIONSTORE\"><a href=\"#ZUNIONSTORE\" class=\"headerlink\" title=\"ZUNIONSTORE\"></a>ZUNIONSTORE</h4><p><code>ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREAGTE &lt;SUM | MIN MAX&gt;]</code></p>\n<p>计算numkeys个集合的并集结果，对于每个相同的member，将相应的score进行处理（相加，MAX，MIN），然后存储计算结果到destination中；</p>\n<p>在提供key和其他参数之前，必须提供numkeys；</p>\n<p>参数介绍：</p>\n<ul>\n<li><p>使用WEIGHTS参数，指定多个乘数，将为每个集合的score值在处理之前与指定的乘数相乘，乘法因子默认为1；</p>\n<ul>\n<li>如：</li>\n<li>设 k1 &#x3D; {a:1,b:2}  k2 &#x3D; {b:3,c:4}</li>\n<li>如：ZUNIONSTORE out 2 k1 k2 WEIGHTS 2 3 AGGREGATE SUM</li>\n<li><ol>\n<li>k1’ &#x3D; {a:2,b:4}  k2’ &#x3D; {b:9,c:12}</li>\n<li>out &#x3D; {a:2,b:13,c:12}</li>\n</ol>\n</li>\n</ul>\n</li>\n<li><p>使用AGGREGATE选项，可以指定UNION过程score的处理方法，默认为SUM；</p>\n<ul>\n<li>SUM：将所有score相加；</li>\n<li>MAX：取所有score最大值；</li>\n<li>MIN：取所有score最小值。</li>\n</ul>\n</li>\n</ul>\n<p>若destination中有值，则进行覆盖。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zadd s1 1 a 4 b  # s1 = &#123;a:1, b:4&#125;</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; zadd s2 4 a 5 c  # s2 = &#123;a:4, c:5&#125;</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; ZUNIONSTORE out1 2 s1 s2 WEIGHTS 2 3 # 将s1和s2进行UNION操作，AGGREGATE为SUM</span><br><span class=\"line\">(integer) 3 # 结果集的值的数量</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE out1 0 -1 WITHSCORES # 查询</span><br><span class=\"line\">1) &quot;b&quot;</span><br><span class=\"line\">2) &quot;8&quot;   # 4x2 = 8</span><br><span class=\"line\">3) &quot;a&quot;</span><br><span class=\"line\">4) &quot;14&quot;  # 1x2 + 4x3 = 14</span><br><span class=\"line\">5) &quot;c&quot;</span><br><span class=\"line\">6) &quot;15&quot;  # 5x3 = 15</span><br><span class=\"line\">127.0.0.1:6379&gt; ZUNIONSTORE out2 2 s1 s2 WEIGHTS 2 3 AGGREGATE MAX # 将s1和s2进行UNION操作，AGGREGATE为MAX</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE out2 0 -1 WITHSCORES</span><br><span class=\"line\">1) &quot;b&quot;</span><br><span class=\"line\">2) &quot;8&quot;   # 4x2 = 8</span><br><span class=\"line\">3) &quot;a&quot;</span><br><span class=\"line\">4) &quot;12&quot;  # max(1x2, 4x3) = 12</span><br><span class=\"line\">5) &quot;c&quot;</span><br><span class=\"line\">6) &quot;15&quot;  # 5x3 = 15</span><br><span class=\"line\">127.0.0.1:6379&gt; ZUNIONSTORE out3 2 s1 s2 WEIGHTS 2 3 AGGREGATE MIN # 将s1和s2进行UNION操作，AGGREGATE为MIN</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; ZRANGE out3 0 -1 WITHSCORES</span><br><span class=\"line\">1) &quot;a&quot;</span><br><span class=\"line\">2) &quot;2&quot;  # min(2x1, 3x4) = 2</span><br><span class=\"line\">3) &quot;b&quot;</span><br><span class=\"line\">4) &quot;8&quot;</span><br><span class=\"line\">5) &quot;c&quot;</span><br><span class=\"line\">6) &quot;15&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ZUNION\"><a href=\"#ZUNION\" class=\"headerlink\" title=\"ZUNION\"></a>ZUNION</h4><p><code>ZUNION numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE &lt;SUM | MIN | MAX&gt;] [WITHSCORES]</code></p>\n<p>功能类似于ZUNIONSTORE，不同的是，ZUNION将计算结果返回到客户端；</p>\n<h3 id=\"交集\"><a href=\"#交集\" class=\"headerlink\" title=\"交集\"></a>交集</h3><h4 id=\"ZINTER\"><a href=\"#ZINTER\" class=\"headerlink\" title=\"ZINTER\"></a>ZINTER</h4><p><code>ZINTER numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE &lt;SUM | MIN | MAX&gt;][WITHSCORES]</code></p>\n<p>将交集结果返回到客户端；</p>\n<p>时间复杂度：</p>\n<p>O(NK)+O(Mlog(M))</p>\n<p>N：最小有序集合</p>\n<p>K：有序集合的数量</p>\n<p>M：结果集元素数量</p>\n<p>返回交集结果。</p>\n<h4 id=\"ZINTERCARD\"><a href=\"#ZINTERCARD\" class=\"headerlink\" title=\"ZINTERCARD\"></a>ZINTERCARD</h4><p><code>ZINTERCARD numkeys key [key ...] [LIMIT limit]</code></p>\n<p>返回结果集的基数；</p>\n<p>若key为空，则被视为空集合，返回0；</p>\n<p>默认情况下，ZINTERCARD计算集合中所有的数量，可以通过给出参数LIMIT（默认为0）来限制计算数量，这样可以减少计算加速运行；</p>\n<h4 id=\"ZINTERSTORE\"><a href=\"#ZINTERSTORE\" class=\"headerlink\" title=\"ZINTERSTORE\"></a>ZINTERSTORE</h4><p><code>ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE &lt;SUM | MIN |MAX&gt;]</code></p>\n<p>计算交集结果并存放在destination中；</p>\n<p>若destination原本存在，则进行覆盖。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zrange s1 0 -1 WITHSCORES # s1 = &#123;a:1, b:4&#125;</span><br><span class=\"line\">1) &quot;a&quot;</span><br><span class=\"line\">2) &quot;1&quot;</span><br><span class=\"line\">3) &quot;b&quot;</span><br><span class=\"line\">4) &quot;4&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange s2 0 -1 WITHSCORES # s2 = &#123;a:4, c:5&#125;</span><br><span class=\"line\">1) &quot;a&quot;</span><br><span class=\"line\">2) &quot;4&quot;</span><br><span class=\"line\">3) &quot;c&quot;</span><br><span class=\"line\">4) &quot;5&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; ZINTERSTORE out4 2 s1 s2 WEIGHTS 2 3 # 将交集计算结果存放到out4中，</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange out4 0 -1 WITHSCORES</span><br><span class=\"line\">1) &quot;a&quot;</span><br><span class=\"line\">2) &quot;14&quot;  # 1x2 + 3x4 = 14</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"差集\"><a href=\"#差集\" class=\"headerlink\" title=\"差集\"></a>差集</h3><h4 id=\"ZDIFFSTORE\"><a href=\"#ZDIFFSTORE\" class=\"headerlink\" title=\"ZDIFFSTORE\"></a>ZDIFFSTORE</h4><p><code>ZDIFFSTORE destination numkeys key [key ...]</code></p>\n<p>计算第一个集合与其他集合的差集，将结果存放到destination；</p>\n<p>numkeys为指定key的数量；</p>\n<p>若destination存在，则进行覆盖。</p>\n<p>与INTER和UNION不同，DIFF不对SCORE进行运算，而是仅使用member作为依据对集合进行差集运算。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; zrange s1 0 -1 WITHSCORES</span><br><span class=\"line\">1) &quot;a&quot;</span><br><span class=\"line\">2) &quot;1&quot;</span><br><span class=\"line\">3) &quot;b&quot;</span><br><span class=\"line\">4) &quot;4&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange s2 0 -1 WITHSCORES</span><br><span class=\"line\">1) &quot;a&quot;</span><br><span class=\"line\">2) &quot;4&quot;</span><br><span class=\"line\">3) &quot;c&quot;</span><br><span class=\"line\">4) &quot;5&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; ZDIFFSTORE out5 2 s1 s2</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; zrange out5 0 -1 WITHSCORES # s1与s2的差集为&#123;b:4&#125;</span><br><span class=\"line\">1) &quot;b&quot; </span><br><span class=\"line\">2) &quot;4&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ZDIFF\"><a href=\"#ZDIFF\" class=\"headerlink\" title=\"ZDIFF\"></a>ZDIFF</h4><p><code>ZDIFF numkeys key [key ...] [WITHSCORES]</code></p>\n<p>功能类似于ZDIFFSTORE，不同的是，ZDIFF将计算结果返回到客户端；</p>\n","categories":[],"tags":["Redis"]},{"title":"Redis 2 List Set","url":"http://zswh33.github.io/2022/09/20/Redis-2/","content":"<h1 id=\"List\"><a href=\"#List\" class=\"headerlink\" title=\"List\"></a>List</h1><p>Redis List就是双端链表；</p>\n<p>Redis List 实现字符串的链表，可以用来：</p>\n<ul>\n<li>实现栈和队列；</li>\n<li>为后台系统提供队列管理。比如应用将任务push到List队列，工作线程使用pop操作将任务取出并执行。</li>\n</ul>\n<h2 id=\"一些简单的使用\"><a href=\"#一些简单的使用\" class=\"headerlink\" title=\"一些简单的使用\"></a>一些简单的使用</h2><h3 id=\"实现一个队列（先进先出）\"><a href=\"#实现一个队列（先进先出）\" class=\"headerlink\" title=\"实现一个队列（先进先出）\"></a>实现一个队列（先进先出）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush work:queue 1</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush work:queue 2</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush work:queue 3</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; rpop work:queue</span><br><span class=\"line\">&quot;1&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; rpop work:queue</span><br><span class=\"line\">&quot;2&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; rpop work:queue</span><br><span class=\"line\">&quot;3&quot;</span><br></pre></td></tr></table></figure>\n\n<p>lpush，左边推入，rpop，右边弹出。</p>\n<h3 id=\"实现一个栈（先进，后出）\"><a href=\"#实现一个栈（先进，后出）\" class=\"headerlink\" title=\"实现一个栈（先进，后出）\"></a>实现一个栈（先进，后出）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush work:queue 1</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush work:queue 2</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush work:queue 3</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lpop work:queue</span><br><span class=\"line\">&quot;3&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; lpop work:queue</span><br><span class=\"line\">&quot;2&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; lpop work:queue</span><br><span class=\"line\">&quot;1&quot;</span><br></pre></td></tr></table></figure>\n\n<p>lpush，左边推入，lpop，左边弹出。</p>\n<h3 id=\"获得链表的长度\"><a href=\"#获得链表的长度\" class=\"headerlink\" title=\"获得链表的长度\"></a>获得链表的长度</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush q2 1</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush q2 2</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush q2 3</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; llen q2</span><br><span class=\"line\">(integer) 3</span><br></pre></td></tr></table></figure>\n\n<p>llen，获取链表长度。</p>\n<h3 id=\"原子性地从一个列表弹出并放进另一个列表\"><a href=\"#原子性地从一个列表弹出并放进另一个列表\" class=\"headerlink\" title=\"原子性地从一个列表弹出并放进另一个列表\"></a>原子性地从一个列表弹出并放进另一个列表</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush q-todo 101</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush q-todo 102</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; lmove q-todo q-progress LEFT LEFT</span><br><span class=\"line\">&quot;102&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange q-todo 0 -1</span><br><span class=\"line\">1) &quot;101&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange q-progress 0 -1</span><br><span class=\"line\">1) &quot;102&quot;</span><br></pre></td></tr></table></figure>\n\n<p>先向队列q-todo里面添加101，102；</p>\n<p>然后使用lmove，将q-todo里的左边取出移动到q-progress的左边。</p>\n<p>即：从一个列表弹出数据并放进另一个列表。</p>\n<p>这是一个原子性地不可分割的操作。</p>\n<p>LEFT指定左边，RIGHT指定右边</p>\n<h2 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h2><p>最大长度为2^32-1(4_294_967_295)个元素。</p>\n<h2 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h2><h3 id=\"lpush-添加\"><a href=\"#lpush-添加\" class=\"headerlink\" title=\"lpush 添加\"></a>lpush 添加</h3><p><code>lpush key element [element ...]</code></p>\n<p>向key依次推入多个element元素；</p>\n<p>若key为空则创建队列；若key有值且为其他类型，则返回error；</p>\n<p>返回值为push后的队列长度。</p>\n<h3 id=\"lpushx-没有则添加\"><a href=\"#lpushx-没有则添加\" class=\"headerlink\" title=\"lpushx 没有则添加\"></a>lpushx 没有则添加</h3><p><code>lpushx key element [element ...]</code></p>\n<p>与lpush类似，不同的是：</p>\n<ul>\n<li>仅当key存在时，才会执行；</li>\n<li>若key不存在则不会执行</li>\n<li>返回值为push后的长度</li>\n</ul>\n<h3 id=\"lrange-查询\"><a href=\"#lrange-查询\" class=\"headerlink\" title=\"lrange 查询\"></a>lrange 查询</h3><p><code>lrange key start stop</code></p>\n<ul>\n<li><p>返回指定范围的key队列内的元素，start从0开始，-1表示最后一个元素；</p>\n</li>\n<li><p>若超出范围不会发生错误，若start超出列表长度，则返回一个空列表；若stop大于列表长度，Redis会视为列表的最后一个元素。</p>\n</li>\n<li><p>获取的值是否包含stop所在位置，依据不同编程语言进行处理。</p>\n</li>\n</ul>\n<h3 id=\"lrem-删除返回数量\"><a href=\"#lrem-删除返回数量\" class=\"headerlink\" title=\"lrem 删除返回数量\"></a>lrem 删除返回数量</h3><p><code>lrem key count element</code></p>\n<ul>\n<li><p>删除key队列里指定数量的element</p>\n</li>\n<li><p>count值决定删除的数量和删除的起点</p>\n<ul>\n<li>count &gt; 0 ，从起点开始寻找并删除队列里与element相同的值，删除数量为count；</li>\n<li>count &lt; 0 ，从队列尾部删除值；</li>\n<li>count &#x3D; 0 ，删除所有的与element相同的值。</li>\n</ul>\n</li>\n<li><p>返回值为删除的数量。</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush c 1 2 3 4 2 3 2 1 4 2 3 4 2 5 2</span><br><span class=\"line\">(integer) 15</span><br><span class=\"line\">127.0.0.1:6379&gt; lrem c 3 2</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange c 0 -1</span><br><span class=\"line\"> 1) &quot;5&quot;</span><br><span class=\"line\"> 2) &quot;4&quot;</span><br><span class=\"line\"> 3) &quot;3&quot;</span><br><span class=\"line\"> 4) &quot;4&quot;</span><br><span class=\"line\"> 5) &quot;1&quot;</span><br><span class=\"line\"> 6) &quot;2&quot;</span><br><span class=\"line\"> 7) &quot;3&quot;</span><br><span class=\"line\"> 8) &quot;2&quot;</span><br><span class=\"line\"> 9) &quot;4&quot;</span><br><span class=\"line\">10) &quot;3&quot;</span><br><span class=\"line\">11) &quot;2&quot;</span><br><span class=\"line\">12) &quot;1&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lset-设置\"><a href=\"#lset-设置\" class=\"headerlink\" title=\"lset 设置\"></a>lset 设置</h3><p><code>lset key index element</code></p>\n<p>设置key的index位置的值为element。</p>\n<h3 id=\"ltrim-截取\"><a href=\"#ltrim-截取\" class=\"headerlink\" title=\"ltrim 截取\"></a>ltrim 截取</h3><p><code>ltrim key start stop</code></p>\n<p>使队列仅包含指定范围的值。</p>\n<p>超出范围不会报错；若start大于length或start大于stop，会变成空队列（即删除这个队列）；若stop大于length，则视为最后一个元素。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush q2 a b c d e  # q2中有 e d c b a</span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; ltrim q2 1 3  # 取出其中的1~3</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange q2 0 -1  # 即 d c b</span><br><span class=\"line\">1) &quot;d&quot;</span><br><span class=\"line\">2) &quot;c&quot;</span><br><span class=\"line\">3) &quot;b&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lpop-删除并返回值\"><a href=\"#lpop-删除并返回值\" class=\"headerlink\" title=\"lpop 删除并返回值\"></a>lpop 删除并返回值</h3><p><code>lpop key [count]</code></p>\n<p>删除指定数量的元素并返回指定数量的元素。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpop c 3</span><br><span class=\"line\">1) &quot;5&quot;</span><br><span class=\"line\">2) &quot;4&quot;</span><br><span class=\"line\">3) &quot;3&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lpos-寻找\"><a href=\"#lpos-寻找\" class=\"headerlink\" title=\"lpos 寻找\"></a>lpos 寻找</h3><p><code>lpos key value [RANK level] [COUNT num-matches]</code></p>\n<p>说明</p>\n<ul>\n<li><p>检索指定值的位置；</p>\n</li>\n<li><p>在key数列中寻找value的位置，返回位置的索引；</p>\n</li>\n</ul>\n<p>参数</p>\n<ul>\n<li><p>RANK，数列中可能有多个与value相同的值，RANK指定返回第几个value的值；</p>\n</li>\n<li><p>COUNT，指定要返回的数量。</p>\n</li>\n<li><p>RANK可以和COUNT一起使用，将返回从第level个开始，COUNT数量个值。</p>\n</li>\n</ul>\n<p>返回值</p>\n<ul>\n<li><p>若成功匹配，返回一个数组；</p>\n</li>\n<li><p>若未使用COUNT且没有匹配到value，则返回nil；</p>\n</li>\n<li><p>若使用COUNT没有匹配到value，返回空数列。</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lrange c 0 -1</span><br><span class=\"line\">1) &quot;4&quot;</span><br><span class=\"line\">2) &quot;1&quot;</span><br><span class=\"line\">3) &quot;2&quot;</span><br><span class=\"line\">4) &quot;3&quot;</span><br><span class=\"line\">5) &quot;2&quot;</span><br><span class=\"line\">6) &quot;4&quot;</span><br><span class=\"line\">7) &quot;3&quot;</span><br><span class=\"line\">8) &quot;2&quot;</span><br><span class=\"line\">9) &quot;1&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; lpos c 2 RANK -2   #获取c中的“2”，从尾部到头部第二个</span><br><span class=\"line\">(integer) 4</span><br><span class=\"line\">127.0.0.1:6379&gt; lpos c 2 COUNT 3   #获取c中的&quot;2&quot;，获取3个。</span><br><span class=\"line\">1) (integer) 2</span><br><span class=\"line\">2) (integer) 4</span><br><span class=\"line\">3) (integer) 7</span><br><span class=\"line\">127.0.0.1:6379&gt; lpos c 2 count 3 rank -1  #从尾部的第一个开始，获取三个数量的位置</span><br><span class=\"line\">1) (integer) 7</span><br><span class=\"line\">2) (integer) 4</span><br><span class=\"line\">3) (integer) 2</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lmove-移动到另一个队列\"><a href=\"#lmove-移动到另一个队列\" class=\"headerlink\" title=\"lmove 移动到另一个队列\"></a>lmove 移动到另一个队列</h3><p><code>lmove  source destination &lt;LEFT | RIGHT&gt;  &lt;LEFT | RIGHT&gt; </code></p>\n<p>将source的元素移动到destination中；</p>\n<p>LEFT表示左边，RIGHT表示右边；</p>\n<h3 id=\"lmpop-多key弹出\"><a href=\"#lmpop-多key弹出\" class=\"headerlink\" title=\"lmpop 多key弹出\"></a>lmpop 多key弹出</h3><p><code>lmpop numkeys key [key ...] &lt;LEFT |RIGHT&gt; [COUNT count]</code></p>\n<p>依次从<strong>多个key对应的队列</strong>中弹出数据，可以指定数量和方向；</p>\n<p>numkeys：输入的key的数量；</p>\n<p><strong>举例：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lmpop 2 q1 q2 LEFT COUNT 3  </span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">2为key的数量，这里有两个key：q1 q2</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">LEFT为方向，也可以是RIGHT</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">3为数量，这里指一次弹出三个值。</span></span><br></pre></td></tr></table></figure>\n\n<p>运行过程：</p>\n<ul>\n<li>首先判断q1中是否有元素，若有则弹出；<ul>\n<li>若数量不足三个，则弹出剩余的值；</li>\n</ul>\n</li>\n<li>若q1为空，则从q2中弹出；<ul>\n<li>若q1的数量不足三个，<strong>不用</strong>q2中的补足数量；</li>\n<li>若数量不足三个，弹出剩余的值。</li>\n</ul>\n</li>\n<li>若都为空，则返回nil；</li>\n</ul>\n<p><strong>示例：</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush q1 1 2 3 4 5   #首先在q1中输入 1 2 3 4 5</span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; lpush q2 a b c d e  # 在q2中输入 a b c d e</span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">方向RIGHT 数量4 key数量为2 两个key：q1 q2</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lmpop 2 q1 q2 RIGHT COUNT 4  </span><br><span class=\"line\">1) &quot;q1&quot;</span><br><span class=\"line\">2) 1) &quot;1&quot;</span><br><span class=\"line\">   2) &quot;2&quot;</span><br><span class=\"line\">   3) &quot;3&quot;</span><br><span class=\"line\">   4) &quot;4&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">弹出q1中右边开始的4个值</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">方向RIGHT，数量4 key数量2 两个key: q1 q2</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lmpop 2 q1 q2 RIGHT COUNT 4</span><br><span class=\"line\">1) &quot;q1&quot;</span><br><span class=\"line\">2) 1) &quot;5&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">q1中只剩下5 ，则弹出</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">方向RIGHT，数量4 key数量2 两个key: q1 q2</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lmpop 2 q1 q2 RIGHT COUNT 4</span><br><span class=\"line\">1) &quot;q2&quot;</span><br><span class=\"line\">2) 1) &quot;a&quot;</span><br><span class=\"line\">   2) &quot;b&quot;</span><br><span class=\"line\">   3) &quot;c&quot;</span><br><span class=\"line\">   4) &quot;d&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">弹出q2中右边开始的4个值</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lmpop 2 q1 q2 RIGHT COUNT 4</span><br><span class=\"line\">1) &quot;q2&quot;</span><br><span class=\"line\">2) 1) &quot;e&quot;</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">q2中只剩下一个“e”，所以弹出</span></span><br><span class=\"line\">127.0.0.1:6379&gt; lmpop 2 q1 q2 RIGHT COUNT 4</span><br><span class=\"line\">(nil)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">若两个队列都为空，则返回nil</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"llen-长度\"><a href=\"#llen-长度\" class=\"headerlink\" title=\"llen 长度\"></a>llen 长度</h3><p><code>llen key</code></p>\n<p>获取队列长度。</p>\n<h3 id=\"linsert-插入到已知值附近\"><a href=\"#linsert-插入到已知值附近\" class=\"headerlink\" title=\"linsert 插入到已知值附近\"></a>linsert 插入到已知值附近</h3><p><code>linsert key &lt;BEFORE | AFTER&gt; pivot element</code></p>\n<p>插入element到key对应队列的值为pivot的前面或后面。</p>\n<p>pivot：参考位置的值；</p>\n<p>返回值：</p>\n<ul>\n<li>若成功，返回队列的长度；</li>\n<li>若pivot没有被找到，返回-1；</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush q1 1 2 3 4 5  # q1中有5 4 3 2 1</span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; linsert q1 BEFORE 3 q  # 在3的前面插入q</span><br><span class=\"line\">(integer) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; linsert q1 after 4 w  # 在4的后面插入w</span><br><span class=\"line\">(integer) 7</span><br><span class=\"line\">127.0.0.1:6379&gt; lrange q1 0 -1  # 获取所有值</span><br><span class=\"line\">1) &quot;5&quot;</span><br><span class=\"line\">2) &quot;4&quot;</span><br><span class=\"line\">3) &quot;w&quot;  # w在4的后面</span><br><span class=\"line\">4) &quot;q&quot;  # q在3的前面</span><br><span class=\"line\">5) &quot;3&quot;</span><br><span class=\"line\">6) &quot;2&quot;</span><br><span class=\"line\">7) &quot;1&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lindex-依据索引获得值\"><a href=\"#lindex-依据索引获得值\" class=\"headerlink\" title=\"lindex 依据索引获得值\"></a>lindex 依据索引获得值</h3><p><code>lindex key index</code></p>\n<p>返回索引为index的位置的值；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lpush q1 1 2 3 4 5  # q1为 5 4 3 2 1 </span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; lindex q1 3  # 返回索引为4的值</span><br><span class=\"line\">&quot;2&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"R系列-从右边开始操作\"><a href=\"#R系列-从右边开始操作\" class=\"headerlink\" title=\"R系列 从右边开始操作\"></a>R系列 从右边开始操作</h3><p><code>RPOP key [count]</code>：从队列右边弹出指定数量的数据，空则返回nil；</p>\n<p><code>RPUSH key element [element ...]</code>：从队列右边添加数据，返回操作后队列的长度，若key不存在则创建队列；</p>\n<p><code>RPUSHX key element [element ...]</code>：类似于RPUSH，若key不存在则不执行任何操作。</p>\n<h3 id=\"blmove-阻塞的元素移动\"><a href=\"#blmove-阻塞的元素移动\" class=\"headerlink\" title=\"blmove  阻塞的元素移动\"></a>blmove  阻塞的元素移动</h3><p><code>blmove source destination &lt;LEFT | RIGHT&gt; &lt;LEFT | RIGHT&gt; timeout</code></p>\n<p>lmove的带阻塞功能的版本；</p>\n<p>可以将队列中的数据从一个队列A移动到另一个队列B；</p>\n<p>阻塞功能：若队列A为空，Redis会对连接进行阻塞，直到另一个客户端为队列A加入内容；</p>\n<p>timeout最长等待时间，为零可以无限期阻塞；</p>\n<p>返回值为一组字符串；若timeout到达时，返回null；</p>\n<h3 id=\"blmpop-阻塞的多数据弹出\"><a href=\"#blmpop-阻塞的多数据弹出\" class=\"headerlink\" title=\"blmpop 阻塞的多数据弹出\"></a>blmpop 阻塞的多数据弹出</h3><p><code>blmpop timeout numkeys key [key ...] &lt;LEFT | RIGHT&gt; [COUNT count]</code></p>\n<p>超时返回nil；</p>\n<h3 id=\"blpop-阻塞的数据弹出\"><a href=\"#blpop-阻塞的数据弹出\" class=\"headerlink\" title=\"blpop 阻塞的数据弹出\"></a>blpop 阻塞的数据弹出</h3><p><code>BLPOP key [key ...] timeout</code></p>\n<p>相对于lpop，可以有多个key，Redis将依照key依次检索，直到有key的队列不为空，弹出并返回；</p>\n<p>timeout可以为0，表示无限期等待。</p>\n<h3 id=\"brpop-阻塞的数据弹出，从右边开始\"><a href=\"#brpop-阻塞的数据弹出，从右边开始\" class=\"headerlink\" title=\"brpop 阻塞的数据弹出，从右边开始\"></a>brpop 阻塞的数据弹出，从右边开始</h3><p><code>BRPOP key [key ...] timeout</code></p>\n<h1 id=\"Set\"><a href=\"#Set\" class=\"headerlink\" title=\"Set\"></a>Set</h1><p>Redis Set通过哈希表实现；添加、删除、查找的复杂度都是O(1)；</p>\n<p>Redis Set是String的无序集合，集合成员是惟一的，不可重复的；</p>\n<p>可以用来</p>\n<ul>\n<li>标签，为用户添加标签；</li>\n<li>点赞、踩、收藏的数量，用set实现；</li>\n<li>集合的操作：并集、交集和差集。</li>\n</ul>\n<h2 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h2><ul>\n<li><p>存储A和B喜欢的书的id</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd user:A:favorites 1  # 用户A喜欢id为1的书籍</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd user:A:favorites 2  # 用户A喜欢id为2的书籍</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd user:A:favorites 3  # 用户A喜欢id为3的书籍</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd user:B:favorites 2  # 用户B喜欢id为2的书籍</span><br><span class=\"line\">(integer) 1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>检查用户A是否喜欢书籍2和书籍5</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sismember user:A:favorites 2  # A喜欢书2</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sismember user:A:favorites 5  # A不喜欢书5</span><br><span class=\"line\">(integer) 0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用户A和用户B有共同喜欢的书</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sinter user:A:favorites user:B:favorites </span><br><span class=\"line\">1) &quot;2&quot;  # A和B都喜欢书2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用户A喜欢几本书</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; scard user:A:favorites</span><br><span class=\"line\">(integer) 3</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"限制-1\"><a href=\"#限制-1\" class=\"headerlink\" title=\"限制\"></a>限制</h2><p>最大大小2^32-1个成员</p>\n<h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><p><strong>SADD</strong> 将新成员添加到集合中；</p>\n<p><strong>SREM</strong> 从集合中删除指定成员；</p>\n<p><strong>SISMEMBER</strong> 测试集合中是否存在某个成员；</p>\n<p><strong>SINTER</strong> 返回两个或多个集合共有成员集合（交集）；</p>\n<p><strong>SCARD</strong> 返回集合大小。</p>\n<h2 id=\"完整命令\"><a href=\"#完整命令\" class=\"headerlink\" title=\"完整命令\"></a>完整命令</h2><h3 id=\"SADD-添加\"><a href=\"#SADD-添加\" class=\"headerlink\" title=\"SADD 添加\"></a>SADD 添加</h3><p><code>SADD key member [member ...]</code></p>\n<p>添加指定的成员作为集合到key中；</p>\n<p>若成员原本就在集合中，则不添加；</p>\n<p>若key不存在，则创建一个集合并将成员添加到集合中；</p>\n<p>若key存在且不是一个set，则返回错误；</p>\n<p>返回添加到集合成员的数量，不包含原本在集合的成员。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd s1 q w e r t</span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers s1</span><br><span class=\"line\">1) &quot;r&quot;</span><br><span class=\"line\">2) &quot;e&quot;</span><br><span class=\"line\">3) &quot;w&quot;</span><br><span class=\"line\">4) &quot;q&quot;</span><br><span class=\"line\">5) &quot;t&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SMOVE-移动成员\"><a href=\"#SMOVE-移动成员\" class=\"headerlink\" title=\"SMOVE 移动成员\"></a>SMOVE 移动成员</h3><p><code>SMOVE source destination member</code></p>\n<p>移动成员member从source到destination中；</p>\n<p>这是一个原子性操作，在执行期间，对于其他客户端，这个成员将同时属于source和destination；</p>\n<p>如果source不存在或不包含指定元素，操作将不会执行且返回0；</p>\n<p>若指定元素已经存在于destination中，则元素仅仅从source中删除；</p>\n<p>若source或destination不是set类型，则返回错误。</p>\n<p>返回1表示执行成功，0表示操作未执行；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd s1 q w e</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd s2 z x c</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; smove s1 s2 w  # 将w从s1移动到s2</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers s1</span><br><span class=\"line\">1) &quot;e&quot;</span><br><span class=\"line\">2) &quot;q&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers s2</span><br><span class=\"line\">1) &quot;x&quot;</span><br><span class=\"line\">2) &quot;z&quot;</span><br><span class=\"line\">3) &quot;w&quot;</span><br><span class=\"line\">4) &quot;c&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SREM-移除成员\"><a href=\"#SREM-移除成员\" class=\"headerlink\" title=\"SREM 移除成员\"></a>SREM 移除成员</h3><p><code>srem key member [member ...]</code></p>\n<p>从set中移除指定成员；</p>\n<p>若指定成员不存在，则忽略；</p>\n<p>若key不存在将返回0。</p>\n<p>成功返回移除的数量，不包括之前本就不存在的对象。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd s1 q w e r t</span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; srem s1 w e  # 从q1中移除了w和e</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers s1</span><br><span class=\"line\">1) &quot;r&quot;</span><br><span class=\"line\">2) &quot;q&quot;</span><br><span class=\"line\">3) &quot;t&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SPOP-移除并返回成员\"><a href=\"#SPOP-移除并返回成员\" class=\"headerlink\" title=\"SPOP 移除并返回成员\"></a>SPOP 移除并返回成员</h3><p><code>spop key [count]</code></p>\n<p>从set移除并返回一个或多个随机成员；</p>\n<p>若不指定数量，默认弹出一个成员；</p>\n<p>若提供数量，将移除并返回指定数量的成员；</p>\n<p>返回值：</p>\n<ul>\n<li>若没有指定count，则返回删除的对象，若key不存在返回nil；</li>\n<li>若指定了count，则返回删除的对象，若key不存在返回一个空数组。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; smembers s1  # s1的所有对象</span><br><span class=\"line\">1) &quot;r&quot;</span><br><span class=\"line\">2) &quot;q&quot;</span><br><span class=\"line\">3) &quot;t&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; spop s1 2  # 弹出s1中两个对象</span><br><span class=\"line\">1) &quot;q&quot;</span><br><span class=\"line\">2) &quot;r&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; spop s1 2  # 弹出s1中两个对象，目前只剩下一个对象，所以弹出一个对象；</span><br><span class=\"line\">1) &quot;t&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; spop s1 2  # 指定count，返回空数组</span><br><span class=\"line\">(empty array)</span><br><span class=\"line\">127.0.0.1:6379&gt; spop s1  # 不指定count，返回nil</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SCARD-成员数量\"><a href=\"#SCARD-成员数量\" class=\"headerlink\" title=\"SCARD 成员数量\"></a>SCARD 成员数量</h3><p><code>scard key</code></p>\n<p>返回集合中成员的数量</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd s1 q w e r t</span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; scard s1</span><br><span class=\"line\">(integer) 5</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SDIFF\"><a href=\"#SDIFF\" class=\"headerlink\" title=\"SDIFF\"></a>SDIFF</h3><p><code>sdiff key [key ...]</code></p>\n<p>返回第一个set与其他指定set的差集</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd s1 q w e r t</span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd s2 a w e d f</span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd s3 q z x c g</span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; sdiff s1 s2 s3  # s1与s2、s3的差集</span><br><span class=\"line\">1) &quot;r&quot;</span><br><span class=\"line\">2) &quot;t&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SDIFFSTORE\"><a href=\"#SDIFFSTORE\" class=\"headerlink\" title=\"SDIFFSTORE\"></a>SDIFFSTORE</h3><p><code>sdiffstore destination key [key ...]</code></p>\n<p>功能类似于sdiff，不同的是，sdiffstore会将差集结果存放到destination里，返回值变为差集结果的长度；</p>\n<p>若destination中已存在值，则<strong>覆盖</strong>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd s1 q w e r t</span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd s2 q w e</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; sdiffstore s3 s1 s2</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers s3</span><br><span class=\"line\">1) &quot;r&quot;</span><br><span class=\"line\">2) &quot;t&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SINTER\"><a href=\"#SINTER\" class=\"headerlink\" title=\"SINTER\"></a>SINTER</h3><p><code>sinter key [key ...]</code></p>\n<p>返回给定所有set的交集；</p>\n<p>不存在的键被认为是空集，即结果也为空集。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd s1 q w e r t</span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd s2 q w z x c</span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; sinter s1 s2</span><br><span class=\"line\">1) &quot;w&quot;</span><br><span class=\"line\">2) &quot;q&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SINTERCARD\"><a href=\"#SINTERCARD\" class=\"headerlink\" title=\"SINTERCARD\"></a>SINTERCARD</h3><p><code>sintercard numkeys key [key ...] [LIMIT limit]</code></p>\n<p>numkeys：key的数量；</p>\n<p>功能类似于sinter，返回多个集合交集结果集的元素数量，；</p>\n<p>limit可以限制计算数量，若计算数量达到limit，则返回limit；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sintercard 2 s1 s2</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; sintercard 2 s1 s2 limit 1</span><br><span class=\"line\">(integer) 1</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SINTERSTORE\"><a href=\"#SINTERSTORE\" class=\"headerlink\" title=\"SINTERSTORE\"></a>SINTERSTORE</h3><p><code>sinterstore destination key [key ...]</code></p>\n<p>numskeys：key的数量；</p>\n<p>功能类似于sinter，不同的是sinterstore将交集的结果存放到destination，返回值为长度；</p>\n<p>若destination已存在，则进行覆盖。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; sadd q1 q w e r t</span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; sadd q2 q w e a s</span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; sinterstore q3 q1 q2</span><br><span class=\"line\">(integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers q3</span><br><span class=\"line\">1) &quot;q&quot;</span><br><span class=\"line\">2) &quot;w&quot;</span><br><span class=\"line\">3) &quot;e&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SISMEMBER\"><a href=\"#SISMEMBER\" class=\"headerlink\" title=\"SISMEMBER\"></a>SISMEMBER</h3><p><code>sismember key member</code>   </p>\n<p><em>Set IsMember</em></p>\n<p>判断在集合中是否存在member；</p>\n<p>存在返回1，不存在返回0。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; smembers q3</span><br><span class=\"line\">1) &quot;q&quot;</span><br><span class=\"line\">2) &quot;w&quot;</span><br><span class=\"line\">3) &quot;e&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sismember q3 w</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; sismember q3 t</span><br><span class=\"line\">(integer) 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SMEMBERS\"><a href=\"#SMEMBERS\" class=\"headerlink\" title=\"SMEMBERS\"></a>SMEMBERS</h3><p><code>smembers key</code></p>\n<p>返回集合中所有对象。</p>\n<p>当sinter中只有一个key，则等价于sinter。</p>\n<h3 id=\"SMISMEMBER\"><a href=\"#SMISMEMBER\" class=\"headerlink\" title=\"SMISMEMBER\"></a>SMISMEMBER</h3><p><code>smismember key member [member ...]</code></p>\n<p><em>Set Multi Member</em></p>\n<p>同时判断集合中是否存在多个指定的对象。</p>\n<p>返回一个数组，数组中元素依次表示对象是否包含在集合中，1表示包含，0表示不包含。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; smembers q3</span><br><span class=\"line\">1) &quot;q&quot;</span><br><span class=\"line\">2) &quot;w&quot;</span><br><span class=\"line\">3) &quot;e&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; smismember q3 q w s d</span><br><span class=\"line\">1) (integer) 1</span><br><span class=\"line\">2) (integer) 1</span><br><span class=\"line\">3) (integer) 0</span><br><span class=\"line\">4) (integer) 0</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SRANDMEMBER\"><a href=\"#SRANDMEMBER\" class=\"headerlink\" title=\"SRANDMEMBER\"></a>SRANDMEMBER</h3><p><code>SRANDMEMBER key [count]</code></p>\n<p><em>Set RANdom Member</em></p>\n<p>基数：集合中对象的数量。</p>\n<p>随机取出集合中指定数量的对象；</p>\n<ul>\n<li><p>若count为正，返回count数量的对象，若集合基数小于count，则返回基数个对象；</p>\n</li>\n<li><p>若count为负，返回count绝对值数量的对象，若集合基数小于count的绝对值，则仍旧返回count绝对值数量的对象。</p>\n</li>\n<li><p>负数的count返回的对象中<strong>存在重复的对象</strong>。</p>\n</li>\n</ul>\n<p>返回值：</p>\n<ul>\n<li>若有count属性，返回一个数组，若key不存在或为空，返回空数组；</li>\n<li>若没有count属性，返回一个对象，若key不存在或为空，返回nil。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; smembers q1 # q1中所有对象</span><br><span class=\"line\">1) &quot;q&quot;</span><br><span class=\"line\">2) &quot;w&quot;</span><br><span class=\"line\">3) &quot;r&quot;</span><br><span class=\"line\">4) &quot;e&quot;</span><br><span class=\"line\">5) &quot;t&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; srandmember q1 3 # q1中随机取出3个对象</span><br><span class=\"line\">1) &quot;w&quot;</span><br><span class=\"line\">2) &quot;e&quot;</span><br><span class=\"line\">3) &quot;r&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; srandmember q1 10  # q1中随机取出10个对象，由于q1基数为5，所以取出5个对象</span><br><span class=\"line\">1) &quot;q&quot;</span><br><span class=\"line\">2) &quot;w&quot;</span><br><span class=\"line\">3) &quot;r&quot;</span><br><span class=\"line\">4) &quot;e&quot;</span><br><span class=\"line\">5) &quot;t&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; srandmember q1 -3 # q1中随机取出 |-3| 个对象，负数count取出的内容中存在重复</span><br><span class=\"line\">1) &quot;r&quot;</span><br><span class=\"line\">2) &quot;r&quot;</span><br><span class=\"line\">3) &quot;e&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; srandmember q1 -9 # |-9|大于基数5，取出9个对象，内有重复。</span><br><span class=\"line\">1) &quot;w&quot;</span><br><span class=\"line\">2) &quot;q&quot;</span><br><span class=\"line\">3) &quot;w&quot;</span><br><span class=\"line\">4) &quot;w&quot;</span><br><span class=\"line\">5) &quot;e&quot;</span><br><span class=\"line\">6) &quot;q&quot;</span><br><span class=\"line\">7) &quot;w&quot;</span><br><span class=\"line\">8) &quot;e&quot;</span><br><span class=\"line\">9) &quot;q&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SUNION\"><a href=\"#SUNION\" class=\"headerlink\" title=\"SUNION\"></a>SUNION</h3><p><code>sunion key [key ...]</code></p>\n<p>返回多个集合的并集；</p>\n<p>若key不存在视集合为空集；</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; smembers q1</span><br><span class=\"line\">1) &quot;q&quot;</span><br><span class=\"line\">2) &quot;w&quot;</span><br><span class=\"line\">3) &quot;t&quot;</span><br><span class=\"line\">4) &quot;e&quot;</span><br><span class=\"line\">5) &quot;r&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; smembers q2</span><br><span class=\"line\">1) &quot;q&quot;</span><br><span class=\"line\">2) &quot;w&quot;</span><br><span class=\"line\">3) &quot;e&quot;</span><br><span class=\"line\">4) &quot;s&quot;</span><br><span class=\"line\">5) &quot;a&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; sunion q1 q2</span><br><span class=\"line\">1) &quot;q&quot;</span><br><span class=\"line\">2) &quot;w&quot;</span><br><span class=\"line\">3) &quot;t&quot;</span><br><span class=\"line\">4) &quot;e&quot;</span><br><span class=\"line\">5) &quot;s&quot;</span><br><span class=\"line\">6) &quot;a&quot;</span><br><span class=\"line\">7) &quot;r&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"SUNIONSTORE\"><a href=\"#SUNIONSTORE\" class=\"headerlink\" title=\"SUNIONSTORE\"></a>SUNIONSTORE</h3><p><code>sunionstore destination key [key ...]</code></p>\n<p>等价于sunion，不同的是，sunionstore会将并集的结果存放于destination中。</p>\n","categories":[],"tags":["Redis"]},{"title":"Redis 1 介绍 结构 bitmaps","url":"http://zswh33.github.io/2022/09/19/Redis-1/","content":"<h1 id=\"Redis\"><a href=\"#Redis\" class=\"headerlink\" title=\"Redis\"></a>Redis</h1><p><a href=\"https://pdai.tech/md/db/nosql-redis/db-redis-overview.html\">https://pdai.tech/md/db/nosql-redis/db-redis-overview.html</a></p>\n<p><a href=\"https://redis.io/docs/data-types/\">https://redis.io/docs/data-types/</a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>Redis是一种支持<strong>key-value等多种数据结构</strong>的存储系统。可用于<strong>缓存，事件发布或订阅、高速队列</strong>等场景，支持<strong>网络，提供字符串、哈希、列表、队列、集合结构</strong>直接存取，基于<strong>内存</strong>，可<strong>持久化</strong>。</p>\n<h2 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h2><p><img src=\"/2022/09/19/Redis-1/Redis%E7%BB%93%E6%9E%84.svg\" alt=\"Redis结构\"></p>\n<h2 id=\"基础数据类型\"><a href=\"#基础数据类型\" class=\"headerlink\" title=\"基础数据类型\"></a>基础数据类型</h2><blockquote>\n<p>Redis数据类型：String、List、Set、Hash、Sorted set、Stream。</p>\n</blockquote>\n<p><img src=\"/2022/09/19/Redis-1/Redis%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.drawio.svg\" alt=\"Redis数据类型.drawio\"></p>\n<table>\n<thead>\n<tr>\n<th>结构类型</th>\n<th>结构存储的值</th>\n<th>结构的读写能力</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>String</td>\n<td>可以是字符串、整数或浮点数</td>\n<td>对字符串或字符串的一部分进行操作；对整数或浮点数进行自增或自建操作</td>\n</tr>\n<tr>\n<td>List</td>\n<td>一个链表，链表上每个节点都包含一个字符串</td>\n<td>对链表的两端进行push和pop操作；读取单个或多个元素；根据值查找或删除元素；</td>\n</tr>\n<tr>\n<td>Set</td>\n<td>包含字符串的无序集合</td>\n<td>字符串的集合，包含基础的方法：添加、删除、查询、isExist；支持交集，并集，差集等；</td>\n</tr>\n<tr>\n<td>Hash</td>\n<td>包含键值对的无序散列表</td>\n<td>添加、获取、删除</td>\n</tr>\n<tr>\n<td>Zset</td>\n<td>与Hash一样，存储键值对</td>\n<td>字符串成员与浮点数分数之间的有序映射；元素的排列依据分数大小排序决定；包含添加、删除、获取；查询支持按照score范围或成员来获取元素。</td>\n</tr>\n</tbody></table>\n<h3 id=\"简述\"><a href=\"#简述\" class=\"headerlink\" title=\"简述\"></a>简述</h3><p>对于Redis来说，所有key都是字符串；</p>\n<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String\"></a>String</h3><p>String存储字节序列，可以是文本、序列化对象和二进制数组；</p>\n<p>通常用于缓存；</p>\n<p>可以进行按位操作。</p>\n<h4 id=\"使用-x2F-场景\"><a href=\"#使用-x2F-场景\" class=\"headerlink\" title=\"使用&#x2F;场景\"></a>使用&#x2F;场景</h4><h5 id=\"一些场景\"><a href=\"#一些场景\" class=\"headerlink\" title=\"一些场景\"></a>一些场景</h5><p><strong>缓存</strong>：把常用信息，字符串、图片或饰品等信息放到redis，Redis作为缓存层，MySQL作为持久化层，均衡MySQL的读写压力；</p>\n<p><strong>计数器</strong>：Redis是单线程模型，一个命令执行完才会去执行下一个；</p>\n<p><strong>Session</strong>：使用SpringSession+Redis实现Session共享。</p>\n<h5 id=\"设置值、获取值\"><a href=\"#设置值、获取值\" class=\"headerlink\" title=\"设置值、获取值\"></a>设置值、获取值</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set user:1 uwupu</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get user:1</span><br><span class=\"line\">&quot;uwupu&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>set user:1 uwupu</code> ：设置user:1的值为uwupu；</p>\n<p><code>get user:1</code>：获取user:1的值。</p>\n<h5 id=\"存储一个序列化JSON字符串，并设定100秒后过期\"><a href=\"#存储一个序列化JSON字符串，并设定100秒后过期\" class=\"headerlink\" title=\"存储一个序列化JSON字符串，并设定100秒后过期\"></a>存储一个序列化JSON字符串，并设定100秒后过期</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set ticket:1 &quot;&#123;&#x27;username&#x27;:&#x27;zhangsan&#x27;,&#x27;name&#x27;:&#x27;zs123&#x27;&#125;&quot; EX 100</span><br><span class=\"line\">OK</span><br></pre></td></tr></table></figure>\n\n<p>设置一个ticket:1并在100秒后过期；</p>\n<h5 id=\"一个计数器\"><a href=\"#一个计数器\" class=\"headerlink\" title=\"一个计数器\"></a>一个计数器</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; incr views:page:2</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; incrby views:page:2 10</span><br><span class=\"line\">(integer) 11</span><br><span class=\"line\">127.0.0.1:6379&gt; incrby views:page:2 5</span><br><span class=\"line\">(integer) 16</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n\n<p><code>incr views:page:2</code>：设置一个计数器；</p>\n<p><code>incrby views:page:2 10</code>：使得计数器增加。</p>\n<h4 id=\"限制\"><a href=\"#限制\" class=\"headerlink\" title=\"限制\"></a>限制</h4><p>默认情况下，单个<code>Redis</code>字符串最大为512MB。</p>\n<h4 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h4><h5 id=\"获取和设置字符串\"><a href=\"#获取和设置字符串\" class=\"headerlink\" title=\"获取和设置字符串\"></a>获取和设置字符串</h5><ul>\n<li><p><strong>SET</strong>：存储一个字符串值。</p>\n<p>set apple 3</p>\n</li>\n<li><p><strong>SETNX</strong>：当键不存在时，存储字符串值，可以用于实现锁。</p>\n<p>SETNX apple 3</p>\n</li>\n<li><p><strong>GET</strong>：获取&#x2F;检索字符串值。</p>\n<p>GET apple</p>\n<p>&gt; 3</p>\n</li>\n<li><p><strong>MGET</strong>：在单个操作中获取多个字符串值</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set a 1</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; set b 2</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; set c 3</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; mget a b c</span><br><span class=\"line\">1) &quot;1&quot;</span><br><span class=\"line\">2) &quot;2&quot;</span><br><span class=\"line\">3) &quot;3&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"管理计数器\"><a href=\"#管理计数器\" class=\"headerlink\" title=\"管理计数器\"></a>管理计数器</h5><p>INCR：创建一个计数器；</p>\n<p>INCRBY：使得计数器增加指定值。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; incr apple</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; incr apple</span><br><span class=\"line\">(integer) 2</span><br><span class=\"line\">127.0.0.1:6379&gt; incrby apple 3</span><br><span class=\"line\">(integer) 5</span><br><span class=\"line\">127.0.0.1:6379&gt; incrby apple 7</span><br><span class=\"line\">(integer) 12</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"其他命令\"><a href=\"#其他命令\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h5><blockquote>\n<p><code>APPEND key value</code>：追加字符串到key的后面，如果key不存在则创建key并将值赋值；返回添加后value的长度；</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set a 123</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; append a qwe</span><br><span class=\"line\">(integer) 6</span><br><span class=\"line\">127.0.0.1:6379&gt; get a</span><br><span class=\"line\">&quot;123qwe&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>DECR key</code>：若key为整数，则将减一的值赋值给key。仅支持64位有符号整数。返回结果值；</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set a 123</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; decr a</span><br><span class=\"line\">(integer) 122</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>DECRBY key value</code>：若key为整数，将key减少指定大小；</p>\n</blockquote>\n<blockquote>\n<p><code>GETDEL key</code>：获得值然后删除该变量；</p>\n</blockquote>\n<blockquote>\n<p><code>GETEX key [EX 秒 | PX 毫秒]</code>：获得Key值并为key设定过期时间；返回key，若key不存在返回nil。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; getex a EX 300</span><br><span class=\"line\">&quot;122&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>GETRANGE key start end</code>：截取字符串并返回。start和end可以为负，若为负表示从字符串末尾截取；</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set asd &quot;This is a Obsidian&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; GETRANGE asd 0 6</span><br><span class=\"line\">&quot;This is&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; GETRANGE asd 4 10</span><br><span class=\"line\">&quot; is a O&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; GETRANGE asd -5 -1</span><br><span class=\"line\">&quot;idian&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>GETSET key value</code>：返回当前值，然后设置新的值；</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set a 123</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; getset a 234</span><br><span class=\"line\">&quot;123&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; get a</span><br><span class=\"line\">&quot;234&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>INCR key</code>：若值为整数，则赋值加一后的结果。返回值为结果值；</p>\n</blockquote>\n<blockquote>\n<p><code>INCRBY key increment</code>：为值增加指定的整数；  </p>\n</blockquote>\n<blockquote>\n<p><code>INCRBYFLOAT key increment</code>：若值可以为浮点数，则设置值为原来的值加上increment；这个可以增加浮点数。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set a 123</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; incrbyfloat a 1.23</span><br><span class=\"line\">&quot;124.23&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>LCS key1 key2 [LEN] [IDX] [MINMATCHLEN len][WITHMATCHLEN]</code>：实现最长公共子序列算法。</p>\n</blockquote>\n<ul>\n<li><p>匹配的字符串不需要连续，如：”asdqwe”和”asqzxe”的结果是”asqe”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set a asdqwe</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; set b asqzxe</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; lcs a b</span><br><span class=\"line\">&quot;asqe&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>一般用于比较两个序列之间的相似程度。</p>\n</li>\n<li><p>算法O(N*M)复杂度较高，尽量运行在较小的字符串上；</p>\n</li>\n<li><p>加上LEN会返回匹配的长度；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; mset a asdqwe b asqzxe</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; lcs a b LEN</span><br><span class=\"line\">(integer) 4</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>加上IDX将返回匹配的位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; lcs a b IDX</span><br><span class=\"line\">1) &quot;matches&quot;</span><br><span class=\"line\">2) 1) 1) 1) (integer) 5</span><br><span class=\"line\">         2) (integer) 5</span><br><span class=\"line\">      2) 1) (integer) 5</span><br><span class=\"line\">         2) (integer) 5</span><br><span class=\"line\">   2) 1) 1) (integer) 3</span><br><span class=\"line\">         2) (integer) 3</span><br><span class=\"line\">      2) 1) (integer) 2</span><br><span class=\"line\">         2) (integer) 2</span><br><span class=\"line\">   3) 1) 1) (integer) 0</span><br><span class=\"line\">         2) (integer) 1</span><br><span class=\"line\">      2) 1) (integer) 0</span><br><span class=\"line\">         2) (integer) 1</span><br><span class=\"line\">3) &quot;len&quot;</span><br><span class=\"line\">4) (integer) 4</span><br></pre></td></tr></table></figure>\n\n<p>其中，在**2)<strong>中有</strong>1),2),3)**三组序列，每组序列表示一组匹配列表；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1) 1) (integer) 5</span><br><span class=\"line\">   2) (integer) 5</span><br><span class=\"line\">2) 1) (integer) 5</span><br><span class=\"line\">   2) (integer) 5</span><br></pre></td></tr></table></figure>\n\n<p>这个是在 2) -&gt; 1)下的内容，其中1）下的两个值为在key1中匹配的起点终点，2）下的两个值时在key2中匹配的起点和重点，其他依次类推。</p>\n</li>\n</ul>\n<blockquote>\n<p><code>MGET key [key ...]</code>：一次获得多个值。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; mset a 10 b 20</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; mget a b</span><br><span class=\"line\">1) &quot;10&quot;</span><br><span class=\"line\">2) &quot;20&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>MSET key value[ key value …]：一次设置多个key和值</p>\n</blockquote>\n<blockquote>\n<p>MSETNX key value[ key value …]：一次声明且设置多个之前不存在的key和值；若key存在，则失败，返回0；若成功，则返回1。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; msetnx x 1 y 2</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; msetnx x 1 z 3</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; mget x y z</span><br><span class=\"line\">1) &quot;1&quot;</span><br><span class=\"line\">2) &quot;2&quot;</span><br><span class=\"line\">3) (nil)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>PSETEX key milliseconds value：设置key和value，并设置过期时间，单位为毫秒。与setex不同的是，时间以毫秒为单位，setex时间以秒为单位。即将被弃用</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; psetex a 1000 b</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; get a</span><br><span class=\"line\">&quot;b&quot;</span><br><span class=\"line\">127.0.0.1:6379&gt; get a</span><br><span class=\"line\">(nil)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>SET key value [NX | XX] [GET] [EX 秒 | PX 毫秒 | EXAT unit-time-sexonds | PXAT unit-time-milliseconds | KEEPTTL]</p>\n<p>设置key和value。若key不为</p>\n</blockquote>\n<p>EX：设置指定的过期时间，单位秒；</p>\n<p>PX：设置指定的过期时间，单位毫秒；</p>\n<p>EXAT：Unix时间，单位秒；</p>\n<p>PXAT：Unit时间，单位毫秒；</p>\n<p>NX：当Key不存在时设置；</p>\n<p>XX：当key存在时设置；</p>\n<p>KEEPTTL：获取Key的过期时间；</p>\n<p>GET：返回key原来的值，若key不存在返回nil。</p>\n<p>返回值：</p>\n<ul>\n<li>OK：成功返回ok；</li>\n<li>nil：若get的值为nil，则返回nil；若因为NX或XX导致SET未执行操作，返回nil；</li>\n<li>字符串：若get的值不为nil，返回原来字符串的值。</li>\n</ul>\n<blockquote>\n<p>SETEX、SETNX：设置过期时间，即将被弃用。</p>\n</blockquote>\n<blockquote>\n<p>SETRANGE key offset value：从key值的offset位置开始，设置值为value。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set key &quot;HelloWorld&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; set a &quot;HelloWorld&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; setrange a 5 Redis</span><br><span class=\"line\">(integer) 10</span><br><span class=\"line\">127.0.0.1:6379&gt; get a</span><br><span class=\"line\">&quot;HelloRedis&quot;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>STRLEN key：获取字符串长度。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set a &quot;HelloWorld&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; strlen a</span><br><span class=\"line\">(integer) 10</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>SUBSTR key start end：截取字符串。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set a &quot;HelloWorld&quot;</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; substr a 2 5</span><br><span class=\"line\">&quot;lloW&quot;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"bitmaps-通过二进制修改-x2F-获取String的值\"><a href=\"#bitmaps-通过二进制修改-x2F-获取String的值\" class=\"headerlink\" title=\"bitmaps 通过二进制修改&#x2F;获取String的值\"></a>bitmaps 通过二进制修改&#x2F;获取String的值</h4><p>将String编码为二进制格式，bitmaps可以获取或设定二进制数列的每个位置的值。</p>\n<p><strong>SETBIT key offset 0&#x2F;1</strong>：设定key的二进制位第offset位的值；</p>\n<p><strong>GETBIT key offset</strong>：获取key的二进制位第offset位的值；</p>\n<p>offset在二进制数列里，从前往后数。0为起始位置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set num 0</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit num 0</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit num 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit num 2</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit num 3</span><br><span class=\"line\">(integer) 1</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit num 4</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit num 5</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit num 6</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; getbit num 7</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; setbit num 5 1</span><br><span class=\"line\">(integer) 0</span><br><span class=\"line\">127.0.0.1:6379&gt; get num</span><br><span class=\"line\">&quot;4&quot;</span><br></pre></td></tr></table></figure>\n\n<p>先**设置num的值为’0’**，</p>\n<p>然后<strong>获取0-7位置上的二进制数字</strong>，分别为：<strong>00110000</strong>，对应’0’的ansi码；</p>\n<p>设置<strong>第5位的二进制数位为1</strong>后，获取num的值，值变成了<strong>4</strong>。</p>\n<h5 id=\"其他命令-1\"><a href=\"#其他命令-1\" class=\"headerlink\" title=\"其他命令\"></a>其他命令</h5><h6 id=\"bitcount\"><a href=\"#bitcount\" class=\"headerlink\" title=\"bitcount\"></a>bitcount</h6><p>返回字节位数；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set apple sweet,nice</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; bitcount apple</span><br><span class=\"line\">(integer) 43</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"bitfield\"><a href=\"#bitfield\" class=\"headerlink\" title=\"bitfield\"></a>bitfield</h6><p>将字符串作为位数组，允许对位域的值进行获取、修改和自增自减。</p>\n<p><strong>子命令列表</strong></p>\n<ul>\n<li>GET type offset 获取位域的值，以十进制返回；</li>\n<li>SET type offset value 设置位域的值，并返回原来的值；</li>\n<li>INCRBY type offset increment，自增\\自减指定位域的值并返回新值。</li>\n</ul>\n<p><strong>type offset 解释</strong></p>\n<p>type：即位域的类型；</p>\n<p>i表示有符号整数，u表示无符号整数。</p>\n<p>例：</p>\n<p>i8：8位有符号整数；</p>\n<p>u8：8位无符号整数；</p>\n<p>i16：16位有符号整数。</p>\n<p>offset：即位移偏移量。</p>\n<p><strong>使用</strong></p>\n<blockquote>\n<p>GET </p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; set apple sweetAndNice</span><br><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; bitfield apple GET i8 0</span><br><span class=\"line\">1) (integer) 115</span><br><span class=\"line\">127.0.0.1:6379&gt; bitfield apple GET i8 8</span><br><span class=\"line\">1) (integer) 119</span><br><span class=\"line\">127.0.0.1:6379&gt; bitfield apple GET i8 16</span><br><span class=\"line\">1) (integer) 101</span><br><span class=\"line\">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure>\n\n<p>设定apple的值为sweetAndNice后；</p>\n<p>以有符号整数的形式获取位于0,8,16位域的值，分别为115,119,101，分别对应s、w、e。</p>\n<blockquote>\n<p>SET</p>\n</blockquote>\n<p>设置位域的值，并返回原来的值；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; bitfield apple set i8 0 117</span><br><span class=\"line\">1) (integer) 115</span><br><span class=\"line\">127.0.0.1:6379&gt; get apple</span><br><span class=\"line\">&quot;uweetAndNice&quot;</span><br></pre></td></tr></table></figure>\n\n<p>以i8形式设置位置0的位域的值为117。</p>\n<blockquote>\n<p>INCRBY</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1:6379&gt; bitfield apple incrby i8 0 3</span><br><span class=\"line\">1) (integer) 120</span><br><span class=\"line\">127.0.0.1:6379&gt; get apple</span><br><span class=\"line\">&quot;xweetAndNice&quot;</span><br></pre></td></tr></table></figure>\n\n<p>以i8形式为位置0的位域的值增加3。</p>\n<blockquote>\n<p>OVERFLOW</p>\n</blockquote>\n<p>改变当INCRBY子命令发生溢出情况时的行为。</p>\n<p>可以有的值：WRAP SAT FAIL</p>\n<p>WRAP：默认值。若为无符号数，则按照最大值进行取模运算；若为有符号数，对于结果的取值，上溢取溢出值与最小值相加的值，下溢取最大值与溢出值相减的值，与C语言类似；</p>\n<p>SAT：若上溢，则使值控制在最大值；若下溢，则使值控制在最小值。如：若最大值为127，则120 加 10结果为127；</p>\n<p>FAIL：若发生溢出，取消本次操作，返回null向调用者发送错误信号。 </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OK</span><br><span class=\"line\">127.0.0.1:6379&gt; bitfield a OVERFLOW WRAP INCRBY i8 0 1234</span><br><span class=\"line\">1) (integer) 3</span><br><span class=\"line\">127.0.0.1:6379&gt; bitfield a OVERFLOW SAT INCRBY i8 0 1234</span><br><span class=\"line\">1) (integer) 127</span><br><span class=\"line\">127.0.0.1:6379&gt; bitfield a OVERFLOW FAIL INCRBY i8 0 1234</span><br><span class=\"line\">1) (nil)</span><br><span class=\"line\">127.0.0.1:6379&gt; get a</span><br><span class=\"line\">&quot;\\x7f23&quot;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"bitfield-ro\"><a href=\"#bitfield-ro\" class=\"headerlink\" title=\"bitfield_ro\"></a>bitfield_ro</h6><p>类似于bitfield，但是只接受get子命令；</p>\n<p>因为bitfield有改变数值的选项，所以在技术上被标记为redis的写入命令；</p>\n<p>（存疑）Redis可以有主节点和副本节点，副本节点是主节点的副本；</p>\n<p>若bitfield命令向副本节点发送操作，副本节点会将操作转发到主节点进行操作，而不是在副本中操作；</p>\n<p>bitfield_ro命令也会向副本节点发送操作，但bitfield_ro的操作不会被转发到主节点，在副本节点中获取数据后直接返回。（可能会存在旧数据）</p>\n<h6 id=\"bitop\"><a href=\"#bitop\" class=\"headerlink\" title=\"bitop\"></a>bitop</h6><p>BITOP支持四种与运算：AND、OR、XOR和NOT。</p>\n<p>dest 目标  src 来源</p>\n<ul>\n<li>BITOP AND destkey srckey1 srckey2 srckey3 …  srckeyN</li>\n<li>BITOP OR destkey srckey1 srckey2 srckey3 …  srckeyN</li>\n<li>BITOP XOR destkey srckey1 srckey2 srckey3 …  srckeyN</li>\n<li>BITOP NOT destkey srckey</li>\n</ul>\n<p>NOT只需要一个参数。</p>\n<p>运算结果存放在dest中，依据srckey进行计算。</p>\n<h6 id=\"bitpos\"><a href=\"#bitpos\" class=\"headerlink\" title=\"bitpos\"></a>bitpos</h6><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BITPOS key bit [start [end [BYTE | BIT]]]</span><br></pre></td></tr></table></figure>\n\n<p>将字符串数据作为一个位数组，获取指定范围第一个1或0的<strong>位置</strong>。</p>\n<p>bit值为1&#x2F;0，表示指定1或者0；</p>\n<p>使用start和end指定范围；</p>\n","categories":[],"tags":["Redis"]},{"title":"SpringBoot 一些杂项","url":"http://zswh33.github.io/2022/09/18/SpringBoot-一些杂项/","content":"<h1 id=\"Spring-Cache\"><a href=\"#Spring-Cache\" class=\"headerlink\" title=\"Spring Cache\"></a>Spring Cache</h1><p><a href=\"https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#cache-annotations\">https://docs.spring.io/spring-framework/docs/current/reference/html/integration.html#cache-annotations</a></p>\n<p>Spring提供了能够缓存方法调用结果的注解：@Cacheable，@CacheEvict，@CachePut，@Caching，@CacheConfig。</p>\n<p>该注解可以用在<strong>任何方法</strong>中。</p>\n<h2 id=\"Cacheable\"><a href=\"#Cacheable\" class=\"headerlink\" title=\"@Cacheable\"></a>@Cacheable</h2><h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>@Cacheable可以注解在需要缓存的方法上。</p>\n<p>通过@Cacheable可以设定：</p>\n<ul>\n<li>缓存使用的CacheName</li>\n<li>缓存存放的key；</li>\n<li>缓存的条件；</li>\n</ul>\n<p>设定注解的value后，当方法被调用，Spring会把返回值存放在名为CacheName的缓存中，将<strong>参数Hash后的值</strong>作为key，返回值作为value。</p>\n<p>当下次以<strong>相同参数</strong>调用方法时，Spring将从缓存中取出上次的结果，然后将结果返回，本次不调用该方法。</p>\n<h3 id=\"一个示例\"><a href=\"#一个示例\" class=\"headerlink\" title=\"一个示例\"></a>一个示例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"meta\">@EnableCaching</span>  <span class=\"comment\">//需要在启动类或@Configuration类上添加@EnableCaching注解表示启用缓存</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootGetIpStudyApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootGetIpStudyApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootCacheStudyController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/get&quot;)</span></span><br><span class=\"line\">    <span class=\"meta\">@Cacheable(&quot;cache_study&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">get</span><span class=\"params\">(<span class=\"type\">int</span> s)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> UUID.randomUUID().toString().substring(<span class=\"number\">0</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在一次运行过程中，多次请求<a href=\"https://127.0.0.1/get?s=1%EF%BC%8C%E8%8E%B7%E5%8F%96%E7%9A%84%E7%BB%93%E6%9E%9C%E9%83%BD%E6%98%AF%E4%B8%80%E8%87%B4%E7%9A%84%E3%80%82\">https://127.0.0.1/get?s=1，获取的结果都是一致的。</a></p>\n<h3 id=\"缓存中的key\"><a href=\"#缓存中的key\" class=\"headerlink\" title=\"缓存中的key\"></a>缓存中的key</h3><p>缓存的实现本质是键值存储。</p>\n<p>若方法没有参数，将以SimpleKey.EMPTY作为key将结果存放；</p>\n<p>若方法有一个参数，则直接以这个参数作为key；</p>\n<p>若方法有多个参数，则返回一个包含所有参数的SimpleKey。（hashCode()的结果）</p>\n<p><strong>若方法有多个参数，可以指定一个SpEL表达式作为SimpleKey进行存储。</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/get5&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Cacheable(cacheNames = &quot;cache_study&quot;,key = &quot;#a&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">get5</span><span class=\"params\">(<span class=\"type\">int</span> a,<span class=\"type\">int</span> b,<span class=\"type\">int</span> c)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> UUID.randomUUID().toString().substring(<span class=\"number\">0</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>无论b和c为多少，只有a改变时，缓存才会发生改变。</p>\n<h3 id=\"同步缓存\"><a href=\"#同步缓存\" class=\"headerlink\" title=\"同步缓存\"></a>同步缓存</h3><p>在多线程环境中，可能会有多个线程同时调用同一个方法；</p>\n<p>默认缓存不锁定任何东西，可能会导致多次调用，然后达到同样的缓存结果。</p>\n<p>对于这种情况，可以使用<code>sync</code>属性；</p>\n<p>添加该属性后，在多个线程调用方法时，只有一个线程用于计算，其他线程被阻塞直到缓存被更新。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Cacheable(cacheNames=&quot;foos&quot;, sync=true)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> Foo <span class=\"title function_\">executeExpensiveOperation</span><span class=\"params\">(String id)</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"条件缓存\"><a href=\"#条件缓存\" class=\"headerlink\" title=\"条件缓存\"></a>条件缓存</h3><p>可以设定达到指定的条件再进行缓存，使用参数<code>condition</code>。使用SpEL表达式作为值。</p>\n<h4 id=\"根据参数进行条件缓存\"><a href=\"#根据参数进行条件缓存\" class=\"headerlink\" title=\"根据参数进行条件缓存\"></a>根据参数进行条件缓存</h4><h5 id=\"condition\"><a href=\"#condition\" class=\"headerlink\" title=\"condition\"></a>condition</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/get2&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Cacheable(cacheNames = &quot;cache_study&quot;,condition = &quot;#s&gt;10&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">get2</span><span class=\"params\">(<span class=\"type\">int</span> s)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> UUID.randomUUID().toString().substring(<span class=\"number\">0</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当s的值大于10，则进行缓存。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/get3&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Cacheable(cacheNames = &quot;cache_study&quot;,condition = &quot;#s.length()&gt;3&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">get3</span><span class=\"params\">(String s)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> UUID.randomUUID().toString().substring(<span class=\"number\">0</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当字符串s长度大于3时进行缓存。</p>\n<h5 id=\"unless\"><a href=\"#unless\" class=\"headerlink\" title=\"unless\"></a>unless</h5><p>unless发生在<strong>方法调用结束之后</strong>，也用来判断是否需要缓存，这个属性<strong>不会控制方法是否被调用</strong>。</p>\n<p>unless的属性值<strong>表现方式与condition相反</strong>，译为“如果不”，则进行缓存。</p>\n<p>可以使用<code>#result</code>来代表返回的对象，填充属性值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/get4&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Cacheable(cacheNames = &quot;cache_study&quot;,unless = &quot;#result.id&gt;10&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Water <span class=\"title function_\">get4</span><span class=\"params\">(<span class=\"type\">int</span> id)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Water</span>(id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Water</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> id;</span><br><span class=\"line\">    String uuid;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Water</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.uuid = UUID.randomUUID().toString().substring(<span class=\"number\">0</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t<span class=\"comment\">//getter,setter,toStirng方法省略。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当方法调用返回的<strong>对象的id小于等于10</strong>，则返回缓存的结果，本地调用返回的结果丢弃。</p>\n<p>反之，<strong>将本次调用的结果存到缓存中</strong>。</p>\n<h5 id=\"SpEL表达式可以用的元参数\"><a href=\"#SpEL表达式可以用的元参数\" class=\"headerlink\" title=\"SpEL表达式可以用的元参数\"></a>SpEL表达式可以用的元参数</h5><table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Location</th>\n<th>Description</th>\n<th>Example</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>methodName</code></td>\n<td>Root object</td>\n<td>被调用的方法名</td>\n<td><code>#root.methodName</code></td>\n</tr>\n<tr>\n<td><code>method</code></td>\n<td>Root object</td>\n<td>被调用的方法</td>\n<td><code>#root.method.name</code></td>\n</tr>\n<tr>\n<td><code>target</code></td>\n<td>Root object</td>\n<td>被调用的目标对象</td>\n<td><code>#root.target</code></td>\n</tr>\n<tr>\n<td><code>targetClass</code></td>\n<td>Root object</td>\n<td>目标对象的class</td>\n<td><code>#root.targetClass</code></td>\n</tr>\n<tr>\n<td><code>args</code></td>\n<td>Root object</td>\n<td>被调用的参数列表</td>\n<td><code>#root.args[0]</code></td>\n</tr>\n<tr>\n<td><code>caches</code></td>\n<td>Root object</td>\n<td>当前方法调用使用的缓存列表。（如@Cacheable（{“cache1”,“cache2”}））</td>\n<td><code>#root.caches[0].name</code></td>\n</tr>\n<tr>\n<td>Argument name</td>\n<td>Evaluation context</td>\n<td>方法参数的名字，使用<code>#参数名</code>，也可以使用<code>#p0</code>或<code>#a0</code>，0代表参数的索引</td>\n<td>#apple #p0 #a1</td>\n</tr>\n<tr>\n<td><code>result</code></td>\n<td>Evaluation context</td>\n<td>方法执行后的返回值</td>\n<td><code>#result</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"CachePut\"><a href=\"#CachePut\" class=\"headerlink\" title=\"@CachePut\"></a>@CachePut</h2><p>使用@CachePut注解的方法，方法总会被调用执行，并且会将调用结果放到缓存中。</p>\n<h2 id=\"CacheEvict\"><a href=\"#CacheEvict\" class=\"headerlink\" title=\"@CacheEvict\"></a>@CacheEvict</h2><p>使用@CacheEvict注解可以对缓存进行清理。</p>\n<p>可以指定一个或多个缓存清理，允许指定key或条件进行缓存，另可以带一个参数<code>allEntries</code>表示是否需要清理所有的缓存。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@CacheEvict(cacheNames=&quot;books&quot;, allEntries=true)</span> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">loadBooks</span><span class=\"params\">(InputStream batch)</span></span><br></pre></td></tr></table></figure>\n\n<p>清理cacheNames为books的缓存。</p>\n<h2 id=\"Caching\"><a href=\"#Caching\" class=\"headerlink\" title=\"@Caching\"></a>@Caching</h2><p>@Caching注解可以让多个相同的注解进行嵌套。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Caching(evict = &#123; @CacheEvict(&quot;primary&quot;), @CacheEvict(cacheNames=&quot;secondary&quot;, key=&quot;#p0&quot;) &#125;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Book <span class=\"title function_\">importBooks</span><span class=\"params\">(String deposit, Date date)</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"CacheConfig\"><a href=\"#CacheConfig\" class=\"headerlink\" title=\"@CacheConfig\"></a>@CacheConfig</h2><p>@CacheConfig注解用在类上，可以为整个类共享一个CacheName。</p>\n<p>在方法上的@Cachable注解不需要添加CacheName属性，就可以实现缓存；</p>\n<p>若类里面有一个方法的@Cachable注解有CacheName属性，则该方法使用自己的CacheName，不共享类的CacheName。</p>\n<p>若方法没有被@Cachable注解，则不会进行缓存。</p>\n<h2 id=\"EnableCaching\"><a href=\"#EnableCaching\" class=\"headerlink\" title=\"@EnableCaching\"></a>@EnableCaching</h2><p>要使以上的注解生效，需要在启动类或配置类上添加@EnableCaching注解。</p>\n","categories":[],"tags":["SpringBoot"]},{"title":"Java 一些杂项","url":"http://zswh33.github.io/2022/09/18/Java-一些杂项/","content":"<h1 id=\"获取客户端（用户）真实IP\"><a href=\"#获取客户端（用户）真实IP\" class=\"headerlink\" title=\"获取客户端（用户）真实IP\"></a>获取客户端（用户）真实IP</h1><p><a href=\"https://dirask.com/posts/Spring-Boot-get-client-IP-address-from-request-HttpServletRequest-pBv9Bp\">https://dirask.com/posts/Spring-Boot-get-client-IP-address-from-request-HttpServletRequest-pBv9Bp</a></p>\n<p>两种情况：</p>\n<ol>\n<li>服务器IP暴露，客户端通过IP直接访问服务器；</li>\n<li>服务器前面有一层或多层反向代理，客户端通过代理访问服务器。</li>\n</ol>\n<p>对于第一种情况，使用<code>request.getRemoteAddr()</code>可以直接获得客户端IP。不过<strong>不常用</strong>。</p>\n<p>因为目前流行的架构中，基本上服务器不会直接把自己的IP暴露出去。</p>\n<h2 id=\"一些代理软件用的标头\"><a href=\"#一些代理软件用的标头\" class=\"headerlink\" title=\"一些代理软件用的标头\"></a>一些代理软件用的标头</h2><table>\n<thead>\n<tr>\n<th>代理软件</th>\n<th>使用默认HeaderName</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Apache</td>\n<td>Proxy-Client-IP</td>\n</tr>\n<tr>\n<td>Weblogic</td>\n<td>WL-Proxy-Client-IP</td>\n</tr>\n<tr>\n<td>有些代理服务器</td>\n<td>HTTP_CLIENT_IP</td>\n</tr>\n<tr>\n<td>Nginx</td>\n<td>X-Real-IP</td>\n</tr>\n</tbody></table>\n<p>有些网络可以通过多层代理，那么获得到的IP就会有多个，一般用“,”分割开来。</p>\n<h2 id=\"测试从代理获得的标头\"><a href=\"#测试从代理获得的标头\" class=\"headerlink\" title=\"测试从代理获得的标头\"></a>测试从代理获得的标头</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(HttpServletRequest request)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//通过request直接获得IP</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n&lt;br&gt;通过request.getRemoteAddr()获得IP：&quot;</span> + request.getRemoteAddr());</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;\\n&lt;br&gt;通过request.getRemoteHost()获得IP：&quot;</span> + request.getRemoteHost());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//将所有标头返回到页面</span></span><br><span class=\"line\">        Enumeration&lt;String&gt; headerNames = request.getHeaderNames();</span><br><span class=\"line\">        System.out.println((<span class=\"string\">&quot;\\nHeader List:&quot;</span>));</span><br><span class=\"line\">        String headerName;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (headerNames.hasMoreElements())&#123;</span><br><span class=\"line\">            headerName = headerNames.nextElement();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;\\n&quot;</span> + headerName + <span class=\"string\">&quot;: &quot;</span> + request.getHeader(headerName));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;br&gt;通过request.getRemoteAddr()获得IP：127.0.0.1</span><br><span class=\"line\">&lt;br&gt;通过request.getRemoteHost()获得IP：127.0.0.1</span><br><span class=\"line\">Header List:</span><br><span class=\"line\">host: 192.168.227.1</span><br><span class=\"line\">x-real-ip: 127.0.0.1</span><br><span class=\"line\">x-forwarded-for: 192.168.227.129, 127.0.0.1, 127.0.0.1, 127.0.0.1</span><br><span class=\"line\">connection: close</span><br><span class=\"line\">user-agent: curl/7.81.0</span><br><span class=\"line\">accept: */*</span><br></pre></td></tr></table></figure>\n\n<p>图中可以了解，x-forwarded-for存放了转发过程中的所有IP。</p>\n<h2 id=\"获取用户真实IP\"><a href=\"#获取用户真实IP\" class=\"headerlink\" title=\"获取用户真实IP\"></a>获取用户真实IP</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping(&quot;/ip&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">getIp</span><span class=\"params\">(HttpServletRequest request)</span>&#123;</span><br><span class=\"line\">    String[] IP_HEADERS = &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;X-Forwarded-For&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;Proxy-Client-IP&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;WL-Proxy-Client-IP&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;HTTP_X_FORWARDED_FOR&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;HTTP_X_FORWARDED&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;HTTP_X_CLUSTER_CLIENT_IP&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;HTTP_CLIENT_IP&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;HTTP_FORWARDED_FOR&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;HTTP_FORWARDED&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;HTTP_VIA&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;REMOTE_ADDR&quot;</span></span><br><span class=\"line\">            <span class=\"comment\">// you can add more matching headers here ...</span></span><br><span class=\"line\">            <span class=\"comment\">//你可以在这里添加更多的标头</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (String header : IP_HEADERS)&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> request.getHeader(header);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (value == <span class=\"literal\">null</span> || StringUtils.isEmpty(value))&#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">part</span> <span class=\"operator\">=</span> value.split(<span class=\"string\">&quot;,&quot;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> part;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> request.getRemoteAddr();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/09/18/Java-%E4%B8%80%E4%BA%9B%E6%9D%82%E9%A1%B9/image-20220918155710542.png\" alt=\"image-20220918155710542\"></p>\n<h1 id=\"equalsIgnoreCase\"><a href=\"#equalsIgnoreCase\" class=\"headerlink\" title=\"equalsIgnoreCase()\"></a><code>equalsIgnoreCase()</code></h1><p>将字符串与指定的对象比较，<strong>忽略大小写</strong>。阿萨德</p>\n","categories":[],"tags":["Java"]},{"title":"Java 多线程 Note","url":"http://zswh33.github.io/2022/09/17/Java-多线程-Note/","content":"<h1 id=\"ThreadLocal\"><a href=\"#ThreadLocal\" class=\"headerlink\" title=\"ThreadLocal\"></a>ThreadLocal</h1><p>本地线程变量，为当前线程填充的变量；</p>\n<ul>\n<li>变量对其他线程而言是封闭且隔离的，ThreadLocal为变量在每个线程中创建了一个副本，这样每个线程都可以访问自己内容的副本变量；</li>\n</ul>\n<h2 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h2><p>**T get()**：返回当前线程本地变量的当前线程的副本中的值；</p>\n<p>**void remove()**：移除此线程的本地变量；</p>\n<p>**void set()**：设置此线程本地变量的值；</p>\n<p><code>&lt;S&gt; ThreadLocal&lt;S&gt;</code>：创建一个线程局部变量。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadLocalStudy</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ThreadLocal&lt;Apple&gt; threadLocal = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocal</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建5个线程 输出threadLocal.get()</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                threadLocal.set(<span class=\"keyword\">new</span> <span class=\"title class_\">Apple</span>());</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;:&quot;</span>+threadLocal.get());</span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Apple</span>&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0:com.yn.Apple@4f0c4707</span><br><span class=\"line\">2:com.yn.Apple@7e129604</span><br><span class=\"line\">1:com.yn.Apple@19281561</span><br><span class=\"line\">4:com.yn.Apple@4388eabf</span><br><span class=\"line\">3:com.yn.Apple@90472a2</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n<p>对于不同的线程，theradLocal中值不同。</p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><h3 id=\"文字介绍\"><a href=\"#文字介绍\" class=\"headerlink\" title=\"文字介绍\"></a>文字介绍</h3><p><img src=\"/2022/09/17/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B-Note/ThreadLocal.svg\" alt=\"ThreadLocal\"></p>\n<p>描述：在Thread内部有个threadLocals引用，在使用ThreadLocal时，</p>\n<ol>\n<li>ThreadLocal会为threadLocals创建ThreadLocalMap的对象，</li>\n<li>然后将自己的hash作为Map的key，将要存放的值作为value，存放在threadLocals里的table表里。</li>\n<li>当要取用时，从Thread的threadLocals中，将自己的hash作为key，取出Entry对象，然后取出My Object。</li>\n</ol>\n<h3 id=\"内存泄露问题\"><a href=\"#内存泄露问题\" class=\"headerlink\" title=\"内存泄露问题\"></a>内存泄露问题</h3><p>在线程中，当一个ThreadLocal引用指向变成null，意味着这个ThreadLocal对象不再需要；</p>\n<p>在threadLocals的table中，若key为null，value仍在堆中，在下次的ThreadLocalMap.set\\get()方法执行都会清理漏掉的value；</p>\n<p>但如果<strong>ThreadLocalMap.set\\get()方法没有被执行</strong>，value一直未被清理，就有可能发生<strong>内存泄露问题</strong>。</p>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadLocal</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ThreadLocal</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//get方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> T <span class=\"title function_\">get</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//从当前线程获得ThreadLocalMap</span></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">        <span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> getMap(t);</span><br><span class=\"line\">        <span class=\"comment\">//如果map为空则返回null</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            ThreadLocalMap.<span class=\"type\">Entry</span> <span class=\"variable\">e</span> <span class=\"operator\">=</span> map.getEntry(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"meta\">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class=\"line\">                <span class=\"type\">T</span> <span class=\"variable\">result</span> <span class=\"operator\">=</span> (T)e.value;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> setInitialValue();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//set方法</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(T value)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">        <span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">map</span> <span class=\"operator\">=</span> getMap(t);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (map != <span class=\"literal\">null</span>)</span><br><span class=\"line\">            map.set(<span class=\"built_in\">this</span>, value);</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            createMap(t, value);<span class=\"comment\">//如果没有map则创建map</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">     <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         <span class=\"type\">ThreadLocalMap</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> getMap(Thread.currentThread());</span><br><span class=\"line\">         <span class=\"keyword\">if</span> (m != <span class=\"literal\">null</span>)</span><br><span class=\"line\">             m.remove(<span class=\"built_in\">this</span>);<span class=\"comment\">//删除value</span></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">    ThreadLocalMap <span class=\"title function_\">getMap</span><span class=\"params\">(Thread t)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> t.threadLocals;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">createMap</span><span class=\"params\">(Thread t, T firstValue)</span> &#123;</span><br><span class=\"line\">        t.threadLocals = <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadLocalMap</span>(<span class=\"built_in\">this</span>, firstValue);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\tThreadLocalMap的实现类似于HashMap，都有自动扩容和初始容量的概念；</span></span><br><span class=\"line\"><span class=\"comment\">\t不同的是，ThreadLocalMap的map实现采用Entry数组实现，Entry是一个弱引用；ThreadLocal采用开放地址法，可以减少地址碰撞。</span></span><br><span class=\"line\"><span class=\"comment\">\t*/</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadLocalMap</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Entry[] table;<span class=\"comment\">//map</span></span><br><span class=\"line\">\t\t...</span><br><span class=\"line\">        <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Entry</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WeakReference</span>&lt;ThreadLocal&lt;?&gt;&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">/** The value associated with this ThreadLocal. */</span></span><br><span class=\"line\">            Object value;</span><br><span class=\"line\">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">super</span>(k);</span><br><span class=\"line\">                value = v;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ThreadLocalMap(ThreadLocal&lt;?&gt; firstKey, Object firstValue) &#123;</span><br><span class=\"line\">            table = <span class=\"keyword\">new</span> <span class=\"title class_\">Entry</span>[INITIAL_CAPACITY];</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> firstKey.threadLocalHashCode &amp; (INITIAL_CAPACITY - <span class=\"number\">1</span>);</span><br><span class=\"line\">            table[i] = <span class=\"keyword\">new</span> <span class=\"title class_\">Entry</span>(firstKey, firstValue);</span><br><span class=\"line\">            size = <span class=\"number\">1</span>;</span><br><span class=\"line\">            setThreshold(INITIAL_CAPACITY);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> Entry <span class=\"title function_\">getEntry</span><span class=\"params\">(ThreadLocal&lt;?&gt; key)</span> &#123;...&#125;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">set</span><span class=\"params\">(ThreadLocal&lt;?&gt; key, Object value)</span> &#123;...&#125;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">remove</span><span class=\"params\">(ThreadLocal&lt;?&gt; key)</span> &#123;...&#125;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"WeakReference-弱引用\"><a href=\"#WeakReference-弱引用\" class=\"headerlink\" title=\"WeakReference 弱引用\"></a>WeakReference 弱引用</h1><p><a href=\"https://brightloong.github.io/2018/05/27/%E5%85%B3%E4%BA%8EJava%E4%B8%AD%E7%9A%84WeakReference/#more\">https://brightloong.github.io/2018/05/27/%E5%85%B3%E4%BA%8EJava%E4%B8%AD%E7%9A%84WeakReference/#more</a></p>\n<p>当一个对象仅仅被weak reference，而没有任何其他strong reference指向的时候；</p>\n<p>如果gc运行，不论内存空间是否足够，这个对象都会被回收；</p>\n<h2 id=\"认识弱引用\"><a href=\"#认识弱引用\" class=\"headerlink\" title=\"认识弱引用\"></a>认识弱引用</h2><p>WeakReference类继承Reference，有两个构造函数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeakReference</span>&lt;T&gt; <span class=\"keyword\">extends</span> <span class=\"title class_\">Reference</span>&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">//创建一个弱引用对象，指向给定的对象。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">WeakReference</span><span class=\"params\">(T referent)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(referent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建一个弱引用指向给定的对象，注册到给定的队列；</span></span><br><span class=\"line\">    <span class=\"comment\">//当引用被回收，指向给定对象的WeakReference将会被放到队列里。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">WeakReference</span><span class=\"params\">(T referent, ReferenceQueue&lt;? <span class=\"built_in\">super</span> T&gt; q)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(referent, q);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个<strong>弱引用WeakReference对象</strong>，指向给定的<strong>对象T</strong>；</p>\n<p>当给定的<strong>对象T</strong>被回收，<strong>WeakReference对象</strong>会被放到<strong>ReferenceQueue队列</strong>里面，若没有给定ReferenceQueue，则不会发生。</p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeakReferenceStudy</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建一个弱引用对象</span></span><br><span class=\"line\">        <span class=\"comment\">//创建一个瓶子把水装进去</span></span><br><span class=\"line\">        <span class=\"type\">Bottle</span> <span class=\"variable\">bottle</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Bottle</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Water</span>(<span class=\"string\">&quot;Pure Water&quot;</span>));</span><br><span class=\"line\">        System.out.println(bottle);<span class=\"comment\">//输出瓶子</span></span><br><span class=\"line\">        System.out.println(bottle.get());<span class=\"comment\">//输出水</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.gc();<span class=\"comment\">//进行一次gc</span></span><br><span class=\"line\"></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);<span class=\"comment\">//休息5秒，确保gc进行结束</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(bottle);<span class=\"comment\">//输出瓶子</span></span><br><span class=\"line\">        System.out.println(bottle.get());<span class=\"comment\">//输出水</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//带有名字的水</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Water</span>&#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Water</span><span class=\"params\">(String name)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(getName()+<span class=\"string\">&quot;：我被回收了。&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">super</span>.finalize();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Water&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以装水的瓶子</span></span><br><span class=\"line\"><span class=\"comment\">//extends WeakReference&lt;water&gt; 可能会漏水</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Bottle</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WeakReference</span>&lt;Water&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Bottle</span><span class=\"params\">(Water referent)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(referent);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com.yn.Bottle@1b6d3586</span><br><span class=\"line\">Water&#123;name=<span class=\"string\">&#x27;Pure Water&#x27;</span>&#125;</span><br><span class=\"line\">Pure Water：我被回收了。</span><br><span class=\"line\">com.yn.Bottle@1b6d3586</span><br><span class=\"line\"><span class=\"literal\">null</span></span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code <span class=\"number\">0</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先Bottle对象和Water对象正常输出；</li>\n<li>然后进行一次gc，Water被回收了；</li>\n<li>再次输出的时候，Bottle正常输出，Water变成null。</li>\n</ul>\n<h2 id=\"ReferenceQueue\"><a href=\"#ReferenceQueue\" class=\"headerlink\" title=\"ReferenceQueue\"></a>ReferenceQueue</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WeakReferenceStudy2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//一个引用队列</span></span><br><span class=\"line\">        ReferenceQueue&lt;Water2&gt; referenceQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">ReferenceQueue</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建两个弱引用对象，分别指向一个Water2对象</span></span><br><span class=\"line\">        WeakReference&lt;Water2&gt; reference1 = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakReference</span>&lt;Water2&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">Water2</span>(<span class=\"string\">&quot;pure water&quot;</span>),referenceQueue);</span><br><span class=\"line\">        WeakReference&lt;Water2&gt; reference2 = <span class=\"keyword\">new</span> <span class=\"title class_\">WeakReference</span>&lt;Water2&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">Water2</span>(<span class=\"string\">&quot;dirty water&quot;</span>),referenceQueue);</span><br><span class=\"line\">        <span class=\"comment\">//输出</span></span><br><span class=\"line\">        System.out.println(reference1);</span><br><span class=\"line\">        System.out.println(reference2);</span><br><span class=\"line\">        System.out.println(reference1.get());</span><br><span class=\"line\">        System.out.println(reference2.get());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//进行一次gc</span></span><br><span class=\"line\">        System.gc();</span><br><span class=\"line\"></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">4</span>);<span class=\"comment\">//休息4秒</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//输出两个Water2对象</span></span><br><span class=\"line\">        System.out.println(reference1.get());</span><br><span class=\"line\">        System.out.println(reference2.get());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//输出队列里的内容</span></span><br><span class=\"line\">        Reference&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Water2</span>&gt; reference;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> ((reference = referenceQueue.poll()) != <span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            System.out.println(reference);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一个对象</span></span><br><span class=\"line\"><span class=\"comment\">//一个水</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Water2</span>&#123;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Water2</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Water2&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">finalize</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Throwable &#123;</span><br><span class=\"line\">        System.out.println(name+<span class=\"string\">&quot;被回收了&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java.lang.ref.WeakReference@1b6d3586</span><br><span class=\"line\">java.lang.ref.WeakReference@4554617c</span><br><span class=\"line\">Water2&#123;name=&#x27;pure water&#x27;&#125;</span><br><span class=\"line\">Water2&#123;name=&#x27;dirty water&#x27;&#125;</span><br><span class=\"line\">dirty water被回收了</span><br><span class=\"line\">pure water被回收了</span><br><span class=\"line\">null</span><br><span class=\"line\">null</span><br><span class=\"line\">java.lang.ref.WeakReference@1b6d3586</span><br><span class=\"line\">java.lang.ref.WeakReference@4554617c</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>首先创建一个引用队列；然后创建两个弱引用对象，创建Water2对象，将Water2对象和referenceQueue一起传入构造方法；</li>\n<li>在输出中，两个引用对象和Water2对象正常输出；</li>\n<li>两个Water2被回收，输出中为null；</li>\n<li>输出referenceQueue发现两个弱引用对象，与之前的一致。</li>\n</ul>\n","categories":[],"tags":["Java"]},{"title":"Mysql Note","url":"http://zswh33.github.io/2022/09/17/Mysql-Note/","content":"<h1 id=\"InnoDB-行格式\"><a href=\"#InnoDB-行格式\" class=\"headerlink\" title=\"InnoDB 行格式\"></a>InnoDB 行格式</h1><p><a href=\"https://dev.mysql.com/doc/refman/8.0/en/innodb-row-format.html#innodb-row-format-redundant\">https://dev.mysql.com/doc/refman/8.0/en/innodb-row-format.html#innodb-row-format-redundant</a></p>\n<h2 id=\"行格式ROW-FORMAT\"><a href=\"#行格式ROW-FORMAT\" class=\"headerlink\" title=\"行格式ROW_FORMAT\"></a>行格式ROW_FORMAT</h2><p>ROW_FORMAT决定一行数据在磁盘中的存储方式，因而影响查询和DML操作的性能。</p>\n<p>当一行数据放在同一张盘页，请求和索引查询会更快。</p>\n<p>InnoDB存储引擎支持四种行格式：REDUNDANT、COMPACT、DYNAMIC和COMPRESSED。</p>\n<p>（冗余、紧凑、动态、压缩）</p>\n<h2 id=\"REDUNDANT-冗余\"><a href=\"#REDUNDANT-冗余\" class=\"headerlink\" title=\"REDUNDANT  冗余\"></a>REDUNDANT  冗余</h2><p>REDUNDANT 冗余n.</p>\n<ul>\n<li><p>存储可变长读列时（varchar、varbinary、blob、text），在B树节点中存储前768个字节，剩余部分存放在溢出页；</p>\n</li>\n<li><p>大于768字节的定长列值会被编码为可变长度列，放在页外存储；</p>\n</li>\n<li><p>若列值小于768字节，则不使用溢出页，列的值全部存储在B树节点中，这样可以节省IO（去溢出页取数据）；</p>\n</li>\n<li><p>Blob短值友好，但只存储数据，不存储键值，效率会变低。</p>\n</li>\n</ul>\n<h3 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h3><ul>\n<li>每个索引记录包含一个6字节的标头，使用标头将连续的记录链接在一起，用于行级锁定；</li>\n<li>聚集索引的记录会包含用户定义列的所有字段。除此之外，还有一个6字节的transaction ID字段和7字节的roll pointer字段；</li>\n<li>如果表没有定义主键，每个聚集索引记录还会包含6字节的行id字段；</li>\n<li>每个二级索引中包含的是聚集索引定义的主键值，而非每一行的数据；</li>\n<li>记录包含指向每个字段的指针。<ul>\n<li>如果字段的长度小于128字节，指针为1字节，否则两个字节。</li>\n<li><del>这样的指针数组称为记录目录，</del>指针指向的是记录的数据部分。</li>\n</ul>\n</li>\n<li>大于或等于768字节的固定长度列编码为可变长度列，存储在页外；</li>\n<li>null值使用记录目录的一个或两个字节。<ul>\n<li>如果是可变长列，在记录的数据区null值占用0字节；</li>\n<li>如果是定长列，会在数据区保留定长字段需要的长度。当数据从null变成非null值，保留空间被新的数据替代，这样就可以避免造成索引页碎片产生。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"COMPACT-紧凑\"><a href=\"#COMPACT-紧凑\" class=\"headerlink\" title=\"COMPACT  紧凑\"></a>COMPACT  紧凑</h2><p>相对REDUNDANT方式，COMPACT方式节约了约20%的存储空间，但是增加了CPU的使用。</p>\n<ul>\n<li>如果工作量被击中缓存和磁盘速度限制，COMPACT格式相对更快；</li>\n<li>如果工作量被CPU速度限制，COMPACT相对会更慢；</li>\n</ul>\n<h2 id=\"特点-1\"><a href=\"#特点-1\" class=\"headerlink\" title=\"特点\"></a>特点</h2><ul>\n<li>每个索引包含5字节的头  hole….</li>\n</ul>\n<h1 id=\"Mysql-BLOB\"><a href=\"#Mysql-BLOB\" class=\"headerlink\" title=\"Mysql BLOB\"></a>Mysql BLOB</h1><p>在MySQL中Blob是一个二进制对象，可以存储大量数据的容器（图片、音乐等）。</p>\n<blockquote>\n<p>Blob对象分为四种</p>\n</blockquote>\n<ol>\n<li>TinyBlob，最大可以存储255B的数据；</li>\n<li>Blob，最大存储65KB的数据；</li>\n<li>MediumBlob，最大存储16MB的数据；</li>\n<li>LongBlob，最大容纳4GB的数据。</li>\n</ol>\n<blockquote>\n<p>应用场景</p>\n</blockquote>\n<ol>\n<li>存储图片或文件与数据表中数据有高度相关性，存在一起<strong>方便后续维护</strong>；<ul>\n<li>如：学校学生花名册的图片，产品手册中产品的照片以及PDF说明书等；</li>\n</ul>\n</li>\n<li>这种存储方式，对于数据的导入导出，数据迁移等操作来说非常便捷、安全、完整；</li>\n<li>mysql在索引比较大的Blob和Text时，对MySQL性能影响较大；<ul>\n<li>原因<ul>\n<li>Blob数据量较大，影响MySQL的查询效率；</li>\n</ul>\n</li>\n<li>如何解决<ol>\n<li>优先考虑<strong>压缩</strong>；</li>\n<li>将Blob列单独做一张表，当需要查询时再引用；</li>\n<li>可以将有Blob列的表存储到不同的存储设备甚至单独的数据库示例；</li>\n<li>一些情况下，使用varchar代替blob；</li>\n<li>为了避免blob列长文本内容进行比较，使用md5或crc32将hash存入另一列；查询时，查询比较其hash值，在比较blob列内容是否正确。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"KEY\"><a href=\"#KEY\" class=\"headerlink\" title=\"KEY\"></a>KEY</h1><p>key是数据库的物理结构，作用：</p>\n<ul>\n<li>约束作用，约束数据的唯一性、完整性；</li>\n<li>索引作用，用于建立索引，优化查询速度。</li>\n</ul>\n<p>有四种：普通key，primary key，unique key，foreign key，index；</p>\n<h2 id=\"普通key\"><a href=\"#普通key\" class=\"headerlink\" title=\"普通key\"></a>普通key</h2><p>没有约束作用，但会在此key上建立索引；</p>\n<h2 id=\"unique-key\"><a href=\"#unique-key\" class=\"headerlink\" title=\"unique key\"></a>unique key</h2><p>唯一约束，是指所有记录中字段的值不能重复出现，比如id；</p>\n<p>会建立索引。</p>\n<h2 id=\"primary-key\"><a href=\"#primary-key\" class=\"headerlink\" title=\"primary key\"></a>primary key</h2><p>主键，一个表可以有一个主键，主键可以为<strong>单一主键</strong>和<strong>复合主键</strong>；</p>\n<p>可以规定一个存储主键，规范数据的唯一性。</p>\n<p>会在此key上建立一个索引。</p>\n<h2 id=\"foreign-key\"><a href=\"#foreign-key\" class=\"headerlink\" title=\"foreign key\"></a>foreign key</h2><p>外键，规范数据的引用完整性；</p>\n<p>会建立索引。</p>\n<h2 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index\"></a>index</h2><p>key作用的一个维度，可以替代关键字key。</p>\n","categories":[],"tags":["Mysql"]},{"title":"行业的现状以及未来 2019-11","url":"http://zswh33.github.io/2022/09/16/Day24-复习/","content":"<p><a href=\"https://www.bilibili.com/video/BV1PE411i7CV\">https://www.bilibili.com/video/BV1PE411i7CV</a></p>\n<h1 id=\"三层架构-：-MVC\"><a href=\"#三层架构-：-MVC\" class=\"headerlink\" title=\"三层架构 ： MVC\"></a>三层架构 ： MVC</h1><p>架构的目的：解耦</p>\n<p>开发框架：</p>\n<ul>\n<li><p>Spring</p>\n<ul>\n<li><p>IOC AOP</p>\n<ul>\n<li>IOC：控制反转</li>\n<li>AOP：切面（本质：动态代理）<ul>\n<li>为了不影响业务本来的情况下，实现动态增加功能，大量应用在日志，事务、、等等方面。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Spring 是一个轻量级的Java开源框架，容器；</p>\n</li>\n<li><p>目的：解决企业开发的复杂性问题</p>\n</li>\n<li><p>缺点：复杂的配置文件</p>\n</li>\n</ul>\n</li>\n<li><p>Spring Boot</p>\n<ul>\n<li>简化Spring的操作</li>\n<li>自动配置Spring的许多东西，拿来即用；</li>\n<li>新一代JavaEE的开发标准，开箱即用；</li>\n<li>特性：约定大于配置</li>\n</ul>\n</li>\n</ul>\n<p>随着公司体系越来越大，用户越来越多！</p>\n<h1 id=\"微服务架构\"><a href=\"#微服务架构\" class=\"headerlink\" title=\"微服务架构\"></a>微服务架构</h1><ul>\n<li><p>全新的架构：模块化、功能化！\t</p>\n<ul>\n<li>用户、支付、签到、娱乐；</li>\n<li>负载均衡</li>\n</ul>\n</li>\n<li><p>一些问题</p>\n<ol>\n<li>这么多服务，客户端如何去访问？</li>\n<li>这么多服务，服务之间如何通信？</li>\n<li>如何治理？如何统一管理？</li>\n<li>服务宕机，如何处理？</li>\n</ol>\n</li>\n<li><p>解决方案：</p>\n<ul>\n<li><p>Spring SpringCloud Netflix：是一套生态，解决以上分布式架构的四个问题。</p>\n<ul>\n<li>API网关，zuul组件</li>\n<li>Feign —&gt; HttpClient —&gt; HTTP的通信方式</li>\n<li>服务注册与发现，Eureka。</li>\n<li>熔断机制</li>\n<li>2018年年底，Netflix宣布无限期停止维护，生态不再维护。</li>\n</ul>\n</li>\n<li><p>Apache Dubbo zookeeper 新的解决方案</p>\n<ul>\n<li>API：没有！借助第三方组件&#x2F;自己实现</li>\n<li>Dubbo：高性能的基于Java实现的RPC通信框架；</li>\n<li>服务注册与发现，zookeeper</li>\n<li>没有熔断机制，借助Hystrix</li>\n</ul>\n</li>\n<li><p>SpringCloud Alibaba 新的一站式解决方案</p>\n</li>\n<li><p>（展望未来）下一代微服务标准：服务网格，Server Mesh</p>\n<ul>\n<li>代表解决方案：istio（未来可能需要掌握！）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"这些东西，出现的目标-x2F-要解决的问题\"><a href=\"#这些东西，出现的目标-x2F-要解决的问题\" class=\"headerlink\" title=\"这些东西，出现的目标&#x2F;要解决的问题\"></a>这些东西，出现的目标&#x2F;要解决的问题</h1><ol>\n<li>API网关，服务路由；</li>\n<li>HTTP，RPC框架，异步调用；</li>\n<li>服务注册与发现，高可用；</li>\n<li>熔断机制，服务降级。</li>\n</ol>\n","categories":[],"tags":["SpringBoot Java"]},{"title":"Day23 分布式 Dubbo Zookeeper","url":"http://zswh33.github.io/2022/09/15/Day23-分布式-Dubbo-Zookeeper/","content":"<h1 id=\"分布式\"><a href=\"#分布式\" class=\"headerlink\" title=\"分布式\"></a>分布式</h1><p><em>分布式系统是若干独立计算机的集合，这些计算机对于用户来说就像单个相关系统</em></p>\n<p>分布式系统是由一组通过网络进行通信，为了完成共同的任务而协调工作的计算机节点组成的系统。分布式系统的出现是为了用廉价的、普通的机器完成单个计算机无法完成的计算、存储任务。其目的是利用 更多的机器，处理更多的数据。</p>\n<h2 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h2><ul>\n<li>只有当<strong>单个节点的处理能力无法满足日益增长的计算、存储任务</strong>的时候，</li>\n<li>且<strong>硬件的提升高昂到得不偿失</strong>的时候、</li>\n<li><strong>应用程序也不能进一步优化</strong>的时候，需要考虑<strong>分布式系统</strong>。</li>\n</ul>\n<h2 id=\"架构的发展\"><a href=\"#架构的发展\" class=\"headerlink\" title=\"架构的发展\"></a>架构的发展</h2><h3 id=\"单一应用框架\"><a href=\"#单一应用框架\" class=\"headerlink\" title=\"单一应用框架\"></a>单一应用框架</h3><p><img src=\"/2022/09/15/Day23-%E5%88%86%E5%B8%83%E5%BC%8F-Dubbo-Zookeeper/%E5%8D%95%E4%B8%80%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84.svg\" alt=\"单一应用架构\"></p>\n<p>当网站流量很小时，只需要一个应用，将所有功能部署在一起，以减少部署节点和成本；</p>\n<p>此时，用于简化增删改查工作量的<strong>数据访问框架（ORM）</strong>是关键。</p>\n<p>适用于小型网站，小型管理系统；</p>\n<p>缺点：</p>\n<ol>\n<li>性能扩展难；</li>\n<li>协同开发问题</li>\n<li>不利于升级维护</li>\n</ol>\n<h3 id=\"垂直应用架构\"><a href=\"#垂直应用架构\" class=\"headerlink\" title=\"垂直应用架构\"></a>垂直应用架构</h3><p><img src=\"/2022/09/15/Day23-%E5%88%86%E5%B8%83%E5%BC%8F-Dubbo-Zookeeper/%E5%9E%82%E7%9B%B4%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84.svg\" alt=\"垂直应用架构\"></p>\n<p>将应用拆成互不相干的几个应用，以提升效率；</p>\n<p>此时，用于加速前端页面开发的<strong>Web框架（MVC）</strong>是关键。</p>\n<p>优点：通过切分业务来实现各个模块的独立部署，降低了维护和部署的难度，团队各司其职容易管理，性能扩展更加方便；</p>\n<p>缺点：公用模块无法重复利用，开发性的浪费。</p>\n<h3 id=\"分布式服务架构\"><a href=\"#分布式服务架构\" class=\"headerlink\" title=\"分布式服务架构\"></a>分布式服务架构</h3><p><img src=\"/2022/09/15/Day23-%E5%88%86%E5%B8%83%E5%BC%8F-Dubbo-Zookeeper/%E5%88%86%E5%B8%83%E5%BC%8F%E5%BA%94%E7%94%A8%E6%9E%B6%E6%9E%84.svg\" alt=\"分布式应用架构\"></p>\n<p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快的响应多变的市场需求。</p>\n<p>此时，提升<strong>分布式服务框架（RPC）</strong>是关键。</p>\n<h3 id=\"流动计算架构\"><a href=\"#流动计算架构\" class=\"headerlink\" title=\"流动计算架构\"></a>流动计算架构</h3><p><img src=\"/2022/09/15/Day23-%E5%88%86%E5%B8%83%E5%BC%8F-Dubbo-Zookeeper/%E9%9D%A2%E5%90%91%E6%9C%8D%E5%8A%A1%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E6%9E%B6%E6%9E%84.svg\" alt=\"面向服务的分布式架构\"></p>\n<p>增加一个调度中心基于访问压力实时管理集群容量，提高集群的利用率。</p>\n<p>此时，用于提高机器利用率的<strong>资源调度和治理中心（SOA）</strong>是关键。</p>\n<h1 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h1><p><em>Remote Procedure Call</em></p>\n<ul>\n<li><p>RPC，远程过程调用，是进程间的通信方式。</p>\n</li>\n<li><p>是一种思想，而不是规范。</p>\n</li>\n<li><p>允许程序调用另一个地址空间（通常是共享网络的另一个机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。RPC允许像调用本地方法一样调用远程方法；</p>\n</li>\n</ul>\n<p><img src=\"/2022/09/15/Day23-%E5%88%86%E5%B8%83%E5%BC%8F-Dubbo-Zookeeper/RPC%E6%B5%81%E7%A8%8B%E5%9B%BE.svg\" alt=\"RPC流程图\"></p>\n<p>RPC两个核心模块：通信、序列化。</p>\n<p>序列化：数据传输需要转换；</p>\n<h1 id=\"Dubbo\"><a href=\"#Dubbo\" class=\"headerlink\" title=\"Dubbo\"></a>Dubbo</h1><p><em>Apache Dubbo 是一个高性能的基于Java的开源RPC框架</em></p>\n<p><a href=\"https://dubbo.apache.org/\">https://dubbo.apache.org/</a></p>\n<h2 id=\"三大核心能力\"><a href=\"#三大核心能力\" class=\"headerlink\" title=\"三大核心能力\"></a>三大核心能力</h2><ol>\n<li>面向接口的远程方法调用；</li>\n<li>智能容错和负载均衡；</li>\n<li>服务自动注册和发现。</li>\n</ol>\n<h2 id=\"Dubbo结构图\"><a href=\"#Dubbo结构图\" class=\"headerlink\" title=\"Dubbo结构图\"></a>Dubbo结构图</h2><p><img src=\"/2022/09/15/Day23-%E5%88%86%E5%B8%83%E5%BC%8F-Dubbo-Zookeeper/image-20220915202342884.png\" alt=\"image-20220915202342884\"></p>\n<p><strong>服务提供者（Provider）</strong>：暴露服务的提供方，服务提供者在启动时，向注册中心注册自己提供的服务；</p>\n<p><strong>服务消费者（Consumer）</strong>：调用远程服务的服务消费方，服务消费者在启动时，向注册中心订阅自己所需的服务，服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，若调用失败，再选另一台调用；</p>\n<p><strong>注册中心（Registry）</strong>：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者；</p>\n<p><strong>监控中心（Monitor）</strong>：服务消费者和提供者，在内存中累计调用次数和调用时间，定期每分钟发送一次统计数据到监控中心。</p>\n<h2 id=\"ZooKeeper\"><a href=\"#ZooKeeper\" class=\"headerlink\" title=\"ZooKeeper\"></a>ZooKeeper</h2><ul>\n<li><p>ZooKeeper是一个分布式的，开放源代码的<strong>分布式应用程序协调服务</strong>。</p>\n</li>\n<li><p>是一个为分布式应用提供一致性服务的软件，功能包括：配置维护、域名服务、分布式同步、组服务等。</p>\n</li>\n<li><p>是Hadoop和Hbase的重要组件。</p>\n</li>\n</ul>\n<h3 id=\"第一次运行Zookeeper\"><a href=\"#第一次运行Zookeeper\" class=\"headerlink\" title=\"第一次运行Zookeeper\"></a>第一次运行Zookeeper</h3><p>到北京理工大学镜像站下载Zookeeper软件：<a href=\"https://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.8.0/\">https://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.8.0/</a></p>\n<p>（带bin为可执行程序，不带bin为源代码+可执行程序）</p>\n<ol>\n<li>到conf目录下，将zoo_sample.cfg复制一份，名为zoo.cfg；</li>\n<li>到bin目录下：<ul>\n<li>zkServer：Zookeeper的服务端程序，（Windows以管理员身份）打开即可开启服务；</li>\n<li>zkCli：Zookeeper的测试用的客户端程序。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"Dubbo-admin\"><a href=\"#Dubbo-admin\" class=\"headerlink\" title=\"Dubbo-admin\"></a>Dubbo-admin</h2><p>是Dubbo的一个<strong>监控管理后台</strong>。</p>\n<p>可以查看注册了哪些服务，哪些服务被消费了。</p>\n<p>一个Maven项目。</p>\n<h3 id=\"下载使用\"><a href=\"#下载使用\" class=\"headerlink\" title=\"下载使用\"></a>下载使用</h3><p><a href=\"https://mirror.bit.edu.cn/apache/dubbo/dubbo-admin/0.4.0/\">https://mirror.bit.edu.cn/apache/dubbo/dubbo-admin/0.4.0/</a></p>\n<p><a href=\"https://github.com/apache/dubbo-admin\">https://github.com/apache/dubbo-admin</a></p>\n<ol>\n<li><p>解压；</p>\n</li>\n<li><p><code>mvn clean package -Dmaven.test.skip=true </code>将项目打包。也可直接下载打包好的直接运行；</p>\n</li>\n<li><p>使用java -jar 文件名 运行。</p>\n</li>\n</ol>\n<h2 id=\"一些要注意的地方\"><a href=\"#一些要注意的地方\" class=\"headerlink\" title=\"一些要注意的地方\"></a>一些要注意的地方</h2><p>Dubbo服务默认启用一个AdminServer端口为8080；</p>\n<p>Dubbo-admin的默认端口也是8080。</p>\n<p>若在同一台主机上使用，可能会出现端口占用。需要修改其中一个端口解决问题。</p>\n<p>Dubbo的AdminServer服务端口修改:</p>\n<ul>\n<li><p>zoo.cfg</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">admin.serverPort=8888</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>Dubbo-admin端口修改：</p>\n<ul>\n<li><p>application.properties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.port=<span class=\"number\">8081</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","categories":[],"tags":["SpringBoot Dubbo Zookeeper"]},{"title":"Day23 Task SpringBoot异步任务 发送邮件 定时执行任务 Cron表达式","url":"http://zswh33.github.io/2022/09/15/Day23-Task/","content":"<h1 id=\"SpringBoot的异步任务\"><a href=\"#SpringBoot的异步任务\" class=\"headerlink\" title=\"SpringBoot的异步任务\"></a>SpringBoot的异步任务</h1><h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ol>\n<li><p>在需要异步执行的方法上面添加注解@Async</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//告诉Sping这是一个异步的方法</span></span><br><span class=\"line\"><span class=\"meta\">@Async</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    Thread.sleep(<span class=\"number\">3000</span>);</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;数据正在处理...&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在主方法的类上面添加注解@EnableAsync</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableAsync</span>  <span class=\"comment\">//开启异步任务功能</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootStudy4TaskApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootStudy4TaskApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>表现：</p>\n<ol>\n<li><p>创建一个Controller调用Service的hello()方法；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AsyncController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    AsyncService service;</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/async&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        service.hello();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;OK&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在网页加载过程中，没有等待3000毫秒，直接加载出OK；</p>\n<p>3000毫秒后，日志输出“数据正在处理…”。</p>\n<p>service.hello()执行过程没有阻塞线程，而是在新线程中运行。</p>\n</li>\n</ol>\n<h1 id=\"SpringBoot发送邮件\"><a href=\"#SpringBoot发送邮件\" class=\"headerlink\" title=\"SpringBoot发送邮件\"></a>SpringBoot发送邮件</h1><h2 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li><p>在application.properties下配置相关配置</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring.mail.username</span>=<span class=\"string\">xxxx@qq.com</span></span><br><span class=\"line\"><span class=\"attr\">spring.mail.password</span>=<span class=\"string\">xxxxxxxxxxxxxxx</span></span><br><span class=\"line\"><span class=\"attr\">spring.mail.host</span>=<span class=\"string\">smtp.qq.com</span></span><br></pre></td></tr></table></figure>\n\n<p>username为邮箱名，password为邮件服务器给的密钥，host为邮件服务器的smtp域名。</p>\n</li>\n<li><p>发送邮件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">JavaMailSenderImpl mailSender;<span class=\"comment\">//创建一个JavaMailSenderImpl引用并使用@Autowired注解</span></span><br><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">SimpleMailMessage</span> <span class=\"variable\">mailMessage</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleMailMessage</span>();</span><br><span class=\"line\">    mailMessage.setSubject(<span class=\"string\">&quot;这也是一个标题&quot;</span>);</span><br><span class=\"line\">    mailMessage.setText(<span class=\"string\">&quot;这个是一个文本这个是一个文本这个是一个文本这个是一个文本这个是一个文本&quot;</span>);</span><br><span class=\"line\">    mailMessage.setTo(<span class=\"string\">&quot;uwupu@qwe.asd&quot;</span>);</span><br><span class=\"line\">    mailMessage.setFrom(<span class=\"string\">&quot;uwupu@asd.qwe&quot;</span>);</span><br><span class=\"line\">    mailSender.send(mailMessage);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>创建一个JavaMailSenderImpl引用并使用@Autowired注解；</p>\n</li>\n<li><p>使用SimpleMailMessage新建一个邮件对象，设定邮件的Subject、Text、来源和去向，然后使用send方法将邮件发出；</p>\n</li>\n</ul>\n</li>\n<li><p>发送邮件2</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Test</span></span><br><span class=\"line\"><span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> MessagingException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//一个复杂的邮件</span></span><br><span class=\"line\">    <span class=\"type\">MimeMessage</span> <span class=\"variable\">mimeMessage</span> <span class=\"operator\">=</span> mailSender.createMimeMessage();</span><br><span class=\"line\">    <span class=\"comment\">//组装</span></span><br><span class=\"line\">    <span class=\"type\">MimeMessageHelper</span> <span class=\"variable\">helper</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MimeMessageHelper</span>(mimeMessage,<span class=\"literal\">true</span>,<span class=\"string\">&quot;utf-8&quot;</span>);</span><br><span class=\"line\">    helper.setSubject(<span class=\"string\">&quot;这个又又是一个标题&quot;</span>);</span><br><span class=\"line\">    helper.setText(<span class=\"string\">&quot;&lt;p style=&#x27;color:red&#x27;&gt;这是一个测试学习用的邮件&lt;/p&gt;&quot;</span>,<span class=\"literal\">true</span>);</span><br><span class=\"line\">    <span class=\"comment\">//附件</span></span><br><span class=\"line\">    helper.addAttachment(<span class=\"string\">&quot;1.jpg&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:/Document/pictures/youji.jpg&quot;</span>));</span><br><span class=\"line\">    helper.addAttachment(<span class=\"string\">&quot;2.gif&quot;</span>,<span class=\"keyword\">new</span> <span class=\"title class_\">File</span>(<span class=\"string\">&quot;D:/Document/pictures/t.gif&quot;</span>));</span><br><span class=\"line\">    <span class=\"comment\">//来源 目的邮箱</span></span><br><span class=\"line\">    helper.setTo(<span class=\"string\">&quot;目的邮箱&quot;</span>);</span><br><span class=\"line\">    helper.setFrom(<span class=\"string\">&quot;来源邮箱&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//发送</span></span><br><span class=\"line\">    mailSender.send(mimeMessage);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>这是一个创建<strong>复杂</strong>邮件的过程，相对简单邮件，这里可以添加内容为html内容、添加附件等；</p>\n</li>\n<li><p>创建一个MimeMessage对象，然后使用MimeMessageHelper包装MimeMessage对象，使用MimeMessageHelper对象对邮件进行一些配置，最后将邮件发出。</p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"定时执行任务\"><a href=\"#定时执行任务\" class=\"headerlink\" title=\"定时执行任务\"></a>定时执行任务</h1><h2 id=\"步骤-1\"><a href=\"#步骤-1\" class=\"headerlink\" title=\"步骤\"></a>步骤</h2><ol>\n<li><p>在主程序添加@EnableScheduling定时任务功能注解；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableScheduling</span> <span class=\"comment\">//开启定时任务功能的注解</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootStudy4TaskApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        SpringApplication.run(SpringBootStudy4TaskApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在需要定时执行的任务上方添加@Scheduled注解；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在一个特定的时间执行这个方法</span></span><br><span class=\"line\"><span class=\"meta\">@Scheduled(cron = &quot;cron表达式&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;hello，执行一个定时任务..中！&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在时间到达cron表达式指向的时间时，就会触发执行这个方法。</p>\n</li>\n</ol>\n<h2 id=\"Cron表达式\"><a href=\"#Cron表达式\" class=\"headerlink\" title=\"Cron表达式\"></a>Cron表达式</h2><h3 id=\"简单示例\"><a href=\"#简单示例\" class=\"headerlink\" title=\"简单示例\"></a>简单示例</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t0 * * * * 0-7</span><br><span class=\"line\"><span class=\"params\">#</span>   秒分 时日月 星期</span><br></pre></td></tr></table></figure>\n\n<p>表示在 星期1-7 每月 每日 每时 每分 0秒 这个时间触发一次。</p>\n<p>（也就是 每到一个秒数为0的时间，触发一次）</p>\n<h3 id=\"基本格式\"><a href=\"#基本格式\" class=\"headerlink\" title=\"基本格式\"></a>基本格式</h3><p>通过Cron表达式可以实现指定<strong>一个</strong>、<strong>一段</strong>、<strong>一些</strong>时间去触发某些任务；</p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">秒 分 时 日 月 周</span><br></pre></td></tr></table></figure>\n\n<p>通过一个空格隔开，分别表示一个单位，每个单位通过一个简易的表达式表现在哪些时间执行任务。</p>\n<h4 id=\"单个格式\"><a href=\"#单个格式\" class=\"headerlink\" title=\"单个格式\"></a>单个格式</h4><ul>\n<li><p><code>10/5</code>，从10开始，每过5个单位触发一次；</p>\n<ul>\n<li><code>30/5 0 0 * * ?</code> 每天的0时0分，从30秒开始，每过5秒执行一次；</li>\n<li><code>0 0/5 * * * ?</code>  每过5分钟执行一次；</li>\n</ul>\n</li>\n<li><p><code>10-30</code>，表示在10-30区间；</p>\n</li>\n<li><p><code>10,20</code>，表示10和20两个值；</p>\n</li>\n<li><p><code>*</code>，表示任意值；</p>\n</li>\n<li><p><code>?</code>，只能用在<strong>日</strong>和<strong>周</strong>上，因为日和周会互相影响，若要取消影响，只需在不需要的属性上添加“？”。如：</p>\n<ul>\n<li><p><code>0 0 0 1 * ?</code> 表示每月的1日0点触发；</p>\n</li>\n<li><p><code>0 0 0 ? * 3</code> 表示每周三的0点触发；</p>\n</li>\n<li><p><code>0 0 0 * * ?</code> 每天的0点触发。</p>\n</li>\n</ul>\n</li>\n<li><p><code>6#3</code>，只能用在<strong>周</strong>上，表示第三个星期五。</p>\n<ul>\n<li><code>0 0 0 ? * 6#3</code>，每月的第三个星期五的0点触发。</li>\n</ul>\n</li>\n<li><p><code>L</code>，可以放在<strong>日</strong>和<strong>周</strong>上，</p>\n<ul>\n<li>日上表示最后一天；<ul>\n<li><code>0 0 0 L * ?</code> 表示每月的<strong>最后一天</strong>的0点；</li>\n</ul>\n</li>\n<li>周上表示最后周几，使用”数字L”表达；<ul>\n<li><code>0 0 0 ? * 5L</code> 表示每月的<strong>最后一个星期四</strong>的0点；</li>\n</ul>\n</li>\n<li>L不要和<code> - 或 ,</code>一起使用，否则会出现意想不到的结果。</li>\n</ul>\n</li>\n<li><p><code>3W</code>，放在日上，表示距离3号最近的工作日；</p>\n</li>\n<li><p><code>LW</code>，放在日上，表示最后一个工作日。</p>\n</li>\n</ul>\n<h3 id=\"范围\"><a href=\"#范围\" class=\"headerlink\" title=\"范围\"></a>范围</h3><table>\n<thead>\n<tr>\n<th>域</th>\n<th>字段</th>\n<th>取值</th>\n<th>特殊字符</th>\n<th>是否必须</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>秒</td>\n<td>Seconds</td>\n<td>0-59</td>\n<td>, - * &#x2F;</td>\n<td>是</td>\n<td></td>\n</tr>\n<tr>\n<td>分</td>\n<td>Minutes</td>\n<td>0-59</td>\n<td>, - * &#x2F;</td>\n<td>是</td>\n<td></td>\n</tr>\n<tr>\n<td>时</td>\n<td>Hours</td>\n<td>0-23</td>\n<td>, - * &#x2F;</td>\n<td>是</td>\n<td></td>\n</tr>\n<tr>\n<td>日</td>\n<td>DayofMonth</td>\n<td>1-31</td>\n<td>, - * &#x2F; ? L W</td>\n<td>是</td>\n<td></td>\n</tr>\n<tr>\n<td>月</td>\n<td>Month</td>\n<td>1-12 或 JAN-DEC</td>\n<td>, - * &#x2F;</td>\n<td>是</td>\n<td></td>\n</tr>\n<tr>\n<td>星期</td>\n<td>DayofWeek</td>\n<td>1-7 或 SUN-SAT</td>\n<td>, - * &#x2F; ? L #</td>\n<td>是</td>\n<td>日 1 2 3 4 5 6</td>\n</tr>\n<tr>\n<td>年</td>\n<td>Year</td>\n<td>1980-2099</td>\n<td>, - * &#x2F;</td>\n<td>否</td>\n<td></td>\n</tr>\n</tbody></table>\n","categories":[],"tags":["SpringBoot"]},{"title":"Day22 Swagger 1","url":"http://zswh33.github.io/2022/09/14/Day22-Swagger-1/","content":"<h1 id=\"Swagger\"><a href=\"#Swagger\" class=\"headerlink\" title=\"Swagger\"></a>Swagger</h1><p><a href=\"https://swagger.io/\">https://swagger.io/</a></p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><ul>\n<li>号称世界上最流行的Api框架。</li>\n<li>Restful Api 文档在线自动生成工具 -&gt; <strong>Api文档与Api定义同步更新</strong></li>\n<li>直接运行，可以在线测试API接口；</li>\n<li>支持多种语言：Java，PHP…</li>\n</ul>\n<p><img src=\"/2022/09/14/Day22-Swagger-1/image-20220914184005545.png\" alt=\"image-20220914184005545\"></p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger2<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>io.springfox<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>springfox-swagger-ui<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>3.0.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"集成\"><a href=\"#集成\" class=\"headerlink\" title=\"集成\"></a>集成</h2><ol>\n<li><p>创建SpringBoot项目</p>\n</li>\n<li><p>添加依赖</p>\n</li>\n<li><p>编写HelloController</p>\n</li>\n<li><p>配置SwaggerConfig</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2</span>  <span class=\"comment\">//开启Swagger2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwaggerConfig</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试运行。默认URL：<a href=\"http://localhost:8080/swagger-ui.html\">http://localhost:8080/swagger-ui.html</a></p>\n</li>\n</ol>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>配置Swagger依据Swagger的bean实例Docket；</p>\n<h3 id=\"配置Docket-Bean\"><a href=\"#配置Docket-Bean\" class=\"headerlink\" title=\"配置Docket Bean\"></a>配置Docket Bean</h3><h4 id=\"先配置一个默认的配置\"><a href=\"#先配置一个默认的配置\" class=\"headerlink\" title=\"先配置一个默认的配置\"></a>先配置一个默认的配置</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2</span>  <span class=\"comment\">//开启Swagger2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwaggerConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置了Swagger Docket的Bean实例</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Docket <span class=\"title function_\">docket</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Docket</span>(DocumentationType.SWAGGER_2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建一个SwaggerConfig，使用**@Configuration注解<strong>和</strong>@EnableSwagger2注解**</li>\n<li>配置Bean Docket。返回值为**new Docket(DocumentationType.SWAGGER_2)**。</li>\n<li>这样就完成了<strong>默认</strong>的配置。</li>\n</ul>\n<h4 id=\"apiInfo-自定义Swagger页面介绍部分内容\"><a href=\"#apiInfo-自定义Swagger页面介绍部分内容\" class=\"headerlink\" title=\"apiInfo() 自定义Swagger页面介绍部分内容\"></a>apiInfo() 自定义Swagger页面介绍部分内容</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2</span>  <span class=\"comment\">//开启Swagger2</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SwaggerConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置了Swagger Docket的Bean实例</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Docket <span class=\"title function_\">docket</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Docket</span>(DocumentationType.SWAGGER_2).apiInfo(uwupu_apiInfo());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置Swagger信息 apiInfo</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ApiInfo <span class=\"title function_\">uwupu_apiInfo</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"keyword\">new</span> <span class=\"title class_\">ApiInfo</span>(</span><br><span class=\"line\">                <span class=\"string\">&quot;uwupu的Swagger API 文档&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;这个作者有点...懒，什么也没有留下。&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;1.0&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;https://uwupu.tk/&quot;</span>,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">Contact</span>(<span class=\"string\">&quot;uwupu&quot;</span>, <span class=\"string\">&quot;https://uwupu.tk&quot;</span>, <span class=\"string\">&quot;yyn33@qq.com&quot;</span>),  <span class=\"comment\">//作者信息</span></span><br><span class=\"line\">                <span class=\"string\">&quot;Apache 2.0&quot;</span>,</span><br><span class=\"line\">                <span class=\"string\">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;VendorExtension&gt;()</span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>使用Docket的方法apiInfo传入一个自定义的ApiInfo对象，即可实现自定义；</p>\n</li>\n<li><p>自定义的ApiInfo对象可以调整的内容：</p>\n<ul>\n<li>标题</li>\n<li>描述</li>\n<li>版本</li>\n<li>team链接</li>\n<li>联系方式 new Contact(名字，连接，Email)</li>\n<li>许可</li>\n<li>许可Url</li>\n<li>…</li>\n</ul>\n<p><img src=\"/2022/09/14/Day22-Swagger-1/image-20220914194914212.png\" alt=\"image-20220914194914212\"></p>\n</li>\n</ul>\n<h4 id=\"select-配置扫描接口的方式\"><a href=\"#select-配置扫描接口的方式\" class=\"headerlink\" title=\"select() 配置扫描接口的方式\"></a>select() 配置扫描接口的方式</h4><p>使用方式：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Docket <span class=\"title function_\">docket</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">            .apiInfo(uwupu_apiInfo())</span><br><span class=\"line\">            <span class=\"comment\">//配置扫描接口的方式</span></span><br><span class=\"line\">            .select()</span><br><span class=\"line\">            <span class=\"comment\">//RequestHandlerSelectors配置扫描接口的方式</span></span><br><span class=\"line\">            <span class=\"comment\">//basePackage配置通过包扫描接口  一般用这个</span></span><br><span class=\"line\">            .apis(RequestHandlerSelectors.basePackage(<span class=\"string\">&quot;com.yn.controller&quot;</span>))</span><br><span class=\"line\">            <span class=\"comment\">//过滤指定路径</span></span><br><span class=\"line\">            <span class=\"comment\">//通过路径指定过滤路径</span></span><br><span class=\"line\">            .paths(PathSelectors.ant(<span class=\"string\">&quot;/hello/**&quot;</span>))</span><br><span class=\"line\">            .build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"apis-通过类与方法的包或注解选择扫描的方式\"><a href=\"#apis-通过类与方法的包或注解选择扫描的方式\" class=\"headerlink\" title=\"apis() 通过类与方法的包或注解选择扫描的方式\"></a>apis() 通过类与方法的包或注解选择扫描的方式</h5><ul>\n<li>**RequestHandlerSelectors.basePackage(“com.yn.controller”)**：通过包方式扫描接口；</li>\n<li>**RequestHandlerSelectors.withClassAnnotation(Controller.class)**：通过类上的注解配置要扫描的类；</li>\n<li>**RequestHandlerSelectors.withMethodAnnotation(GetMapping.class)**：通过方法上的注解配置要扫描的方法；</li>\n<li>**RequestHandlerSelectors.any()**：所有；</li>\n<li>**RequestHandlerSelectors.none()**：都不扫描。</li>\n</ul>\n<h5 id=\"paths-通过url配置扫描的方式\"><a href=\"#paths-通过url配置扫描的方式\" class=\"headerlink\" title=\"paths() 通过url配置扫描的方式\"></a>paths() 通过url配置扫描的方式</h5><ul>\n<li>**PathSelectors.ant(“&#x2F;hello&#x2F;**“)**：配置扫描的指定路径；</li>\n<li>*<em>PathSelectors.regex(“.</em>“)**：通过正则配置扫描的路径；</li>\n<li>PathSelectors.any() 所有</li>\n<li>PathSelectors.none() 没有</li>\n</ul>\n<h5 id=\"enable-false-默认关闭Swagger页面\"><a href=\"#enable-false-默认关闭Swagger页面\" class=\"headerlink\" title=\"enable(false); 默认关闭Swagger页面\"></a>enable(false); 默认关闭Swagger页面</h5><p>可以配置是否启用Swagger，</p>\n<ul>\n<li>true，Swagger不能在浏览器访问；</li>\n<li>false，Swagger可以在浏览器访问。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Docket <span class=\"title function_\">docket</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">        .apiInfo(uwupu_apiInfo())</span><br><span class=\"line\">        .enable(<span class=\"literal\">false</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/09/14/Day22-Swagger-1/image-20220914201659176.png\" alt=\"image-20220914201659176\"></p>\n<h5 id=\"groupName-“第一个组”-分组命名\"><a href=\"#groupName-“第一个组”-分组命名\" class=\"headerlink\" title=\"groupName(“第一个组”)分组命名\"></a>groupName(“第一个组”)分组命名</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Docket <span class=\"title function_\">docket3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class=\"string\">&quot;第三个组&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>为当前组命名，影响页面右上角切换组的时候显示的名字。</p>\n<h3 id=\"配置API文档分组\"><a href=\"#配置API文档分组\" class=\"headerlink\" title=\"配置API文档分组\"></a>配置API文档分组</h3><ul>\n<li><p>一个Docket就表示一个分组，只需要配置多个Docket，并且都放进Bean，就可实现多个分组。</p>\n</li>\n<li><p>一个Docket可以配置多个内容，包括页面显示内容、扫描的类或方法、是否开启等，各个Docket之间互不影响。</p>\n</li>\n<li><p>（在实际情况下，每个部分都配置一个Docket，都可以配置不同的页面显示内容。）</p>\n</li>\n<li><p>当一个Docket的enable处于false，其他的处于true，则页面不显示处于false的Docket。</p>\n</li>\n</ul>\n<h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Docket <span class=\"title function_\">docket3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class=\"string\">&quot;第三个组&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Docket <span class=\"title function_\">docket2</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Docket</span>(DocumentationType.SWAGGER_2).groupName(<span class=\"string\">&quot;第二个组&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//配置了Swagger Docket的Bean实例</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Docket <span class=\"title function_\">docket</span><span class=\"params\">(Environment environment)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">        \t.groupName(<span class=\"string\">&quot;uwupu&quot;</span>);</span><br><span class=\"line\">            .apiInfo(uwupu_apiInfo()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h4><p><img src=\"/2022/09/14/Day22-Swagger-1/image-20220914205044970.png\" alt=\"image-20220914205044970\"></p>\n<h3 id=\"通过注解添加注释\"><a href=\"#通过注解添加注释\" class=\"headerlink\" title=\"通过注解添加注释\"></a>通过注解添加注释</h3><h4 id=\"ApiModel、-ApiModelProperty为实体类添加注释\"><a href=\"#ApiModel、-ApiModelProperty为实体类添加注释\" class=\"headerlink\" title=\"@ApiModel、@ApiModelProperty为实体类添加注释\"></a>@ApiModel、@ApiModelProperty为实体类添加注释</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ApiModel(&quot;用户实体类&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">User</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;用户名&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String username;</span><br><span class=\"line\">    <span class=\"meta\">@ApiModelProperty(&quot;密码&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String password;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/2022/09/14/Day22-Swagger-1/image-20220914210349398.png\" alt=\"image-20220914210349398\" style=\"zoom:80%;\">\n\n<h4 id=\"其他注解\"><a href=\"#其他注解\" class=\"headerlink\" title=\"其他注解\"></a>其他注解</h4><ul>\n<li><p><strong>@Api</strong>：<del>将一个<strong>类</strong>标记为Swagger资源（Swagger不会因为这个扫描这个类）。可以指定在文档中类所在的路径。</del>待完善..</p>\n</li>\n<li><p><strong>@ApiImplicitParam</strong>：</p>\n</li>\n<li><p><strong>@ApiImplicitParams</strong>：</p>\n</li>\n<li><p><strong>@ApiOperation</strong>：声明API资源中的单个操作。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/hello&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(</span></span><br><span class=\"line\"><span class=\"meta\">        value = &quot;Hello方法&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">        notes = &quot;用于测试项目正常运行的第一个方法&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">        response = String.class,</span></span><br><span class=\"line\"><span class=\"meta\">        responseContainer = &quot;none&quot;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/09/14/Day22-Swagger-1/image-20220914212836697.png\" alt=\"image-20220914212836697\"></p>\n</li>\n<li><p><strong>@ApiParam</strong>：为操作参数添加注释</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/hello&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"meta\">@ApiParam(</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"params\">                value = &quot;用户名&quot;,//参数备注</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"params\">                required=true//是否必要</span></span></span><br><span class=\"line\"><span class=\"meta\"><span class=\"params\">        )</span></span></span><br><span class=\"line\"><span class=\"params\">        String username)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/09/14/Day22-Swagger-1/image-20220914213113528.png\" alt=\"image-20220914213113528\"></p>\n</li>\n<li><p><strong>@ApiResponses、@ApiResponse</strong>：描述操作可能的响应。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/hello&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ApiResponses(</span></span><br><span class=\"line\"><span class=\"meta\">        &#123;</span></span><br><span class=\"line\"><span class=\"meta\">                @ApiResponse(code=400,message = &quot;错误的输入&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">                @ApiResponse(code=404,message = &quot;未找到用户&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">        &#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(String username)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/09/14/Day22-Swagger-1/image-20220914213400990.png\" alt=\"image-20220914213400990\"></p>\n</li>\n<li><p><strong>@Authorization、@AuthorizationScope</strong>：这些仅用于@Api和@ApiOperation的输入，而不是直接的资源操作。用来指定需要哪种授权方案。</p>\n</li>\n</ul>\n<h4 id=\"对于一个API的近似完整的注释\"><a href=\"#对于一个API的近似完整的注释\" class=\"headerlink\" title=\"对于一个API的近似完整的注释\"></a>对于一个API的近似完整的注释</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(value = &quot;/hello&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@ApiOperation(</span></span><br><span class=\"line\"><span class=\"meta\">        value = &quot;Hello方法&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">        notes = &quot;用于测试项目正常运行的第一个方法&quot;,</span></span><br><span class=\"line\"><span class=\"meta\">        response = String.class,</span></span><br><span class=\"line\"><span class=\"meta\">        responseContainer = &quot;none&quot;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"meta\">@ApiResponses(</span></span><br><span class=\"line\"><span class=\"meta\">        &#123;@ApiResponse(code=400,message = &quot;错误的输入&quot;),</span></span><br><span class=\"line\"><span class=\"meta\">         @ApiResponse(code=404,message = &quot;未找到用户&quot;)&#125;</span></span><br><span class=\"line\"><span class=\"meta\">)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"meta\">@ApiParam(value = &quot;用户名&quot;,required=true)</span>String username)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h2><h3 id=\"如何让Swagger扫描到pojo类\"><a href=\"#如何让Swagger扫描到pojo类\" class=\"headerlink\" title=\"如何让Swagger扫描到pojo类\"></a>如何让Swagger扫描到pojo类</h3><p>只要在Controller中有返回值为pojo类的Mapping就可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/user&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> User <span class=\"title function_\">user</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"从源码介绍\"><a href=\"#从源码介绍\" class=\"headerlink\" title=\"从源码介绍\"></a>从源码介绍</h2><h3 id=\"ApiInfo配置页面的显示内容\"><a href=\"#ApiInfo配置页面的显示内容\" class=\"headerlink\" title=\"ApiInfo配置页面的显示内容\"></a>ApiInfo配置页面的显示内容</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ApiInfo</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Contact</span> <span class=\"variable\">DEFAULT_CONTACT</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Contact</span>(<span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">ApiInfo</span> <span class=\"variable\">DEFAULT</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ApiInfo</span>(<span class=\"string\">&quot;Api Documentation&quot;</span>, <span class=\"string\">&quot;Api Documentation&quot;</span>, <span class=\"string\">&quot;1.0&quot;</span>, <span class=\"string\">&quot;urn:tos&quot;</span>,</span><br><span class=\"line\">          DEFAULT_CONTACT, <span class=\"string\">&quot;Apache 2.0&quot;</span>, <span class=\"string\">&quot;http://www.apache.org/licenses/LICENSE-2.0&quot;</span>, <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;VendorExtension&gt;());</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String version;<span class=\"comment\">//版本</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String title;<span class=\"comment\">//标题</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String description;<span class=\"comment\">//描述</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String termsOfServiceUrl;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String license;<span class=\"comment\">//</span></span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String licenseUrl;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> Contact contact;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> List&lt;VendorExtension&gt; vendorExtensions;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * Deprecated in favor of richer contact object</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@deprecated</span> <span class=\"doctag\">@since</span> 2.4.0</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> title title</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> description description</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> version version</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> termsOfServiceUrl terms of service</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> contactName contact name</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> license licence text</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@param</span> licenseUrl license url</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Deprecated</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"title function_\">ApiInfo</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">      String title,</span></span><br><span class=\"line\"><span class=\"params\">      String description,</span></span><br><span class=\"line\"><span class=\"params\">      String version,</span></span><br><span class=\"line\"><span class=\"params\">      String termsOfServiceUrl,</span></span><br><span class=\"line\"><span class=\"params\">      String contactName,</span></span><br><span class=\"line\"><span class=\"params\">      String license,</span></span><br><span class=\"line\"><span class=\"params\">      String licenseUrl)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>(title, description, version, termsOfServiceUrl, <span class=\"keyword\">new</span> <span class=\"title class_\">Contact</span>(contactName, <span class=\"string\">&quot;&quot;</span>, <span class=\"string\">&quot;&quot;</span>), license, licenseUrl, <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;VendorExtension&gt;());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//getter，setter，...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>通过Swagger可以实时创建一个接口文档，</li>\n<li>可以给接口进行注释，</li>\n<li>可以在线测试</li>\n</ul>\n<p>注意：在生产环境下，关闭Swagger。</p>\n<h1 id=\"题\"><a href=\"#题\" class=\"headerlink\" title=\"题\"></a>题</h1><blockquote>\n<p>我只希望我的Swagger在生产环境中使用，发布时不使用？</p>\n</blockquote>\n<p><strong>方法1：</strong></p>\n<ol>\n<li><p>为生产环境和开发环境配置不同的配置；</p>\n<p><img src=\"/2022/09/14/Day22-Swagger-1/image-20220914203621489.png\" alt=\"image-20220914203621489\"></p>\n</li>\n<li><p>通过下面的方式可以获得当前是否为指定环境，传值到enable方法里，就可以在开发环境下开启Swagger，其他环境下关闭Swagger。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//配置了Swagger Docket的Bean实例</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> Docket <span class=\"title function_\">docket</span><span class=\"params\">(Environment environment)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//依据环境切换Swagger的状态：dev：开启   pro：关闭</span></span><br><span class=\"line\">    <span class=\"comment\">//获取配置</span></span><br><span class=\"line\">    <span class=\"type\">Profiles</span> <span class=\"variable\">profiles</span> <span class=\"operator\">=</span> Profiles.of(<span class=\"string\">&quot;dev&quot;</span>,<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    <span class=\"comment\">//判断是否处于指定的运行环境</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> environment.acceptsProfiles(profiles);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">            .enable(flag);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>Profiles.of(&quot;dev&quot;,&quot;test&quot;)</code>可以获得指定环境的配置对象Profiles，然后使用<code>environment.acceptsProfiles(profiles)</code>判断是否为指定环境运行，返回值为布尔值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Profiles</span> <span class=\"variable\">profiles</span> <span class=\"operator\">=</span> Profiles.of(<span class=\"string\">&quot;dev&quot;</span>,<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//判断是否处于指定的运行环境</span></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> environment.acceptsProfiles(profiles);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>Docket.enable方法可以设定开启或关闭Swagger。</p>\n</li>\n</ul>\n</li>\n</ol>\n<p><strong>方法2</strong>：</p>\n<p>Hole….</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"前后端分离\"><a href=\"#前后端分离\" class=\"headerlink\" title=\"前后端分离\"></a>前后端分离</h2><ul>\n<li><p>后端：控制层、服务层、数据访问层 【后端团队】</p>\n</li>\n<li><p>前端：前端控制层、视图层  【前端团队】</p>\n<ul>\n<li>伪造后端数据，json。已经存在，不需要后端，前端工程能够跑起来。</li>\n</ul>\n</li>\n<li><p>前后端交互：API</p>\n</li>\n<li><p>前后端相对独立，松耦合；</p>\n</li>\n<li><p>前后端可以部署在不同的服务器上；</p>\n</li>\n<li><p>缺点：</p>\n<ul>\n<li>前后端集成联调，前端人员和后端人员无法做到及时协调，尽早解决，最后导致问题集中爆发。<ul>\n<li>解决方案：制定一个schema（计划的提纲），实时更新最新的API，降低集成的风险。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n","categories":[],"tags":["Swagger"]},{"title":"Day21 Shiro 1","url":"http://zswh33.github.io/2022/09/13/Day21-Shiro-1/","content":"<h1 id=\"Shiro\"><a href=\"#Shiro\" class=\"headerlink\" title=\"Shiro\"></a>Shiro</h1><p><a href=\"https://shiro.apache.org/\">https://shiro.apache.org/</a></p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><ul>\n<li>Shiro与SpringSecurity类似；</li>\n<li>Apache Shiro是一个Java的安全（权限）框架；</li>\n<li>Shiro可以完成认证、授权、加密、会话管理、Web集成、缓存等。</li>\n</ul>\n<p><img src=\"/2022/09/13/Day21-Shiro-1/Shiro%E6%9E%B6%E6%9E%84.svg\" alt=\"Shiro架构\"></p>\n<p>subject：应用代码直接交互的对象Subject，即Shiro的对外API核心就是Subject，Subject代表了当前的用户。</p>\n<p>SecurityManager：安全管理器，管理所有的Subject，负责与Shiro其他组件交互。</p>\n<p>Realm：Shiro从Realm获取安全数据（用户，角色，权限）。SecurityManager要验证用户身份，需要从Realm获取相应的用户进行比较。</p>\n<h2 id=\"第一个Shiro程序\"><a href=\"#第一个Shiro程序\" class=\"headerlink\" title=\"第一个Shiro程序\"></a>第一个Shiro程序</h2><h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><h4 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.apache.shiro<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>shiro-core<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.9.1<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- Shiro uses SLF4J for logging.  We&#x27;ll use the &#x27;simple&#x27; binding</span></span><br><span class=\"line\"><span class=\"comment\">         in this example app.  See http://www.slf4j.org for more info. --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-simple<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.36<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>slf4j-api<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.36<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.slf4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jcl-over-slf4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.7.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"shiro-ini\"><a href=\"#shiro-ini\" class=\"headerlink\" title=\"shiro.ini\"></a>shiro.ini</h4><figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># =============================================================================</span></span><br><span class=\"line\"><span class=\"comment\"># Tutorial INI configuration</span></span><br><span class=\"line\"><span class=\"comment\">#</span></span><br><span class=\"line\"><span class=\"comment\"># Usernames/passwords are based on the classic Mel Brooks&#x27; film &quot;Spaceballs&quot; :)</span></span><br><span class=\"line\"><span class=\"comment\"># =============================================================================</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -----------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Users and their (optional) assigned roles</span></span><br><span class=\"line\"><span class=\"comment\"># username = password, role1, role2, ..., roleN</span></span><br><span class=\"line\"><span class=\"comment\"># -----------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"section\">[users]</span></span><br><span class=\"line\"><span class=\"attr\">root</span> = secret, admin</span><br><span class=\"line\"><span class=\"attr\">guest</span> = guest, guest</span><br><span class=\"line\"><span class=\"attr\">lunch</span> = lunch, eater</span><br><span class=\"line\"><span class=\"attr\">water</span> = water, drinker</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -----------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\"># Roles with assigned permissions</span></span><br><span class=\"line\"><span class=\"comment\"># roleName = perm1, perm2, ..., permN</span></span><br><span class=\"line\"><span class=\"comment\"># -----------------------------------------------------------------------------</span></span><br><span class=\"line\"><span class=\"section\">[roles]</span></span><br><span class=\"line\"><span class=\"attr\">admin</span> = *</span><br><span class=\"line\"><span class=\"attr\">eater</span> = eat:*</span><br><span class=\"line\"><span class=\"attr\">drinker</span> = drink:kola:nosugar</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"主程序\"><a href=\"#主程序\" class=\"headerlink\" title=\"主程序\"></a>主程序</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.SecurityUtils;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.authc.*;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.config.IniSecurityManagerFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.session.Session;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.subject.Subject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.apache.shiro.util.Factory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.Logger;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hello</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">transient</span> <span class=\"type\">Logger</span> <span class=\"variable\">log</span> <span class=\"operator\">=</span> LoggerFactory.getLogger(Hello.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;My First Apache Shiro Application&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1. 获得安全管理器Factory</span></span><br><span class=\"line\">        Factory&lt;SecurityManager&gt; factory = <span class=\"keyword\">new</span> <span class=\"title class_\">IniSecurityManagerFactory</span>(<span class=\"string\">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//2. 获得安全管理器实例</span></span><br><span class=\"line\">        <span class=\"type\">SecurityManager</span> <span class=\"variable\">securityManager</span> <span class=\"operator\">=</span> factory.getInstance();</span><br><span class=\"line\">        <span class=\"comment\">//3. 设置安全管理器</span></span><br><span class=\"line\">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Subject</span> <span class=\"variable\">currentUser</span> <span class=\"operator\">=</span> SecurityUtils.getSubject();<span class=\"comment\">//获取当前用户</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//若当前用户没有登录</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!currentUser.isAuthenticated())&#123;</span><br><span class=\"line\">            <span class=\"type\">UsernamePasswordToken</span> <span class=\"variable\">token</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UsernamePasswordToken</span>(<span class=\"string\">&quot;root&quot;</span>,<span class=\"string\">&quot;secret&quot;</span>);</span><br><span class=\"line\">            token.setRememberMe(<span class=\"literal\">true</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                currentUser.login(token);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (UnknownAccountException e) &#123;</span><br><span class=\"line\">                log.info(<span class=\"string\">&quot;未知用户名&quot;</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (IncorrectCredentialsException ice)&#123;</span><br><span class=\"line\">                log.info(<span class=\"string\">&quot;错误的密码&quot;</span>);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (LockedAccountException lae)&#123;</span><br><span class=\"line\">                log.info(<span class=\"string\">&quot;锁定的账户&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Session</span> <span class=\"variable\">session</span> <span class=\"operator\">=</span> currentUser.getSession();<span class=\"comment\">//获取当前用户的Session</span></span><br><span class=\"line\">        session.setAttribute(<span class=\"string\">&quot;key&quot;</span>,<span class=\"string\">&quot;value&quot;</span>);<span class=\"comment\">//设置key和value</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> (String) session.getAttribute(<span class=\"string\">&quot;key&quot;</span>);<span class=\"comment\">//获取key-value</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"string\">&quot;value&quot;</span>.equals(value))&#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;正确：&quot;</span>+value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;当前用户名：&quot;</span>+currentUser.getPrincipal());<span class=\"comment\">//获得当前用户名</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//当前用户是否拥有角色</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentUser.hasRole(<span class=\"string\">&quot;admin&quot;</span>))&#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;管理员？&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;不是管理员&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//测试单权限</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentUser.isPermitted(<span class=\"string\">&quot;eat:Obsidian&quot;</span>))&#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;请不要饮食过度&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;你不能吃饭。&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//权限组</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (currentUser.isPermitted(<span class=\"string\">&quot;drink:SnowGreen&quot;</span>))&#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;请不要过度饮雪&quot;</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;你不能喝格林雪&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"运行结果\"><a href=\"#运行结果\" class=\"headerlink\" title=\"运行结果\"></a>运行结果</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[main] INFO com.yn.Hello - My First Apache Shiro Application</span><br><span class=\"line\">[main] INFO org.apache.shiro.session.mgt.AbstractValidatingSessionManager - Enabling session validation scheduler...</span><br><span class=\"line\">[main] INFO com.yn.Hello - 正确：value</span><br><span class=\"line\">[main] INFO com.yn.Hello - 当前用户名：root</span><br><span class=\"line\">[main] INFO com.yn.Hello - 管理员？</span><br><span class=\"line\">[main] INFO com.yn.Hello - 请不要饮食过度</span><br><span class=\"line\">[main] INFO com.yn.Hello - 请不要过度饮雪</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Subject对象的方法\"><a href=\"#Subject对象的方法\" class=\"headerlink\" title=\"Subject对象的方法\"></a>Subject对象的方法</h2><p>在Shiro里，Subject对象用来表示一个用户；</p>\n<p>可以使用SecurityUtils.getSubject()方法获得这个对象。</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><ul>\n<li>**isAuthenticated()**：返回boolean，当前用户是否经过验证（登录）；</li>\n<li>**login(token)**：登录一个用户，通过try-catch捕获登录错误时的操作<ul>\n<li><strong>UnknownAccountException</strong>：没有这个用户</li>\n<li><strong>IncorrectCredentialsException</strong>：错误的密码</li>\n<li><strong>LockedAccountException</strong>：锁定的账户</li>\n</ul>\n</li>\n<li><strong>getSession()<strong>：获取当前用户的Session。可以使用Session的</strong>setAttribute</strong>方法和<strong>getAttribute</strong>方法存或取值。</li>\n<li>**getPrincipal()**：获取当前用户名；</li>\n<li>**hasRole(“admin”)**：当前用户是否拥有角色admin；</li>\n<li>**isPermitted(“eat:Obsidian”)<strong>：是否被允许有“eat:Obsidian”权限。另外一个如：</strong>isPermitted(“drink:Cola”)**则为是否拥有drink:Cola权限；</li>\n<li>**logout()**：登出。</li>\n</ul>\n<h1 id=\"SpringBoot与Shiro集成\"><a href=\"#SpringBoot与Shiro集成\" class=\"headerlink\" title=\"SpringBoot与Shiro集成\"></a>SpringBoot与Shiro集成</h1><p><em>可能是Spring与Shiro集成？！</em></p>\n<h2 id=\"简易配置\"><a href=\"#简易配置\" class=\"headerlink\" title=\"简易配置\"></a>简易配置</h2><ol>\n<li><p>创建ShiroConfig配置类和UserRealm;</p>\n<p><img src=\"/2022/09/13/Day21-Shiro-1/image-20220914084926404.png\" alt=\"image-20220914084926404\"></p>\n</li>\n<li><p>UserRealm类继承AuthorizingRealm对象，重写相关方法；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//一个自定义的UserRealm</span></span><br><span class=\"line\"><span class=\"comment\">//继承AuthorizingRealm对象</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserRealm</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">AuthorizingRealm</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> AuthorizationInfo <span class=\"title function_\">doGetAuthorizationInfo</span><span class=\"params\">(PrincipalCollection principals)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;执行了 -&gt; 授权 PrincipalCollection&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//授权</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> AuthenticationInfo <span class=\"title function_\">doGetAuthenticationInfo</span><span class=\"params\">(AuthenticationToken token)</span> <span class=\"keyword\">throws</span> AuthenticationException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;执行了 -&gt; 认证 AuthenticationToken&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//有用户登录时会进入这里</span></span><br><span class=\"line\">        <span class=\"comment\">//这里负责判断账号密码正确与否</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ShiroConfig下创建三个@Bean，</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ShiroConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//@Bean方式 创建 Realm 对象 自定义类</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserRealm <span class=\"title function_\">userRealm</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserRealm</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//DefaultWebSecurityManager</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DefaultWebSecurityManager <span class=\"title function_\">getDefaultWebSessionManager</span><span class=\"params\">(<span class=\"meta\">@Qualifier(&quot;userRealm&quot;)</span> UserRealm realm)</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">DefaultWebSecurityManager</span> <span class=\"variable\">securityManager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultWebSecurityManager</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//关联UserRealm</span></span><br><span class=\"line\">        securityManager.setRealm(realm);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> securityManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//ShiroFilterFactoryBean</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ShiroFilterFactoryBean <span class=\"title function_\">getShiroFilterFactoryBean</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">            <span class=\"meta\">@Qualifier(&quot;getDefaultWebSessionManager&quot;)</span>DefaultWebSecurityManager securityManager)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ShiroFilterFactoryBean</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ShiroFilterFactoryBean</span>();</span><br><span class=\"line\">        <span class=\"comment\">//关联securityManager 设置安全管理器</span></span><br><span class=\"line\">        bean.setSecurityManager(securityManager);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//这里进行一些授权的配置，如：url与角色的绑定</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//配置登录API和登录页相关信息</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>分别返回UserRealm、DefaultWebSecurityManager、ShiroFilterFactoryBean三个对象，其中：</p>\n<ol>\n<li><strong>UserRealm</strong>直接新建一个刚刚创建的Realm并返回就可；</li>\n<li><strong>DefaultWebSecurityManager</strong>，使用@Qualifier注解将刚刚创建的<strong>Realm Bean作为方法的参数</strong>，新建一个DefaultWebSecurityManager对象，使用<strong>setRealm方法</strong>绑定刚刚绑定的<strong>Realm</strong>，然后返回；</li>\n<li><strong>ShiroFilterFactoryBean</strong>，使用@Qualifier注解将刚刚创建的<strong>DefaultWebSecurityManager Bean作为方法的参数</strong>，新建一个ShiroFilterFactoryBean对象，使用<strong>setSecurityManager方法</strong>绑定刚刚创建的<strong>DefaultWebSecurityManager</strong>，然后返回。</li>\n</ol>\n</li>\n<li><p>配置结束。</p>\n</li>\n</ol>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"UserRealm\"><a href=\"#UserRealm\" class=\"headerlink\" title=\"UserRealm\"></a>UserRealm</h3><p>创建一个UserRealm类，继承AuthorizingRealm类，重写：</p>\n<ul>\n<li><code>protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals)</code></li>\n<li><code>protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token)</code></li>\n</ul>\n<p>两个方法。</p>\n<h4 id=\"doGetAuthorizationInfo-PrincipalCollection-principals\"><a href=\"#doGetAuthorizationInfo-PrincipalCollection-principals\" class=\"headerlink\" title=\"doGetAuthorizationInfo(PrincipalCollection principals)\"></a>doGetAuthorizationInfo(PrincipalCollection principals)</h4><p>这个方法负责<strong>授权</strong>。</p>\n<p>下面的方法执行结束后，会执行这个方法，负责为登录的用户添加权限（加载权限）。</p>\n<p>这里要做的事：</p>\n<ol>\n<li><p>创建SimpleAuthorizationInfo对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">SimpleAuthorizationInfo</span> <span class=\"variable\">info</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleAuthorizationInfo</span>();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>从principals中获取用户的权限列表。（下面的方法为当前用户配置了principals属性，这里指用户的User对象，这里通过User.getPerms()获得用户的权限）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//拿到当前登录的对象</span></span><br><span class=\"line\"><span class=\"type\">Subject</span> <span class=\"variable\">subject</span> <span class=\"operator\">=</span> SecurityUtils.getSubject();</span><br><span class=\"line\"><span class=\"type\">User</span> <span class=\"variable\">currentUser</span> <span class=\"operator\">=</span> (User) subject.getPrincipal();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>为用户添加权限</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//设置当前用户的权限</span></span><br><span class=\"line\">info.addStringPermission(currentUser.getPerms());<span class=\"comment\">//currentUser.getPerms()是从user对象获取用户的权限</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>返回AuthorizationInfo对象。</p>\n</li>\n</ol>\n<h5 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> AuthorizationInfo <span class=\"title function_\">doGetAuthorizationInfo</span><span class=\"params\">(PrincipalCollection principals)</span> &#123;</span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;执行了 -&gt; 授权 PrincipalCollection&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">SimpleAuthorizationInfo</span> <span class=\"variable\">info</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleAuthorizationInfo</span>();</span><br><span class=\"line\">    <span class=\"comment\">//拿到当前登录的对象</span></span><br><span class=\"line\">    <span class=\"type\">Subject</span> <span class=\"variable\">subject</span> <span class=\"operator\">=</span> SecurityUtils.getSubject();</span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">currentUser</span> <span class=\"operator\">=</span> (User) subject.getPrincipal();</span><br><span class=\"line\">    <span class=\"comment\">//设置当前用户的权限</span></span><br><span class=\"line\">    info.addStringPermission(currentUser.getPerms());</span><br><span class=\"line\">    <span class=\"keyword\">return</span> info;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"doGetAuthenticationInfo-AuthenticationToken-token\"><a href=\"#doGetAuthenticationInfo-AuthenticationToken-token\" class=\"headerlink\" title=\"doGetAuthenticationInfo(AuthenticationToken token)\"></a>doGetAuthenticationInfo(AuthenticationToken token)</h4><p>这个方法负责<strong>认证</strong>。</p>\n<p>有用户登录时会进入这个方法。</p>\n<p>这里要做的事：</p>\n<ul>\n<li><p>从数据库中获取用户相关信息；</p>\n</li>\n<li><p>判断用户是否存在，不存在返回null；</p>\n</li>\n<li><p>创建一个AuthenticationInfo类型的对象，将主体对象和密码传入，然后将该对象返回。</p>\n<p>（将密码交给Shiro，由Shiro完成密码判断和其他操作。）</p>\n</li>\n</ul>\n<h5 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//认证</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> AuthenticationInfo <span class=\"title function_\">doGetAuthenticationInfo</span><span class=\"params\">(AuthenticationToken token)</span> <span class=\"keyword\">throws</span> AuthenticationException &#123;</span><br><span class=\"line\">    <span class=\"comment\">//一旦进行了登录，就会执行这个方法</span></span><br><span class=\"line\">    System.out.println(<span class=\"string\">&quot;执行了 -&gt; 认证 AuthenticationToken&quot;</span>);</span><br><span class=\"line\">    <span class=\"type\">UsernamePasswordToken</span> <span class=\"variable\">usernamePasswordToken</span> <span class=\"operator\">=</span> (UsernamePasswordToken) token;</span><br><span class=\"line\">    <span class=\"comment\">//从数据库获取用户 userService是service层用于与mapper层交互的对象。</span></span><br><span class=\"line\">    <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> userService.queryUserByUsername(usernamePasswordToken.getUsername());</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(user==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">        <span class=\"comment\">//没有这个用户</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;<span class=\"comment\">//返回null，在登录方法（这里是Controller的login POST中）会抛出异常UnknownAccountException</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断密码是否正确</span></span><br><span class=\"line\">    <span class=\"comment\">//加密方式： MD5  MD5盐值加密</span></span><br><span class=\"line\">    <span class=\"comment\">//MD5盐值加密：将密码和用户名都进行加密</span></span><br><span class=\"line\">    <span class=\"comment\">//密码认证交给shiro处理 有加密功能</span></span><br><span class=\"line\">    <span class=\"comment\">//参数1表示当前用户的主体对象，这里user是主体对象。用于在doGetAuthorizationInfo(PrincipalCollection principals)方法中获取用户的一些信息（如：权限）。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleAuthenticationInfo</span>(user, user.getPassword(), <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>首先将<code>AuthenticationToken token</code>强制转换为<code>UsernamePasswordToken</code>对象，然后就可以获取到登录用户的一些信息<ul>\n<li>**getUsername()**：用户名</li>\n<li>**getPassword()**：密码</li>\n</ul>\n</li>\n<li>然后通过用户名从数据库中获取用户；</li>\n<li>最后创建一个验证对象将密码传入然后将对象返回。</li>\n</ol>\n<h3 id=\"ShiroConfig\"><a href=\"#ShiroConfig\" class=\"headerlink\" title=\"ShiroConfig\"></a>ShiroConfig</h3><p>创建一个@Configuration配置类，用于存放Shiro类的一些@Bean配置。</p>\n<p>（这里设置类名为ShiroConfig用于示例）</p>\n<h4 id=\"UserRealm-1\"><a href=\"#UserRealm-1\" class=\"headerlink\" title=\"UserRealm\"></a>UserRealm</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> UserRealm <span class=\"title function_\">userRealm</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserRealm</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建UserRealm对象并返回。</p>\n<h4 id=\"DefaultWebSecurityManager\"><a href=\"#DefaultWebSecurityManager\" class=\"headerlink\" title=\"DefaultWebSecurityManager\"></a>DefaultWebSecurityManager</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DefaultWebSecurityManager <span class=\"title function_\">getDefaultWebSessionManager</span><span class=\"params\">(<span class=\"meta\">@Qualifier(&quot;userRealm&quot;)</span> UserRealm realm)</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">DefaultWebSecurityManager</span> <span class=\"variable\">securityManager</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultWebSecurityManager</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//关联UserRealm</span></span><br><span class=\"line\">    securityManager.setRealm(realm);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> securityManager;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建Bean <code>DefaultWebSecurityManager getDefaultWebSessionManager(@Qualifier(&quot;userRealm&quot;) </code>用于创建SecurityManager，绑定realm，并返回对象。</p>\n<ul>\n<li>创建SecurityManager对象 （指定SecurityManager）</li>\n<li>绑定realm （指定realm对象）</li>\n</ul>\n<h4 id=\"ShiroFilterFactoryBean\"><a href=\"#ShiroFilterFactoryBean\" class=\"headerlink\" title=\"ShiroFilterFactoryBean\"></a>ShiroFilterFactoryBean</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ShiroFilterFactoryBean <span class=\"title function_\">getShiroFilterFactoryBean</span><span class=\"params\">(</span></span><br><span class=\"line\"><span class=\"params\">        <span class=\"meta\">@Qualifier(&quot;getDefaultWebSessionManager&quot;)</span>DefaultWebSecurityManager securityManager)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">ShiroFilterFactoryBean</span> <span class=\"variable\">bean</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ShiroFilterFactoryBean</span>();</span><br><span class=\"line\">    <span class=\"comment\">//关联securityManager 设置安全管理器</span></span><br><span class=\"line\">    bean.setSecurityManager(securityManager);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加Shiro的内置过滤器</span></span><br><span class=\"line\"><span class=\"comment\">     * 一些用于示例的角色</span></span><br><span class=\"line\"><span class=\"comment\">     * anon：无需认证；</span></span><br><span class=\"line\"><span class=\"comment\">     * authc：必须认证</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//进行配置</span></span><br><span class=\"line\">    Map&lt;String,String&gt; filterMap = <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedHashMap</span>&lt;&gt;();<span class=\"comment\">//配置</span></span><br><span class=\"line\">    bean.setFilterChainDefinitionMap(filterMap);</span><br><span class=\"line\">    <span class=\"comment\">//授权   url和角色的绑定</span></span><br><span class=\"line\">    filterMap.put(<span class=\"string\">&quot;/user/add&quot;</span>,<span class=\"string\">&quot;anon&quot;</span>);<span class=\"comment\">//设置url可访问角色</span></span><br><span class=\"line\">    filterMap.put(<span class=\"string\">&quot;/user/update&quot;</span>,<span class=\"string\">&quot;authc&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//配置登录API和登录页相关信息</span></span><br><span class=\"line\">    <span class=\"comment\">//设置登录请求</span></span><br><span class=\"line\">    bean.setLoginUrl(<span class=\"string\">&quot;/login&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">//设置用户进入未经授权的页面要跳转的页面</span></span><br><span class=\"line\">    bean.setUnauthorizedUrl(<span class=\"string\">&quot;/noauth&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//返回对象</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>创建ShiroFilterFactoryBean对象，并将SecurityManager绑定到对象；</p>\n<ul>\n<li>&#96;&#96;&#96;java<br>ShiroFilterFactoryBean bean &#x3D; new ShiroFilterFactoryBean();<br>&#x2F;&#x2F;关联securityManager 设置安全管理器<br>bean.setSecurityManager(securityManager);<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 进行“授权”相关的配置：绑定url和角色；</span><br><span class=\"line\"></span><br><span class=\"line\">  - ```java</span><br><span class=\"line\">    //进行配置</span><br><span class=\"line\">    Map&lt;String,String&gt; filterMap = new LinkedHashMap&lt;&gt;();//配置</span><br><span class=\"line\">    bean.setFilterChainDefinitionMap(filterMap);</span><br><span class=\"line\">    //授权   url和角色的绑定</span><br><span class=\"line\">    filterMap.put(&quot;/user/add&quot;,&quot;anon&quot;);//设置url可访问角色</span><br><span class=\"line\">    filterMap.put(&quot;/user/update&quot;,&quot;authc&quot;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>配置登录API和登录页相关配置</p>\n<ul>\n<li>&#96;&#96;&#96;java<br>&#x2F;&#x2F;配置登录API和登录页相关信息<br>&#x2F;&#x2F;设置登录请求<br>bean.setLoginUrl(“&#x2F;login”);<br>&#x2F;&#x2F;设置用户进入未经授权的页面要跳转的页面<br>bean.setUnauthorizedUrl(“&#x2F;noauth”);<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 返回ShiroFilterFactoryBean对象。</span><br><span class=\"line\"></span><br><span class=\"line\">### shiro.ini配置</span><br><span class=\"line\"></span><br><span class=\"line\">```ini</span><br><span class=\"line\"># =======================</span><br><span class=\"line\"># Shiro INI configuration</span><br><span class=\"line\"># =======================</span><br><span class=\"line\"></span><br><span class=\"line\">[main]</span><br><span class=\"line\"># 放一些配置</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置密码编码：sha256</span><br><span class=\"line\">sha256Matcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher</span><br><span class=\"line\">iniRealm.credentialsMatcher = $sha256Matcher</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[users]</span><br><span class=\"line\"># 放一些静态用户 ，一般在数据库中，不在这里编写。</span><br><span class=\"line\"># 用户名 = 密码,角色1,角色2</span><br><span class=\"line\">yn = 8d969eef6ecad3c29a3a629280e686cf0c3f5d5a86aff3ca12020c923adc6c92,admin,eater</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">[roles]</span><br><span class=\"line\"># 这里放角色以及一些权限</span><br><span class=\"line\"># 角色名 = 权限</span><br><span class=\"line\"></span><br><span class=\"line\"># 访客可以注册账户，登录账户</span><br><span class=\"line\">guest = user:reg,login</span><br><span class=\"line\"></span><br><span class=\"line\"># 登录用户可以更新自己的信息</span><br><span class=\"line\">user = user:update</span><br><span class=\"line\"></span><br><span class=\"line\"># vip1可以自定义主页CSS</span><br><span class=\"line\">vip1 = user:index:update:css</span><br><span class=\"line\"></span><br><span class=\"line\"># vip2可以自定义主页HTML和CSS</span><br><span class=\"line\">vip2 = user:index:update:html,css</span><br><span class=\"line\"></span><br><span class=\"line\"># vip3可以自定义主页的HTML、CSS和JS（JS需要经过审核）</span><br><span class=\"line\">vip3 = user:index:update:*</span><br><span class=\"line\"></span><br><span class=\"line\"># admin可以为所欲为</span><br><span class=\"line\">admin = *</span><br><span class=\"line\"></span><br><span class=\"line\">#</span><br><span class=\"line\"></span><br><span class=\"line\">[urls]</span><br><span class=\"line\"># 为url绑定 角色/权限</span><br><span class=\"line\"></span><br><span class=\"line\"># 允许任何人访问根目录</span><br><span class=\"line\">/ = anon</span><br><span class=\"line\"># 允许任何人创建用户</span><br><span class=\"line\">/user/create = anon</span><br><span class=\"line\"># 允许任何人进行登录</span><br><span class=\"line\">/user/login = anon</span><br><span class=\"line\"># 仅允许登录的用户进入/user/根目录下页面</span><br><span class=\"line\">/user/* = authc</span><br><span class=\"line\"># 仅允许管理员且被认证的用户进入/admin/下所有页面</span><br><span class=\"line\">/admin/** = authc,roles[admin]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 拥有user:index:update:html权限的用户可以进入/user/index/html</span><br><span class=\"line\">/user/index/html = perms[user:index:update:html]</span><br><span class=\"line\">/user/index/css = perms[user:index:update:css]</span><br><span class=\"line\">/user/index/js = perms[user:index:update:js]</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"一些Filter\"><a href=\"#一些Filter\" class=\"headerlink\" title=\"一些Filter\"></a>一些Filter</h3><table>\n<thead>\n<tr>\n<th>Filter Name</th>\n<th>Class（基于org.apache.shiro.web.filter）</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>anon</td>\n<td><a href=\"https://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/AnonymousFilter.html\">authc.AnonymousFilter</a></td>\n<td>匿名用户</td>\n</tr>\n<tr>\n<td>authc</td>\n<td><a href=\"https://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/FormAuthenticationFilter.html\">authc.FormAuthenticationFilter</a></td>\n<td>认证用户</td>\n</tr>\n<tr>\n<td>authcBasic</td>\n<td><a href=\"https://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/BasicHttpAuthenticationFilter.html\">authc.BasicHttpAuthenticationFilter</a></td>\n<td></td>\n</tr>\n<tr>\n<td>authcBearer</td>\n<td><a href=\"https://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/BearerHttpAuthenticationFilter.html\">authc.BearerHttpAuthenticationFilter</a></td>\n<td></td>\n</tr>\n<tr>\n<td>invalidRequest</td>\n<td><a href=\"https://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/InvalidRequestFilter.html\">InvalidRequestFilter</a></td>\n<td>无效请求</td>\n</tr>\n<tr>\n<td>logout</td>\n<td><a href=\"https://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/LogoutFilter.html\">authc.LogoutFilter</a></td>\n<td>登出请求</td>\n</tr>\n<tr>\n<td>noSessionCreation</td>\n<td><a href=\"https://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/session/NoSessionCreationFilter.html\">session.NoSessionCreationFilter</a></td>\n<td>在此页面不能创建Session</td>\n</tr>\n<tr>\n<td>perms</td>\n<td><a href=\"https://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/PermissionsAuthorizationFilter.html\">authz.PermissionsAuthorizationFilter</a></td>\n<td>当用户具有指定权限，则允许访问</td>\n</tr>\n<tr>\n<td>port</td>\n<td><a href=\"https://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/PortFilter.html\">authz.PortFilter</a></td>\n<td>位于特定端口上的过滤器。</td>\n</tr>\n<tr>\n<td>rest</td>\n<td><a href=\"https://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/HttpMethodPermissionFilter.html\">authz.HttpMethodPermissionFilter</a></td>\n<td>RESTful环境</td>\n</tr>\n<tr>\n<td>roles</td>\n<td><a href=\"https://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/RolesAuthorizationFilter.html\">authz.RolesAuthorizationFilter</a></td>\n<td>判断用户拥有指定角色</td>\n</tr>\n<tr>\n<td>ssl</td>\n<td><a href=\"https://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/SslFilter.html\">authz.SslFilter</a></td>\n<td>必须使用ssl访问</td>\n</tr>\n<tr>\n<td>user</td>\n<td><a href=\"https://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/UserFilter.html\">authc.UserFilter</a></td>\n<td>若是已知用户且已登录，则允许访问该页面，否则不允许访问。</td>\n</tr>\n</tbody></table>\n<h1 id=\"Thymeleaf与Shiro集成\"><a href=\"#Thymeleaf与Shiro集成\" class=\"headerlink\" title=\"Thymeleaf与Shiro集成\"></a>Thymeleaf与Shiro集成</h1><p><a href=\"https://github.com/theborakompanioni/thymeleaf-extras-shiro\">https://github.com/theborakompanioni/thymeleaf-extras-shiro</a></p>\n<h2 id=\"依赖-1\"><a href=\"#依赖-1\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><h3 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">xmlns:shiro</span>=<span class=\"string\">&quot;http://www.pollix.at/thymeleaf/shiro&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 已经不能用了 后续如果找到能用的 再改 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"pom-xml-1\"><a href=\"#pom-xml-1\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.github.theborakompanioni<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>$&#123;thymeleaf-shiro.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置类\"><a href=\"#配置类\" class=\"headerlink\" title=\"配置类\"></a>配置类</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//整合ShiroDialect：用来整合shiro和thymeleaf</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ShiroDialect <span class=\"title function_\">getShiroDialect</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ShiroDialect</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加一个返回ShiroDialect对象的@Bean方法就可。</p>\n<p>可以放在ShrioConfig类下。</p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><ol>\n<li><p>可以在Thymeleaf下的HTML文件里添加Shiro为JSP设计的页面控制标签；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shiro:guest</span>&gt;</span>未登录的标志<span class=\"tag\">&lt;/<span class=\"name\">shiro:guest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>可以将标签作为属性写在HTML元素中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">shiro:guest</span>&gt;</span>未登录的标志2<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"一些标签-x2F-属性\"><a href=\"#一些标签-x2F-属性\" class=\"headerlink\" title=\"一些标签&#x2F;属性\"></a>一些标签&#x2F;属性</h2><h3 id=\"guest\"><a href=\"#guest\" class=\"headerlink\" title=\"guest\"></a>guest</h3><p>当前用户是访客，未登录状态；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shiro:guest</span>&gt;</span>请登录<span class=\"tag\">&lt;/<span class=\"name\">shiro:guest</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">shiro:guest</span>&gt;</span>请登录<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"user\"><a href=\"#user\" class=\"headerlink\" title=\"user\"></a>user</h3><p>当前用户已登录；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shiro:user</span>&gt;</span>Welcome back！张三<span class=\"tag\">&lt;/<span class=\"name\">shiro:user</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">shiro:user</span>&gt;</span>Welcome back！张三<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"authenticated\"><a href=\"#authenticated\" class=\"headerlink\" title=\"authenticated\"></a>authenticated</h3><p>在当前会话期间，用户通过身份验证。（与user不同，authenticated不能在只有remember-me没有会话的情况下有效，如：重新打开浏览器&#x2F;会话关闭）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shiro:authenticated</span>&gt;</span>身份通过验证，可以访问隐私内容<span class=\"tag\">&lt;/<span class=\"name\">shiro:authenticated</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">shiro:authenticated</span>&gt;</span>身份通过验证，可以访问隐私内容<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"notAuthenticated\"><a href=\"#notAuthenticated\" class=\"headerlink\" title=\"notAuthenticated\"></a>notAuthenticated</h3><p>在当前会话期间未成功验证。（与authenticated相反）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shiro:notAuthenticated</span>&gt;</span>需要二次验证才能访问当前内容 / 请登录<span class=\"tag\">&lt;/<span class=\"name\">shiro:notAuthenticated</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">shiro:notAuthenticated</span>&gt;</span>需要二次验证才能访问当前内容 / 请登录<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"principal\"><a href=\"#principal\" class=\"headerlink\" title=\"principal\"></a>principal</h3><p>将输出在后端配置的principal属性，toString()方法的返回值；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shiro:principal</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">shiro:principal</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shiro:principal</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shiro:principal</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.foo.User&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;firstName&quot;</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">shiro:principal</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span><span class=\"comment\">&lt;!-- thymeleaf-extras-shiro插件不支持type属性和property属性？ --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"类型type\"><a href=\"#类型type\" class=\"headerlink\" title=\"类型type\"></a>类型type</h4><p>指定principal的类型，指定后将按照不同方式进行输出。不指定则按照toString输出。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">principal</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;java.lang.Integer&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"属性值property\"><a href=\"#属性值property\" class=\"headerlink\" title=\"属性值property\"></a>属性值property</h4><p>若principal是一个对象，可以通过这种方式指定要输出的对象的属性值。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shiro:principal</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;User&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;lastname&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasRole\"><a href=\"#hasRole\" class=\"headerlink\" title=\"hasRole\"></a>hasRole</h3><p>用户拥有指定角色时。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shiro:hasRole</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;admin&quot;</span>&gt;</span>管理员你好<span class=\"tag\">&lt;/<span class=\"name\">shiro:hasRole</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">shiro:hasRole</span>=<span class=\"string\">&quot;admin&quot;</span>&gt;</span>管理员你好<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lacksRole\"><a href=\"#lacksRole\" class=\"headerlink\" title=\"lacksRole\"></a>lacksRole</h3><p>用户没有指定角色时。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shiro:lacksRole</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;admin&quot;</span>&gt;</span>你不是管理员吧？<span class=\"tag\">&lt;/<span class=\"name\">shiro:lacksRole</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">shiro:lackRole</span>=<span class=\"string\">&quot;admin&quot;</span>&gt;</span>闲杂人等不得入内<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>缺少admin角色的用户会看到上面的内容。</p>\n<h3 id=\"hasAnyRoles\"><a href=\"#hasAnyRoles\" class=\"headerlink\" title=\"hasAnyRoles\"></a>hasAnyRoles</h3><p>用户拥有以下任意角色时。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shiro:hasAnyRoles</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;developer, project manager, administrator&quot;</span>&gt;</span>你好，管理员<span class=\"tag\">&lt;/<span class=\"name\">shiro:hasAnyRoles</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">shiro:hasAnyRoles</span>=<span class=\"string\">&quot;developer, project manager, administrator&quot;</span>&gt;</span>你好，管理员<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当访问这是developer, project manager, administrator其中任意一种角色时，可以看到上面内容。</p>\n<h3 id=\"hasAllRoles\"><a href=\"#hasAllRoles\" class=\"headerlink\" title=\"hasAllRoles\"></a>hasAllRoles</h3><p>用户拥有以下所有角色时。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shiro:hasAllRoles</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;developer, project manager, administrator&quot;</span>&gt;</span>拥有前面所有角色的用户能看得见<span class=\"tag\">&lt;/<span class=\"name\">shiro:hasAllRoles</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">shiro:hasAllRoles</span>=<span class=\"string\">&quot;developer, project manager, administrator&quot;</span>&gt;</span></span><br><span class=\"line\">    拥有前面所有角色的用户能看得见</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hasPermission\"><a href=\"#hasPermission\" class=\"headerlink\" title=\"hasPermission\"></a>hasPermission</h3><p>用户拥有具有指定的权限。（暗示：通过角色获取的权限）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shiro:hasPermission</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user:create&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;createUsers&quot;</span>&gt;</span>Create a new User<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">shiro:hasPermission</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">shiro:hasPermission</span>=<span class=\"string\">&quot;user:create&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;createUsers&quot;</span>&gt;</span>Create a new User<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lacksPermission\"><a href=\"#lacksPermission\" class=\"headerlink\" title=\"lacksPermission\"></a>lacksPermission</h3><p>用户缺少指定权限时。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">shiro:lacksPermission</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;user:delete&quot;</span>&gt;</span></span><br><span class=\"line\">    Sorry, you are not allowed to delete user accounts.</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">shiro:lacksPermission</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">shiro:lacksPermission</span>=<span class=\"string\">&quot;user:create&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;createUsers&quot;</span>&gt;</span>Create a new User<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n","categories":[],"tags":["Shiro"]},{"title":"Day21 Linux 一些软件用法","url":"http://zswh33.github.io/2022/09/13/Day21-Linux-一些软件用法/","content":"<h1 id=\"Screen\"><a href=\"#Screen\" class=\"headerlink\" title=\"Screen\"></a>Screen</h1><p>可以在Linux系统下开启多个作业，并放到后台运行。</p>\n<h2 id=\"参数\"><a href=\"#参数\" class=\"headerlink\" title=\"参数\"></a>参数</h2><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-S &lt;作业名&gt;</td>\n<td>创建新的作业</td>\n</tr>\n<tr>\n<td>-r &lt;作业名&gt;</td>\n<td>恢复离线的作业</td>\n</tr>\n<tr>\n<td>-ls</td>\n<td>查看所有的作业</td>\n</tr>\n<tr>\n<td>-wipe</td>\n<td>删除无法使用的作业</td>\n</tr>\n<tr>\n<td>-R</td>\n<td>尝试恢复离线的作业，若找不到，则建立新的作业</td>\n</tr>\n</tbody></table>\n<h2 id=\"快捷键\"><a href=\"#快捷键\" class=\"headerlink\" title=\"快捷键\"></a>快捷键</h2><table>\n<thead>\n<tr>\n<th>快捷键</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ctrl + a d</td>\n<td>离开终端</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h1 id=\"Docker\"><a href=\"#Docker\" class=\"headerlink\" title=\"Docker\"></a>Docker</h1><p>docker pull ubuntu 载入ubuntu的镜像</p>\n<p>docker run -it ubuntu &#x2F;bin&#x2F;bash 以命令行方式进入容器</p>\n<h2 id=\"容器使用\"><a href=\"#容器使用\" class=\"headerlink\" title=\"容器使用\"></a>容器使用</h2><h3 id=\"运行、停止、重启、进入\"><a href=\"#运行、停止、重启、进入\" class=\"headerlink\" title=\"运行、停止、重启、进入\"></a>运行、停止、重启、进入</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-i</td>\n<td>交互式操作</td>\n</tr>\n<tr>\n<td>-t</td>\n<td>终端</td>\n</tr>\n<tr>\n<td>ps -a</td>\n<td>查看所有容器</td>\n</tr>\n<tr>\n<td>-d</td>\n<td>后台运行</td>\n</tr>\n<tr>\n<td>–name</td>\n<td>设定名字</td>\n</tr>\n<tr>\n<td>start 容器id</td>\n<td>启动一个停止的容器</td>\n</tr>\n<tr>\n<td>stop 容器id</td>\n<td>停止一个容器</td>\n</tr>\n<tr>\n<td>restart 容器id</td>\n<td>重启一个容器</td>\n</tr>\n<tr>\n<td>attach 容器id</td>\n<td>进入容器。退出后会使容器停止。</td>\n</tr>\n<tr>\n<td>exec 容器id</td>\n<td>进入容器。exit后容器不会停止。</td>\n</tr>\n</tbody></table>\n<h3 id=\"导入、导出、删除、增加、清除\"><a href=\"#导入、导出、删除、增加、清除\" class=\"headerlink\" title=\"导入、导出、删除、增加、清除\"></a>导入、导出、删除、增加、清除</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>export 容器id  &gt; ubuntu.tar</td>\n<td>导出容器的快照到本地文件ubuntu.tar</td>\n</tr>\n<tr>\n<td>cat docker&#x2F;ubuntu.tar | docker import - test&#x2F;ubuntu:v1</td>\n<td>将快照ubuntu.tar导入到镜像test&#x2F;ubuntu:v1</td>\n</tr>\n<tr>\n<td>import <a href=\"http://xx.xx/xxx.tgz\">http://xx.xx/xxx.tgz</a> example&#x2F;imagerepo</td>\n<td>从url导入</td>\n</tr>\n<tr>\n<td>rm -f 容器id</td>\n<td>删除容器</td>\n</tr>\n<tr>\n<td>run 镜像名 参数 （如：run -d -P training&#x2F;webapp python q.py）</td>\n<td>从镜像运行容器</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>container prune</td>\n<td>清理所有处于终止状态的容器。</td>\n</tr>\n</tbody></table>\n<h3 id=\"其他参数\"><a href=\"#其他参数\" class=\"headerlink\" title=\"其他参数\"></a>其他参数</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-P</td>\n<td>将容器内部使用的网络端口随机映射到使用的主机上。</td>\n</tr>\n<tr>\n<td>-p</td>\n<td>设置端口映射。-p 5001:5000 将容器的5000端口映射到主机的5001端口</td>\n</tr>\n<tr>\n<td>logs id&#x2F;name</td>\n<td>查看应用输出</td>\n</tr>\n<tr>\n<td>logs -f id&#x2F;name</td>\n<td>以tail -f方式查看输出</td>\n</tr>\n<tr>\n<td>top</td>\n<td>查看进程</td>\n</tr>\n<tr>\n<td>inspect</td>\n<td>查看状态</td>\n</tr>\n</tbody></table>\n<h2 id=\"镜像使用\"><a href=\"#镜像使用\" class=\"headerlink\" title=\"镜像使用\"></a>镜像使用</h2><p><strong><a href=\"https://hub.docker.com/\">https://hub.docker.com/</a></strong></p>\n<h3 id=\"查看，下载，删除\"><a href=\"#查看，下载，删除\" class=\"headerlink\" title=\"查看，下载，删除\"></a>查看，下载，删除</h3><table>\n<thead>\n<tr>\n<th>参数</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>images</td>\n<td>查看本机上的镜像</td>\n</tr>\n<tr>\n<td>pull</td>\n<td>下载镜像。docker pull ubuntu:13.10</td>\n</tr>\n<tr>\n<td>rmi</td>\n<td>删除镜像</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"保存、加载\"><a href=\"#保存、加载\" class=\"headerlink\" title=\"保存、加载\"></a>保存、加载</h3><blockquote>\n<p>保存镜像</p>\n</blockquote>\n<p><strong>保存镜像：</strong>docker save [options] images [images…]</p>\n<p><strong>示例：</strong></p>\n<ul>\n<li>docker save -o nginx.tar nginx:latest</li>\n<li>docker save &gt; ngin.tar ngin:latest</li>\n</ul>\n<blockquote>\n<p>加载镜像</p>\n</blockquote>\n<p><strong>加载镜像：</strong>docker load [options]</p>\n<p><strong>示例：</strong></p>\n<ul>\n<li>docker load -i nginx.tar</li>\n<li>docker load &lt; nginx.tar</li>\n</ul>\n<h3 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h3><p><em>docker commit -m&#x3D;”has update” -a&#x3D;”zhansan” 容器id zhangsan&#x2F;ubuntu:v2</em></p>\n<ul>\n<li>先创建一个容器，</li>\n<li>然后在容器内将需要更新的内容修改，</li>\n<li>最后使用以下命令提交一个新的镜像。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker commit -m=&quot;has update&quot; -a=&quot;zhansan&quot; bbbbbbbbbbb zhangsan/ubuntu:v2</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>docker commit</strong>：提交更新的命令</li>\n<li><strong>-m</strong>：提交的描述信息</li>\n<li><strong>-a</strong>：指定镜像作者</li>\n<li>bbbbbbbbbbb：容器id</li>\n<li><strong>zhangsan&#x2F;ubuntu:v2</strong>：要创建的镜像名</li>\n</ul>\n<p>然后就可以使用<strong>docker run -ti zhangsan&#x2F;ubuntu:v2 &#x2F;bin&#x2F;bash</strong>来启动一个容器。</p>\n<h2 id=\"构建镜像\"><a href=\"#构建镜像\" class=\"headerlink\" title=\"构建镜像\"></a>构建镜像</h2><p><em>docker build</em></p>\n<p><a href=\"https://www.runoob.com/docker/docker-image-usage.html\">https://www.runoob.com/docker/docker-image-usage.html</a></p>\n<p>hole…</p>\n<h2 id=\"容器连接\"><a href=\"#容器连接\" class=\"headerlink\" title=\"容器连接\"></a>容器连接</h2><h3 id=\"端口映射\"><a href=\"#端口映射\" class=\"headerlink\" title=\"端口映射\"></a>端口映射</h3><h4 id=\"参数-1\"><a href=\"#参数-1\" class=\"headerlink\" title=\"参数\"></a>参数</h4><ul>\n<li><strong>-P</strong>：随机端口映射。</li>\n<li><strong>-p</strong>：指定端口映射。<ul>\n<li>5000:4000将容器的4000端口映射到主机的5000端口。</li>\n<li>指定容器网络地址，如127.0.0.1:5000:4000。主机可以使用127.0.0.1:5000访问容器。</li>\n<li>指定协议。127.0.0.1:5000:4000&#x2F;udp；</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"查看端口绑定\"><a href=\"#查看端口绑定\" class=\"headerlink\" title=\"查看端口绑定\"></a>查看端口绑定</h4><p>docker port 容器name</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><blockquote>\n<p>参考文献</p>\n</blockquote>\n<p><a href=\"https://www.runoob.com/docker/\">https://www.runoob.com/docker/</a></p>\n","categories":[],"tags":["Linux"]},{"title":"一些配置模板","url":"http://zswh33.github.io/2022/09/11/一些配置模板/","content":"<h1 id=\"MyBatis\"><a href=\"#MyBatis\" class=\"headerlink\" title=\"MyBatis\"></a>MyBatis</h1><h2 id=\"Mapper-XML\"><a href=\"#Mapper-XML\" class=\"headerlink\" title=\"Mapper XML\"></a>Mapper XML</h2><h3 id=\"模板1\"><a href=\"#模板1\" class=\"headerlink\" title=\"模板1\"></a>模板1</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span> <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\"> <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 为这个mapper指定一个唯一的namespace，namespace的值习惯上设置成包名+sql映射文件名，这样就能够保证namespace的值是唯一的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;cn.mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 添加数据 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;add&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;cn.mybatis.beans.User&quot;</span>&gt;</span></span><br><span class=\"line\">        insert into t_user(name,age) value(#&#123;name&#125;,#&#123;age&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 删除数据 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;del&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;int&quot;</span>&gt;</span></span><br><span class=\"line\">        delete from t_user where id = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 修改数据 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;update&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;cn.mybatis.beans.User&quot;</span>&gt;</span></span><br><span class=\"line\">        update t_user set name=#&#123;name&#125;,age=#&#123;age&#125; where id=#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--根据id查询得到一个user对象--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getUser&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;int&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;cn.mybatis.beans.User&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from t_user where id=#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模板2\"><a href=\"#模板2\" class=\"headerlink\" title=\"模板2\"></a>模板2</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.yn.Mapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;employeeMapper&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;com.yn.pojo.Employee&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;eid&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;name&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;ename&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;age&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;eage&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;position&quot;</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;eposition&quot;</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getListById&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;employeeMapper&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;int&quot;</span>&gt;</span></span><br><span class=\"line\">        select *</span><br><span class=\"line\">        from employee</span><br><span class=\"line\">        where eid = #&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["templates"]},{"title":"Day19 SpringBoot 7 SpirngBootMyBatis SpringSecurity Thmeleaf与SpringSecurity","url":"http://zswh33.github.io/2022/09/11/Day19-SpringBoot-7/","content":"<h1 id=\"SpringBoot-MyBatis整合\"><a href=\"#SpringBoot-MyBatis整合\" class=\"headerlink\" title=\"SpringBoot MyBatis整合\"></a>SpringBoot MyBatis整合</h1><p><em>MyBatis的starter是MyBatis官方搞得，不是SpringBoot官方搞的</em></p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.mybatis.spring.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.2.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-x2F-代码\"><a href=\"#使用-x2F-代码\" class=\"headerlink\" title=\"使用&#x2F;代码\"></a>使用&#x2F;代码</h2><ol>\n<li><p>添加依赖；</p>\n</li>\n<li><p>在application配置中添加DataSource配置和mybatis配置；</p>\n<ul>\n<li><p>添加mybatis的type-aliases-package和mapper-locations。其中type-aliases-package是pojo类的包名，mapper-locations是mapper文件的位置；</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mybatis:</span></span><br><span class=\"line\">  <span class=\"attr\">type-aliases-package:</span> <span class=\"string\">com.yn.springbootwebstudy4_mybatis.pojo</span></span><br><span class=\"line\">  <span class=\"attr\">mapper-locations:</span> <span class=\"string\">classpath:mybatis/mapper/*.xml</span> <span class=\"comment\"># 这里是resources下的mybatis/mapper文件夹下的所有xml文件</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>添加DataSource配置。添加spring.datasource下的username、password、url和driver-class-name配置。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span>  <span class=\"comment\"># 用户名</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/springbootstudy?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p>创建Mapper接口，<strong>使用@Mapper注解</strong>和@Repository注解；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Mapper</span>  <span class=\"comment\">//表示这是一个MyBatis的Mapper类</span></span><br><span class=\"line\"><span class=\"meta\">@Repository</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">UserMapper</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    List&lt;User&gt; <span class=\"title function_\">queryUserList</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    User <span class=\"title function_\">queryUserById</span><span class=\"params\">(Integer id)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">addUser</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(User user)</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">deleteUser</span><span class=\"params\">(Integer id)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在mapper-locations指定的位置创建Mapper的xml文件，并配置相关内容。</p>\n<p><img src=\"/2022/09/11/Day19-SpringBoot-7/image-20220911220230419.png\" alt=\"image-20220911220230419\"></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.yn.springbootwebstudy4_mybatis.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">cache</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;queryUserList&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;User&quot;</span> <span class=\"attr\">useCache</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from user;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;queryUserById&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;int&quot;</span> <span class=\"attr\">resultType</span>=<span class=\"string\">&quot;User&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from user where id=#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;addUser&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;User&quot;</span>&gt;</span></span><br><span class=\"line\">        insert into user(username,password,nickname,regDate) values(#&#123;username&#125;,#&#123;password&#125;,#&#123;nickname&#125;,#&#123;regDate&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;deleteUser&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;int&quot;</span>&gt;</span></span><br><span class=\"line\">        delete from user where id=#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;updateUser&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;User&quot;</span>&gt;</span></span><br><span class=\"line\">        update user set username=#&#123;username&#125;,password=#&#123;password&#125;,nickname=#&#123;nickname&#125;,regDate=#&#123;regDate&#125; where id=#&#123;id&#125;;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用@Autowired注解使用即可</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UserController</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> UserMapper userMapper;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/list&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;User&gt; <span class=\"title function_\">queryUserList</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        List&lt;User&gt; users = userMapper.queryUserList();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> users;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/get/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> User <span class=\"title function_\">queryUserById</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.queryUserById(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/add&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">addUser</span><span class=\"params\">(User user)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.addUser(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/delete/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">deleteUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.deleteUser(id);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/update&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">updateUser</span><span class=\"params\">(User user)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> userMapper.updateUser(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"ResultMap复习\"><a href=\"#ResultMap复习\" class=\"headerlink\" title=\"ResultMap复习\"></a>ResultMap复习</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">mapper</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"keyword\">PUBLIC</span> <span class=\"string\">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class=\"line\"><span class=\"meta\">        <span class=\"string\">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">mapper</span> <span class=\"attr\">namespace</span>=<span class=\"string\">&quot;com.yn.springbootwebstudy2.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">resultMap</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;Employee&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;Employee&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;lastname&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;lastName&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;email&quot;</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;gender&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;gender&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;birth&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;birth&quot;</span> <span class=\"attr\">jdbcType</span>=<span class=\"string\">&quot;DATE&quot;</span> <span class=\"attr\">javaType</span>=<span class=\"string\">&quot;Date&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">collection</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;department&quot;</span> <span class=\"attr\">ofType</span>=<span class=\"string\">&quot;Department&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;id&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;id&quot;</span>/&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">column</span>=<span class=\"string\">&quot;dname&quot;</span> <span class=\"attr\">property</span>=<span class=\"string\">&quot;departmentName&quot;</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">collection</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">resultMap</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">insert</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;add&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;Employee&quot;</span>&gt;</span></span><br><span class=\"line\">        insert into employee(lastName,email,gender,department,birth) values(#&#123;lastName&#125;,#&#123;email&#125;,#&#123;gender&#125;,#&#123;department.id&#125;,#&#123;birth&#125;)</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">insert</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;get&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;Employee&quot;</span>&gt;</span></span><br><span class=\"line\">        select * from employee where id=#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;getList&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;Integer&quot;</span> <span class=\"attr\">resultMap</span>=<span class=\"string\">&quot;Employee&quot;</span>&gt;</span></span><br><span class=\"line\">        SELECT e.id id,lastname,email,gender,birth,department,departmentname &#x27;dname&#x27; from department d,employee e WHERE d.id=e.department;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">delete</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;delete&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;int&quot;</span>&gt;</span></span><br><span class=\"line\">        delete from employee where id=#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">delete</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">update</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;update&quot;</span> <span class=\"attr\">parameterType</span>=<span class=\"string\">&quot;Employee&quot;</span>&gt;</span></span><br><span class=\"line\">        update employee set lastname=#&#123;lastName&#125;,email=#&#123;email&#125;,gender=#&#123;gender&#125;,birth=#&#123;birth&#125;,department=#&#123;department.id&#125; where id=#&#123;id&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">update</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Spring-Security（安全）\"><a href=\"#Spring-Security（安全）\" class=\"headerlink\" title=\"Spring Security（安全）\"></a>Spring Security（安全）</h1><p><em><code>sudo rm -rf /*</code> 以管理员身份sudo 删除ReMove -垃圾文件RubbishFile 根目录下&#x2F;所有文件*</em></p>\n<p><em>Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.</em></p>\n<p>Spring Security是一个强大的可高度自定义的认证和访问控制框架。它是对于保护Spring应用实际上的标准。</p>\n<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>实现方式：shiro、SpringSecurity。</p>\n<p>认证、授权</p>\n<p>原理：AOP切面</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Spring Security是针对Spring项目的安全框架，也是Spring Boot底层安全模块默认的计数选型，可以实现强大的Web安全控制。对于安全控制，仅需要引入<strong>spring-boot-starter-security</strong>模块，进行少量的配置，即可实现强大的安全管理。</p>\n<ul>\n<li>WebSecurityConfigurerAdapter：自定义的Security策略；</li>\n<li>AuthenticationManagerBuilder：自定义认证策略；</li>\n<li>@EnableWebSecurity：开启WebSecurity模式</li>\n</ul>\n<p>Spring Security的两个主要目标：认证、授权（访问控制）。</p>\n<p>认证：Authentication</p>\n<p>授权：Authorization</p>\n<h2 id=\"依赖-1\"><a href=\"#依赖-1\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Security--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"认证和授权（新）\"><a href=\"#认证和授权（新）\" class=\"headerlink\" title=\"认证和授权（新）\"></a>认证和授权（新）</h2><p><em>2022.09.13</em></p>\n<blockquote>\n<p>来自WebSecurityConfigurerAdapter的启示</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Deprecated</span><br><span class=\"line\">Use a SecurityFilterChain Bean to configure HttpSecurity or </span><br><span class=\"line\">    a WebSecurityCustomizer Bean to configure WebSecurity</span><br></pre></td></tr></table></figure>\n\n<p>使用一个SecurityFilterChain Bean去配置HttpSecurity；</p>\n<p>使用一个WebSecurityCustomizer Bean去配置WebSecurity；</p>\n<h3 id=\"方法\"><a href=\"#方法\" class=\"headerlink\" title=\"方法\"></a>方法</h3><ol>\n<li><p>创建配置类使用@EnableWebSecurity注解；</p>\n</li>\n<li><p>创建@Bean，两个：</p>\n<ul>\n<li><p>认证：为角色分配可访问的页面</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    http.authorizeHttpRequests()</span><br><span class=\"line\">            .antMatchers(<span class=\"string\">&quot;/&quot;</span>).permitAll()<span class=\"comment\">//为所有用户授权根目录</span></span><br><span class=\"line\">            .antMatchers(<span class=\"string\">&quot;/level1/**&quot;</span>).hasRole(<span class=\"string\">&quot;vip1&quot;</span>)<span class=\"comment\">//为vip1授权/level1/**目录。</span></span><br><span class=\"line\">            .antMatchers(<span class=\"string\">&quot;/level2/**&quot;</span>).hasRole(<span class=\"string\">&quot;vip2&quot;</span>)</span><br><span class=\"line\">            .antMatchers(<span class=\"string\">&quot;/level3/**&quot;</span>).hasRole(<span class=\"string\">&quot;vip3&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    http.formLogin();<span class=\"comment\">//使用默认生成的登录页面</span></span><br><span class=\"line\">    http.csrf().disable();<span class=\"comment\">//禁用csrf防御</span></span><br><span class=\"line\">    http.logout().logoutSuccessUrl(<span class=\"string\">&quot;/&quot;</span>);<span class=\"comment\">//登出后跳到根目录页面</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    http.rememberMe();<span class=\"comment\">//“记住我”，在浏览器添加一个cookie，默认保存两周时间</span></span><br><span class=\"line\">    <span class=\"comment\">//在此之前，一律为关闭浏览器即关闭会话，会自动退出登录。</span></span><br><span class=\"line\">    </span><br><span class=\"line\">        http.formLogin().loginPage(<span class=\"string\">&quot;/login&quot;</span>)<span class=\"comment\">//自定义登录页</span></span><br><span class=\"line\">                .loginProcessingUrl(<span class=\"string\">&quot;/loginxx&quot;</span>)<span class=\"comment\">//修改登录时post的url，默认/login</span></span><br><span class=\"line\">                .usernameParameter(<span class=\"string\">&quot;u&quot;</span>)<span class=\"comment\">//修改表单的用户名的key，默认username</span></span><br><span class=\"line\">                .passwordParameter(<span class=\"string\">&quot;p&quot;</span>);<span class=\"comment\">//修改表单的密码的key，默认password</span></span><br><span class=\"line\"><span class=\"comment\">//                .failureForwardUrl(&quot;/login&quot;)//失败时跳转，默认/login?error。</span></span><br><span class=\"line\"><span class=\"comment\">//                .successForwardUrl(&quot;/&quot;)//成功时跳转页面，默认为登录前页面，若没有登录前页面，则为主页。</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> http.build();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>授权：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> UserDetailsService <span class=\"title function_\">userDetailsService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">BCryptPasswordEncoder</span> <span class=\"variable\">passwordEncoder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>();</span><br><span class=\"line\">    UserDetails[] user = &#123;</span><br><span class=\"line\">            User.withDefaultPasswordEncoder().username(<span class=\"string\">&quot;root&quot;</span>).password(<span class=\"string\">&quot;123456&quot;</span>).roles(<span class=\"string\">&quot;vip1&quot;</span>,<span class=\"string\">&quot;vip2&quot;</span>,<span class=\"string\">&quot;vip3&quot;</span>).build(),</span><br><span class=\"line\">            User.withDefaultPasswordEncoder().username(<span class=\"string\">&quot;zhangsan&quot;</span>).password(<span class=\"string\">&quot;123456&quot;</span>).roles(<span class=\"string\">&quot;vip1&quot;</span>,<span class=\"string\">&quot;vip2&quot;</span>).build(),</span><br><span class=\"line\">            User.withDefaultPasswordEncoder().username(<span class=\"string\">&quot;lisi&quot;</span>).password(<span class=\"string\">&quot;123456&quot;</span>).roles(<span class=\"string\">&quot;vip1&quot;</span>).build()</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryUserDetailsManager</span>(user);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"HttpSecurity的一些方法\"><a href=\"#HttpSecurity的一些方法\" class=\"headerlink\" title=\"HttpSecurity的一些方法\"></a>HttpSecurity的一些方法</h3><ul>\n<li><strong>.antMatchers(“&#x2F;“).permitAll()</strong>&#x2F;&#x2F;为根目录允许所有</li>\n<li><strong>.antMatchers(“&#x2F;level1&#x2F;**“).hasRole(“vip1”)</strong>&#x2F;&#x2F;为level1目录分配vip1角色</li>\n<li>**http.formLogin()<strong>：若没有使用</strong>FormLoginConfigurer.logPage(String)**指定登录页，将生成一个默认的登录页；</li>\n<li>**http.csrf().disable()**：禁用csrf防御；</li>\n<li>**http.logout().logoutSuccessUrl(“&#x2F;“)**：登出成功后跳到根目录页面。</li>\n<li>**http.rememberMe()**：在登录页添加“记住我”checkbox，若为true，则登录时会在浏览器添加一个cookie，默认保存两周时间，保持用户登录。在此之前，一律为关闭浏览器即关闭会话，会自动退出登录。<ul>\n<li><strong>http.rememberMe().rememberMeParameter(“rem”)</strong>   修改”记住我”的key，默认为remember-me</li>\n</ul>\n</li>\n<li>**http.formLogin()**，可以定义登录API的相关参数<ul>\n<li><strong>loginPage(“&#x2F;login”)</strong>&#x2F;&#x2F;自定义登录页</li>\n<li><strong>.loginProcessingUrl(“&#x2F;loginxx”)</strong>   修改登录时post的url，默认&#x2F;login</li>\n<li><strong>.usernameParameter(“u”)</strong>   修改表单的用户名的key，默认username</li>\n<li><strong>.passwordParameter(“p”)</strong>   修改表单的密码的key，默认password</li>\n<li><strong>.failureForwardUrl(“&#x2F;login”)</strong>   失败时跳转，默认&#x2F;login?error。</li>\n<li><strong>.successForwardUrl(“&#x2F;“)</strong>   成功时跳转页面，默认为登录前页面，若没有登录前页面，则为主页。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FormLoginSecurityConfig</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> SecurityFilterChain <span class=\"title function_\">securityFilterChain</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        http.authorizeHttpRequests()</span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/&quot;</span>).permitAll()</span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/level1/**&quot;</span>).hasRole(<span class=\"string\">&quot;vip1&quot;</span>)</span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/level2/**&quot;</span>).hasRole(<span class=\"string\">&quot;vip2&quot;</span>)</span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/level3/**&quot;</span>).hasRole(<span class=\"string\">&quot;vip3&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        http.formLogin();<span class=\"comment\">//使用默认生成的登录页面</span></span><br><span class=\"line\">        http.csrf().disable();<span class=\"comment\">//禁用csrf防御</span></span><br><span class=\"line\">        http.logout().logoutSuccessUrl(<span class=\"string\">&quot;/&quot;</span>);<span class=\"comment\">//登出后跳到根目录页面</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        http.rememberMe();<span class=\"comment\">//“记住我”，在浏览器添加一个cookie，默认保存两周时间</span></span><br><span class=\"line\">        <span class=\"comment\">//在此之前，一律为关闭浏览器即关闭会话，会自动退出登录。</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        http.formLogin().loginPage(<span class=\"string\">&quot;/login&quot;</span>)<span class=\"comment\">//自定义登录页</span></span><br><span class=\"line\">                .loginProcessingUrl(<span class=\"string\">&quot;/loginxx&quot;</span>)<span class=\"comment\">//修改登录时post的url，默认/login</span></span><br><span class=\"line\">                .usernameParameter(<span class=\"string\">&quot;u&quot;</span>)<span class=\"comment\">//修改表单的用户名的key，默认username</span></span><br><span class=\"line\">                .passwordParameter(<span class=\"string\">&quot;p&quot;</span>);<span class=\"comment\">//修改表单的密码的key，默认password</span></span><br><span class=\"line\"><span class=\"comment\">//                .failureForwardUrl(&quot;/login&quot;)//失败时跳转，默认/login?error。</span></span><br><span class=\"line\"><span class=\"comment\">//                .successForwardUrl(&quot;/&quot;)//成功时跳转页面，默认为登录前页面，若没有登录前页面，则为主页。</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> http.build();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> UserDetailsService <span class=\"title function_\">userDetailsService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BCryptPasswordEncoder</span> <span class=\"variable\">passwordEncoder</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>();</span><br><span class=\"line\">        UserDetails[] user = &#123;</span><br><span class=\"line\">                User.withDefaultPasswordEncoder().username(<span class=\"string\">&quot;root&quot;</span>).password(<span class=\"string\">&quot;123456&quot;</span>).roles(<span class=\"string\">&quot;vip1&quot;</span>,<span class=\"string\">&quot;vip2&quot;</span>,<span class=\"string\">&quot;vip3&quot;</span>).build(),</span><br><span class=\"line\">                User.withDefaultPasswordEncoder().username(<span class=\"string\">&quot;zhangsan&quot;</span>).password(<span class=\"string\">&quot;123456&quot;</span>).roles(<span class=\"string\">&quot;vip1&quot;</span>,<span class=\"string\">&quot;vip2&quot;</span>).build(),</span><br><span class=\"line\">                User.withDefaultPasswordEncoder().username(<span class=\"string\">&quot;lisi&quot;</span>).password(<span class=\"string\">&quot;123456&quot;</span>).roles(<span class=\"string\">&quot;vip1&quot;</span>).build()</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InMemoryUserDetailsManager</span>(user);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义登录页\"><a href=\"#自定义登录页\" class=\"headerlink\" title=\"自定义登录页\"></a>自定义登录页</h2><p>在@Bean的<code>SecurityFilterChain securityFilterChain(HttpSecurity http)</code>下使用<code>http.formLogin().loginPage(&quot;/login&quot;)</code>指定登录页后，登录页需要适配springBoot的api。</p>\n<h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><h4 id=\"默认\"><a href=\"#默认\" class=\"headerlink\" title=\"默认\"></a>默认</h4><p>url:<a href=\"http://127.0.0.1:8080/login\">http://127.0.0.1:8080/login</a></p>\n<p>form:username&#x3D;root&amp;password&#x3D;123456&amp;remember-me&#x3D;on</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    username<span class=\"punctuation\">:</span><span class=\"string\">&quot;root&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    password<span class=\"punctuation\">:</span><span class=\"string\">&quot;123456&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;remember-me&quot;</span><span class=\"punctuation\">:</span><span class=\"string\">&quot;on&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"上面的示例\"><a href=\"#上面的示例\" class=\"headerlink\" title=\"上面的示例\"></a>上面的示例</h4><p>url:<a href=\"http://127.0.0.1:8080/loginxx\">http://127.0.0.1:8080/loginxx</a></p>\n<p>form:u&#x3D;root&amp;p&#x3D;123456&amp;rem&#x3D;on</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    u<span class=\"punctuation\">:</span><span class=\"string\">&quot;root&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    p<span class=\"punctuation\">:</span><span class=\"string\">&quot;123456&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    rem<span class=\"punctuation\">:</span><span class=\"string\">&quot;on&quot;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Thmeleaf与Spring-Security整合\"><a href=\"#Thmeleaf与Spring-Security整合\" class=\"headerlink\" title=\"Thmeleaf与Spring Security整合\"></a>Thmeleaf与Spring Security整合</h1><p>可以在templates下页面上使用sec属性标签来控制页面内容。</p>\n<h2 id=\"依赖-2\"><a href=\"#依赖-2\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><h3 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--Security-thymeleaf整合--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.thymeleaf.extras<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>thymeleaf-extras-springsecurity5<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--Security--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-security<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">xmlns:sec</span>=<span class=\"string\">&quot;http://www.thymeleaf.org/extras/spring-security&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h2><p>以<code>sec:authorize=&quot;isAuthenticated()&quot;</code>为例</p>\n<ol>\n<li><p>添加依赖和html的xmlns；</p>\n</li>\n<li><p>代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">sec:authorize</span>=<span class=\"string\">&quot;isAuthenticated()&quot;</span>&gt;</span>asd<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这里表示，若<strong>已登录</strong>，则<strong>显示该部分div</strong>，否则不显示该部分div。</p>\n</li>\n</ol>\n<h2 id=\"一些属性\"><a href=\"#一些属性\" class=\"headerlink\" title=\"一些属性\"></a>一些属性</h2><ul>\n<li><p>**sec:authorize&#x3D;””**：内含判断条件，若条件成立，则显示该部分组件。如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">sec:authorize</span>=<span class=\"string\">&quot;isAuthenticated()&quot;</span>&gt;</span>asd<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>则表示当SpringSecurity的验证系统登录后，则显示该部分内容。</p>\n<ul>\n<li>**isAuthenticated()**：是否已经登录；</li>\n<li>**hasRole(‘vip2’)**：登录的用户是否拥有role vip2。</li>\n<li>…</li>\n</ul>\n</li>\n<li><p>**sec:authentication&#x3D;””**：内含一些变量，运行后会将变量的值放在元素的innerHTML中；</p>\n<ul>\n<li><strong>name</strong>：用户名；</li>\n<li><strong>principal.authorities</strong>：用户的角色，为数组。</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"MVC\"><a href=\"#MVC\" class=\"headerlink\" title=\"MVC\"></a>MVC</h2><p>M：数据和业务</p>\n<p>C：交接</p>\n<p>V：HTML</p>\n<h2 id=\"认证和授权（旧）\"><a href=\"#认证和授权（旧）\" class=\"headerlink\" title=\"认证和授权（旧）\"></a>认证和授权（旧）</h2><p><em>WebSecurityConfigurerAdapter过时</em></p>\n<h3 id=\"方法-1\"><a href=\"#方法-1\" class=\"headerlink\" title=\"方法\"></a>方法</h3><ol>\n<li><p>创建SecurityConfig配置类，使用@EnableWebSecurity注解，继承WebSecurityConfigurerAdapter类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebSecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重写configure的两个方法，分别为<code>configure(HttpSecurity http)</code>和<code>configure(AuthenticationManagerBuilder auth)</code>。第一个用于认证，即为不同url分配不同的角色。第二个用于授权，为不同的用户分配不同的角色。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//授权</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    http.authorizeHttpRequests()</span><br><span class=\"line\">            .antMatchers(<span class=\"string\">&quot;/&quot;</span>).permitAll()<span class=\"comment\">//为根目录允许所有</span></span><br><span class=\"line\">            .antMatchers(<span class=\"string\">&quot;/level1/**&quot;</span>).hasRole(<span class=\"string\">&quot;vip1&quot;</span>)<span class=\"comment\">//为level1目录分配vip1角色</span></span><br><span class=\"line\">            .antMatchers(<span class=\"string\">&quot;/level2/**&quot;</span>).hasRole(<span class=\"string\">&quot;vip2&quot;</span>)</span><br><span class=\"line\">            .antMatchers(<span class=\"string\">&quot;/level3/**&quot;</span>).hasRole(<span class=\"string\">&quot;vip3&quot;</span>);</span><br><span class=\"line\">    </span><br><span class=\"line\">    http.formLogin();<span class=\"comment\">//使用默认生成的登录页面</span></span><br><span class=\"line\">    http.csrf().disable();<span class=\"comment\">//禁用csrf防御</span></span><br><span class=\"line\">    http.logout().logoutSuccessUrl(<span class=\"string\">&quot;/&quot;</span>);<span class=\"comment\">//登出后跳到根目录页面</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//认证，SpringBoot</span></span><br><span class=\"line\"><span class=\"comment\">//密码编码：PasswordEncoder</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">    <span class=\"comment\">//应该在数据库中，这里用自定义用于演示</span></span><br><span class=\"line\">    auth.inMemoryAuthentication().passwordEncoder(<span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>())</span><br><span class=\"line\">            .withUser(<span class=\"string\">&quot;lisi&quot;</span>).password(<span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>().encode(<span class=\"string\">&quot;123456&quot;</span>)).roles(<span class=\"string\">&quot;vip2&quot;</span>,<span class=\"string\">&quot;vip3&quot;</span>)<span class=\"comment\">//为用户名lisi分配角色vip2和vip3.</span></span><br><span class=\"line\">            .and()<span class=\"comment\">//拼接</span></span><br><span class=\"line\">            .withUser(<span class=\"string\">&quot;zhangsan&quot;</span>).password(<span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>().encode(<span class=\"string\">&quot;123456&quot;</span>)).roles(<span class=\"string\">&quot;vip1&quot;</span>)</span><br><span class=\"line\">            .and()</span><br><span class=\"line\">            .withUser(<span class=\"string\">&quot;root&quot;</span>).password(<span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>().encode(<span class=\"string\">&quot;123456&quot;</span>)).roles(<span class=\"string\">&quot;vip1&quot;</span>,<span class=\"string\">&quot;vip2&quot;</span>,<span class=\"string\">&quot;vip3&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"HttpSecurity的一些方法-1\"><a href=\"#HttpSecurity的一些方法-1\" class=\"headerlink\" title=\"HttpSecurity的一些方法\"></a>HttpSecurity的一些方法</h3><ul>\n<li><strong>.antMatchers(“&#x2F;“).permitAll()</strong>&#x2F;&#x2F;为根目录允许所有</li>\n<li><strong>.antMatchers(“&#x2F;level1&#x2F;**“).hasRole(“vip1”)</strong>&#x2F;&#x2F;为level1目录分配vip1角色</li>\n<li>**http.formLogin()<strong>：若没有使用</strong>FormLoginConfigurer.logPage(String)**指定登录页，将生成一个默认的登录页；</li>\n<li>**http.csrf().disable()**：禁用csrf防御；</li>\n<li>**http.logout().logoutSuccessUrl(“&#x2F;“)**：登出成功后跳到根目录页面。</li>\n</ul>\n<h3 id=\"完整代码-1\"><a href=\"#完整代码-1\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.yn.config;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ...;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">@EnableWebSecurity</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebSecurityConfig</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebSecurityConfigurerAdapter</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//授权</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(HttpSecurity http)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        http.authorizeHttpRequests()</span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/&quot;</span>).permitAll()</span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/level1/**&quot;</span>).hasRole(<span class=\"string\">&quot;vip1&quot;</span>)</span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/level2/**&quot;</span>).hasRole(<span class=\"string\">&quot;vip2&quot;</span>)</span><br><span class=\"line\">                .antMatchers(<span class=\"string\">&quot;/level3/**&quot;</span>).hasRole(<span class=\"string\">&quot;vip3&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//没有权限，默认到登录页面</span></span><br><span class=\"line\"></span><br><span class=\"line\">        http.formLogin();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//认证，SpringBoot</span></span><br><span class=\"line\">    <span class=\"comment\">//密码编码：PasswordEncoder</span></span><br><span class=\"line\">    <span class=\"comment\">//SpringSecurity 5.0+ 新增许多加密方式</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title function_\">configure</span><span class=\"params\">(AuthenticationManagerBuilder auth)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//应该在数据库中，这里用自定义用于演示</span></span><br><span class=\"line\">        auth.inMemoryAuthentication().passwordEncoder(<span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>())</span><br><span class=\"line\">                .withUser(<span class=\"string\">&quot;lisi&quot;</span>).password(<span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>().encode(<span class=\"string\">&quot;123456&quot;</span>)).roles(<span class=\"string\">&quot;vip2&quot;</span>,<span class=\"string\">&quot;vip3&quot;</span>)</span><br><span class=\"line\">                .and()</span><br><span class=\"line\">                .withUser(<span class=\"string\">&quot;zhangsan&quot;</span>).password(<span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>().encode(<span class=\"string\">&quot;123456&quot;</span>)).roles(<span class=\"string\">&quot;vip1&quot;</span>)</span><br><span class=\"line\">                .and()</span><br><span class=\"line\">                .withUser(<span class=\"string\">&quot;root&quot;</span>).password(<span class=\"keyword\">new</span> <span class=\"title class_\">BCryptPasswordEncoder</span>().encode(<span class=\"string\">&quot;123456&quot;</span>)).roles(<span class=\"string\">&quot;vip1&quot;</span>,<span class=\"string\">&quot;vip2&quot;</span>,<span class=\"string\">&quot;vip3&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id><a href=\"#\" class=\"headerlink\" title></a></h1>","categories":[],"tags":["SpringBoot"]},{"title":"Day19 SpringBoot 6 SpringDate JdbcTemplate Alibaba的Druid","url":"http://zswh33.github.io/2022/09/11/Day19-SpringBoot-6/","content":"<h1 id=\"接下来要学习的\"><a href=\"#接下来要学习的\" class=\"headerlink\" title=\"接下来要学习的\"></a>接下来要学习的</h1><p>SpringBoot整合</p>\n<ul>\n<li>JDBC</li>\n<li><strong>MyBatis</strong></li>\n<li><strong>Druid</strong></li>\n<li><strong>Shiro：安全</strong></li>\n<li><strong>Spring Security：安全</strong></li>\n<li>异步任务、邮件发送、定时任务</li>\n<li>Swgger</li>\n<li>Dubbo + Zookeepr</li>\n</ul>\n<h1 id=\"Spring-Boot-数据库\"><a href=\"#Spring-Boot-数据库\" class=\"headerlink\" title=\"Spring Boot 数据库\"></a>Spring Boot 数据库</h1><p><em>Spring Data？   Spring、Spring Boot、Spring Cloud、Spring Data！</em></p>\n<p>对于数据访问层，无论是SQL（关系型数据库）还是NOSQL（非关系型数据库），SpringBoot底层都采用Spring Data方式统一处理；</p>\n<h2 id=\"MySQL\"><a href=\"#MySQL\" class=\"headerlink\" title=\"MySQL\"></a>MySQL</h2><h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ol>\n<li><p>在application.yml中添加数据源配置；</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">root</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"number\">123456</span></span><br><span class=\"line\">    <span class=\"attr\">url:</span> <span class=\"string\">jdbc:mysql://localhost:3306/springbootstudy?useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</span></span><br><span class=\"line\">    <span class=\"attr\">driver-class-name:</span> <span class=\"string\">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在要使用的类中直接创建一个引用，使用@Autowired注解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootWebStudy3DataApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span> <span class=\"comment\">//自动注入</span></span><br><span class=\"line\">    DataSource dataSource;<span class=\"comment\">//可以直接使用的数据源</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> SQLException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//查看默认数据源</span></span><br><span class=\"line\">        System.out.println(dataSource.getClass());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取数据库连接</span></span><br><span class=\"line\">        <span class=\"type\">Connection</span> <span class=\"variable\">connection</span> <span class=\"operator\">=</span> dataSource.getConnection();</span><br><span class=\"line\">        System.out.println(connection);</span><br><span class=\"line\">        connection.close();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>测试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class com.zaxxer.hikari.HikariDataSource</span><br><span class=\"line\">HikariProxyConnection@1744190758 wrapping com.mysql.cj.jdbc.ConnectionImpl@536b71b4</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"链接url参数解释\"><a href=\"#链接url参数解释\" class=\"headerlink\" title=\"链接url参数解释\"></a>链接url参数解释</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc:mysql://localhost:3306/springbootstudy?useUnicode=true<span class=\"built_in\">&amp;</span>characterEncoding=utf-8<span class=\"built_in\">&amp;</span>serverTimezone=UTC</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><code>jdbc:mysql://</code>：协议名</p>\n</li>\n<li><p><code>localhost:3306/</code>：地址</p>\n</li>\n<li><p><code>springbootstudy</code>：数据库名</p>\n</li>\n<li><p><code>useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=UTC</code>：参数，其中</p>\n<ul>\n<li><code>useUnicode=true</code>和<code>characterEncoding=utf-8</code>解决编码问题；</li>\n<li><code>serverTimezone=UTC</code>解决时区问题。若运行过程中出错，显示时区错误，可以通过这个参数解决；</li>\n<li>目前测试8.x版本，没有遇到相关问题，这些参数可以不加。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"一些知识\"><a href=\"#一些知识\" class=\"headerlink\" title=\"一些知识\"></a>一些知识</h3><p>默认数据源：HikariDataSource</p>\n<h3 id=\"SpringBoot相关类\"><a href=\"#SpringBoot相关类\" class=\"headerlink\" title=\"SpringBoot相关类\"></a>SpringBoot相关类</h3><p>DataSourceProperties、DataSourceAutoConfiguration。</p>\n<h1 id=\"JdbcTemplate\"><a href=\"#JdbcTemplate\" class=\"headerlink\" title=\"JdbcTemplate\"></a>JdbcTemplate</h1><p>Spring对JDBC进行封装，使用JdbcTemplate可以非常方便的进行数据库操作。</p>\n<h2 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在SpringBoot下配置之后，DataSource和JdbcTemplate通过@Autowired可以直接操作数据库。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Autowired</span></span><br><span class=\"line\">JdbcTemplate template;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JDBCController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    JdbcTemplate template;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查询数据库所有信息 并显示在网页上</span></span><br><span class=\"line\">    <span class=\"comment\">//没有实体类 数据库中的数据如何获取</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/user/list&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;Map&lt;String,Object&gt;&gt; <span class=\"title function_\">userList</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;select * from user&quot;</span>;</span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; list_maps = template.queryForList(sql);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> list_maps;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/add&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">addUser</span><span class=\"params\">(User user)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//username=ZhangSan&amp;password=zs1234556&amp;nickname=zs&amp;regdate=2022-02-22</span></span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> String.format(<span class=\"string\">&quot;insert into `springbootstudy`.`user`(`username`,`password`,`nickname`,`regdate`) values(&#x27;%s&#x27;,&#x27;%s&#x27;,&#x27;%s&#x27;,&#x27;%s&#x27;)&quot;</span>,</span><br><span class=\"line\">                user.getUsername(),</span><br><span class=\"line\">                user.getPassword(),</span><br><span class=\"line\">                user.getNickname(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">SimpleDateFormat</span>(<span class=\"string\">&quot;yyyy-MM-dd&quot;</span>).format(user.getRegdate())</span><br><span class=\"line\">        );</span><br><span class=\"line\">        System.out.println(sql);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> String.valueOf(template.update(sql));</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sql;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/delete/&#123;id&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">deleteUser</span><span class=\"params\">(<span class=\"meta\">@PathVariable(&quot;id&quot;)</span> Integer id)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//id=1</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;delete from user where id=?&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.valueOf(template.update(sql,id));</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@GetMapping(&quot;/user/update&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">updateUser</span><span class=\"params\">(User user)</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//username=ZhangSan&amp;password=zs1234556&amp;nickname=zs&amp;regdate=2022-02-22</span></span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">sql</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;update user set username=?,password=?,nickname=? where id=?&quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//封装</span></span><br><span class=\"line\">        Object[] objects = &#123;</span><br><span class=\"line\">                user.getUsername(),</span><br><span class=\"line\">                user.getPassword(),</span><br><span class=\"line\">                user.getNickname(),</span><br><span class=\"line\">                user.getId()</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> String.valueOf(template.update(sql,objects));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Alibaba的Druid数据源\"><a href=\"#Alibaba的Druid数据源\" class=\"headerlink\" title=\"Alibaba的Druid数据源\"></a>Alibaba的Druid数据源</h1><p><em>Hikari和Druid都是当前Java Web上最优秀的数据源。Hikari有优秀的速度，Druid有优秀的日志监控功能。</em></p>\n<p>Druid特色：添加优秀的监控功能，拥有使用Web页面查看监控<strong>项目</strong>功能。</p>\n<p><strong>（Druid的监控功能不是监控数据库的，是监控Java应用的）</strong></p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p>Druid需要两个依赖：com.alibaba.druid和log4j.log4j。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--druid--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.alibaba<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>druid<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.11<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--log4j--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>log4j<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.2.17<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"指定SpringBoot使用阿里巴巴的Druid数据源\"><a href=\"#指定SpringBoot使用阿里巴巴的Druid数据源\" class=\"headerlink\" title=\"指定SpringBoot使用阿里巴巴的Druid数据源\"></a>指定SpringBoot使用阿里巴巴的Druid数据源</h2><p>两种方式，</p>\n<h3 id=\"方式1：在SpringBoot下添加配置\"><a href=\"#方式1：在SpringBoot下添加配置\" class=\"headerlink\" title=\"方式1：在SpringBoot下添加配置\"></a>方式1：在SpringBoot下添加配置</h3><p>在SpringBoot下的配置里添加以下内容。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">datasource:</span></span><br><span class=\"line\">    <span class=\"attr\">type:</span> <span class=\"string\">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"方式2：创建配置类\"><a href=\"#方式2：创建配置类\" class=\"headerlink\" title=\"方式2：创建配置类\"></a>方式2：创建配置类</h3><p>在config包下创建DruidConfig类，并添加druidDataSource方法，使用@Bean注解和@ConfigurationProperties(prefix &#x3D; “spring.datasource”)注解，自定义数据源。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span><span class=\"comment\">//声明配置类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DruidConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span><span class=\"comment\">//声明Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span><span class=\"comment\">//使用application的配置</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DataSource <span class=\"title function_\">druidDataSource</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();<span class=\"comment\">//数据源</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用alibaba的Druid监控功能\"><a href=\"#使用alibaba的Druid监控功能\" class=\"headerlink\" title=\"使用alibaba的Druid监控功能\"></a>使用alibaba的Druid监控功能</h2><h3 id=\"配置监控页面（Web）\"><a href=\"#配置监控页面（Web）\" class=\"headerlink\" title=\"配置监控页面（Web）\"></a>配置监控页面（Web）</h3><ol>\n<li><p>在config下创建DruidConfig类</p>\n<p><img src=\"/2022/09/11/Day19-SpringBoot-6/image-20220911171018707.png\" alt=\"image-20220911171018707\"></p>\n</li>\n<li><p>使用@Configuration注解DruidConfig类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DruidConfig</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置数据源，并使数据源依赖于alibaba.druid。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> DataSource <span class=\"title function_\">druidDataSources</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置后台监控功能</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//后台监控功能</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title function_\">statViewServlet</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class=\"keyword\">new</span> <span class=\"title class_\">ServletRegistrationBean</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">StatViewServlet</span>(), <span class=\"string\">&quot;/druid/*&quot;</span>);<span class=\"comment\">//监控的url地址，这里为http://127.0.0.1/druid/</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//增加配置</span></span><br><span class=\"line\">    HashMap&lt;String, String&gt; initParameters = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后台账号和密码配置  key是固定值不能变  loginUsername用户名 loginPassword密码</span></span><br><span class=\"line\">    initParameters.put(<span class=\"string\">&quot;loginUsername&quot;</span>,<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">    initParameters.put(<span class=\"string\">&quot;loginPassword&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//允许访问</span></span><br><span class=\"line\">    initParameters.put(<span class=\"string\">&quot;allow&quot;</span>,<span class=\"string\">&quot;&quot;</span>);<span class=\"comment\">//若参数为空，表示所有人可以访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">    bean.setInitParameters(initParameters);<span class=\"comment\">//设置初始化参数</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>（可选）配置Filter，使Druid不统计指定的数据。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过filter配置不需要druid统计的数据</span></span><br><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">webStatFilter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    FilterRegistrationBean&lt;Filter&gt; bean = <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>&lt;&gt;();</span><br><span class=\"line\">    bean.setFilter(<span class=\"keyword\">new</span> <span class=\"title class_\">WebStatFilter</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//不进行统计的数据</span></span><br><span class=\"line\">    Map&lt;String,String&gt; initParameters = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    initParameters.put(<span class=\"string\">&quot;exclusions&quot;</span>,<span class=\"string\">&quot;*.js,*.css,/druid/*&quot;</span>);<span class=\"comment\">//不统计符合表达式的数据，这里指所有的js和css文件。</span></span><br><span class=\"line\">    bean.setInitParameters(initParameters);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DruidConfig</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.datasource&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> DataSource <span class=\"title function_\">druidDataSources</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">DruidDataSource</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//后台监控功能</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ServletRegistrationBean <span class=\"title function_\">statViewServlet</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        ServletRegistrationBean&lt;StatViewServlet&gt; bean = <span class=\"keyword\">new</span> <span class=\"title class_\">ServletRegistrationBean</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">StatViewServlet</span>(), <span class=\"string\">&quot;/druid/*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//增加配置</span></span><br><span class=\"line\">        HashMap&lt;String, String&gt; initParameters = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//后台账号和密码配置  key是固定值  loginUsername用户名 loginPassword密码</span></span><br><span class=\"line\">        initParameters.put(<span class=\"string\">&quot;loginUsername&quot;</span>,<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">        initParameters.put(<span class=\"string\">&quot;loginPassword&quot;</span>,<span class=\"string\">&quot;123456&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//允许访问</span></span><br><span class=\"line\">        initParameters.put(<span class=\"string\">&quot;allow&quot;</span>,<span class=\"string\">&quot;&quot;</span>);<span class=\"comment\">//若参数为空，表示所有人可以访问</span></span><br><span class=\"line\"></span><br><span class=\"line\">        bean.setInitParameters(initParameters);<span class=\"comment\">//设置初始化参数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//通过filter配置不需要druid统计的数据</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean <span class=\"title function_\">webStatFilter</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        FilterRegistrationBean&lt;Filter&gt; bean = <span class=\"keyword\">new</span> <span class=\"title class_\">FilterRegistrationBean</span>&lt;&gt;();</span><br><span class=\"line\">        bean.setFilter(<span class=\"keyword\">new</span> <span class=\"title class_\">WebStatFilter</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//不进行统计的数据</span></span><br><span class=\"line\">        Map&lt;String,String&gt; initParameters = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        initParameters.put(<span class=\"string\">&quot;exclusions&quot;</span>,<span class=\"string\">&quot;*.js,*.css,/druid/*&quot;</span>);</span><br><span class=\"line\">        bean.setInitParameters(initParameters);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"界面展示\"><a href=\"#界面展示\" class=\"headerlink\" title=\"界面展示\"></a>界面展示</h2><p><img src=\"/2022/09/11/Day19-SpringBoot-6/image-20220911172307101.png\" alt=\"image-20220911172307101\"></p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"示例用的SQL\"><a href=\"#示例用的SQL\" class=\"headerlink\" title=\"示例用的SQL\"></a>示例用的SQL</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">CREATE</span> DATABASE springbootstudy;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">CREATE</span> <span class=\"keyword\">TABLE</span> <span class=\"keyword\">USER</span>(</span><br><span class=\"line\">id <span class=\"type\">INT</span> <span class=\"keyword\">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class=\"line\">username <span class=\"type\">CHAR</span>(<span class=\"number\">30</span>),</span><br><span class=\"line\">PASSWORD <span class=\"type\">CHAR</span>(<span class=\"number\">30</span>),</span><br><span class=\"line\">nickname <span class=\"type\">CHAR</span>(<span class=\"number\">30</span>),</span><br><span class=\"line\">regdate <span class=\"type\">date</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> <span class=\"keyword\">user</span>(`username`,`PASSWORD`,`nickname`,`regdate`) <span class=\"keyword\">VALUES</span></span><br><span class=\"line\">(<span class=\"string\">&#x27;zs123&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;ZhangSan&#x27;</span>,<span class=\"string\">&#x27;2022-2-22&#x27;</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;ls123&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;LiSi&#x27;</span>,<span class=\"string\">&#x27;2022-2-23&#x27;</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;yb123&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;YuBan&#x27;</span>,<span class=\"string\">&#x27;2022-2-24&#x27;</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;xh123&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;XiaoHong&#x27;</span>,<span class=\"string\">&#x27;2022-2-25&#x27;</span>),</span><br><span class=\"line\">(<span class=\"string\">&#x27;xm123&#x27;</span>,<span class=\"string\">&#x27;123456&#x27;</span>,<span class=\"string\">&#x27;XiaoMing&#x27;</span>,<span class=\"string\">&#x27;2022-2-26&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">select</span> <span class=\"operator\">*</span> <span class=\"keyword\">from</span> <span class=\"keyword\">user</span>;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["SpringBoot"]},{"title":"Day18 SpringBoot 5 Lombok thymeleaf国际化 locale springboot拦截器 springboot错误页面 session","url":"http://zswh33.github.io/2022/09/10/Day18-SpringBoot-5/","content":"<h1 id=\"Lombok\"><a href=\"#Lombok\" class=\"headerlink\" title=\"Lombok\"></a>Lombok</h1><p>Lombok通过注解可以直接实现getter、setter、equals、toString等方法，不需要手动写这些方法。</p>\n<table>\n<thead>\n<tr>\n<th>注解名</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Data</td>\n<td>整合了Getter、Setter、ToString、EqualsAndHashCode、RequiredArgsConstructor注解</td>\n</tr>\n<tr>\n<td>@Getter</td>\n<td>getter方法</td>\n</tr>\n<tr>\n<td>@Setter</td>\n<td>setter方法</td>\n</tr>\n<tr>\n<td>@ToString</td>\n<td>toString方法</td>\n</tr>\n<tr>\n<td>@EqualsAndHashCode</td>\n<td>equals和hashCode方法</td>\n</tr>\n<tr>\n<td>@NonNull</td>\n<td>不为Null</td>\n</tr>\n<tr>\n<td>@AllArgsConstructor</td>\n<td>所有有参构造方法</td>\n</tr>\n<tr>\n<td>@NoArgsConstructor</td>\n<td>无参构造方法</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n<h1 id=\"thymeleaf国际化\"><a href=\"#thymeleaf国际化\" class=\"headerlink\" title=\"thymeleaf国际化\"></a>thymeleaf国际化</h1><p>thymeleaf国际化可以提供页面多语言功能。配置之后可以依据Header中的语言来返回相应的语言的页面。</p>\n<ol>\n<li><p>创建一个多语言配置文件夹，这里使用classpath:&#x2F;i18n&#x2F;。</p>\n<p><img src=\"/2022/09/10/Day18-SpringBoot-5/image-20220910113807957.png\" alt=\"image-20220910113807957\"></p>\n<p>文件名使用语言简写作为后缀。如：简体中文zh_CN，米国英语en_US。</p>\n</li>\n<li><p>在文件夹下创建配置文件用于表示各种语言在页面上应该显示的内容；</p>\n<p><img src=\"/2022/09/10/Day18-SpringBoot-5/image-20220910114005507.png\" alt=\"image-20220910114005507\"></p>\n</li>\n<li><p>在html文件中添加相应的属性，使用“th:text”和表达式”#{login.tip}”。（注：表达式使用”#”作为开头）</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sr-only&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;#&#123;login.username&#125;&quot;</span>&gt;</span>Username<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;sr-only&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;#&#123;login.password&#125;&quot;</span>&gt;</span>Password<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"通过url参数修改语言-x2F-配置自定义LocaleResolver\"><a href=\"#通过url参数修改语言-x2F-配置自定义LocaleResolver\" class=\"headerlink\" title=\"通过url参数修改语言&#x2F;配置自定义LocaleResolver\"></a>通过url参数修改语言&#x2F;配置自定义LocaleResolver</h1><ol>\n<li><p>创建一个类，实现LocaleResolver接口。根据url参数返回相应的Locale对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLocaleResover</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">LocaleResolver</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//解析请求</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Locale <span class=\"title function_\">resolveLocale</span><span class=\"params\">(HttpServletRequest request)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">lang</span> <span class=\"operator\">=</span> request.getParameter(<span class=\"string\">&quot;l&quot;</span>);<span class=\"comment\">//获取链接中的参数l</span></span><br><span class=\"line\">        <span class=\"type\">Locale</span> <span class=\"variable\">localeDefault</span> <span class=\"operator\">=</span> Locale.getDefault();<span class=\"comment\">//如果没有就使用默认的</span></span><br><span class=\"line\">        <span class=\"comment\">//如果请求的链接携带了国际化的参数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!StringUtils.isEmpty(lang))&#123;</span><br><span class=\"line\">            <span class=\"comment\">//zh_CN</span></span><br><span class=\"line\">            String[] lang2 = lang.split(<span class=\"string\">&quot;_&quot;</span>);<span class=\"comment\">//将语言和国家分开</span></span><br><span class=\"line\">            <span class=\"comment\">//语言 国家</span></span><br><span class=\"line\">            <span class=\"type\">Locale</span> <span class=\"variable\">locale</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Locale</span>(lang2[<span class=\"number\">0</span>], lang2[<span class=\"number\">1</span>]);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> locale;<span class=\"comment\">//使用url中参数指定</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> localeDefault;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setLocale</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Locale locale)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在SpringMvc配置中添加自定义的LocaleResolver；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyMvcConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//自定义的localeResolver</span></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> LocaleResolver <span class=\"title function_\">localeResolver</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyLocaleResover</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在thymeleaf语法配置结束后，使用url参数即可控制页面的语言；</p>\n<img src=\"/2022/09/10/Day18-SpringBoot-5/image-20220910131841518.png\" alt=\"image-20220910131841518\" style=\"zoom:67%;\">\n\n<img src=\"/2022/09/10/Day18-SpringBoot-5/image-20220910131903328.png\" alt=\"image-20220910131903328\" style=\"zoom:67%;\"></li>\n</ol>\n<h1 id=\"Locale-原理\"><a href=\"#Locale-原理\" class=\"headerlink\" title=\"Locale 原理\"></a>Locale 原理</h1><p>首先判断是否有本地配置，有则使用本地配置，没有则使用默认配置。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(name = DispatcherServlet.LOCALE_RESOLVER_BEAN_NAME)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> LocaleResolver <span class=\"title function_\">localeResolver</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.webProperties.getLocaleResolver() == WebProperties.LocaleResolver.FIXED) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FixedLocaleResolver</span>(<span class=\"built_in\">this</span>.webProperties.getLocale());</span><br><span class=\"line\">   &#125;<span class=\"comment\">//判断本地配置是否存在，若存在则使用，不存在则执行下面</span></span><br><span class=\"line\">   <span class=\"type\">AcceptHeaderLocaleResolver</span> <span class=\"variable\">localeResolver</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AcceptHeaderLocaleResolver</span>();</span><br><span class=\"line\">   localeResolver.setDefaultLocale(<span class=\"built_in\">this</span>.webProperties.getLocale());<span class=\"comment\">//使用默认的LocalteResolvery</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> localeResolver;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>hole…</p>\n<h1 id=\"SpringBoot的拦截器\"><a href=\"#SpringBoot的拦截器\" class=\"headerlink\" title=\"SpringBoot的拦截器\"></a>SpringBoot的拦截器</h1><ol>\n<li><p>定义一个自定义拦截器；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LoginHandlerInterceptor</span>  <span class=\"keyword\">implements</span> <span class=\"title class_\">HandlerInterceptor</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">preHandle</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//登录成功之后，应该有用户的session</span></span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">loginUser</span> <span class=\"operator\">=</span> request.getSession().getAttribute(<span class=\"string\">&quot;loginUser&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(loginUser==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//没有登录</span></span><br><span class=\"line\">            request.setAttribute(<span class=\"string\">&quot;msg&quot;</span>,<span class=\"string\">&quot;没有权限，请先登录&quot;</span>);</span><br><span class=\"line\">            request.getRequestDispatcher(<span class=\"string\">&quot;/&quot;</span>).forward(request,response);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在MvcConfig类下实现addInterceptors方法并注册相应的拦截器；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyMvcConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addInterceptors</span><span class=\"params\">(InterceptorRegistry registry)</span> &#123;</span><br><span class=\"line\">        registry.addInterceptor(<span class=\"keyword\">new</span> <span class=\"title class_\">LoginHandlerInterceptor</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"SpringBoot的错误页面-404等\"><a href=\"#SpringBoot的错误页面-404等\" class=\"headerlink\" title=\"SpringBoot的错误页面 404等\"></a>SpringBoot的错误页面 404等</h1><h2 id=\"错误代码指定页面\"><a href=\"#错误代码指定页面\" class=\"headerlink\" title=\"错误代码指定页面\"></a>错误代码指定页面</h2><p>对于错误404，在templates下创建error&#x2F;404.html即可。</p>\n<p><img src=\"/2022/09/10/Day18-SpringBoot-5/image-20220911124703184.png\" alt=\"image-20220911124703184\"></p>\n<p>其他同理。</p>\n<h1 id=\"Servlet的Session\"><a href=\"#Servlet的Session\" class=\"headerlink\" title=\"Servlet的Session\"></a>Servlet的Session</h1><p>Java Servlet提供为每个session存储<code>Map&lt;String,Object&gt;</code>的功能；</p>\n<p>每次有浏览器访问网站，JavaServlet会为浏览器生成一个JSESSIONID。</p>\n<p>底层会存储JSESSIONID与Map的对应关系。</p>\n<p>对于开发者，使用对象HttpSession可以直接为当前交互的用户存储Map数据。</p>\n<p>注：Map存储在服务器，JSESSIONID存储在浏览器。</p>\n<p>方法：</p>\n<table>\n<thead>\n<tr>\n<th>HttpSession</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>setAttribute(key,value)</td>\n<td>为当前session的Map设置一个键值对。如：setAttribute(“username”,”qweasd”)，会为session对应的Map中设置key为username值为qweasd的键值对。</td>\n</tr>\n<tr>\n<td>invalidate()</td>\n<td>使当前session无效化，并为浏览器删除cookies JSESSIONID。</td>\n</tr>\n<tr>\n<td>…</td>\n<td>….</td>\n</tr>\n</tbody></table>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"i18n\"><a href=\"#i18n\" class=\"headerlink\" title=\"i18n\"></a>i18n</h2><ul>\n<li><p>n. 国际化</p>\n</li>\n<li><p>internationalization单词的缩写。</p>\n</li>\n<li><p>i和n中间有18个字母。</p>\n</li>\n</ul>\n<h2 id=\"zh-CN\"><a href=\"#zh-CN\" class=\"headerlink\" title=\"zh_CN\"></a>zh_CN</h2><p>格式：语言_国家 </p>\n<p>zh取自拼音zhongguo前两个字母。</p>\n<h2 id=\"CRUD\"><a href=\"#CRUD\" class=\"headerlink\" title=\"CRUD\"></a>CRUD</h2><p>增删改查</p>\n","categories":[],"tags":["SpringBoot"]},{"title":"Day18 SpringBoot 4 MVC配置原理 扩展MVC","url":"http://zswh33.github.io/2022/09/10/Day18-SpringBoot-4/","content":"<h1 id=\"MVC配置原理\"><a href=\"#MVC配置原理\" class=\"headerlink\" title=\"MVC配置原理\"></a>MVC配置原理</h1><h2 id=\"SpringBoot下的MVC自动配置\"><a href=\"#SpringBoot下的MVC自动配置\" class=\"headerlink\" title=\"SpringBoot下的MVC自动配置\"></a>SpringBoot下的MVC自动配置</h2><p><a href=\"https://docs.spring.io/spring-boot/docs/2.7.3/reference/html/web.html#web.servlet.spring-mvc.auto-configuration\">https://docs.spring.io/spring-boot/docs/2.7.3/reference/html/web.html#web.servlet.spring-mvc.auto-configuration</a></p>\n<p>SpringBoot会默认进行配置以下内容：</p>\n<ul>\n<li>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.&#x2F;&#x2F;视图解析器</li>\n<li>Support for serving static resources, including support for WebJars (covered <a href=\"https://docs.spring.io/spring-boot/docs/2.7.3/reference/html/features.html#web.servlet.spring-mvc.static-content\">later in this document</a>).&#x2F;&#x2F;静态资源 并支持webjars</li>\n<li>Automatic registration of <code>Converter</code>, <code>GenericConverter</code>, and <code>Formatter</code> beans.&#x2F;&#x2F;类型转换器，前端后端传值转换。Formatter可以进行格式转换，如日期转换。</li>\n<li>Support for <code>HttpMessageConverters</code> (covered <a href=\"https://docs.spring.io/spring-boot/docs/2.7.3/reference/html/features.html#web.servlet.spring-mvc.message-converters\">later in this document</a>).&#x2F;&#x2F;转换Http的请求和相应，如Java对象转换为Json。</li>\n<li>Automatic registration of <code>MessageCodesResolver</code> (covered <a href=\"https://docs.spring.io/spring-boot/docs/2.7.3/reference/html/features.html#web.servlet.spring-mvc.message-codes\">later in this document</a>).&#x2F;&#x2F;错误代码</li>\n<li>Static <code>index.html</code> support.  &#x2F;&#x2F;主页自定义</li>\n<li>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (covered <a href=\"https://docs.spring.io/spring-boot/docs/2.7.3/reference/html/features.html#web.servlet.spring-mvc.binding-initializer\">later in this document</a>).&#x2F;&#x2F;将请求等封装在JavaBean中</li>\n</ul>\n<p>如果想要保持SpringBootMvc的配置并且要添加更多的配置，</p>\n<ul>\n<li>可以自己新建一个WebMvc的配置类，</li>\n<li>实现WebMvcConfiguration接口并使用@Configuration注解，</li>\n<li>重写相应的方法即可。</li>\n<li>注意这里不用添加@EnableWebMvc注解。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyMvcConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例：添加自定义视图解析器\"><a href=\"#示例：添加自定义视图解析器\" class=\"headerlink\" title=\"示例：添加自定义视图解析器\"></a>示例：添加自定义视图解析器</h2><p>在自定义的MVC配置类下添加一个视图解析器类和方法。</p>\n<p>方法使用@Bean注解，将方法引入Spring。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyMvcConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ViewResolver <span class=\"title function_\">myViewResolver</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyViewResolver</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//自定义一个视图解析器</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyViewResolver</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">ViewResolver</span> &#123;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> View <span class=\"title function_\">resolveViewName</span><span class=\"params\">(String viewName, Locale locale)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在ContentNegotiatingViewResolver类的getCandidateViews方法内部打断点可以获得目前加载的视图列表；</p>\n<p><img src=\"/2022/09/10/Day18-SpringBoot-4/image-20220910084100542.png\" alt=\"image-20220910084100542\"></p>\n<p>查看结果：</p>\n<p><img src=\"/2022/09/10/Day18-SpringBoot-4/image-20220910084136496.png\" alt=\"image-20220910084136496\"></p>\n<p>在候选视图解析器中出现自定义的视图解析器。</p>\n<h2 id=\"添加-EnableWebMvc，表示完全使用自定义的WebMvc自定义配置类\"><a href=\"#添加-EnableWebMvc，表示完全使用自定义的WebMvc自定义配置类\" class=\"headerlink\" title=\"添加@EnableWebMvc，表示完全使用自定义的WebMvc自定义配置类\"></a>添加@EnableWebMvc，表示完全使用自定义的WebMvc自定义配置类</h2><p>添加@EnableWebMvc，表示完全使用自定义的WebMvc自定义配置类。</p>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><ol>\n<li><p>在WebMvcAutoConfiguration类中，有一个注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span></span><br></pre></td></tr></table></figure>\n\n<p>表示如果出现WebMvcConfigurationSupport这个类，就不加载自动配置类</p>\n</li>\n<li><p>@EnableWebMvc会加载WebMvcConfigurationSupport这个类，会导致WebMvcAutoConfiguration自动配置类失效，然后使用被注解的类作为WebMvc配置类。</p>\n<ul>\n<li><p>@EnableWebMvc注解会导入类DelegatingWebMvcConfiguration；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@Target(ElementType.TYPE)</span></span><br><span class=\"line\"><span class=\"meta\">@Documented</span></span><br><span class=\"line\"><span class=\"meta\">@Import(DelegatingWebMvcConfiguration.class)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"meta\">@interface</span> EnableWebMvc &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>DelegatingWebMvcConfiguration继承了WebMvcConfigurationSupport类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DelegatingWebMvcConfiguration</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">WebMvcConfigurationSupport</span> &#123;...&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h1 id=\"扩展SpringMVC\"><a href=\"#扩展SpringMVC\" class=\"headerlink\" title=\"扩展SpringMVC\"></a>扩展SpringMVC</h1><p>使用几个示例表示如何去扩展SpringMVC。</p>\n<h2 id=\"Formatter\"><a href=\"#Formatter\" class=\"headerlink\" title=\"Formatter\"></a>Formatter</h2><h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><ul>\n<li><p>可以通过spring.mvc.format.date修改日期格式。</p>\n<ul>\n<li>默认格式：dd&#x2F;MM&#x2F;yyyy</li>\n</ul>\n</li>\n<li><p>通过spring.mvc.format.dateTime修改日期时间格式。</p>\n<ul>\n<li>默认格式：yyyy-MM-dd HH:mm:ss</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 自定义配置日期格式化</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">format:</span></span><br><span class=\"line\">      <span class=\"attr\">date-time:</span> <span class=\"string\">dd-MM-yyyy</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"功能原理\"><a href=\"#功能原理\" class=\"headerlink\" title=\"功能原理\"></a>功能原理</h3><p>在WebMvcAutoConfiguration自动配置类下有一个方法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Bean</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> FormattingConversionService <span class=\"title function_\">mvcConversionService</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">   <span class=\"type\">Format</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mvcProperties.getFormat();</span><br><span class=\"line\">   <span class=\"type\">WebConversionService</span> <span class=\"variable\">conversionService</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">WebConversionService</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">DateTimeFormatters</span>().dateFormat(format.getDate()).timeFormat(format.getTime()).dateTimeFormat(format.getDateTime()));</span><br><span class=\"line\">   addFormatters(conversionService);</span><br><span class=\"line\">   <span class=\"keyword\">return</span> conversionService;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个方法引用了<code>this.mvcProperties.getFormat();</code>，mvcProperties指向一个WebMVCProperties对象。WebMVCProperties是SpringBoot下WebMvc的配置类。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> WebMvcProperties mvcProperties;</span><br></pre></td></tr></table></figure>\n\n<p>进入WebMvcProperties</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//省略后的WebMvcProperties</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.mvc&quot;)</span><span class=\"comment\">//表示可以使用spring.mvc前缀配置类中内容。</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebMvcProperties</span> &#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Format</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Format</span>();</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> Format <span class=\"title function_\">getFormat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.format;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">...</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Format</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * Date format to use, for example &#x27;dd/MM/yyyy&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">private</span> String date;<span class=\"comment\">//字符串格式</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * Time format to use, for example &#x27;HH:mm:ss&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">private</span> String time;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * Date-time format to use, for example &#x27;yyyy-MM-dd HH:mm:ss&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">      <span class=\"keyword\">private</span> String dateTime;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">public</span> String <span class=\"title function_\">getDate</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.date;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDate</span><span class=\"params\">(String date)</span> &#123;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.date = date;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">public</span> String <span class=\"title function_\">getTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.time;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setTime</span><span class=\"params\">(String time)</span> &#123;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.time = time;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">public</span> String <span class=\"title function_\">getDateTime</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.dateTime;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setDateTime</span><span class=\"params\">(String dateTime)</span> &#123;</span><br><span class=\"line\">         <span class=\"built_in\">this</span>.dateTime = dateTime;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>得知：</p>\n<ul>\n<li><p>可以通过spring.mvc.format.date修改日期格式。</p>\n</li>\n<li><p>通过spring.mvc.format.dateTime修改日期时间格式。</p>\n</li>\n</ul>\n<h2 id=\"在自定义配置类中添加自定义视图解析器\"><a href=\"#在自定义配置类中添加自定义视图解析器\" class=\"headerlink\" title=\"在自定义配置类中添加自定义视图解析器\"></a>在自定义配置类中添加自定义视图解析器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//全面扩展 springmvc</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyMvcConfig</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">WebMvcConfigurer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addViewControllers</span><span class=\"params\">(ViewControllerRegistry registry)</span> &#123;</span><br><span class=\"line\">        WebMvcConfigurer.<span class=\"built_in\">super</span>.addViewControllers(registry);</span><br><span class=\"line\">        registry.addViewController(<span class=\"string\">&quot;/uwupu&quot;</span>).setViewName(<span class=\"string\">&quot;test&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>registry.addViewController(&quot;/yn&quot;).setViewName(&quot;test&quot;);</code>将&#x2F;yn指向视图test。</p>\n<p>结果：</p>\n<p><img src=\"/2022/09/10/Day18-SpringBoot-4/image-20220910090526060.png\" alt=\"image-20220910090526060\"></p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><p>实现了视图解析器接口的类，这个类就是视图解析器。</p>\n","categories":[],"tags":["SpringBoot"]},{"title":"Day16 SpringBoot 3 全局配置文件如何生效 静态资源 thymeleaf简述","url":"http://zswh33.github.io/2022/09/08/Day16-SpringBoot-3/","content":"<h1 id=\"自动配置原理：全局配置文件如何生效\"><a href=\"#自动配置原理：全局配置文件如何生效\" class=\"headerlink\" title=\"自动配置原理：全局配置文件如何生效\"></a>自动配置原理：全局配置文件如何生效</h1><h2 id=\"Conditional派生注解\"><a href=\"#Conditional派生注解\" class=\"headerlink\" title=\"@Conditional派生注解\"></a>@Conditional派生注解</h2><p>当@Conditional指定的条件达成时，被@Conditional注解的类才能生效。</p>\n<p>注解在类上，在注解的参数中可以指定一些条件，当条件达成时，被注解的类的内容才能生效，否则不生效。</p>\n<table>\n<thead>\n<tr>\n<th>@Conditional扩展注解</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@ConditionalOnJava</td>\n<td>系统Java版本是否符合要求</td>\n</tr>\n<tr>\n<td>@ConditionalOnBean</td>\n<td>容器中存在指定Bean</td>\n</tr>\n<tr>\n<td>@ConditionalOnMissingBean</td>\n<td>容器中不存在指定Bean</td>\n</tr>\n<tr>\n<td>@ConditionalOnExpression</td>\n<td>满足SpEL表达式指定</td>\n</tr>\n<tr>\n<td>@ConditionalOnClass</td>\n<td>系统中有指定的类</td>\n</tr>\n<tr>\n<td>@ConditionalOnMissingClass</td>\n<td>系统中没有指定的类</td>\n</tr>\n<tr>\n<td>@ConditionalOnSingleCandidate</td>\n<td>容器中只有一个指定的Bean，或者这个Bean是首选Bean</td>\n</tr>\n<tr>\n<td>@ConditionalOnProperty</td>\n<td>系统中有指定的属性是否有指定的值</td>\n</tr>\n<tr>\n<td>@ConditionalOnResource</td>\n<td>类路径下是否存在指定资源文件</td>\n</tr>\n<tr>\n<td>@ConditionalOnWebApplication</td>\n<td>当前是web环境</td>\n</tr>\n<tr>\n<td>@ConditionalOnNotWebApplication</td>\n<td>当前不是Web环境</td>\n</tr>\n<tr>\n<td>@ConditionalOnJndi</td>\n<td>JNDI存在指定项</td>\n</tr>\n</tbody></table>\n<h2 id=\"自动装配\"><a href=\"#自动装配\" class=\"headerlink\" title=\"自动装配\"></a>自动装配</h2><p><em>以WebMvc为例</em></p>\n<p>当SpringBoot启动时，会扫描需要自动配置的类，然后加载其配置类，使用全局配置文件覆盖需要替换的配置。</p>\n<ul>\n<li>自动配置类：xxxAutoConfiguration</li>\n<li>对应的配置类：xxxProperties</li>\n</ul>\n<ol>\n<li><p>SpringBoot为多个类提供了自动配置类，名为xxxAutoConfiguration，比如：WebMvcAutoConfiguration；</p>\n</li>\n<li><p>自动配置类中的注解。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@AutoConfiguration(after = &#123; DispatcherServletAutoConfiguration.class, TaskExecutionAutoConfiguration.class,</span></span><br><span class=\"line\"><span class=\"meta\">      ValidationAutoConfiguration.class &#125;)</span><span class=\"comment\">//@AutoConfiguration表示这是一个自动配置类，这个注解的下面还有@Configuration注解表示这是一个Spring配置类。</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnWebApplication(type = Type.SERVLET)</span><span class=\"comment\">//Conditional注解用于表示注解是否需要加载，这里表示如果项目为WebApplication。</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnClass(&#123; Servlet.class, DispatcherServlet.class, WebMvcConfigurer.class &#125;)</span><span class=\"comment\">//若存在以上几个类</span></span><br><span class=\"line\"><span class=\"meta\">@ConditionalOnMissingBean(WebMvcConfigurationSupport.class)</span><span class=\"comment\">//容器中不存在指定Bean</span></span><br><span class=\"line\"><span class=\"meta\">@AutoConfigureOrder(Ordered.HIGHEST_PRECEDENCE + 10)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebMvcAutoConfiguration</span> &#123;...&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自动配置类中Conditional注解判断自动配置类是否需要加载。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableConfigurationProperties(&#123; WebMvcProperties.class, WebProperties.class &#125;)</span></span><br></pre></td></tr></table></figure>\n\n<p>其中@EnableConfigurationProperties注解指向需要使用的配置类。这里是：WebMVCProperties和WebProperties。</p>\n</li>\n<li><p>xxxProperties类中配置了自动配置类的默认值，并调用@ConfigurationProperties允许在全局配置文件中修改默认值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//WebMvcProperties类</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.mvc&quot;)</span><span class=\"comment\">//可以在配置文件中使用spring.mvc前缀修改其中的值</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">WebMvcProperties</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Formatting strategy for message codes. For instance, &#x27;PREFIX_ERROR_CODE&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> DefaultMessageCodesResolver.Format messageCodesResolverFormat;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">Format</span> <span class=\"variable\">format</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Format</span>();<span class=\"comment\">//下面测试这个对象的值</span></span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//Format类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Format</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * Date format to use, for example &#x27;dd/MM/yyyy&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String date;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * Time format to use, for example &#x27;HH:mm:ss&#x27;.</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String time;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>比如像这样：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">format:</span></span><br><span class=\"line\">      <span class=\"attr\">date:</span> </span><br><span class=\"line\">      <span class=\"attr\">time:</span> </span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"SpringBoot的调试\"><a href=\"#SpringBoot的调试\" class=\"headerlink\" title=\"SpringBoot的调试\"></a>SpringBoot的调试</h1><p>在配置文件中添加debug&#x3D;true打开调试模式。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 可以通过debug查看哪些自动配置类生效，哪些没有生效</span></span><br><span class=\"line\"><span class=\"attr\">debug:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>调试输出内容示例</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">============================</span><br><span class=\"line\">CONDITIONS EVALUATION REPORT</span><br><span class=\"line\">============================</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Positive matches:  //匹配并加载的类</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">// 这里省略很多</span><br><span class=\"line\">   WebMvcAutoConfiguration matched:</span><br><span class=\"line\">      - @ConditionalOnClass found required classes &#x27;javax.servlet.Servlet&#x27;, &#x27;org.springframework.web.servlet.DispatcherServlet&#x27;, &#x27;org.springframework.web.servlet.config.annotation.WebMvcConfigurer&#x27; (OnClassCondition)</span><br><span class=\"line\">      - found &#x27;session&#x27; scope (OnWebApplicationCondition)</span><br><span class=\"line\">      - @ConditionalOnMissingBean (types: org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport; SearchStrategy: all) did not find any beans (OnBeanCondition)</span><br><span class=\"line\"></span><br><span class=\"line\">   WebMvcAutoConfiguration#formContentFilter matched:</span><br><span class=\"line\">      - @ConditionalOnProperty (spring.mvc.formcontent.filter.enabled) matched (OnPropertyCondition)</span><br><span class=\"line\">      - @ConditionalOnMissingBean (types: org.springframework.web.filter.FormContentFilter; SearchStrategy: all) did not find any beans (OnBeanCondition)</span><br><span class=\"line\"></span><br><span class=\"line\">   WebMvcAutoConfiguration.EnableWebMvcConfiguration#flashMapManager matched:</span><br><span class=\"line\">      - @ConditionalOnMissingBean (names: flashMapManager; SearchStrategy: all) did not find any beans (OnBeanCondition)</span><br><span class=\"line\">// 这里省略很多</span><br><span class=\"line\"></span><br><span class=\"line\">Negative matches: //不匹配不加载的类</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">// 这里省略很多</span><br><span class=\"line\">   WebSessionIdResolverAutoConfiguration:</span><br><span class=\"line\">      Did not match:</span><br><span class=\"line\">         - @ConditionalOnClass did not find required class &#x27;reactor.core.publisher.Mono&#x27; (OnClassCondition)</span><br><span class=\"line\"></span><br><span class=\"line\">   WebSocketMessagingAutoConfiguration:</span><br><span class=\"line\">      Did not match:</span><br><span class=\"line\">         - @ConditionalOnClass did not find required class &#x27;org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer&#x27; (OnClassCondition)</span><br><span class=\"line\"></span><br><span class=\"line\">   WebSocketReactiveAutoConfiguration:</span><br><span class=\"line\">      Did not match:</span><br><span class=\"line\">         - @ConditionalOnWebApplication did not find reactive web application classes (OnWebApplicationCondition)</span><br><span class=\"line\">// 这里省略很多</span><br><span class=\"line\"></span><br><span class=\"line\">Exclusions:   //排除的类</span><br><span class=\"line\">-----------</span><br><span class=\"line\"></span><br><span class=\"line\">    None</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Unconditional classes:  //不满足条件的类</span><br><span class=\"line\">----------------------</span><br><span class=\"line\"></span><br><span class=\"line\">    org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration</span><br><span class=\"line\"></span><br><span class=\"line\">    org.springframework.boot.autoconfigure.context.LifecycleAutoConfiguration</span><br><span class=\"line\"></span><br><span class=\"line\">    org.springframework.boot.autoconfigure.context.PropertyPlaceholderAutoConfiguration</span><br><span class=\"line\"></span><br><span class=\"line\">    org.springframework.boot.autoconfigure.availability.ApplicationAvailabilityAutoConfiguration</span><br><span class=\"line\"></span><br><span class=\"line\">    org.springframework.boot.autoconfigure.info.ProjectInfoAutoConfiguration</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"SpringBoot-Web开发-资源路径\"><a href=\"#SpringBoot-Web开发-资源路径\" class=\"headerlink\" title=\"SpringBoot Web开发 资源路径\"></a>SpringBoot Web开发 资源路径</h1><h2 id=\"静态资源\"><a href=\"#静态资源\" class=\"headerlink\" title=\"静态资源\"></a>静态资源</h2><h3 id=\"静态资源放在哪里\"><a href=\"#静态资源放在哪里\" class=\"headerlink\" title=\"静态资源放在哪里\"></a>静态资源放在哪里</h3><p>静态资源可以放在以下几个目录：</p>\n<ol>\n<li>自定义的优先级最高</li>\n<li>classpath:&#x2F;META-INF&#x2F;resources&#x2F;</li>\n<li>classpath:&#x2F;resources&#x2F;</li>\n<li>classpath:&#x2F;static&#x2F;  （默认）</li>\n<li>classpath:&#x2F;public&#x2F;</li>\n</ol>\n<p><span style=\"color:#aaaaaa\">在templates下的页面只能通过controller来跳转。</span></p>\n<p>这几个目录会直接引用到页面的根目录。优先级依据上面的顺序执行。</p>\n<p>（很少使用webjars）&#x2F;webjars&#x2F;**指向由webjars依赖引入的静态文件，如：<a href=\"http://127.0.0.1:8080/webjars/jquery/3.4.1/jquery.js\">http://127.0.0.1:8080/webjars/jquery/3.4.1/jquery.js</a></p>\n<h3 id=\"自定义静态资源位置\"><a href=\"#自定义静态资源位置\" class=\"headerlink\" title=\"自定义静态资源位置\"></a>自定义静态资源位置</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">mvc:</span></span><br><span class=\"line\">    <span class=\"attr\">static-path-pattern:</span> <span class=\"string\">/res/**</span></span><br><span class=\"line\">    <span class=\"comment\"># 映射路径，静态资源url访问时使用的路径</span></span><br><span class=\"line\">  <span class=\"attr\">web:</span></span><br><span class=\"line\">    <span class=\"attr\">resources:</span></span><br><span class=\"line\">      <span class=\"attr\">static-locations:</span></span><br><span class=\"line\">        [ <span class=\"string\">classpath:/yn/</span>]</span><br><span class=\"line\">      <span class=\"comment\"># 静态资源放哪里</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>静态资源访问url</strong>：使用spring.mvc.static-path-pattern来配置，如：&#x2F;res&#x2F;**，访问时使用<a href=\"http://127.0.0.1:8080/res/1.js\">http://127.0.0.1:8080/res/1.js</a></p>\n<p><strong>静态资源放在哪里</strong>：使用spring.web.resources.static-locations来配置，这里要写数组。如：[ classpath:&#x2F;yn&#x2F;]，资源要放在以下位置。</p>\n<p><img src=\"/2022/09/08/Day16-SpringBoot-3/image-20220909193247615.png\" alt=\"image-20220909193247615\"></p>\n<h3 id=\"源码解释\"><a href=\"#源码解释\" class=\"headerlink\" title=\"源码解释\"></a>源码解释</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">addResourceHandlers</span><span class=\"params\">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.resourceProperties.isAddMappings()) &#123;</span><br><span class=\"line\">      logger.debug(<span class=\"string\">&quot;Default resource handling disabled&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   addResourceHandler(registry, <span class=\"string\">&quot;/webjars/**&quot;</span>, <span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);<span class=\"comment\">//webjars 通过依赖添加jquery</span></span><br><span class=\"line\">   addResourceHandler(registry, <span class=\"built_in\">this</span>.mvcProperties.getStaticPathPattern(), (registration) -&gt; &#123;</span><br><span class=\"line\">      registration.addResourceLocations(<span class=\"built_in\">this</span>.resourceProperties.getStaticLocations());</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.servletContext != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">         <span class=\"type\">ServletContextResource</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ServletContextResource</span>(<span class=\"built_in\">this</span>.servletContext, SERVLET_LOCATION);</span><br><span class=\"line\">         registration.addResourceLocations(resource);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"webjars\"><a href=\"#webjars\" class=\"headerlink\" title=\"webjars\"></a>webjars</h4><p><em>很少使用webjars</em></p>\n<p>使用依赖可以加入一些js文件。</p>\n<p><img src=\"/2022/09/08/Day16-SpringBoot-3/image-20220909183935280.png\" alt=\"Webjars里的jquery\"></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">addResourceHandler(registry, <span class=\"string\">&quot;/webjars/**&quot;</span>, <span class=\"string\">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>代码里指向的就是webjars依赖的位置。这里添加的是jquery.js。</p>\n<h1 id=\"首页配置\"><a href=\"#首页配置\" class=\"headerlink\" title=\"首页配置\"></a>首页配置</h1><p>默认位于资源目录下的index.html。</p>\n<p>可以使用controller自定义。</p>\n<h2 id=\"源码解释-1\"><a href=\"#源码解释-1\" class=\"headerlink\" title=\"源码解释\"></a>源码解释</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> Resource <span class=\"title function_\">getIndexHtml</span><span class=\"params\">(Resource location)</span> &#123;</span><br><span class=\"line\">   <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">      <span class=\"type\">Resource</span> <span class=\"variable\">resource</span> <span class=\"operator\">=</span> location.createRelative(<span class=\"string\">&quot;index.html&quot;</span>);</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (resource.exists() &amp;&amp; (resource.getURL() != <span class=\"literal\">null</span>)) &#123;</span><br><span class=\"line\">         <span class=\"keyword\">return</span> resource;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">catch</span> (Exception ex) &#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过这个方法得知，项目的首页默认指向为static下的index.html。</p>\n<h1 id=\"图标配置\"><a href=\"#图标配置\" class=\"headerlink\" title=\"图标配置\"></a>图标配置</h1><p>放在静态资源目录下就可。默认：&#x2F;favicon.ico</p>\n<h1 id=\"thymeleaf模板引擎\"><a href=\"#thymeleaf模板引擎\" class=\"headerlink\" title=\"thymeleaf模板引擎\"></a>thymeleaf模板引擎</h1><p>thymeleaf是Java模板引擎之一。</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p>SpringBoot里使用依赖spring-boot-starter-thymeleaf。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>thymeleaf官方的依赖使用</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Module</th>\n<th align=\"left\">Group ID</th>\n<th align=\"left\">Artifact ID</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Core library</td>\n<td align=\"left\"><code>org.thymeleaf</code></td>\n<td align=\"left\"><code>thymeleaf</code></td>\n</tr>\n<tr>\n<td align=\"left\">Spring 3 integration</td>\n<td align=\"left\"><code>org.thymeleaf</code></td>\n<td align=\"left\"><code>thymeleaf-spring3</code></td>\n</tr>\n<tr>\n<td align=\"left\">Spring 4 integration</td>\n<td align=\"left\"><code>org.thymeleaf</code></td>\n<td align=\"left\"><code>thymeleaf-spring4</code></td>\n</tr>\n<tr>\n<td align=\"left\">Spring 5 integration</td>\n<td align=\"left\"><code>org.thymeleaf</code></td>\n<td align=\"left\"><code>thymeleaf-spring5</code></td>\n</tr>\n<tr>\n<td align=\"left\">Testing library</td>\n<td align=\"left\"><code>org.thymeleaf</code></td>\n<td align=\"left\"><code>thymeleaf-testing</code></td>\n</tr>\n<tr>\n<td align=\"left\">Spring Security 3 integration</td>\n<td align=\"left\"><code>org.thymeleaf.extras</code></td>\n<td align=\"left\"><code>thymeleaf-extras-springsecurity3</code></td>\n</tr>\n<tr>\n<td align=\"left\">Spring Security 4 integration</td>\n<td align=\"left\"><code>org.thymeleaf.extras</code></td>\n<td align=\"left\"><code>thymeleaf-extras-springsecurity4</code></td>\n</tr>\n<tr>\n<td align=\"left\">Java 8 Time API compatibility</td>\n<td align=\"left\"><code>org.thymeleaf.extras</code></td>\n<td align=\"left\"><code>thymeleaf-extras-java8time</code></td>\n</tr>\n<tr>\n<td align=\"left\">Tiles 2 integration</td>\n<td align=\"left\"><code>org.thymeleaf.extras</code></td>\n<td align=\"left\"><code>thymeleaf-extras-tiles2</code></td>\n</tr>\n<tr>\n<td align=\"left\">IE Conditional Comments support</td>\n<td align=\"left\"><code>org.thymeleaf.extras</code></td>\n<td align=\"left\"><code>thymeleaf-extras-conditionalcomments</code></td>\n</tr>\n</tbody></table>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"第一个程序\"><a href=\"#第一个程序\" class=\"headerlink\" title=\"第一个程序\"></a>第一个程序</h3><ol>\n<li><p>在templates创建html文件；</p>\n<p><img src=\"/2022/09/08/Day16-SpringBoot-3/image-20220909202505993.png\" alt=\"image-20220909202505993\"></p>\n</li>\n<li><p>在controller中返回字符串为html文件的文件名，不包含后缀。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">IndexController</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">index</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>测试运行</li>\n</ol>\n<p><img src=\"/2022/09/08/Day16-SpringBoot-3/image-20220909202535561.png\" alt=\"image-20220909202535561\"></p>\n<h3 id=\"html中使用\"><a href=\"#html中使用\" class=\"headerlink\" title=\"html中使用\"></a>html中使用</h3><ol>\n<li><p>需要头<code>&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code></p>\n</li>\n<li><p>在页面中使用表达式。表达式格式为<code>th:abc=&quot;xxx&quot;</code>，abc表示内容类型，xxx表示内容。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span> <span class=\"attr\">xmlns:th</span>=<span class=\"string\">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>一个Templates页面<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">一个Templates页面</span><br><span class=\"line\"><span class=\"comment\">&lt;!--所有的html元素可以被thymeleaf替换接管：  th:元素名--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>text为内容，${msg}为引入的值。</p>\n</li>\n<li><p>在Controller中设置msg的值。</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">index</span><span class=\"params\">(Model model)</span>&#123;</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;msg&quot;</span>,<span class=\"string\">&quot;这是一个msg。&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li><p>测试运行</p>\n<p><img src=\"/2022/09/08/Day16-SpringBoot-3/image-20220909203631457.png\" alt=\"image-20220909203631457\"></p>\n</li>\n</ol>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p><img src=\"/2022/09/08/Day16-SpringBoot-3/TemplateEngine%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%86.svg\" alt=\"TemplateEngine执行原理\"></p>\n<p>可以使用表达式在页面中显示内容。</p>\n<h2 id=\"源码\"><a href=\"#源码\" class=\"headerlink\" title=\"源码\"></a>源码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;spring.thymeleaf&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThymeleafProperties</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Charset</span> <span class=\"variable\">DEFAULT_ENCODING</span> <span class=\"operator\">=</span> StandardCharsets.UTF_8;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEFAULT_PREFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;classpath:/templates/&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">String</span> <span class=\"variable\">DEFAULT_SUFFIX</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;.html&quot;</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>得知：</p>\n<ol>\n<li>在配置中使用spring.thymeleaf前缀；</li>\n<li>默认模板前缀：classpath:&#x2F;templates&#x2F;</li>\n<li>默认模板后缀：.html</li>\n</ol>\n<h1 id=\"thymeleaf模板引擎语法\"><a href=\"#thymeleaf模板引擎语法\" class=\"headerlink\" title=\"thymeleaf模板引擎语法\"></a>thymeleaf模板引擎语法</h1><p>官方文档：<a href=\"https://www.thymeleaf.org/doc/tutorials/3.0/\">https://www.thymeleaf.org/doc/tutorials/3.0/</a></p>\n<h2 id=\"Springboot中的一些配置\"><a href=\"#Springboot中的一些配置\" class=\"headerlink\" title=\"Springboot中的一些配置\"></a>Springboot中的一些配置</h2><figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 关闭模板引擎的缓存</span></span><br><span class=\"line\"><span class=\"attr\">spring.thymeleaf.cache</span>=<span class=\"string\">false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一些表达式\"><a href=\"#一些表达式\" class=\"headerlink\" title=\"一些表达式\"></a>一些表达式</h2><ul>\n<li>Simple expressions:<ul>\n<li>Variable Expressions: <code>$&#123;...&#125;</code>   &#x2F;&#x2F;普通变量</li>\n<li>Selection Variable Expressions: <code>*&#123;...&#125;</code>   </li>\n<li>Message Expressions: <code>#&#123;...&#125; </code>  &#x2F;&#x2F;国际化消息表达式</li>\n<li>Link URL Expressions: <code>@&#123;...&#125;</code> &#x2F;&#x2F;表示URL</li>\n<li>Fragment Expressions: <code>~&#123;...&#125;</code> &#x2F;&#x2F;片段表达式，可以提取网页片段作为一个模块，然后在另一个网页插入。</li>\n</ul>\n</li>\n<li>Literals<ul>\n<li>Text literals: <code>&#39;one text&#39;</code>, <code>&#39;Another one!&#39;</code>,…  &#x2F;&#x2F;文本使用单引号，不能使用双引导</li>\n<li>Number literals: <code>0</code>, <code>34</code>, <code>3.0</code>, <code>12.3</code>,…   &#x2F;&#x2F;数字直接写</li>\n<li>Boolean literals: <code>true</code>, <code>false</code>   &#x2F;&#x2F;布尔值直接写</li>\n<li>Null literal: <code>null</code>  &#x2F;&#x2F;null直接写</li>\n<li>Literal tokens: <code>one</code>, <code>sometext</code>, <code>main</code>,… &#x2F;&#x2F;字符串文本，如果内容没有一些影响语法的符号（空格，符号），就可以直接写。<ul>\n<li>比如<code>&lt;div th:class=&quot;&#39;content&#39;&quot;&gt;...&lt;/div&gt;</code>可以用<code>&lt;div th:class=&quot;content&quot;&gt;...&lt;/div&gt;</code>表达。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Text operations:<ul>\n<li>String concatenation: <code>+</code> &#x2F;&#x2F;文本操作</li>\n<li>Literal substitutions: <code>|The name is $&#123;name&#125;|</code></li>\n</ul>\n</li>\n<li>Arithmetic operations:<ul>\n<li>Binary operators: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%  </code>  </li>\n<li>Minus sign (unary operator): <code>-</code></li>\n</ul>\n</li>\n<li>Boolean operations:<ul>\n<li>Binary operators: <code>and</code>, <code>or</code>  &#x2F;&#x2F;与 或 </li>\n<li>Boolean negation (unary operator): <code>!</code>, <code>not</code> &#x2F;&#x2F;非</li>\n</ul>\n</li>\n<li>Comparisons and equality:<ul>\n<li>Comparators: <code>&gt;</code>, <code>&lt;</code>, <code>&gt;=</code>, <code>&lt;=</code> (<code>gt</code>, <code>lt</code>, <code>ge</code>, <code>le</code>)</li>\n<li>Equality operators: <code>==</code>, <code>!=</code> (<code>eq</code>, <code>ne</code>)</li>\n</ul>\n</li>\n<li>Conditional operators: &#x2F;&#x2F;条件运算符<ul>\n<li>If-then: <code>(if) ? (then)</code></li>\n<li>If-then-else: <code>(if) ? (then) : (else)</code> &#x2F;&#x2F;用这个代替前端的if-else</li>\n<li>Default: <code>(value) ?: (defaultvalue)</code></li>\n</ul>\n</li>\n<li>Special tokens:<ul>\n<li>No-Operation: <code>_</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"一些属性\"><a href=\"#一些属性\" class=\"headerlink\" title=\"一些属性\"></a>一些属性</h2><p>这是一些thymeleaf的属性，优先级从上到下依次降低。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Order</th>\n<th align=\"left\">Feature</th>\n<th align=\"left\">Attributes</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">Fragment inclusion</td>\n<td align=\"left\"><code>th:insert</code> <code>th:replace</code></td>\n<td>包含，类似include</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Fragment iteration</td>\n<td align=\"left\"><code>th:each</code></td>\n<td>循环</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">Conditional evaluation</td>\n<td align=\"left\"><code>th:if</code> <code>th:unless</code> <code>th:switch</code> <code>th:case</code></td>\n<td>判断</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">Local variable definition</td>\n<td align=\"left\"><code>th:object</code> <code>th:with</code></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">General attribute modification</td>\n<td align=\"left\"><code>th:attr</code> <code>th:attrprepend</code> <code>th:attrappend</code></td>\n<td></td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">Specific attribute modification</td>\n<td align=\"left\"><code>th:value</code> <code>th:href</code> <code>th:src</code> <code>...</code></td>\n<td>属性</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\">Text (tag body modification)</td>\n<td align=\"left\"><code>th:text</code> <code>th:utext</code></td>\n<td><code>th:text</code> 不转义字符<br><code>th:utext</code>转义字符</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\">Fragment specification</td>\n<td align=\"left\"><code>th:fragment</code></td>\n<td>提取公共页面</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\">Fragment removal</td>\n<td align=\"left\"><code>th:remove</code></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"运算符的使用\"><a href=\"#运算符的使用\" class=\"headerlink\" title=\"运算符的使用\"></a>运算符的使用</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/emp/delete/&#125;+$&#123;emp.getId()&#125;&quot;</span>&gt;</span>删除<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一些方法的使用\"><a href=\"#一些方法的使用\" class=\"headerlink\" title=\"一些方法的使用\"></a>一些方法的使用</h2><h3 id=\"dates-format\"><a href=\"#dates-format\" class=\"headerlink\" title=\"dates.format\"></a>dates.format</h3><p>可以格式化Date对象的格式。</p>\n<p>使用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">td</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;#dates.format(emp.getBirth(),&#x27;yyyy-MM-dd HH:mm:ss&#x27;)&#125;&quot;</span>&gt;</span>1,001<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>用”#”修饰，然后参数输入Date对象和格式’yyyy-MM-dd HH:mm:ss’。</p>\n<h2 id=\"一些属性的使用\"><a href=\"#一些属性的使用\" class=\"headerlink\" title=\"一些属性的使用\"></a>一些属性的使用</h2><h3 id=\"th-text，th-utext\"><a href=\"#th-text，th-utext\" class=\"headerlink\" title=\"th:text，th:utext\"></a>th:text，th:utext</h3><p>th:text下的字符不会进行html转义，th:utext下的字符会进行html转义。</p>\n<p>th:text有另一种写法<strong>（这个写法一般不用）</strong>：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>[[ $&#123;msg&#125; ]]<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!-- 这个写法一般不用 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>[[ $&#123;msg&#125; ]]<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"comment\">&lt;!-- 这个写法一般不用 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:utext</span>=<span class=\"string\">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(&quot;/test&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> String <span class=\"title function_\">index</span><span class=\"params\">(Model model)</span>&#123;</span><br><span class=\"line\">    model.addAttribute(<span class=\"string\">&quot;msg&quot;</span>,<span class=\"string\">&quot;&lt;h1&gt;这是一个msg。&lt;/h1&gt;&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;test&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>运行</p>\n</blockquote>\n<p><img src=\"/2022/09/08/Day16-SpringBoot-3/image-20220910074159557.png\" alt=\"image-20220910074159557\"></p>\n<h3 id=\"th-each\"><a href=\"#th-each\" class=\"headerlink\" title=\"th:each\"></a>th:each</h3><p>可以用来遍历一个数组，使用方法：</p>\n<ol>\n<li><p>在属性中添加<code>th:each=&quot;user:&#123;$users&#125;&quot;</code>；</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;user:$&#123;users&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>遍历users，类似for(User user : users){}</p>\n</li>\n<li><p>通过另一个属性值使用这个值<code>th:text=&quot;$&#123;user&#125;&quot;</code>。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;user:$&#123;users&#125;&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>会出现多个元素，分别对应遍历的一个效果，表现如下：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>李四<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span>&gt;</span>王五<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>代码</p>\n</blockquote>\n<p>Controller中</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">thyleaf_for_each</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/test2&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">test2</span><span class=\"params\">(Model model)</span>&#123;</span><br><span class=\"line\">        model.addAttribute(<span class=\"string\">&quot;users&quot;</span>, Arrays.asList(<span class=\"string\">&quot;zhangsan&quot;</span>,<span class=\"string\">&quot;lisi&quot;</span>,<span class=\"string\">&quot;wangwu&quot;</span>));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;test2&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>html中</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">th:each</span>=<span class=\"string\">&quot;user:$&#123;users&#125;&quot;</span> <span class=\"attr\">th:text</span>=<span class=\"string\">&quot;$&#123;user&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果</p>\n<p><img src=\"/2022/09/08/Day16-SpringBoot-3/image-20220910073838414.png\" alt=\"image-20220910073838414\"></p>\n<h3 id=\"th-href-和-x2F-js-x2F-jquery-js\"><a href=\"#th-href-和-x2F-js-x2F-jquery-js\" class=\"headerlink\" title=\"th:href 和 @{&#x2F;js&#x2F;jquery.js}\"></a>th:href 和 @{&#x2F;js&#x2F;jquery.js}</h3><ul>\n<li><p>th:href修改html元素中的href属性值</p>\n</li>\n<li><p>可以根据server.servlet.context-path的配置自动在链接前添加内容。</p>\n</li>\n<li><p>@{&#x2F;js&#x2F;jquery.js}一般用在表示链接</p>\n</li>\n</ul>\n<h4 id=\"如果链接是根目录-x2F-qwe-js\"><a href=\"#如果链接是根目录-x2F-qwe-js\" class=\"headerlink\" title=\"如果链接是根目录(&#x2F;qwe.js)\"></a>如果链接是根目录(&#x2F;qwe.js)</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/bootstrap.min.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;/css/signin.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在springBoot配置中添加servlet目录</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server.servlet.context-path</span>=<span class=\"string\">/yn</span></span><br></pre></td></tr></table></figure>\n\n<p>在HTML中的表现</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/yn/css/bootstrap.min.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;/yn/css/signin.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如果链接是相对目录-qwe-js\"><a href=\"#如果链接是相对目录-qwe-js\" class=\"headerlink\" title=\"如果链接是相对目录(qwe.js)\"></a>如果链接是相对目录(qwe.js)</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;css/bootstrap.min.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">th:href</span>=<span class=\"string\">&quot;@&#123;css/signin.css&#125;&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>表现效果：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;css/bootstrap.min.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;css/signin.css&quot;</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>若设置server.servlet.context-path后，这个表现效果不会改变。</p>\n<h3 id=\"th-fragment，th-insert，th-replace\"><a href=\"#th-fragment，th-insert，th-replace\" class=\"headerlink\" title=\"th:fragment，th:insert，th:replace\"></a>th:fragment，th:insert，th:replace</h3><p>分别代表：声明当前区域  插入 替换</p>\n<h4 id=\"th-fragment\"><a href=\"#th-fragment\" class=\"headerlink\" title=\"th:fragment\"></a>th:fragment</h4><p>th:fragment放在html元素属性中，用于为当前元素声明一个名字。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- common.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span>asd<span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>声明时不需要~{…}表达式括住。</p>\n<h4 id=\"th-insert\"><a href=\"#th-insert\" class=\"headerlink\" title=\"th:insert\"></a>th:insert</h4><p>th:insert也放在元素属性中，会将指定的fragment插入到元素中。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- qwe.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:insert</span>=<span class=\"string\">&quot;~&#123;common::header&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>引用时需要使用~{…}表达式括住。内容为“模板名::元素声明的名字”</p>\n<p>表现效果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span>asd<span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"th-replace\"><a href=\"#th-replace\" class=\"headerlink\" title=\"th:replace\"></a>th:replace</h4><p>th:replace将使用指定的fragment替代原来的元素。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- asd.html --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;~&#123;common::header&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>表现效果</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">nav</span>&gt;</span>asd<span class=\"tag\">&lt;/<span class=\"name\">nav</span>&gt;</span><span class=\"comment\">&lt;!-- 原本的div被替代了 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"传递参数\"><a href=\"#传递参数\" class=\"headerlink\" title=\"传递参数\"></a>传递参数</h4><p>在insert和replace后面，可以直接加括号传参。</p>\n<p>格式：(参数名&#x3D;’值’)</p>\n<p>使用：</p>\n<p>对于<strong>th:fragment</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- commons.html 公共页面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:fragment</span>=<span class=\"string\">&quot;sidebar&quot;</span>&gt;</span><span class=\"comment\">&lt;!-- 侧边栏 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;$&#123;action==&#x27;index&#x27;?&#x27;active&#x27;:&#x27;inactive&#x27;&#125;&quot;</span>&gt;</span>主页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;$&#123;action==&#x27;list&#x27;?&#x27;active&#x27;:&#x27;inactive&#x27;&#125;&quot;</span>&gt;</span>员工管理页面<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>对于<strong>th:replace</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- list.html 假定：员工管理页面 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;~&#123;commons::sidebar(action=&#x27;list&#x27;)&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 表现效果 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;inactive&quot;</span>&gt;</span>主页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span>员工管理页面<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- list.html 假定：主页 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:replace</span>=<span class=\"string\">&quot;~&#123;commons::sidebar(action=&#x27;index&#x27;)&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 表现效果 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;active&quot;</span>&gt;</span>主页<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">th:class</span>=<span class=\"string\">&quot;inactive&quot;</span>&gt;</span>员工管理页面<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h4><p>这个一般用于多个页面有公共部分时，可以将公共部分放在同一个页面中，然后在别的页面只需要引用就可以了。</p>\n<p><img src=\"/2022/09/08/Day16-SpringBoot-3/image-20220910164601698.png\" alt=\"image-20220910164601698\"></p>\n","categories":[],"tags":["SpringBoot"]},{"title":"Day15 SpringBoot 2 配置文件 SPEL表达式 松散绑定 JSR303校验 yaml语法","url":"http://zswh33.github.io/2022/09/07/Day15-SpringBoot-2/","content":"<h1 id=\"SpringBoot如何启动\"><a href=\"#SpringBoot如何启动\" class=\"headerlink\" title=\"SpringBoot如何启动\"></a>SpringBoot如何启动</h1><blockquote>\n<p>入口</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//标注这个类是一个SpringBoot应用</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootForthProjectApplication</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//将SpringBoot应用启动</span></span><br><span class=\"line\">        SpringApplication.run(SpringBootForthProjectApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>SpringApplication.run(SpringBootForthProjectApplication.class, args);</p>\n</blockquote>\n<ol>\n<li>推断应用的类型是普通的项目还是Web项目；</li>\n<li>查找并加载所有可用初始化器，设置到initializers属性中；</li>\n<li>找出所有的应用程序监听器，设置到listeners属性中；</li>\n<li>推断并设置main方法的定义类，找到运行的主类；</li>\n</ol>\n<h1 id=\"SpringBoot全局配置文件\"><a href=\"#SpringBoot全局配置文件\" class=\"headerlink\" title=\"SpringBoot全局配置文件\"></a>SpringBoot全局配置文件</h1><h2 id=\"默认文件名\"><a href=\"#默认文件名\" class=\"headerlink\" title=\"默认文件名\"></a>默认文件名</h2><p>两种方案：</p>\n<ul>\n<li>application.properties<ul>\n<li>语法结构：key&#x3D;value</li>\n</ul>\n</li>\n<li>application.yml<ul>\n<li>语法结构：key:空格value</li>\n</ul>\n</li>\n</ul>\n<p>作用：修改SpringBoot自动配置的默认值。</p>\n<h2 id=\"文件位置\"><a href=\"#文件位置\" class=\"headerlink\" title=\"文件位置\"></a>文件位置</h2><p>可以在以下几个位置放置配置文件：</p>\n<ol>\n<li>file:.&#x2F;config&#x2F;  项目目录下config文件夹中</li>\n<li>file:.&#x2F;  项目根目录下</li>\n<li>classpath:&#x2F;config&#x2F;   资源目录的config目录下</li>\n<li>classpath:&#x2F;     资源目录根目录下</li>\n</ol>\n<p>优先级顺序也按照上面的顺序来。</p>\n<h2 id=\"不同环境下的配置文件\"><a href=\"#不同环境下的配置文件\" class=\"headerlink\" title=\"不同环境下的配置文件\"></a>不同环境下的配置文件</h2><p>有三种环境：默认、dev、test。（默认、开发、测试）</p>\n<h3 id=\"多文件方式\"><a href=\"#多文件方式\" class=\"headerlink\" title=\"多文件方式\"></a>多文件方式</h3><ol>\n<li><p>创建三个文件，其中没有后缀表示默认，dev表示开发，test表示测试；</p>\n<p><img src=\"/2022/09/07/Day15-SpringBoot-2/image-20220908174822628.png\" alt=\"image-20220908174822628\"></p>\n</li>\n<li><p>在application.yaml添加spring.profiles&#x3D;指定使用的配置环境，</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span></span><br></pre></td></tr></table></figure>\n\n<p>示例中表示使用dev环境。</p>\n</li>\n<li><p>配置的环境名可以自定义</p>\n<img src=\"/2022/09/07/Day15-SpringBoot-2/image-20220908180306013.png\" alt=\"image-20220908180306013\" style=\"zoom:50%;\"></li>\n</ol>\n<h3 id=\"单文件方式\"><a href=\"#单文件方式\" class=\"headerlink\" title=\"单文件方式\"></a>单文件方式</h3><ol>\n<li><p>在application.yaml中添加以下内容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8081</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">profiles:</span></span><br><span class=\"line\">    <span class=\"attr\">active:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8082</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">config:</span></span><br><span class=\"line\">    <span class=\"attr\">activate:</span></span><br><span class=\"line\">      <span class=\"attr\">on-profile:</span> <span class=\"string\">dev</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">server:</span></span><br><span class=\"line\">  <span class=\"attr\">port:</span> <span class=\"number\">8083</span></span><br><span class=\"line\"><span class=\"attr\">spring:</span></span><br><span class=\"line\">  <span class=\"attr\">config:</span></span><br><span class=\"line\">    <span class=\"attr\">activate:</span></span><br><span class=\"line\">      <span class=\"attr\">on-profile:</span> <span class=\"string\">test</span></span><br></pre></td></tr></table></figure>\n\n<p>使用”—“分隔开三种配置。在示例中，第一部分为默认的配置，spring.profiles.active指定现在使用的配置。第二部分为dev配置，第三部分为test配置。</p>\n<ul>\n<li>在默认配置中使用spring.profiles.active指定要使用的配置环境</li>\n<li>spring.config.activate.on-profile声明当前位置的配置名</li>\n</ul>\n</li>\n<li><p>使用即可。</p>\n</li>\n</ol>\n<h1 id=\"yaml语法\"><a href=\"#yaml语法\" class=\"headerlink\" title=\"yaml语法\"></a>yaml语法</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 普通的key-value</span></span><br><span class=\"line\"><span class=\"attr\">name:</span> <span class=\"string\">张三</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 对象</span></span><br><span class=\"line\"><span class=\"attr\">student:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zhangsan</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 行内对象</span></span><br><span class=\"line\"><span class=\"attr\">student2:</span> &#123;<span class=\"attr\">name:</span> <span class=\"string\">zhangsan</span> ,<span class=\"attr\">age:</span> <span class=\"number\">3</span>&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#数组</span></span><br><span class=\"line\"><span class=\"attr\">pets:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">cat</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">dog</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 行内数组</span></span><br><span class=\"line\"><span class=\"attr\">pets2:</span> [<span class=\"string\">cat</span>,<span class=\"string\">dog</span>,<span class=\"string\">pig</span>]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Spring的-Autowired和-Value实现对象自动初始化\"><a href=\"#Spring的-Autowired和-Value实现对象自动初始化\" class=\"headerlink\" title=\"Spring的@Autowired和@Value实现对象自动初始化\"></a>Spring的@Autowired和@Value实现对象自动初始化</h1><ol>\n<li><p>创建一个Dog类，放入无参构造方法、getter和setter，对类使用@Component注解。对需要赋值的变量使用@Value注解，值为要赋的值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//将类加入Spring底层</span></span><br><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;张三&quot;)</span>  <span class=\"comment\">//自动装载的默认值</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;12&quot;)</span> <span class=\"comment\">//这里只能写字符串，整数也要用引号括住</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//toString方法、getter方法、setter方法、无参构造方法、有参构造方法这里省略</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在要使用的类中，创建一个引用，使用@Autowired注解，即可实现自动初始化；</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootForthProjectApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dog dog;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(dog);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写一个测试类，测试结果。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog&#123;name=&#x27;张三&#x27;, age=12&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"通过yaml实现对象自动初始化\"><a href=\"#通过yaml实现对象自动初始化\" class=\"headerlink\" title=\"通过yaml实现对象自动初始化\"></a>通过yaml实现对象自动初始化</h1><ol>\n<li>在application.yaml中添加以下内容：</li>\n</ol>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zhangsan</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">happy:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">birth:</span> <span class=\"number\">2022</span><span class=\"string\">/9/9</span></span><br><span class=\"line\">  <span class=\"attr\">maps:</span> &#123;<span class=\"attr\">k1:</span> <span class=\"string\">v1</span>,<span class=\"attr\">k2:</span> <span class=\"string\">v2</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">lists:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">code</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">girl</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">zhangsan</span></span><br><span class=\"line\">  <span class=\"attr\">dog:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">lisi</span></span><br><span class=\"line\">    <span class=\"attr\">age:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>创建一个Person类，添加注解<code>@ConfigurationProperties(prefix = &quot;person&quot;)</code>，其中prefix前缀的值为application.yaml配置的对应的对象的名，也就是person。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;person&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean happy;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birth;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,Object&gt; maps;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Object&gt; lists;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dog dog;</span><br><span class=\"line\">    <span class=\"comment\">//构造方法、setter、getter、toString方法</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>运行测试</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootForthProjectApplicationTests</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Person person;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person&#123;name=&#x27;zhangsan&#x27;, age=3, happy=false, birth=Fri Sep 09 00:00:00 CST 2022, maps=&#123;k1=v1, k2=v2&#125;, lists=[code, girl, zhangsan], dog=Dog&#123;name=&#x27;lisi&#x27;, age=3&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h2><p><img src=\"/2022/09/07/Day15-SpringBoot-2/image-20220907212941337.png\" alt=\"image-20220907212941337\"></p>\n<p>@configurationProperties使用后会标红，解决办法：</p>\n<ol>\n<li><p>在pom.xml中添加：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">optional</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">optional</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>重启idea。</p>\n</li>\n</ol>\n<p>这个依赖的作用是：添加依赖后，可以用@ConfigurationProperties注释的项轻松生成自己的配置元数据文件，在编写application.yml文件可以有相关提示。</p>\n<h1 id=\"部分SPEL表达式\"><a href=\"#部分SPEL表达式\" class=\"headerlink\" title=\"部分SPEL表达式\"></a>部分SPEL表达式</h1><p><em>${random.uuid}</em></p>\n<blockquote>\n<p>随机</p>\n</blockquote>\n<p>random.uuid：获得一个随机的UUID</p>\n<p>random.int：获得一个整数</p>\n<blockquote>\n<p>示例1：${person.hello:Lisi}张三</p>\n</blockquote>\n<p>在对象person中寻找hello，若有hello则用hello的值，没有则用“Lisi”代替，然后拼接“张三”。</p>\n<blockquote>\n<p>代码示例</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person:</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">zhangsan$&#123;random.uuid&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"string\">$&#123;random.int&#125;</span></span><br><span class=\"line\">  <span class=\"attr\">happy:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"attr\">birth:</span> <span class=\"number\">2022</span><span class=\"string\">/9/9</span></span><br><span class=\"line\">  <span class=\"attr\">maps:</span> &#123;<span class=\"attr\">k1:</span> <span class=\"string\">v1</span>,<span class=\"attr\">k2:</span> <span class=\"string\">v2</span>&#125;</span><br><span class=\"line\">  <span class=\"attr\">lists:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">code</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">girl</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">zhangsan</span></span><br><span class=\"line\">  <span class=\"attr\">dog:</span></span><br><span class=\"line\">    <span class=\"attr\">name:</span> <span class=\"string\">$&#123;person.hello:张三&#125;_LiSi</span></span><br><span class=\"line\">    <span class=\"attr\">age:</span> <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person&#123;name=&#x27;zhangsand4c877dd-b714-468f-b6f9-c4a4b899a8d0&#x27;, age=-161320060, happy=false, birth=Fri Sep 09 00:00:00 CST 2022, maps=&#123;k1=v1, k2=v2&#125;, lists=[code, girl, zhangsan], dog=Dog&#123;name=&#x27;张三_LiSi&#x27;, age=3&#125;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"松散绑定\"><a href=\"#松散绑定\" class=\"headerlink\" title=\"松散绑定\"></a>松散绑定</h1><p>在使用yaml实现对象自动赋值过程中，yaml中对象名和实际对象名中，驼峰命名和带“-”的命名可以对应起来。如：firstName和first-name。（properties不支持）</p>\n<blockquote>\n<p>示例</p>\n</blockquote>\n<p>dog类：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;dog&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String firstName;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\"><span class=\"comment\">// Constructor,getter,setter,toString</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>yaml中的dog：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">dog:</span></span><br><span class=\"line\">  <span class=\"attr\">first-name:</span> <span class=\"string\">Qwert</span></span><br><span class=\"line\">  <span class=\"attr\">age:</span> <span class=\"number\">6</span></span><br></pre></td></tr></table></figure>\n\n<p>运行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Dog&#123;firstName=&#x27;Qwert&#x27;, age=6&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"JSR303校验\"><a href=\"#JSR303校验\" class=\"headerlink\" title=\"JSR303校验\"></a>JSR303校验</h1><p><em>@Validated</em></p>\n<p>JSR303校验指，Spring提供注解可以直接校验变量的值。</p>\n<p>在变量前添加指定注解，可以实现注解对应的功能。</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-validation<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><ol>\n<li>在类前添加@Validated注解；</li>\n<li>在需要检查的对象前添加相应的校验注解。</li>\n</ol>\n<h2 id=\"包\"><a href=\"#包\" class=\"headerlink\" title=\"包\"></a>包</h2><p>位于jakarta.validation下的javax.validation.constraint里。</p>\n<p><img src=\"/2022/09/07/Day15-SpringBoot-2/image-20220908172458727.png\" alt=\"image-20220908172458727\"></p>\n<h2 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h2><blockquote>\n<p>在yml文件中</p>\n</blockquote>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">student:</span></span><br><span class=\"line\">  <span class=\"attr\">id:</span> <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"attr\">name:</span> <span class=\"string\">Obsidian</span></span><br><span class=\"line\">  <span class=\"attr\">email:</span> <span class=\"string\">uwupu@qwe.com</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 一个student类</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@ConfigurationProperties(prefix = &quot;student&quot;)</span></span><br><span class=\"line\"><span class=\"meta\">@Validated</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@Email(message=&quot;邮件格式错误&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String email;</span><br><span class=\"line\"><span class=\"comment\">//Constructor、getter、setter、toString</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> 运行测试</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootForthProjectApplicationTests</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Student student;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(student);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Student&#123;id=3, name=&#x27;Obsidian&#x27;, email=&#x27;uwupu@qwe.com&#x27;&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可以使用的注解\"><a href=\"#可以使用的注解\" class=\"headerlink\" title=\"可以使用的注解\"></a>可以使用的注解</h2><h3 id=\"空检查\"><a href=\"#空检查\" class=\"headerlink\" title=\"空检查\"></a>空检查</h3><table>\n<thead>\n<tr>\n<th>注解名</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Null</td>\n<td>验证对象是否为空。</td>\n</tr>\n<tr>\n<td>@NotNull</td>\n<td>验证对象不为空。不检查长度为0的字符串。</td>\n</tr>\n<tr>\n<td>@NotBlank</td>\n<td>验证约束字符串不是null，且字符串trim后长度大于0。（trim：去掉字符串前后空格）</td>\n</tr>\n<tr>\n<td>@NotEmpty</td>\n<td>验证约束元素是否为空或null。</td>\n</tr>\n</tbody></table>\n<h3 id=\"Boolean检查\"><a href=\"#Boolean检查\" class=\"headerlink\" title=\"Boolean检查\"></a>Boolean检查</h3><table>\n<thead>\n<tr>\n<th>注解名</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@AssertTrue</td>\n<td>验证Boolean对象是否为true</td>\n</tr>\n<tr>\n<td>@AssertFalse</td>\n<td>验证Boolean对象是否为false</td>\n</tr>\n</tbody></table>\n<h3 id=\"长度检查\"><a href=\"#长度检查\" class=\"headerlink\" title=\"长度检查\"></a>长度检查</h3><table>\n<thead>\n<tr>\n<th>注解名</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Size(min&#x3D;,max&#x3D;)</td>\n<td>验证对象（Array、Collection、Map、String）长度是否在给定范围内</td>\n</tr>\n<tr>\n<td>@Length(min&#x3D;,max&#x3D;)</td>\n<td>验证被注解的字符串的长度是否在给定范围内</td>\n</tr>\n</tbody></table>\n<h3 id=\"日期检查\"><a href=\"#日期检查\" class=\"headerlink\" title=\"日期检查\"></a>日期检查</h3><table>\n<thead>\n<tr>\n<th>注解名</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Past</td>\n<td>验证Date和Calendar对象是否在当前时间之前</td>\n</tr>\n<tr>\n<td>@Future</td>\n<td>验证Date和Calendar对象是否在当前时间之后</td>\n</tr>\n</tbody></table>\n<h3 id=\"字符串检查\"><a href=\"#字符串检查\" class=\"headerlink\" title=\"字符串检查\"></a>字符串检查</h3><table>\n<thead>\n<tr>\n<th>注解名</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>@Pattern</td>\n<td>验证String对象是否符合正则表达式的规则</td>\n</tr>\n</tbody></table>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"使用properties配置文件\"><a href=\"#使用properties配置文件\" class=\"headerlink\" title=\"使用properties配置文件\"></a>使用properties配置文件</h2><ol>\n<li><p>类前用@PropertySource注解</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Component</span></span><br><span class=\"line\"><span class=\"meta\">@PropertySource(&quot;classpath:application.properties&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Person_properties</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;person2.name&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;person2.age&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer age;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;person2.happy&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Boolean happy;</span><br><span class=\"line\">    <span class=\"meta\">@Value(&quot;$&#123;person2.birth&#125;&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Date birth;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Map&lt;String,Object&gt; maps;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> List&lt;Object&gt; lists;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Dog dog;</span><br><span class=\"line\"><span class=\"comment\">//Contsructor、getter、setter、toString</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在application.yaml文件中</p>\n<figure class=\"highlight properties\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">person2.name</span>=<span class=\"string\">zhangsan</span></span><br><span class=\"line\"><span class=\"attr\">person2.birth</span>=<span class=\"string\">2020/2/2</span></span><br><span class=\"line\"><span class=\"attr\">person2.age</span>=<span class=\"string\">123</span></span><br><span class=\"line\"><span class=\"attr\">person2.happy</span>=<span class=\"string\">false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行测试</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@SpringBootTest</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootForthProjectApplicationTests</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Person_properties person;</span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">contextLoads</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(person);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Person2&#123;name=<span class=\"string\">&#x27;zhangsan&#x27;</span>, age=<span class=\"number\">123</span>, happy=<span class=\"literal\">false</span>, birth=Sun Feb <span class=\"number\">02</span> <span class=\"number\">00</span>:<span class=\"number\">00</span>:<span class=\"number\">00</span> CST <span class=\"number\">2020</span>, maps=<span class=\"literal\">null</span>, lists=<span class=\"literal\">null</span>, dog=<span class=\"literal\">null</span>&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"修改的内容\"><a href=\"#修改的内容\" class=\"headerlink\" title=\"修改的内容\"></a>修改的内容</h2><h3 id=\"单文件方式配置SpringBoot多环境\"><a href=\"#单文件方式配置SpringBoot多环境\" class=\"headerlink\" title=\"单文件方式配置SpringBoot多环境\"></a>单文件方式配置SpringBoot多环境</h3><blockquote>\n<p>旧版本中</p>\n</blockquote>\n<p>使用spring.profiles声明当前使用的配置名。</p>\n<blockquote>\n<p>新版本中</p>\n</blockquote>\n<p>使用spring.config.activate.on-profile声明当前使用的配置名。</p>\n","categories":[],"tags":["SpringBoot"]},{"title":"Day15 SpringBoot 1","url":"http://zswh33.github.io/2022/09/07/Day15-SpringBoot-1/","content":"<h1 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h1><p>微服务架构</p>\n<h2 id=\"应用架构\"><a href=\"#应用架构\" class=\"headerlink\" title=\"应用架构\"></a>应用架构</h2><h3 id=\"单体应用架构（All-in-one）\"><a href=\"#单体应用架构（All-in-one）\" class=\"headerlink\" title=\"单体应用架构（All in one）\"></a>单体应用架构（All in one）</h3><p>单体应用架构（All in one），将一个应用中的所有应用服务都封装在一个应用中。</p>\n<p>优点：</p>\n<ul>\n<li>易于开发和测试；</li>\n<li>方便部署；</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>如果要修改一个地方，就去要停掉整个服务，重新打包；</li>\n</ul>\n<h3 id=\"微服务架构\"><a href=\"#微服务架构\" class=\"headerlink\" title=\"微服务架构\"></a>微服务架构</h3><p>打破all in one的架构方式，将每个功能元素独立出来，把独立出来的功能元素动态组合。</p>\n<p>优点：</p>\n<ol>\n<li>节省了调用资源；</li>\n<li>每个功能元素的服务都是一个可替换的，可独立升级的软件代码。</li>\n</ol>\n<h2 id=\"微服务全套\"><a href=\"#微服务全套\" class=\"headerlink\" title=\"微服务全套\"></a>微服务全套</h2><ul>\n<li>构建一个个功能独立的微服务应用单元，可以使用springboot，可以帮我们快速构建一个应用</li>\n<li>大型分布式网络服务的调用，使用SpringCloud实现分布式；</li>\n<li>在分布式中间，进行流式数据计算、批处理，使用SpringCloud DataFlow实现；</li>\n</ul>\n<h1 id=\"第一个SpringBoot程序\"><a href=\"#第一个SpringBoot程序\" class=\"headerlink\" title=\"第一个SpringBoot程序\"></a>第一个SpringBoot程序</h1><h2 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h2><ol>\n<li><p>到<a href=\"https://start.spring.io/%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE\">https://start.spring.io/生成一个项目</a></p>\n<p><img src=\"/2022/09/07/Day15-SpringBoot-1/image-20220907160228437.png\" alt=\"image-20220907160228437\"></p>\n</li>\n<li><p>完成</p>\n</li>\n</ol>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p><img src=\"/2022/09/07/Day15-SpringBoot-1/image-20220907162358882.png\" alt=\"image-20220907162358882\"></p>\n<ol>\n<li><p>controller目录下创建Controller可以直接运行；</p>\n</li>\n<li><p>Controller文件</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Controller</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//  http://127.0.0.1:8080/hello</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//调用业务，接收前端参数</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello,World.&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行</p>\n<p><img src=\"/2022/09/07/Day15-SpringBoot-1/image-20220907162458168.png\" alt=\"image-20220907162458168\"></p>\n</li>\n</ol>\n<h2 id=\"文件介绍\"><a href=\"#文件介绍\" class=\"headerlink\" title=\"文件介绍\"></a>文件介绍</h2><h3 id=\"目录：src-x2F-java-x2F-com-xx-xx\"><a href=\"#目录：src-x2F-java-x2F-com-xx-xx\" class=\"headerlink\" title=\"目录：src&#x2F;java&#x2F;com.xx.xx\"></a>目录：src&#x2F;java&#x2F;com.xx.xx</h3><p>controller：controller目录</p>\n<p>dao：dao目录</p>\n<p>pojo：pojo目录</p>\n<p>service：service目录</p>\n<p>FirstProjectApplication（这里名字自定义，按照生成的来）：程序入口</p>\n<h3 id=\"程序入口\"><a href=\"#程序入口\" class=\"headerlink\" title=\"程序入口\"></a>程序入口</h3><p>在SpringBoot项目创建时，自动生成的类即为程序的入口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//标注这个类是一个SpringBoot应用</span></span><br><span class=\"line\"><span class=\"meta\">@SpringBootApplication</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SpringBootForthProjectApplication</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//将SpringBoot应用启动</span></span><br><span class=\"line\">        SpringApplication.run(SpringBootForthProjectApplication.class, args);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"resources\"><a href=\"#resources\" class=\"headerlink\" title=\"resources\"></a>resources</h3><p>static：静态资源文件</p>\n<p>templates：模板文件。hole…</p>\n<h3 id=\"pom-xml\"><a href=\"#pom-xml\" class=\"headerlink\" title=\"pom.xml\"></a>pom.xml</h3><h4 id=\"这是一个Maven的配置文件\"><a href=\"#这是一个Maven的配置文件\" class=\"headerlink\" title=\"这是一个Maven的配置文件\"></a>这是一个Maven的配置文件</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=<span class=\"string\">&quot;1.0&quot;</span> encoding=<span class=\"string\">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">project</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">\t<span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">modelVersion</span>&gt;</span>4.0.0<span class=\"tag\">&lt;/<span class=\"name\">modelVersion</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 有一个父项目 --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-parent<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.7.3<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">relativePath</span>/&gt;</span> <span class=\"comment\">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">parent</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.yn<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>FirstProject<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>0.0.1-SNAPSHOT<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>FirstProject<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">description</span>&gt;</span>Demo project for Spring Boot<span class=\"tag\">&lt;/<span class=\"name\">description</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">java.version</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">java.version</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">properties</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--spring-boot-starter所有的springboot依赖的--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- Web依赖： tomcat：dispatcherServlet，xml --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">&lt;!-- 单元测试 --&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-test<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>test<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">dependencies</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">&lt;!-- 打包插件 --&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">project</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>parent项目有一个父项目：spring-boot-starter-parent。继承spring-boot-starter-parent的依赖管理，控制版本和打包等内容；</li>\n<li>groupId、artifactId和version定位项目用；</li>\n<li>dependencies依赖：<ol>\n<li>web依赖：spring-boot-starter-web。用于实现HTTP结构（这个依赖包含了Spring MVC）。</li>\n<li>单元测试：spring-boot-starter-test。用于编写单元测试的依赖包。</li>\n</ol>\n</li>\n<li>打包插件：spring-boot-maven-plugin。配合spring-boot-starter-parent就可以把Spring Boot应用打包成JAR文件来直接运行。</li>\n</ol>\n<h4 id=\"SpringBoot在pom-xml的一些介绍\"><a href=\"#SpringBoot在pom-xml的一些介绍\" class=\"headerlink\" title=\"SpringBoot在pom.xml的一些介绍\"></a>SpringBoot在pom.xml的一些介绍</h4><ul>\n<li><p>SpringBoot的一些依赖在父工程spring-boot-starter-parent中；</p>\n</li>\n<li><p>引入springboot依赖的时候，不需要指定版本，因为spring-boot有指定一些依赖的版本；</p>\n</li>\n</ul>\n<h4 id=\"pom-xml中的starter依赖\"><a href=\"#pom-xml中的starter依赖\" class=\"headerlink\" title=\"pom.xml中的starter依赖\"></a>pom.xml中的starter依赖</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>是SpringBoot的启动场景；</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-web<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>SpringBoot将所有的功能场景，都包装成一个个启动器。（上面是springboot的web启动器）；</p>\n<p>若要使用某些功能，只需要找到响应的启动器就可。</p>\n<p>starter列表：<a href=\"https://docs.spring.io/spring-boot/docs/2.7.3/reference/html/using.html#using.build-systems.starters\">https://docs.spring.io/spring-boot/docs/2.7.3/reference/html/using.html#using.build-systems.starters</a></p>\n<h2 id=\"文件标识\"><a href=\"#文件标识\" class=\"headerlink\" title=\"文件标识\"></a>文件标识</h2><p><img src=\"/2022/09/07/Day15-SpringBoot-1/image-20220907164809528.png\" alt=\"image-20220907164809528\"></p>\n<p>若文件右下角有标识，标识文件已被识别</p>\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><p><img src=\"/2022/09/07/Day15-SpringBoot-1/image-20220907162545116.png\" alt=\"image-20220907162545116\"></p>\n<p>Maven下有个package打包选项。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[INFO] --- spring-boot-maven-plugin:2.7.3:repackage (repackage) @ FirstProject ---</span><br><span class=\"line\">[INFO] Replacing main artifact with repackaged archive</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] BUILD SUCCESS</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\">[INFO] Total time:  10.930 s</span><br><span class=\"line\">[INFO] Finished at: 2022-09-07T16:26:12+08:00</span><br><span class=\"line\">[INFO] ------------------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n<p>生成项目可以使用Java运行。</p>\n<h1 id=\"SpringBoot自动装配\"><a href=\"#SpringBoot自动装配\" class=\"headerlink\" title=\"SpringBoot自动装配\"></a>SpringBoot自动装配</h1><p>SpringBoot内置大量的自动配置类，可以在需要时自动导入需要的自动配置类。</p>\n<h2 id=\"声明自动配置类的配置文件\"><a href=\"#声明自动配置类的配置文件\" class=\"headerlink\" title=\"声明自动配置类的配置文件\"></a>声明自动配置类的配置文件</h2><p>SpringBoot在启动时，会从一种配置文件中读取可以用来装配的类，这种配置文件主要在两种目录中：</p>\n<ol>\n<li>项目目录下的resources&#x2F;META-INF&#x2F;spring.factories；</li>\n<li>另一个是org.springframework.boot.autoconfigure的jar包目录下的spring&#x2F;org.springframework.boot.autoconfigure.AutoConfiguration.imports文件里；</li>\n</ol>\n<blockquote>\n<p>文件示例</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//org.springframework.boot.autoconfigure.AutoConfiguration.imports文件</span><br><span class=\"line\">org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.aop.AopAutoConfiguration</span><br><span class=\"line\">org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//resources/META-INF/spring.factories</span><br><span class=\"line\">org.springframework.boot.autoconfigure.EnableAutoConfiguration=/</span><br><span class=\"line\">com.yn.springbootproject.controller.HelloController</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自动装配原理\"><a href=\"#自动装配原理\" class=\"headerlink\" title=\"自动装配原理\"></a>自动装配原理</h2><p>@SpringBootApplication注解表示这是一个SpringBoot应用。</p>\n<p>被注解的类在启动时，SpringBoot会扫描所有需要的类，使用内置的自动配置类实现一些类的自动装配。</p>\n<p>依据以下顺序在代码中顺藤摸瓜：</p>\n<ul>\n<li><p>@SpringBootApplication</p>\n</li>\n<li><p>@EnableAutoConfiguration &#x2F;&#x2F;开启自动配置</p>\n</li>\n<li><p>@Import(AutoConfigurationImportSelector.class) &#x2F;&#x2F;导入了一个自动配置导入选择器</p>\n</li>\n<li><p>selectImports()&#x2F;&#x2F;选择导入</p>\n</li>\n<li><p>AutoConfigurationEntry getAutoConfigurationEntry()&#x2F;&#x2F;获得自动配置</p>\n</li>\n<li><p>getCandidateConfigurations()&#x2F;&#x2F;获取候选配置</p>\n</li>\n<li><p>loadFactoryNames()&#x2F;&#x2F;加载工厂名字</p>\n</li>\n<li><p>loadSpringFactories()&#x2F;&#x2F;加载spring工厂</p>\n</li>\n<li><p>&#96;&#96;&#96;java<br>result &#x3D; new HashMap&lt;&gt;();<br>try {<br>Enumeration<URL> urls &#x3D; classLoader.getResources(FACTORIES_RESOURCE_LOCATION);&#x2F;&#x2F;获得FACTORIES_RESOURCE_LOCATION目录下的资源文件。<br>while (urls.hasMoreElements()) {&#x2F;&#x2F;遍历资源文件<br>    URL url &#x3D; urls.nextElement();<br>    UrlResource resource &#x3D; new UrlResource(url);<br>    Properties properties &#x3D; PropertiesLoaderUtils.loadProperties(resource);<br>    for (Map.Entry<?, ?> entry : properties.entrySet()) {&#x2F;&#x2F;遍历其中的项<br>        String factoryTypeName &#x3D; ((String) entry.getKey()).trim();<br>        String[] factoryImplementationNames &#x3D;<br>            StringUtils.commaDelimitedListToStringArray((String) entry.getValue());<br>        for (String factoryImplementationName : factoryImplementationNames) {<br>            result.computeIfAbsent(factoryTypeName, key -&gt; new ArrayList&lt;&gt;())<br>                .add(factoryImplementationName.trim());<br>        }<br>    }<br>}</URL></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- hole...</span><br><span class=\"line\"></span><br><span class=\"line\"># application.properties一些简易的配置</span><br><span class=\"line\"></span><br><span class=\"line\">```properties</span><br><span class=\"line\">#更改项目端口号</span><br><span class=\"line\">server.port=8081</span><br><span class=\"line\"># 自定义banner</span><br><span class=\"line\">spring.banner.location=classpath:banner.txt</span><br><span class=\"line\">#修改访问时的路径</span><br><span class=\"line\">server.servlet.context-path=/yn</span><br><span class=\"line\"># 添加前：http://127.0.0.1:8080/</span><br><span class=\"line\"># 添加后：http://127.0.0.1:8080/yn/</span><br><span class=\"line\"></span><br><span class=\"line\"># 修改 mvc页面请求-&gt;Date映射 时，页面请求传入的时候日期解析的方式</span><br><span class=\"line\">spring.mvc.format.date=yyyy-MM-dd</span><br><span class=\"line\"># 如 url: /?d=2022/2/22 是默认方式</span><br><span class=\"line\"># 但大部分前端使用2022-2-22格式 通过这个配置可以修改日期解析的格式</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p><img src=\"/2022/09/07/Day15-SpringBoot-1/image-20220907165425126.png\" alt=\"image-20220907165425126\"></p>\n<p>在resources文件夹下添加banner.txt文件可以直接修改banner。</p>\n<h1 id=\"使用Idea创建SpringBoot项目\"><a href=\"#使用Idea创建SpringBoot项目\" class=\"headerlink\" title=\"使用Idea创建SpringBoot项目\"></a>使用Idea创建SpringBoot项目</h1><p><img src=\"/2022/09/07/Day15-SpringBoot-1/image-20220907163044949.png\" alt=\"image-20220907163044949\"></p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"路\"><a href=\"#路\" class=\"headerlink\" title=\"路\"></a>路</h2><img src=\"/2022/09/07/Day15-SpringBoot-1/SpringBoot路线.png\" alt=\"SpringBoot路线\" style=\"zoom: 67%;\">\n","categories":[],"tags":["SpringBoot"]},{"title":"Day15 红黑树","url":"http://zswh33.github.io/2022/09/07/Day15-Red-Black-Tree/","content":"<h1 id=\"红黑树\"><a href=\"#红黑树\" class=\"headerlink\" title=\"红黑树\"></a>红黑树</h1><p><a href=\"https://www.jianshu.com/p/4cd37000f4e3\">https://www.jianshu.com/p/4cd37000f4e3</a></p>\n<p><a href=\"https://www.bilibili.com/video/BV1Ce4y1Q76H\">https://www.bilibili.com/video/BV1Ce4y1Q76H</a></p>\n<p><img src=\"/2022/09/07/Day15-Red-Black-Tree/image-20220907085241513.png\" alt=\"image-20220907085241513\"></p>\n<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><blockquote>\n<p>有了二叉搜索树，为什么需要平衡二叉树？</p>\n</blockquote>\n<ul>\n<li>二叉搜索树容易变成链表，查找的时间复杂度就会从O(log<sub>2</sub>N)变为O(N)。</li>\n<li>引入平衡二叉树，防止树退化。</li>\n</ul>\n<blockquote>\n<p>有了平衡二叉树，为什么还需要红黑树</p>\n</blockquote>\n<ul>\n<li>平衡二叉树插入删除操作影响效率</li>\n<li>红黑树减少插入&#x2F;删除操作，整体性能优于AVL，也能保证时间复杂度为O(log<sub>2</sub>N)。<ul>\n<li>红黑树插入时的不平衡，不超过两次旋转可以解决</li>\n<li>删除时的不平衡，不超过三次旋转可以解决。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>红黑树是一种接近平衡的二叉树。</p>\n<h2 id=\"特性-x2F-要求\"><a href=\"#特性-x2F-要求\" class=\"headerlink\" title=\"特性&#x2F;要求\"></a>特性&#x2F;要求</h2><ol>\n<li>节点是红色或者黑色；</li>\n<li>根是黑色；</li>\n<li>叶子结点（外部节点，空节点）都是黑色，<strong>并且为空节点</strong>（概念上有空节点，实际无）；</li>\n<li>红色节点的子节点和父节点都是黑色（即，不存在两个连续的红色节点）；</li>\n<li>从任意节点到叶子结点的所有路径都<strong>包含相同数目的黑色节点</strong></li>\n</ol>\n<h2 id=\"红黑树与二三四树\"><a href=\"#红黑树与二三四树\" class=\"headerlink\" title=\"红黑树与二三四树\"></a>红黑树与二三四树</h2><p><strong>红黑树与二三四树等价</strong>；</p>\n<p>红黑树的黑色节点数 &#x3D; 234树的节点数</p>\n<p>在234树中的红黑树，黑色节点必为父节点，红色节点必为子节点；</p>\n<p>（黑色中间，红色两边）</p>\n<p>每一棵红黑树都有对应的唯一一棵二三四树；</p>\n<p>但一个二三四树可能有多个红黑树与之对应。</p>\n<h2 id=\"高度\"><a href=\"#高度\" class=\"headerlink\" title=\"高度\"></a>高度</h2><p>路径长度不会超过<code>2log(n+1)</code>，即<br>$$<br>红黑树高度 \\leq 2log(n+1)<br>$$</p>\n<h2 id=\"效率\"><a href=\"#效率\" class=\"headerlink\" title=\"效率\"></a>效率</h2><p>红黑树的查找、插入和删除操作，时间复杂度都是O(logN)。</p>\n<h2 id=\"红黑树与AVL树比较\"><a href=\"#红黑树与AVL树比较\" class=\"headerlink\" title=\"红黑树与AVL树比较\"></a>红黑树与AVL树比较</h2><ol>\n<li>AVL树时间复杂度优于红黑树；</li>\n<li>红黑树整体性能略优于AVL树。</li>\n</ol>\n<p>hole…</p>\n<h2 id=\"插入操作情况\"><a href=\"#插入操作情况\" class=\"headerlink\" title=\"插入操作情况\"></a>插入操作情况</h2><h3 id=\"插入结点的颜色\"><a href=\"#插入结点的颜色\" class=\"headerlink\" title=\"插入结点的颜色\"></a>插入结点的颜色</h3><ul>\n<li><p>若插入的是<strong>根节点</strong>，则为<strong>黑色</strong>；</p>\n</li>\n<li><p>其他节点<strong>都</strong>为红色。</p>\n<ul>\n<li>如果插入红色节点，出现两个连续的红色节点，只需要旋转和变色进行调整。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p> 为什么？</p>\n</blockquote>\n<p>如果插入的颜色为黑色，则接下来的调整会非常麻烦；</p>\n<p>如果插入的颜色为红色，则<strong>只有一种冲突的情况</strong>，只需要旋转和变色进行调整就可。</p>\n<h3 id=\"黑父\"><a href=\"#黑父\" class=\"headerlink\" title=\"黑父\"></a>黑父</h3><p>无需做任何操作；</p>\n<p><img src=\"/2022/09/07/Day15-Red-Black-Tree/%E9%BB%91%E7%88%B6.svg\" alt=\"黑父\"></p>\n<h3 id=\"红父\"><a href=\"#红父\" class=\"headerlink\" title=\"红父\"></a>红父</h3><p>又分为两种情况：红叔、黑叔</p>\n<h4 id=\"红叔\"><a href=\"#红叔\" class=\"headerlink\" title=\"红叔\"></a>红叔</h4><p><img src=\"/2022/09/07/Day15-Red-Black-Tree/%E7%BA%A2%E5%8F%941.svg\" alt=\"红叔1\"></p>\n<p>若新节点的<strong>父节点和叔节点</strong>都是红色节点，将<strong>父节点和叔节点</strong>改为<strong>黑色</strong>，把<strong>祖节点</strong>改为<strong>红色</strong>，然后递归检查祖节点即可。</p>\n<h4 id=\"黑叔\"><a href=\"#黑叔\" class=\"headerlink\" title=\"黑叔\"></a>黑叔</h4><p>黑叔分为<strong>4种</strong>情况处理；</p>\n<ul>\n<li>父节点是是祖节点的<strong>左</strong>儿子，新节点是父节点的<strong>左</strong>儿子</li>\n<li>父节点是是祖节点的<strong>左</strong>儿子，新节点是父节点的<strong>右</strong>儿子</li>\n<li>父节点是是祖节点的<strong>右</strong>儿子，新节点是父节点的<strong>左</strong>儿子</li>\n<li>父节点是是祖节点的<strong>右</strong>儿子，新节点是父节点的<strong>右</strong>儿子</li>\n</ul>\n<h5 id=\"父左新左\"><a href=\"#父左新左\" class=\"headerlink\" title=\"父左新左\"></a>父左新左</h5><p><img src=\"/2022/09/07/Day15-Red-Black-Tree/%E7%88%B6%E5%B7%A6%E6%96%B0%E5%B7%A6.svg\" alt=\"父左新左\"></p>\n<p>右旋，然后变色，叶子节点为黑色，其他向上交错；然后向上递归变色；</p>\n<h5 id=\"父右新右\"><a href=\"#父右新右\" class=\"headerlink\" title=\"父右新右\"></a>父右新右</h5><p><img src=\"/2022/09/07/Day15-Red-Black-Tree/%E7%88%B6%E5%8F%B3%E6%96%B0%E5%8F%B3.svg\" alt=\"父右新右\"></p>\n<p>左旋，然后变色，叶子节点为黑色，其他向上交错；然后向上递归变色；</p>\n<h5 id=\"父左新右\"><a href=\"#父左新右\" class=\"headerlink\" title=\"父左新右\"></a>父左新右</h5><p><img src=\"/2022/09/07/Day15-Red-Black-Tree/%E7%88%B6%E5%B7%A6%E6%96%B0%E5%8F%B3.svg\" alt=\"父左新右\"></p>\n<p>在父节点左旋，然后在祖节点右旋，最后变色，以叶子节点为黑色为基准，向上递归变色；</p>\n<h5 id=\"父右新左\"><a href=\"#父右新左\" class=\"headerlink\" title=\"父右新左\"></a>父右新左</h5><p><img src=\"/2022/09/07/Day15-Red-Black-Tree/%E7%88%B6%E5%8F%B3%E6%96%B0%E5%B7%A6.svg\" alt=\"父右新左\"></p>\n<p>在父节点右旋，然后在祖节点左旋，最后变色，以叶节点为黑色为基准，向上递归变色；</p>\n<h2 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h2><p>分为两种情况：红色节点删除，黑色节点删除；</p>\n<h3 id=\"思想\"><a href=\"#思想\" class=\"headerlink\" title=\"思想\"></a>思想</h3><p>B树中的删除操作，<strong>对于非叶子节点的删除，都要转换为其前驱&#x2F;后继节点的删除</strong>。</p>\n<p><img src=\"/2022/09/07/Day15-Red-Black-Tree/%E7%BA%A2%E9%BB%91%E6%A0%91%E5%88%A0%E9%99%A4%E6%80%9D%E6%83%B3.svg\" alt=\"红黑树删除思想\"></p>\n<ul>\n<li>这里要删除节点<strong>8</strong>，现将<strong>前驱节点</strong>与<strong>要删除的节点值</strong>进行交换（这里是和6交换）；</li>\n<li>然后删除前驱节点即可。</li>\n</ul>\n<h3 id=\"红色节点删除\"><a href=\"#红色节点删除\" class=\"headerlink\" title=\"红色节点删除\"></a>红色节点删除</h3><p>可以直接删除，不做任何调整；</p>\n<h3 id=\"黑色节点删除\"><a href=\"#黑色节点删除\" class=\"headerlink\" title=\"黑色节点删除\"></a>黑色节点删除</h3><p><strong>麻烦</strong>。必须进行调整才能满足红黑树的性质；<del>即：从任意节点到叶子节点的所有路径都包含相同的黑色节点。</del></p>\n<h4 id=\"黑色节点的三种形式\"><a href=\"#黑色节点的三种形式\" class=\"headerlink\" title=\"黑色节点的三种形式\"></a>黑色节点的三种形式</h4><ol>\n<li>有2个红色子节点的黑色节点；（即：234树的<strong>4节点</strong>）<ul>\n<li>不做考虑，对这个节点的删除会转换为对其子节点的删除。</li>\n</ul>\n</li>\n<li>有1个红色子节点的黑色节点；（即：234树的<strong>3节点</strong>）</li>\n<li>黑色叶子节点。（即：234树的<strong>2节点</strong>）</li>\n</ol>\n<h4 id=\"有1个红色子节点的黑色节点\"><a href=\"#有1个红色子节点的黑色节点\" class=\"headerlink\" title=\"有1个红色子节点的黑色节点\"></a>有1个红色子节点的黑色节点</h4><p>用唯一的红色子节点来替代被删除的节点，然后将替代的节点<strong>染为黑色</strong>。</p>\n<p><img src=\"/2022/09/07/Day15-Red-Black-Tree/%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AA%E5%8F%AA%E6%9C%89%E4%B8%80%E4%B8%AA%E7%BA%A2%E8%89%B2%E5%AD%90%E8%8A%82%E7%82%B9%E7%9A%84%E9%BB%91%E8%89%B2%E8%8A%82%E7%82%B9.svg\" alt=\"删除一个只有一个红色子节点的黑色节点\"></p>\n<p>&#x3D;&#x3D;步骤：替代，删除，将替代节点染黑&#x3D;&#x3D;</p>\n<h4 id=\"删除没有子节点的黑色叶子节点\"><a href=\"#删除没有子节点的黑色叶子节点\" class=\"headerlink\" title=\"删除没有子节点的黑色叶子节点\"></a>删除没有子节点的黑色叶子节点</h4><p>删除黑色叶子节点，会造成下溢的情况；</p>\n<p>这里再分为三种情况：</p>\n<ul>\n<li>删除节点为根节点；<ul>\n<li>此时整个红黑树只有这一个节点，可以直接删除。</li>\n</ul>\n</li>\n<li>删除节点的兄弟节点为黑色；</li>\n<li>删除节点的兄弟节点为红色，这里要转变兄弟节点为黑色进行处理</li>\n</ul>\n<h5 id=\"删除节点的兄弟节点为黑色几种情况\"><a href=\"#删除节点的兄弟节点为黑色几种情况\" class=\"headerlink\" title=\"删除节点的兄弟节点为黑色几种情况\"></a>删除节点的兄弟节点为黑色几种情况</h5><p>分为以下几种情况：</p>\n<ul>\n<li>兄弟节点带有红色子节点（借用兄弟子节点修复）<ul>\n<li>兄弟节点带有<strong>左</strong>红色子节点</li>\n<li>兄弟节点带有<strong>右</strong>红色子节点</li>\n<li>兄弟节点带有<strong>两个</strong>红色子节点</li>\n</ul>\n</li>\n<li>兄弟节点没有红色子节点（父节点向下合并）</li>\n</ul>\n<h5 id=\"兄弟节点带有左红色子节点\"><a href=\"#兄弟节点带有左红色子节点\" class=\"headerlink\" title=\"兄弟节点带有左红色子节点\"></a>兄弟节点带有左红色子节点</h5><p><img src=\"/2022/09/07/Day15-Red-Black-Tree/%E5%88%A0%E9%99%A4%E9%BB%91%E8%89%B2%E8%8A%82%E7%82%B9%EF%BC%8C%E5%85%B6%E5%85%84%E5%BC%9F%E6%9C%89%E4%B8%80%E4%B8%AA%E7%BA%A2%E8%89%B2%E5%AD%90%E8%8A%82%E7%82%B9.svg\" alt=\"删除黑色节点，其兄弟有一个红色子节点\"></p>\n<h5 id=\"兄弟节点带有右红色子节点\"><a href=\"#兄弟节点带有右红色子节点\" class=\"headerlink\" title=\"兄弟节点带有右红色子节点\"></a>兄弟节点带有右红色子节点</h5><p><img src=\"/2022/09/07/Day15-Red-Black-Tree/%E5%88%A0%E9%99%A4%E9%BB%91%E8%89%B2%E8%8A%82%E7%82%B9%EF%BC%8C%E5%85%B6%E5%85%84%E5%BC%9F%E6%9C%89%E4%B8%80%E4%B8%AA%E5%8F%B3%E7%BA%A2%E8%89%B2%E5%AD%90%E8%8A%82%E7%82%B9.svg\" alt=\"删除黑色节点，其兄弟有一个右红色子节点\"></p>\n<h5 id=\"兄弟节点有两个红色子节点\"><a href=\"#兄弟节点有两个红色子节点\" class=\"headerlink\" title=\"兄弟节点有两个红色子节点\"></a>兄弟节点有两个红色子节点</h5><p><img src=\"/2022/09/07/Day15-Red-Black-Tree/%E5%88%A0%E9%99%A4%E9%BB%91%E8%89%B2%E8%8A%82%E7%82%B9%EF%BC%8C%E5%85%B6%E5%85%84%E5%BC%9F%E6%9C%89%E4%B8%A4%E4%B8%AA%E7%BA%A2%E8%89%B2%E5%AD%90%E8%8A%82%E7%82%B9.svg\" alt=\"删除黑色节点，其兄弟有两个红色子节点\"></p>\n<h5 id=\"兄弟节点没有红色子节点\"><a href=\"#兄弟节点没有红色子节点\" class=\"headerlink\" title=\"兄弟节点没有红色子节点\"></a>兄弟节点没有红色子节点</h5><p>这里分两种情况：</p>\n<ul>\n<li>父节点为红色节点</li>\n<li>父节点为黑色节点</li>\n</ul>\n<blockquote>\n<p>父节点为红色节点</p>\n</blockquote>\n<p><img src=\"/2022/09/07/Day15-Red-Black-Tree/%E5%88%A0%E9%99%A4%E9%BB%91%E8%89%B2%E8%8A%82%E7%82%B9%EF%BC%8C%E9%BB%91%E8%89%B2%E8%8A%82%E7%82%B9%E6%B2%A1%E6%9C%89%E7%BA%A2%E8%89%B2%E5%AD%90%E8%8A%82%E7%82%B9.svg\" alt=\"删除黑色节点，黑色节点没有红色子节点\"></p>\n<p>作为B树，没有任何变化；</p>\n<p>作为红黑树，需要进行一次变色；</p>\n<blockquote>\n<p>父节点为黑色节点</p>\n</blockquote>\n<p><img src=\"/2022/09/07/Day15-Red-Black-Tree/%E5%88%A0%E9%99%A4%E9%BB%91%E8%89%B2%E8%8A%82%E7%82%B9%EF%BC%8C%E5%85%B6%E5%85%84%E5%BC%9F%E6%B2%A1%E6%9C%89%E7%BA%A2%E8%89%B2%E5%AD%90%E8%8A%82%E7%82%B9.svg\" alt=\"删除黑色节点，其兄弟没有红色子节点\"></p>\n<p>兄弟节点染为红色，父节点染为黑色；</p>\n<p>如果父节点本就是黑色，就把父节点当做已被删除的节点处理，向上递归处理；</p>\n<p>例子，&#x3D;&#x3D;这里没能成功理解，后续回来&#x3D;&#x3D;</p>\n<p><img src=\"/2022/09/07/Day15-Red-Black-Tree/%E5%88%A0%E9%99%A4%E9%BB%91%E8%89%B2%E8%8A%82%E7%82%B9%EF%BC%8C%E5%85%B6%E5%85%84%E5%BC%9F%E6%B2%A1%E6%9C%89%E7%BA%A2%E8%89%B2%E5%AD%90%E8%8A%82%E7%82%B92.svg\" alt=\"删除黑色节点，其兄弟没有红色子节点2\"></p>\n<h5 id=\"兄弟节点为红色\"><a href=\"#兄弟节点为红色\" class=\"headerlink\" title=\"兄弟节点为红色\"></a>兄弟节点为红色</h5><p>这里要转变为黑色处理。</p>\n<p>处理：<strong>父节点右旋，兄弟节点染为黑色，父节点染为红色，然后以兄弟节点为黑色进行修复</strong>；</p>\n<p><img src=\"/2022/09/07/Day15-Red-Black-Tree/%E5%88%A0%E9%99%A4%E9%BB%91%E8%89%B2%E8%8A%82%E7%82%B9%EF%BC%8C%E5%85%84%E5%BC%9F%E8%8A%82%E7%82%B9%E4%B8%BA%E7%BA%A2%E8%89%B2.svg\" alt=\"删除黑色节点，兄弟节点为红色\"></p>\n","categories":[],"tags":["DataStructure"]},{"title":"Day14 JVM 2 GC 垃圾回收机制","url":"http://zswh33.github.io/2022/09/06/Day14-JVM-2/","content":"<h1 id=\"GC：垃圾回收机制\"><a href=\"#GC：垃圾回收机制\" class=\"headerlink\" title=\"GC：垃圾回收机制\"></a>GC：垃圾回收机制</h1><p>GC作用区：Heap 和 方法区；</p>\n<p>JVM在进行GC时，大部分时候，回收的都是新生代。</p>\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><ul>\n<li>轻GC（GC），大部分时候清理新生代，偶尔幸存区</li>\n<li>重GC（全局GC），</li>\n</ul>\n<h2 id=\"如何判断哪些对象需要被回收\"><a href=\"#如何判断哪些对象需要被回收\" class=\"headerlink\" title=\"如何判断哪些对象需要被回收\"></a>如何判断哪些对象需要被回收</h2><p>Java 垃圾回收判断哪些对象需要被回收有两种方法：<strong>引用计数法</strong>和<strong>可达性分析算法</strong>。</p>\n<h2 id=\"可达性分析算法\"><a href=\"#可达性分析算法\" class=\"headerlink\" title=\"可达性分析算法\"></a>可达性分析算法</h2><p>通过一系列称为“<strong>GC Roots</strong>”的对象作为起始点，从这些节点开始向下搜索，搜索走过的路径称为<strong>引用链（Reference Chain）</strong>，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。</p>\n<h3 id=\"GC-Roots\"><a href=\"#GC-Roots\" class=\"headerlink\" title=\"GC Roots\"></a>GC Roots</h3><p>GC Roots，tracking GC的根集合，是<strong>一组必须活跃的引用</strong>。</p>\n<p>可以作为GC Roots的对象包括下面几种：</p>\n<ol>\n<li>在<strong>虚拟机栈中引用的对象</strong>，譬如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等；</li>\n<li>在<strong>方法区中类静态属性引用的对象</strong>，譬如Java类的引用类型静态变量；</li>\n<li>在<strong>方法区中常量引用的对象</strong>，譬如字符串常量池里的引用；</li>\n<li><strong>本地方法栈中JNI（Native方法）引用的对象</strong>；</li>\n<li><strong>Java虚拟机内部的引用</strong>，如基本数据类型对应的CLass对象，一些常驻的异常对象（比如NullPointException，OutOfMemoryError）等，还有系统类加载器；</li>\n<li><strong>所有被同步锁（synchronized关键字）持有</strong>的对象；</li>\n<li><strong>反映Java虚拟机内部情况的JMXBean、JVMTI中注册的回调、本地代码缓存</strong>等；</li>\n<li>根据用户所选用的垃圾收集器以及当前回收的内存区域不同，“临时性”地加入的其他对象。</li>\n</ol>\n<h3 id=\"Tracing-GC\"><a href=\"#Tracing-GC\" class=\"headerlink\" title=\"Tracing GC\"></a>Tracing GC</h3><blockquote>\n<p>根本思路</p>\n</blockquote>\n<p>给定一个集合的引用作为根出发，通过引用关系遍历对象图，能被遍历到的（可达到的）对象就判定为存活，其余对象（没有被遍历到的）就自然判定为死亡。</p>\n<p><strong>注意：</strong>tracing GC的本质是通过找出所有活对象来吧其余空间认定为“无用”，而不是找出所有死掉的对象并回收他们占用的空间。</p>\n<blockquote>\n<p>GC Roots引用例子</p>\n</blockquote>\n<p><img src=\"/2022/09/06/Day14-JVM-2/GCRoots%E5%BC%95%E7%94%A8%E5%9B%BE%E8%A7%A3.svg\" alt=\"GCRoots引用图解\"></p>\n<p>在上图中，reference1、reference2、reference3都是GC Roots；</p>\n<p>其中：</p>\n<ul>\n<li>reference1 -&gt; 对象实例1</li>\n<li>reference2 -&gt; 对象实例2</li>\n<li>reference3 -&gt; 对象实例4 -&gt; 对象实例6</li>\n</ul>\n<p>可以得出对象实例1、2、4、6都具有GC Roots可达性、也就是存活对象，不会被GC回收的对象；</p>\n<p>而对于3、5是GC Roots不可达对象，是需要被GC回收的对象。</p>\n<blockquote>\n<p>不可达的对象处理</p>\n</blockquote>\n<p>不可达的对象将暂时处于“缓刑”阶段，要真正宣告一个对象死亡，至少要经历两次标记过程：</p>\n<ol>\n<li><p>当对象变成GC Roots不可达时，GC会判断该对象是否有重写finalize方法，若没有，则直接回收，若有，进入第二步</p>\n</li>\n<li><p>若对象执行过finalize方法，则进行回收；若对象未执行过finalize方法，将其放入F-Queue队列，虚拟机会稍后建立一个低优先级线程Finalizer去执行该队列中对象的finalize方法，执行finalize方法结束后，GC会再次判断该对象是否科大，若不可达，则进行回收，若可达，则对象列为存活对象。</p>\n<p>![未被GC Roots引用的对象](Day14-JVM-2&#x2F;未被GC Roots引用的对象.svg)</p>\n<p>这里的执行表示虚拟机会执行该方法，但不承诺等待它运行结束。</p>\n</li>\n</ol>\n<h2 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h2><h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><p>标记清除法，标记整理，复制算法，引用计数器。</p>\n<h4 id=\"引用计数法\"><a href=\"#引用计数法\" class=\"headerlink\" title=\"引用计数法\"></a>引用计数法</h4><p><img src=\"/2022/09/06/Day14-JVM-2/%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0%E6%B3%95.svg\" alt=\"引用计数法\"></p>\n<h4 id=\"复制算法\"><a href=\"#复制算法\" class=\"headerlink\" title=\"复制算法\"></a>复制算法</h4><p><em>复制 + 清除垃圾</em></p>\n<p>复制算法主要体现在新生区的幸存区。</p>\n<blockquote>\n<p>过程</p>\n</blockquote>\n<p>为表明算法过程，先将幸存区分成两个区：A区和B区</p>\n<ol>\n<li>新生对象会被分配到A区的<strong>未使用内存</strong>中，当A区内存满了，就把A区存活对象复制到B区；</li>\n<li>然后清理A区所有对象；</li>\n<li>新生对象会被分配到B区未使用的内存中，当B区满了，就把B区存活对象复制到A区；</li>\n<li>清理B区所有对象；</li>\n<li>按照上面的过程循环</li>\n</ol>\n<p>在Java里，一般将空的内存称为to区，当前正在使用的内存称为from区。（第二步结束时候，A为to区，B为from区；在第4步结束时候，B成为to区，A为from区）</p>\n<blockquote>\n<p>特点</p>\n</blockquote>\n<ul>\n<li>好处：没有内存碎片</li>\n<li>坏处：浪费了内存空间（to永远为空）</li>\n</ul>\n<p>复制算法最佳使用场景：对象存活度较低的时候。</p>\n<h4 id=\"标记清除算法\"><a href=\"#标记清除算法\" class=\"headerlink\" title=\"标记清除算法\"></a>标记清除算法</h4><p>每经历一次GC，会进行可达性分析，标记GC Roots可达的对象，清理没有被标记的对象。</p>\n<blockquote>\n<p>特点</p>\n</blockquote>\n<p>优点：不需要额外的空间。</p>\n<p>缺点：两次扫描，严重浪费时间，会产生内存碎片。</p>\n<p><img src=\"/2022/09/06/Day14-JVM-2/%E6%A0%87%E8%AE%B0%E7%AE%97%E6%B3%95.svg\" alt=\"标记算法\"></p>\n<h4 id=\"标记压缩算法\"><a href=\"#标记压缩算法\" class=\"headerlink\" title=\"标记压缩算法\"></a>标记压缩算法</h4><p>标记清除算法的优化版本，每经历几次GC，会进行一次扫描，然后将对象移动到内存的一端，防止内存碎片产生。</p>\n<h2 id=\"GC总结\"><a href=\"#GC总结\" class=\"headerlink\" title=\"GC总结\"></a>GC总结</h2><p>内存效率最高（时间复杂度）：复制算法 &gt; 标记清除算法 &gt; 标记压缩算法 </p>\n<p>内存整齐度：复制算法 &gt; 标记压缩算法 &#x3D; 标记清除算法</p>\n<p>内存利用率：标记压缩算法 &#x3D; 标记清除算法 &gt; 复制算法</p>\n<p>没有最好的算法，只有最合适的算法。</p>\n<p>GC：分代收集算法</p>\n<blockquote>\n<p>结论</p>\n</blockquote>\n<p>年轻代：存活率低 —&gt;复制算法</p>\n<p>老年代：区域大，存活率高 —&gt; 标记清除（内存碎片不是太多） + 标记压缩 混合实现</p>\n<blockquote>\n<p>书籍</p>\n</blockquote>\n<p>《深入理解JVM》</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"从文章中删除的内容\"><a href=\"#从文章中删除的内容\" class=\"headerlink\" title=\"从文章中删除的内容\"></a>从文章中删除的内容</h2><blockquote>\n<p>对象的标记</p>\n</blockquote>\n<p>对象由两种状态，涉及到两类状态空间：</p>\n<ul>\n<li>一个是<strong>终结动态空间</strong>F &#x3D; {unfinalized，finalizable，finalized}</li>\n<li>一个是<strong>可达状态空间</strong>R &#x3D; {reachable，finalizer-reachable，unreachable}。</li>\n</ul>\n<p>各状态含义如下：</p>\n<ul>\n<li><p>unfinalized：GC未准备执行其finalize方法，新建对象会先进入此状态；</p>\n</li>\n<li><p>finalizable：表示可以执行finalizable方法，GC已检测到对象不可达；</p>\n</li>\n<li><p>finalized：表示GC已对对象执行过finalize方法；</p>\n</li>\n<li><p>reachable：表示GC Roots引用可达；</p>\n</li>\n<li><p>finalizer-reachable（f-reachable）：表示不是reachable，但通过某个finalizable对象可达；</p>\n</li>\n<li><p>unreachable：对象不可通过上面两种途经可达；</p>\n</li>\n</ul>\n<p>执行过程：</p>\n<ol>\n<li>新建对象首先处于{reachable，unfinalized}状态；</li>\n<li>若引用关系消失，从reachable变为f-reachable或unreachable状态；</li>\n<li>若JVM….Delete</li>\n</ol>\n","categories":[],"tags":["Java"]},{"title":"Day12 JVM 1 JVM体系结构 类加载器 沙箱安全机制 Native 栈 堆 JProfiler","url":"http://zswh33.github.io/2022/09/04/Day12-JVM-1/","content":"<h1 id=\"JVM体系结构\"><a href=\"#JVM体系结构\" class=\"headerlink\" title=\"JVM体系结构\"></a>JVM体系结构</h1><blockquote>\n<p>JVM完整架构图</p>\n</blockquote>\n<img src=\"/2022/09/04/Day12-JVM-1/JVM架构图.svg\" alt=\"JVM体系结构总图\">\n\n<blockquote>\n<p>JVM简图</p>\n</blockquote>\n<img src=\"/2022/09/04/Day12-JVM-1/image-20220904164709847.png\" alt=\"JVM体系结构简图\" style=\"zoom:80%;\">\n\n<p>Java程序执行过程：java文件编编译 —&gt; class字节码文件  —&gt; 类加载器 —&gt; 运行时数据区；</p>\n<p>其中：</p>\n<ul>\n<li><strong>Java栈、本地方法栈和程序计数器</strong>不能进行垃圾回收；</li>\n<li><strong>JVM调优</strong>一般指的是调优<strong>方法区</strong>和<strong>堆</strong></li>\n</ul>\n<h1 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h1><p><img src=\"/2022/09/04/Day12-JVM-1/Class%E5%9C%A8JVM.svg\" alt=\"Class在JVM\"></p>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><ol>\n<li>虚拟机自带的加载器</li>\n<li>启动类（根）加载器</li>\n<li>扩展类加载器</li>\n<li>应用程序加载器</li>\n<li>用户自定义类加载器</li>\n</ol>\n<blockquote>\n<p>类加载器加载的文件</p>\n</blockquote>\n<p>Bootstrap ClassLoader (启动类加载器) ：主要负责加载Java核心类库，目录：&#x2F;lib下的rt.jar、resources.jar、charsets.jar和class等；</p>\n<p>Extention ClassLoader(扩展类加载器)：主要负责加载目录&#x2F;jre&#x2F;lib&#x2F;ext目录下的jar包文件和class文件；</p>\n<p>Appliation ClassLoader（应用程序类加载器）：主要负责加载当前应用的classpath下的所有类；</p>\n<p>User ClassLoader（用户自定义类加载器）：科技在指定路径的class文件。</p>\n<h2 id=\"自定义一个类，查看其加载器\"><a href=\"#自定义一个类，查看其加载器\" class=\"headerlink\" title=\"自定义一个类，查看其加载器\"></a>自定义一个类，查看其加载器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Student&#123;&#125;&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Student</span> <span class=\"variable\">student</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>();</span><br><span class=\"line\">        System.out.println(student.getClass().getClassLoader());</span><br><span class=\"line\">        System.out.println(student);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class=\"line\">Student&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>自定义类的类加载器为<code>AppClassLoader</code>应用程序类加载器。</p>\n<h2 id=\"通过getParent-，探索类加载器\"><a href=\"#通过getParent-，探索类加载器\" class=\"headerlink\" title=\"通过getParent()，探索类加载器\"></a>通过<code>getParent()</code>，探索类加载器</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ClassLoader</span>学习 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Dog</span> <span class=\"variable\">dog1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\">        <span class=\"type\">Dog</span> <span class=\"variable\">dog2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(dog1.hashCode());</span><br><span class=\"line\">        System.out.println(dog2.hashCode());</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 460141958</span></span><br><span class=\"line\"><span class=\"comment\">         * 1163157884</span></span><br><span class=\"line\"><span class=\"comment\">         * 表明 dog1和dog2不是同一个对象</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Dog</span>&gt; aClass = dog1.getClass();</span><br><span class=\"line\">        Class&lt;? <span class=\"keyword\">extends</span> <span class=\"title class_\">Dog</span>&gt; aClass2 = dog2.getClass();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(aClass.hashCode());</span><br><span class=\"line\">        System.out.println(aClass2.hashCode());</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 1956725890</span></span><br><span class=\"line\"><span class=\"comment\">         * 1956725890</span></span><br><span class=\"line\"><span class=\"comment\">         * 表明aClass和aClass2是同一个对象</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> dog1.getClass().getClassLoader();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(classLoader);<span class=\"comment\">//AppClassLoader  应用程序类加载器  java.lang.ClassLoader</span></span><br><span class=\"line\">        System.out.println(classLoader.getParent());<span class=\"comment\">//ExtClassLoader  扩展类加载器  \\jre\\lib\\ext</span></span><br><span class=\"line\">        System.out.println(classLoader.getParent().getParent());<span class=\"comment\">//null  rt.jar</span></span><br><span class=\"line\">        <span class=\"comment\">//null   1.  不存在    2. java程序获取不到</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"双亲委派机制\"><a href=\"#双亲委派机制\" class=\"headerlink\" title=\"双亲委派机制\"></a>双亲委派机制</h2><blockquote>\n<p>介绍</p>\n</blockquote>\n<p>当一个类加载器收到了类加载的请求，它不会直接去加载指定的类， 而是把这个请求委托给自己的父加载器去加载。只有父加载器无法加载这个类的时候，才会由当前这个加载器来负责类的加载。如果都不能加载，就会触发<code>findclass</code>，抛出异常<code>classNotFoundException</code>。</p>\n<ol>\n<li>类加载器收到类加载请求；</li>\n<li>将请求委托给父类加载器去完成；</li>\n<li>启动加载器检查是否能够加载当前这个类，能加载则加载，使用当前的加载器；若不能，则通知子加载器去加载这个类；</li>\n<li>若都不能加载，则抛出异常<code>classNotFoundException</code>。</li>\n</ol>\n<p><img src=\"/2022/09/04/Day12-JVM-1/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F.svg\" alt=\"双亲委派机制_类加载器执行顺序\"></p>\n<blockquote>\n<p>存在的意义</p>\n</blockquote>\n<ol>\n<li>通过委派的方式，可以避免类的重复加载，当父加载器已经加载过某个类时，子加载器就不会再重新加载这个类；</li>\n<li>通过双亲委派的方式，保证了安全性。<code>Bootstrap ClassLoader</code>在加载的时候，只会加载JAVA_HOME中jar包里面的类,如<code>java.lang.Integer</code>，那么这个类是不会被随意替换的，除非有人故意破坏JDK。就可以避免有自人定义一个有破坏功能的<code>java.lang.Integer</code>类被加载。这样可以有效方式核心Java API被篡改。</li>\n</ol>\n<blockquote>\n<p>尝试定义一个String类，并运行使用。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">String</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 错误: 在类 java.lang.String 中找不到 main 方法, 请将 main 方法定义为:</span></span><br><span class=\"line\"><span class=\"comment\">     *    public static void main(String[] args)</span></span><br><span class=\"line\"><span class=\"comment\">     * 否则 JavaFX 应用程序类必须扩展javafx.application.Application</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当一个类加载器收到了类加载的请求，它不会直接去加载指定的类， 而是把这个请求委托给自己的父加载器去加载。</span></span><br><span class=\"line\"><span class=\"comment\">     * 只有父加载器无法加载这个类的时候，才会由当前这个加载器来负责类的加载。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"comment\">//双亲委派机制 安全</span></span><br><span class=\"line\">    <span class=\"comment\">//1. Application -&gt; Extention -&gt; Bootstrap</span></span><br><span class=\"line\">    <span class=\"comment\">//执行过程中，依据上面的顺序依次寻找String的类，优先执行BOOT，然后Exc，最后App。</span></span><br><span class=\"line\">    <span class=\"comment\">//由于String在BOOT中找到String的类，所以运行BOOT中的String类；</span></span><br><span class=\"line\">    <span class=\"comment\">//而BOOT中的String类没有main方法，所以出现错误。</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">get</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>();</span><br><span class=\"line\">        s.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">错误: 在类 java.lang.String 中找不到 main 方法, 请将 main 方法定义为:</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span></span><br><span class=\"line\">否则 JavaFX 应用程序类必须扩展javafx.application.Application</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code <span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><code>Application</code> -&gt; <code>Extention</code> -&gt; <code>Bootstrap</code></p>\n<p>执行过程中，依据上面的顺序依次寻找String的类，优先执行Bootstrap，然后<code>Extention</code>，最后Application。<br>由于String在BOOT中找到String的类，所以运行BOOT中的String类；<br>而BOOT中的String类没有main方法，所以出现错误。</p>\n<h1 id=\"沙箱安全机制\"><a href=\"#沙箱安全机制\" class=\"headerlink\" title=\"沙箱安全机制\"></a>沙箱安全机制</h1><p>Java安全模型的核心是<strong>Java沙箱</strong>（sandbox）。</p>\n<blockquote>\n<p>介绍</p>\n</blockquote>\n<p>沙箱是一个限制程序运行的环境，沙箱机制就是将Java代码限定在虚拟机（JVM）特定的运行范围中，并且严格限制代码对本地系统资源的访问，通过这样的错误来保证代码的有效隔离，防止对本地系统造成破坏。</p>\n<p>Java沙箱<strong>主要限制系统资源访问</strong>。</p>\n<blockquote>\n<p>历史</p>\n</blockquote>\n<p>在Java中，执行程序分为<strong>本地代码</strong>和<strong>远程代码</strong>两种。</p>\n<p>本地代码默认视为<strong>可信任的</strong>，而远程代码被看做是<strong>不受信任的</strong>。</p>\n<ul>\n<li>对于<strong>受信任的本地代码</strong>，可以访问一切本地资源；</li>\n<li>对于<strong>非授信的远程代码</strong>在早期的Java实现中，安全依赖于<strong>沙箱</strong>（SandBox机制）。</li>\n</ul>\n<p><strong>Java1.0 安全模型</strong></p>\n<p><img src=\"/2022/09/04/Day12-JVM-1/JDK1.0%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B.svg\" alt=\"JDK1.0安全模型\"></p>\n<p><strong>Java 1.1 安全模型</strong></p>\n<p><img src=\"/2022/09/04/Day12-JVM-1/JDK1.1%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B.svg\" alt=\"JDK1.1安全模型\"></p>\n<p><strong>Java1.6安全模型 （目前最新的安全模型）</strong></p>\n<p><img src=\"/2022/09/04/Day12-JVM-1/Java1.6%E5%AE%89%E5%85%A8%E6%A8%A1%E5%9E%8B.svg\" alt=\"Java1.6安全模型\"></p>\n<p>在当前最新的安全机制实现，引入了域（Domain）的概念，虚拟机会把所有代码加载到不同的系统域和应用域；</p>\n<p>系统域部分专门负责与关键资源进行交互，各个应用域部分则通过系统域的部分代理来对各种需要的资源进行访问。</p>\n<p>虚拟机中不同的受保护域（Protected Domain），对应不一样的权限（Permission）。存在于不同域中的类文件就具有了当前域的全部权限。</p>\n<blockquote>\n<p>组成沙箱的基本组件</p>\n</blockquote>\n<ul>\n<li><strong>字节码校验器</strong>（bytecode verifier）：确保java类文件遵循java语言规范。但并不是所有的类文件都会经过字节码校验，比如核心类。</li>\n<li>类装载器（class loader）：<ul>\n<li>防止恶意代码去干涉正常的代码  &#x2F;&#x2F;双亲委派机制</li>\n<li>守护了被信任的类库边界；&#x2F;&#x2F;双亲委派机制</li>\n<li>代码归入保护域，确定了代码可以进行哪些操作。  &#x2F;&#x2F;沙箱安全机制</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>类加载器采用双亲委派模式</p>\n</blockquote>\n<p>通过包区分了访问域，外层恶意的类通过内置代码无法获得权限访问到内置类，破坏代码因此无法生效。</p>\n<ul>\n<li><p><strong>存取控制器（access controller）</strong>：存取控制器可以控制核心API对操作系统的存取权限，而这个控制的策略设定，可以由用户指定。</p>\n</li>\n<li><p>**安全管理器(security manager)**：是核心API和操作系统之间的主要接口，实现权限控制，比存取控制器优先级高。</p>\n</li>\n<li><p><strong>安全软件包（security package）</strong>：java.scurity下的类和扩展包下的类，允许用户为自己的应用增加新的安全特性，包括：</p>\n<ul>\n<li>安全提供者</li>\n<li>消息摘要</li>\n<li>数字签名</li>\n<li>加密</li>\n<li>鉴别</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"Native、方法区\"><a href=\"#Native、方法区\" class=\"headerlink\" title=\"Native、方法区\"></a>Native、方法区</h1><blockquote>\n<p>Thread.start()简述</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * This method is not invoked for the main method thread or &quot;system&quot;</span></span><br><span class=\"line\"><span class=\"comment\">     * group threads created/set up by the VM. Any new functionality added</span></span><br><span class=\"line\"><span class=\"comment\">     * to this method in the future may have to also be added to the VM.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * A zero status value corresponds to state &quot;NEW&quot;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (threadStatus != <span class=\"number\">0</span>)<span class=\"comment\">//线程的状态不是启动状态</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalThreadStateException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Notify the group that this thread is about to be started</span></span><br><span class=\"line\"><span class=\"comment\">     * so that it can be added to the group&#x27;s list of threads</span></span><br><span class=\"line\"><span class=\"comment\">     * and the group&#x27;s unstarted count can be decremented. */</span></span><br><span class=\"line\">    group.add(<span class=\"built_in\">this</span>);<span class=\"comment\">//将线程加入线程组</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">started</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;<span class=\"comment\">//默认线程未启动</span></span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        start0();<span class=\"comment\">//启动线程</span></span><br><span class=\"line\">        started = <span class=\"literal\">true</span>;<span class=\"comment\">//若启动成功，表示没有抛出异常，标志位设true。</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (!started) &#123;</span><br><span class=\"line\">                group.threadStartFailed(<span class=\"built_in\">this</span>);<span class=\"comment\">//向group表示线程执行失败</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Throwable ignore) &#123;</span><br><span class=\"line\">            <span class=\"comment\">/* do nothing. If start0 threw a Throwable then</span></span><br><span class=\"line\"><span class=\"comment\">              it will be passed up the call stack */</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start0</span><span class=\"params\">()</span>;<span class=\"comment\">//启动线程，是一个本地方法</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Native\"><a href=\"#Native\" class=\"headerlink\" title=\"Native\"></a>Native</h2><p>Java里用native修饰的方法，不在java作用范围内，调用的是底层c语言的库。</p>\n<p>使用native修饰的方法，会进入本地方法栈，调用JNI（本地方法接口），JNI调用本地方法库。</p>\n<p><strong>JNI本地方法接口</strong>：，扩展Java的使用，融合不同的编程语言为Java所用。（最初是C、C++）</p>\n<p><strong>Native Method Stack本地方法栈</strong>：登记Native方法。</p>\n<h1 id=\"PC寄存器\"><a href=\"#PC寄存器\" class=\"headerlink\" title=\"PC寄存器\"></a>PC寄存器</h1><p>程序计数器：Program Counter Register</p>\n<p>每个线程都有一个程序计数器，是线程私有的，就是一个指针，指向方法区中的方法字节码（用来存储指向一条指令的地址，也是将要执行的指令代码）。</p>\n<p>当执行引擎读取下一条指令，PC计数器会+1。</p>\n<p>PC寄存器是一个非常小的内存空间。（小到可以忽略不计）</p>\n<h1 id=\"方法区\"><a href=\"#方法区\" class=\"headerlink\" title=\"方法区\"></a>方法区</h1><p><em>Method Area</em></p>\n<p>方法区被所有线程共享。</p>\n<p><img src=\"/2022/09/04/Day12-JVM-1/%E5%8F%98%E9%87%8F%E5%92%8CJVM%E5%AD%98%E5%82%A8.svg\" alt=\"变量和JVM存储\"></p>\n<p>所有定义的方法的信息都保存在该区域。</p>\n<p>属于<strong>共享区间</strong>。</p>\n<blockquote>\n<p>内容</p>\n</blockquote>\n<p><strong>静态变量，常量，类信息（构造方法、接口定义），运行时常量池</strong>都在方法区中；</p>\n<ul>\n<li>static , final , Class ，常量池。</li>\n</ul>\n<p><strong>实例变量存在于堆内存中</strong>，与方法区无关。</p>\n<blockquote>\n<p>JVM中内存分析</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JVM</span>内存分配部分 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Person</span> <span class=\"variable\">person</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"number\">12</span>,<span class=\"string\">&quot;张三&quot;</span>);</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\">    <span class=\"type\">String</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;anonymous&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Person</span><span class=\"params\">(<span class=\"type\">int</span> age, String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2022/09/04/Day12-JVM-1/Java%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1%E5%9C%A8JVM%E4%B8%AD.svg\" alt=\"Java类与对象在JVM中\"></p>\n<h1 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h1><p><em>持续学习：程序 &#x3D; 数据结构 + 算法       饭碗：程序 &#x3D; 框架 + 业务逻辑</em></p>\n<p>栈：先进后出，后进先出。</p>\n<p>队列：先进先出。(FIFO：First Input First Output)</p>\n<h2 id=\"通过main方法理解栈\"><a href=\"#通过main方法理解栈\" class=\"headerlink\" title=\"通过main方法理解栈\"></a>通过main方法理解栈</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UnderstandStackByMainMethod</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;main start&quot;</span>);</span><br><span class=\"line\">        hello();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;main stop&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main start</span><br><span class=\"line\">hello</span><br><span class=\"line\">main stop</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>程序运行：main方法开始，然后其他方法，最后main方法结束。</p>\n<p><img src=\"/2022/09/04/Day12-JVM-1/main%E5%BC%80%E5%A7%8B%EF%BC%8Cmain%E7%BB%93%E6%9D%9F.svg\" alt=\"main开始，main结束\"></p>\n<p>在栈中，main先进入栈，然后是hello()入栈，然后hello()出栈，最后main出栈。</p>\n<h2 id=\"JVM栈\"><a href=\"#JVM栈\" class=\"headerlink\" title=\"JVM栈\"></a>JVM栈</h2><p>栈：主管程序的运行，生命周期和线程同步（线程结束 —&gt; 栈内存释放）。因此，对于栈来说，<strong>不存在垃圾回收问题</strong>。</p>\n<blockquote>\n<p>介绍</p>\n</blockquote>\n<p><img src=\"/2022/09/04/Day12-JVM-1/%E6%A0%88%E6%A0%88%E5%B8%A7%E5%92%8C%E6%96%B9%E6%B3%95.svg\" alt=\"栈、栈帧和方法\"></p>\n<p>JVM栈描述的是每个线程Java方法执行的内存模型：每个方法被执行的时候，<strong>JVM会同步创建一个栈帧</strong>用于存储<strong>局部变量表，操作数栈，动态链接，方法出口</strong>等信息。</p>\n<p>栈是运行时单位，堆是存储的单位，即：</p>\n<p>栈解决的是运行问题，即程序如何执行，或者如何处理数据。</p>\n<p>堆解决的事数据存储问题，即数据怎么放，放哪儿。</p>\n<blockquote>\n<p>特点</p>\n</blockquote>\n<ul>\n<li>访问速度快，仅次于程序计数器</li>\n<li><strong>线程私有</strong></li>\n<li>存在OOM，不存在GC</li>\n</ul>\n<blockquote>\n<p>存放类型</p>\n</blockquote>\n<p>8种数据类型、对象的引用，实例的方法。</p>\n<blockquote>\n<p>其他</p>\n</blockquote>\n<ul>\n<li><p>Java虚拟机栈是<strong>线程私有</strong>的，<strong>生命周期与线程相同</strong>。（随线程而生，随线程而灭。）</p>\n</li>\n<li><p>如果线程请求的栈深度大于虚拟机所允许的深度，就会抛出StackOverflowError异常；</p>\n</li>\n<li><p>若虚拟机栈可以动态扩展，如果扩展时无法申请到足够的内存，就会抛出OutOfMemoryError异常。</p>\n<p>（当前大部分JVM都可以动态扩展，只不过JVM规范也允许固定长度的虚拟机栈）</p>\n</li>\n<li><p>Java虚拟机栈描述的是<strong>Java方法执行的内存模型</strong>。</p>\n</li>\n</ul>\n<h1 id=\"堆\"><a href=\"#堆\" class=\"headerlink\" title=\"堆\"></a>堆</h1><p>Heap，一个JVM只有一个堆内存，堆内存的大小可以调节。</p>\n<h2 id=\"堆里面放什么\"><a href=\"#堆里面放什么\" class=\"headerlink\" title=\"堆里面放什么\"></a>堆里面放什么</h2><p>类，方法，常量，变量，保存引用类型的指向类型（真实对象）。</p>\n<h2 id=\"分三个区域\"><a href=\"#分三个区域\" class=\"headerlink\" title=\"分三个区域\"></a>分三个区域</h2><p>Java 7及之前堆内存逻辑上分为3个部分：新生区 + 养老区 + 永久区</p>\n<p>Java 8及之后堆内存逻辑上分为3个部分：新生区 + 养老区 + 元空间</p>\n<ul>\n<li>新生区 Young Generation Space   Young&#x2F;New<ul>\n<li>Eden区  伊甸区</li>\n<li>Survivor区  幸存区</li>\n</ul>\n</li>\n<li>Tenure generation Space 养老区 Old&#x2F;Tenure</li>\n<li>Permanent Space 永久区 Perm   </li>\n<li>Meta Space 元空间 Meta</li>\n</ul>\n<p><img src=\"/2022/09/04/Day12-JVM-1/image-20220905184426273.png\" alt=\"JVM堆内存在逻辑上分为\"></p>\n<p><img src=\"/2022/09/04/Day12-JVM-1/JVM%E5%A0%86%E5%88%86%E5%8C%BA.svg\" alt=\"JVM堆分区\"></p>\n<p>GC垃圾回收主要在伊甸园区和老年区。</p>\n<p>在JDK8之后，永久存储区改为<strong>元空间</strong>。</p>\n<p>若内存满了，会触发OOM：java.lang.OutOfMemoryError: java heap space。</p>\n<p>新生区的内存比例： Eden : from : to &#x3D;  8 : 1 : 1 </p>\n<h3 id=\"新生区\"><a href=\"#新生区\" class=\"headerlink\" title=\"新生区\"></a>新生区</h3><h4 id=\"Eden\"><a href=\"#Eden\" class=\"headerlink\" title=\"Eden\"></a>Eden</h4><p>新创建的对象会放在Eden区，每经历一次GC，位于Eden区存活的对象会被移到幸存区的from区。</p>\n<h4 id=\"幸存区\"><a href=\"#幸存区\" class=\"headerlink\" title=\"幸存区\"></a>幸存区</h4><ul>\n<li>幸存区分为from和to两部分，两部分会互相交换；</li>\n<li>分辨from分区和to分区：<strong>一般情况下，空的为to分区。</strong></li>\n<li>每次GC，都会把Eden中没有被清理的对象移到幸存区中。</li>\n<li>一旦Eden区被GC后，一部分被清理，没有被清理的移到幸存区。</li>\n</ul>\n<blockquote>\n<p>计算过程</p>\n</blockquote>\n<ul>\n<li><p>每个对象都被定义有<strong>寿命</strong>；</p>\n</li>\n<li><p>当寿命达到指定值，就会被移入老年代；</p>\n</li>\n</ul>\n<h3 id=\"永久区\"><a href=\"#永久区\" class=\"headerlink\" title=\"永久区\"></a>永久区</h3><p>这个区域常驻内存，用来存放JDK自身携带的Class对象。Interface元数据，存储的是Java运行时的一些环境。</p>\n<p>这个区域不存在垃圾回收关闭VM虚拟机会释放这个区域的内存。</p>\n<blockquote>\n<p>永久区满的情况</p>\n</blockquote>\n<ul>\n<li>一个启动类，加载了大量的第三方jar包；</li>\n<li>Tomcat部署了太多的应用，或者大量动态生成的反射类。</li>\n</ul>\n<p>不断地加载，若内存满，就会出现OOM。</p>\n<blockquote>\n<p>版本历史</p>\n</blockquote>\n<p>Jdk1.6之前：永久代，常量池在方法区；</p>\n<p>Jdk1.7：永久代，但是慢慢退化了，<code>去永久代</code>，常量池在堆中；</p>\n<p>jdk1.8之后：无永久代，常量池在元空间。</p>\n<h2 id=\"用代码表现内存溢出\"><a href=\"#用代码表现内存溢出\" class=\"headerlink\" title=\"用代码表现内存溢出\"></a>用代码表现内存溢出</h2><p>VM参数：-Xms8M -Xmx8M -XX:+PrintGCDetails</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">GetJVMMaxMemoery</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">l</span> <span class=\"operator\">=</span> Runtime.getRuntime().maxMemory();</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> Runtime.getRuntime().totalMemory();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;max = &quot;</span>+l/(<span class=\"type\">double</span>)<span class=\"number\">1024</span>/<span class=\"number\">1024</span>+<span class=\"string\">&quot; MB&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;total = &quot;</span>+total/(<span class=\"type\">double</span>)<span class=\"number\">1024</span>/<span class=\"number\">1024</span>+<span class=\"string\">&quot; MB&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//溢出用代码</span></span><br><span class=\"line\">        <span class=\"type\">StringBuilder</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>(<span class=\"string\">&quot;asdqwe&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            str.append(<span class=\"string\">&quot;qweasdwa&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[GC (Allocation Failure) [PSYoungGen: 1536K-&gt;488K(2048K)] 1536K-&gt;716K(7680K), 0.0007954 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class=\"line\">max = 7.5 MB</span><br><span class=\"line\">total = 7.5 MB</span><br><span class=\"line\">[Full GC (Ergonomics) [PSYoungGen: 1477K-&gt;0K(2048K)] [ParOldGen: 5604K-&gt;3731K(5632K)] 7082K-&gt;3731K(7680K), [Metaspace: 3242K-&gt;3242K(1056768K)], 0.0061693 secs] [Times: user=0.00 sys=0.00, real=0.01 secs] </span><br><span class=\"line\">[GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2048K)] 3731K-&gt;3731K(7680K), 0.0004458 secs] [Times: user=0.00 sys=0.00, real=0.00 secs] </span><br><span class=\"line\">[Full GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2048K)] [ParOldGen: 3731K-&gt;3713K(5632K)] 3731K-&gt;3713K(7680K), [Metaspace: 3242K-&gt;3242K(1056768K)], 0.0055763 secs] [Times: user=0.06 sys=0.00, real=0.01 secs] </span><br><span class=\"line\">Heap</span><br><span class=\"line\"> PSYoungGen      total 2048K, used 75K [0x00000000ffd80000, 0x0000000100000000, 0x0000000100000000)</span><br><span class=\"line\">  eden space 1536K, 4% used [0x00000000ffd80000,0x00000000ffd92f30,0x00000000fff00000)</span><br><span class=\"line\">  from space 512K, 0% used [0x00000000fff80000,0x00000000fff80000,0x0000000100000000)</span><br><span class=\"line\">  to   space 512K, 0% used [0x00000000fff00000,0x00000000fff00000,0x00000000fff80000)</span><br><span class=\"line\"> ParOldGen       total 5632K, used 3713K [0x00000000ff800000, 0x00000000ffd80000, 0x00000000ffd80000)</span><br><span class=\"line\">  object space 5632K, 65% used [0x00000000ff800000,0x00000000ffba0518,0x00000000ffd80000)</span><br><span class=\"line\"> Metaspace       used 3272K, capacity 4500K, committed 4864K, reserved 1056768K</span><br><span class=\"line\">  class space    used 354K, capacity 388K, committed 512K, reserved 1048576K</span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.OutOfMemoryError: Java heap space</span><br><span class=\"line\">\tat java.util.Arrays.copyOf(Arrays.java:3332)</span><br><span class=\"line\">\tat java.lang.AbstractStringBuilder.ensureCapacityInternal(AbstractStringBuilder.java:124)</span><br><span class=\"line\">\tat java.lang.AbstractStringBuilder.append(AbstractStringBuilder.java:448)</span><br><span class=\"line\">\tat java.lang.StringBuilder.append(StringBuilder.java:136)</span><br><span class=\"line\">\tat com.yn.GetJVMMaxMemoery.main(GetJVMMaxMemoery.java:13)</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 1</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"JProfiler工具\"><a href=\"#JProfiler工具\" class=\"headerlink\" title=\"JProfiler工具\"></a>JProfiler工具</h1><ul>\n<li>分许Dump内存文件，快速定位内存泄露。</li>\n<li>…</li>\n</ul>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"Java程序运行的部分参数\"><a href=\"#Java程序运行的部分参数\" class=\"headerlink\" title=\"Java程序运行的部分参数\"></a>Java程序运行的部分参数</h2><ul>\n<li><p>-Xms 初始化分配内存大小   -Xms1G、-Xms512M</p>\n</li>\n<li><p>-Xmx 设置最大分配内存     -Xmx1024M、-Xmx2G</p>\n</li>\n<li><p>-XX:PrintGCDetails 输出内存分配</p>\n</li>\n<li><p>-XX:HeapDumpOnOutOfMemoryError 输出栈溢出信息</p>\n</li>\n<li><p>-XX:MaxTenuringThreshold &#x3D; 15 通过这个参数可以设定对象经过GC多少次仍然存活后晋升到老年代的<strong>最大</strong>阈值。默认：15。</p>\n</li>\n</ul>\n<h2 id=\"Java代码校验过程\"><a href=\"#Java代码校验过程\" class=\"headerlink\" title=\"Java代码校验过程\"></a>Java代码校验过程</h2><p>java代码首先会经过<strong>编译器校验</strong>，然后在解释器解释前会被<strong>字节码校验器校验</strong>。</p>\n<p>对于字节码校验器，运行的代码可能来自本地计算机，也有可能来自远程计算机，本地计算机的代码经过编译器校验，但远程计算机的代码不一定被编译器校验，所以解释前必须经过字节码校验器再次校验。</p>\n<blockquote>\n<p>来源</p>\n</blockquote>\n<p><a href=\"https://www.oracle.com/java/technologies/security-in-java.html\">https://www.oracle.com/java/technologies/security-in-java.html</a></p>\n<p>What about the concept of a “hostile compiler”? Although the Java compiler ensures that Java source code doesn’t violate the safety rules, when an application such as the HotJava Browser imports a code fragment from anywhere, it doesn’t actually know if code fragments follow Java language rules for safety: the code may not have been produced by a known-to-be trustworthy Java compiler. In such a case, how is the Java run-time system on your machine to trust the incoming bytecode stream? The answer is simple: the Java run-time system doesn’t trust the incoming code, but subjects it to <em>bytecode verification</em>.</p>\n<p>The tests range from simple verification that the format of a code fragment is correct, to passing each code fragment through a simple theorem prover to establish that it plays by the rules:</p>\n<ul>\n<li>it doesn’t forge pointers,</li>\n<li>it doesn’t violate access restrictions,</li>\n<li>it accesses objects as what they are (for example, <code>InputStream</code> objects are always used as <code>InputStream</code>s and never as anything else).</li>\n</ul>\n<p>A language that is safe, plus run-time verification of generated code, establishes a base set of guarantees that interfaces cannot be violated.</p>\n<p><strong>不准确的翻译</strong></p>\n<p>“恶意编译器”是什么？即使Java编译器确保Java源代码不会避开安全规则，但当代码片段导入来自像HotJava这样的浏览器，不能保证代码片段在安全上是否遵循Java语言规则：代码可能被不被信任的Java编译器编译。因此，电脑上的Java运行时系统如何相信输入的字节流？答案很简单：Java运行时系统不信任输入的代码，而是把它交给<strong>字节码校验器</strong>。</p>\n<p>首先进行简单的代码格式正确性验证，然后每段代码都要通过一个简易的规则检测器，确保符合以下规则：</p>\n<ul>\n<li>不会伪造指针</li>\n<li>不违反访问显示</li>\n<li>按原样访问对象（例如InputStream对象仅仅被访问作InputStream而不是其他的东西）</li>\n</ul>\n<p><strong>个人理解</strong></p>\n<p>交给Java解释器的代码，可以来自可信的Java编译器，也有可能来自恶意的Java编译器。为保证安全，在Java解释器之前，字节码校验器会对代码再次（在此之前是Java编译器）进行校验，确保不会有不合适的代码被运行。</p>\n<ul>\n<li>没有伪造指针</li>\n<li>不会违反访问限制</li>\n<li>访问对象正确（例如InputStream对象仅仅被访问作InputStream而不是其他的东西）</li>\n</ul>\n<h2 id=\"Java的Robot类：java-awt-Robot\"><a href=\"#Java的Robot类：java-awt-Robot\" class=\"headerlink\" title=\"Java的Robot类：java.awt.Robot\"></a>Java的Robot类：java.awt.Robot</h2><p>Java中Robot类位于java.awt.Robot，该类用于为测试自动化，自运行演示程序和其他需要控制鼠标和键盘的应用程序生成本机系统输入事件，Robot类的主要目的是便于Java平台实现自动测试。</p>\n<h2 id=\"JNI-本地方法接口\"><a href=\"#JNI-本地方法接口\" class=\"headerlink\" title=\"JNI 本地方法接口\"></a>JNI 本地方法接口</h2><p>Java Native Interface</p>\n<h2 id=\"三种JVM\"><a href=\"#三种JVM\" class=\"headerlink\" title=\"三种JVM\"></a>三种JVM</h2><ul>\n<li>Sun公司 HotSpot <code>Java HotSpot(TM) 64-Bit Server VM (build 25.202-b08, mixed mode)</code></li>\n<li>BEA JRockit</li>\n<li>IBM J9VM</li>\n</ul>\n<p>学习用主要是HotSpot</p>\n<h2 id=\"一些问题\"><a href=\"#一些问题\" class=\"headerlink\" title=\"一些问题\"></a>一些问题</h2><h3 id=\"请谈谈你对\"><a href=\"#请谈谈你对\" class=\"headerlink\" title=\"请谈谈你对\"></a>请谈谈你对</h3><blockquote>\n<p>core</p>\n</blockquote>\n<ul>\n<li>请你谈谈你对JVM的理解？Java8虚拟机和之前的变化更新？</li>\n<li>什么是OOM，什么是栈溢出<code>StackOverFlowError</code>？怎么分析？</li>\n<li>JVM的常用调优参数有哪些？</li>\n<li>内存快照如何抓取，怎么分析Dump文件？</li>\n<li>谈谈JVM中，类加载器的你的认识？</li>\n</ul>\n<blockquote>\n<p>JVM</p>\n</blockquote>\n<ul>\n<li>JVM的内存模型和分区 ，每个区放什么？</li>\n<li>堆里面的分区有哪些？Eden、from、to，老年区，说说他们的特点。</li>\n<li>GC的算法有哪些？标记清除法，标记整理，复制算法，引用计数器，如何使用？</li>\n<li>轻GC 和 重GC 分别在什么时候发生？</li>\n</ul>\n<h3 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h3><p>JVM位置</p>\n<p>JVM体系结构</p>\n<p>类加载器</p>\n<p>双亲委派机制</p>\n<p>沙箱安全机制</p>\n<p>Native</p>\n<p>PC寄存器</p>\n<p>方法区</p>\n<p>三种JVM</p>\n<p>堆</p>\n<p>新生区老年区</p>\n<p>堆内存调优</p>\n<p>GC</p>\n<p>​\t常用算法</p>\n<p>JMM</p>\n<p>总结</p>\n","categories":[],"tags":["Java"]},{"title":"Day11 多线程进阶 10 各种锁 排查死锁","url":"http://zswh33.github.io/2022/09/03/Day11-Multithreading2-10/","content":"<h1 id=\"Java的各种锁\"><a href=\"#Java的各种锁\" class=\"headerlink\" title=\"Java的各种锁\"></a>Java的各种锁</h1><h2 id=\"公平锁-不公平锁\"><a href=\"#公平锁-不公平锁\" class=\"headerlink\" title=\"公平锁 不公平锁\"></a>公平锁 不公平锁</h2><p>公平锁：非常公平，不能插队，必须先来后到。</p>\n<p>不公平锁：非常不公平，可以插队。（默认都是非公平锁）</p>\n<blockquote>\n<p>ReentrantLock下的锁</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ReentrantLock</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    sync = <span class=\"keyword\">new</span> <span class=\"title class_\">NonfairSync</span>();<span class=\"comment\">//非公平锁</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>类ReentrantLock创建的锁默认是非公平锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ReentrantLock</span><span class=\"params\">(<span class=\"type\">boolean</span> fair)</span> &#123;</span><br><span class=\"line\">    sync = fair ? <span class=\"keyword\">new</span> <span class=\"title class_\">FairSync</span>() : <span class=\"keyword\">new</span> <span class=\"title class_\">NonfairSync</span>();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以通过改变参数改为公平锁。</p>\n<h2 id=\"可重入锁\"><a href=\"#可重入锁\" class=\"headerlink\" title=\"可重入锁\"></a>可重入锁</h2><p><em>所有的锁都是可重入锁</em></p>\n<p>可重入锁又称递归锁。是指同一个线程在外层方法获取锁的时候，再进入线程的内层方法会自动获取锁（前提：锁的对象是同一个对象），不会因为之前已经获取过锁还没有释放而阻塞。</p>\n<p>可重入锁指的是某个线程已经获得某个锁，可以再次获取而不会出现死锁。</p>\n<h3 id=\"synchronized的可重入锁\"><a href=\"#synchronized的可重入锁\" class=\"headerlink\" title=\"synchronized的可重入锁\"></a>synchronized的可重入锁</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo36_ReentrantLock</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Phone5</span> <span class=\"variable\">phone5</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone5</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            phone5.sendSms();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            phone5.sendSms();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//        Thread.yield();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Phone5</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendSms</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; Sms&quot;</span>);</span><br><span class=\"line\">        call();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; Call&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在代码中，线程A使用了phone的<strong>同步方法<code>sendSms()</code><strong>，锁住了对象phone，然后<code>sendSms()</code>方法调用了</strong>同步方法call()<strong>，此时本应等待对象phone解锁后才能执行，因为</strong>可重入锁</strong>的原因，该操作继续执行。</p>\n<h3 id=\"ReentrantLock可重入锁\"><a href=\"#ReentrantLock可重入锁\" class=\"headerlink\" title=\"ReentrantLock可重入锁\"></a><code>ReentrantLock</code>可重入锁</h3><p>可以记录同一线程的锁的个数。</p>\n<p>一个线程（A）可以多次使用lock()获得锁，<code>ReentrantLock</code>对象会记录这个线程（A）锁的数量，在全部锁被解锁之前，另一个线程（B）进行lock()会被阻塞，直到这个线程（A）将锁全部解锁。</p>\n<p>使用lock()方法为当前线程获得一把锁并锁住这把锁，用unlock()解锁。lock()可以重复使用，使用几次，则获得几把锁，解锁时也需要解锁相应的次数（也就是相同数量的unlock()）。</p>\n<p>业务代码结束后，一定要解锁，以防下个线程不能执行业务代码。</p>\n<h4 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h4><table>\n<thead>\n<tr>\n<th>API</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>lock()</td>\n<td>为当前线程获得一把锁并锁住这把锁。若<code>ReentrantLock</code>已被另一个线程锁定，则进入阻塞状态，直到锁被完全解锁。同一线程可以多次使用，多次使用会获得多个锁。必须在同一线程中有相同数量的unlock()被执行才能完全解锁。</td>\n</tr>\n<tr>\n<td>unlock()</td>\n<td>解锁一把锁。在同一线程中，与lock()配对使用，使用lock()后可以使用unlock()。若锁并没有进行lock()，使用unlock()会抛出异常：<code>java.lang.IllegalMonitorStateException</code>。</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><blockquote>\n<p>正常使用的<code>ReentrantLock</code>可重入锁</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo37_ReentrantLock</span>可重入锁 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Phone6</span> <span class=\"variable\">phone</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone6</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;线程A开始-----------------&quot;</span>);</span><br><span class=\"line\">            phone.sendSms();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;线程A结束-----------------&quot;</span>);</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;线程B开始-----------------&quot;</span>);</span><br><span class=\"line\">            phone.sendSms();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;线程B结束-----------------&quot;</span>);</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Phone6</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Lock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendSms</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        lock.lock(); <span class=\"comment\">//lock锁住了一把锁 1</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//业务代码</span></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; Sms&quot;</span>);</span><br><span class=\"line\">            call();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();<span class=\"comment\">//解锁一把锁 1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        lock.lock();<span class=\"comment\">//获得并锁住一把锁 2</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//业务代码</span></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; Call&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();<span class=\"comment\">//解锁一把锁 2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">线程A开始-----------------</span><br><span class=\"line\">A Sms</span><br><span class=\"line\">A Call</span><br><span class=\"line\">线程A结束-----------------</span><br><span class=\"line\">线程B开始-----------------</span><br><span class=\"line\">B Sms</span><br><span class=\"line\">B Call</span><br><span class=\"line\">线程B结束-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br><span class=\"line\">//“线程结束”的提示输出可能会错乱，因为多线程导致顺序不同，因仅测试学习提示用，所以不是重点。</span><br></pre></td></tr></table></figure>\n\n<p>分析一个线程，这里分析线程A：</p>\n<ol>\n<li><code>sendSms</code>()方法使用了<code>lock.lock</code>()获得并锁住了一把锁，</li>\n<li>到call()方法里，方法<code>lock.lock</code>()为线程A再次获得了一把锁，然后进行业务代码，</li>\n<li>之后<code>lock.unlock</code>()解锁，</li>\n<li>call()方法结束回到<code>sendSms</code>()方法，<code>lock.unlock</code>()再次解锁，</li>\n<li>lock中线程A的锁被完全解锁。</li>\n</ol>\n<blockquote>\n<p>缺少一个unlock()的例子</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo37_ReentrantLock</span>可重入锁 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Phone6</span> <span class=\"variable\">phone</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone6</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;线程A开始-----------------&quot;</span>);</span><br><span class=\"line\">            phone.sendSms();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;线程A结束-----------------&quot;</span>);</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;线程B开始-----------------&quot;</span>);</span><br><span class=\"line\">            phone.sendSms();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;线程B结束-----------------&quot;</span>);</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Phone6</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">Lock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendSms</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        lock.lock(); <span class=\"comment\">//lock锁住了一把锁 1</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; Sms&quot;</span>);</span><br><span class=\"line\">            call();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//            lock.unlock();//解锁一把锁 1</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        lock.lock();<span class=\"comment\">//获得并锁住一把锁 2</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; Call&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();<span class=\"comment\">//解锁一把锁 2</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">线程A开始-----------------</span><br><span class=\"line\">A Sms</span><br><span class=\"line\">A Call</span><br><span class=\"line\">线程A结束-----------------</span><br><span class=\"line\">线程B开始-----------------</span><br><span class=\"line\"></span><br><span class=\"line\">//程序没有结束</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在这个代码中去掉了<code>sendSms</code>()方法中的<code>lock.unlock</code>()，在线程A执行结束后lock并没有被完全解锁，</li>\n<li>到线程B时，由于lock锁被锁定，线程被阻塞，暂时不能正常执行。</li>\n</ul>\n<p><strong>lock()和unlock()必须配对使用。</strong></p>\n<h2 id=\"自旋锁-SpinLock\"><a href=\"#自旋锁-SpinLock\" class=\"headerlink\" title=\"自旋锁 SpinLock\"></a>自旋锁 <code>SpinLock</code></h2><p>自旋锁与其他锁类似，不同的是让线程暂停运行的实现方式不同。</p>\n<p>其他锁让线程暂停运行的方式是<strong>挂起</strong>，挂起后线程的资源会被切换，线程不会消耗CPU资源。</p>\n<p>自旋锁让线程暂停运行的方式是<strong>无限循环</strong>，线程会消耗CPU时间。</p>\n<blockquote>\n<p>特点</p>\n</blockquote>\n<ol>\n<li>线程没有挂起，一旦线程获得锁，并且获得CPU时间，会立即执行，效率相对其他锁高；</li>\n<li>线程自旋锁期间会消耗CPU时间，影响性能。</li>\n</ol>\n<blockquote>\n<p>使用场景</p>\n</blockquote>\n<p>锁被占用的时间很短，其他线程能较早地获得锁。</p>\n<blockquote>\n<p>要求</p>\n</blockquote>\n<p>自旋等待的时间必须有一定的限度，如果自旋超过了限定次数没有成功获得锁，就应当挂起线程</p>\n<blockquote>\n<p>实现原理</p>\n</blockquote>\n<p>例1：getAndAddInt()是一个自旋锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndAddInt</span><span class=\"params\">(Object var1, <span class=\"type\">long</span> var2, <span class=\"type\">int</span> var4)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> var5;</span><br><span class=\"line\">    <span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">        var5 = <span class=\"built_in\">this</span>.getIntVolatile(var1, var2);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">while</span>(!<span class=\"built_in\">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> var5;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例2：手动实现自旋锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo38_SpinLock</span>自旋锁 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MySpinLock</span> <span class=\"variable\">mySpinLock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MySpinLock</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            mySpinLock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mySpinLock.unlock();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            mySpinLock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mySpinLock.unlock();</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MySpinLock</span> &#123;</span><br><span class=\"line\">    AtomicReference&lt;Thread&gt; atomicReference = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicReference</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">lock</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">        <span class=\"comment\">//自旋锁</span></span><br><span class=\"line\">        <span class=\"comment\">//若不为null，则表示锁已被锁定  //若赋值成功则锁定成功</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (!atomicReference.compareAndSet(<span class=\"literal\">null</span>,thread))&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; ==&gt; lock&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">unlock</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">        <span class=\"comment\">//尝试解锁</span></span><br><span class=\"line\">        atomicReference.compareAndSet(thread,<span class=\"literal\">null</span>);</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; ==&gt; unlock&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">A ==&gt; lock</span><br><span class=\"line\">A ==&gt; unlock</span><br><span class=\"line\">B ==&gt; lock</span><br><span class=\"line\">B ==&gt; unlock</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"死锁（如何排查死锁）\"><a href=\"#死锁（如何排查死锁）\" class=\"headerlink\" title=\"死锁（如何排查死锁）\"></a>死锁（如何排查死锁）</h2><p><em>两个线程之间互相拥有对方需要的资源，且在得到需要的资源你之前不会释放已拥有的资源。</em></p>\n<h3 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h3><p><img src=\"/2022/09/03/Day11-Multithreading2-10/image-20220904102307920.png\" alt=\"死锁\"></p>\n<h3 id=\"如何排查死锁\"><a href=\"#如何排查死锁\" class=\"headerlink\" title=\"如何排查死锁\"></a>如何排查死锁</h3><blockquote>\n<p>先放一个死锁</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo39_</span>死锁<span class=\"number\">1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">lockA</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;lockA&quot;</span>;</span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">lockB</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;lockB&quot;</span>;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">MyThread2</span>(lockA,lockB),<span class=\"string\">&quot;T1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">MyThread2</span>(lockB,lockA),<span class=\"string\">&quot;T2 &quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyThread2</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lockA;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String lockB;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyThread2</span><span class=\"params\">(String lockA, String lockB)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.lockA = lockA;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.lockB = lockB;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (lockA)&#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; lock&quot;</span>+lockA+<span class=\"string\">&quot; =&gt;get &quot;</span>+lockB);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (lockB)&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; lock&quot;</span>+lockB+<span class=\"string\">&quot; =&gt;get &quot;</span>+lockA);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>排查死锁1 查看日志</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">T2</span>  <span class=\"variable\">locklockB</span> <span class=\"operator\">=</span>&gt;get lockA</span><br><span class=\"line\"><span class=\"type\">T1</span> <span class=\"variable\">locklockA</span> <span class=\"operator\">=</span>&gt;get lockB</span><br><span class=\"line\"><span class=\"comment\">//程序没有结束</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>排查死锁2 查看堆栈信息</p>\n</blockquote>\n<ol>\n<li><p>使用jps -l定位进程号</p>\n<p><img src=\"/2022/09/03/Day11-Multithreading2-10/image-20220904103355647.png\" alt=\"使用jps -l定位进程号\"></p>\n</li>\n<li><p>使用<code>jstack 进程号</code> 查看进程信息 ( 这里是<code>jstack 11452</code> ) </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">略...</span><br><span class=\"line\">Java stack information <span class=\"keyword\">for</span> the threads listed above:</span><br><span class=\"line\">===================================================</span><br><span class=\"line\"><span class=\"string\">&quot;T2 &quot;</span>:</span><br><span class=\"line\">        at com.yn.MyThread2.run(Demo39_死锁<span class=\"number\">1.</span>java:<span class=\"number\">35</span>)</span><br><span class=\"line\">        - waiting to lock &lt;<span class=\"number\">0x000000076c0149d0</span>&gt; (a java.lang.String)</span><br><span class=\"line\">        - locked &lt;<span class=\"number\">0x000000076c014a08</span>&gt; (a java.lang.String)</span><br><span class=\"line\">        at java.lang.Thread.run(Thread.java:<span class=\"number\">748</span>)</span><br><span class=\"line\"><span class=\"string\">&quot;T1&quot;</span>:</span><br><span class=\"line\">        at com.yn.MyThread2.run(Demo39_死锁<span class=\"number\">1.</span>java:<span class=\"number\">35</span>)</span><br><span class=\"line\">        - waiting to lock &lt;<span class=\"number\">0x000000076c014a08</span>&gt; (a java.lang.String)</span><br><span class=\"line\">        - locked &lt;<span class=\"number\">0x000000076c0149d0</span>&gt; (a java.lang.String)</span><br><span class=\"line\">        at java.lang.Thread.run(Thread.java:<span class=\"number\">748</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Found <span class=\"number\">1</span> deadlock.</span><br></pre></td></tr></table></figure>\n\n<p>找到一个死锁，</p>\n<p>T2等待<span style=\"color:red\">0x000000076c0149d0</span>，锁定了<span style=\"color:green\">0x000000076c014a08</span>；</p>\n<p>T1等待<span style=\"color:green\">0x000000076c014a08</span>，锁定了<span style=\"color:red\">0x000000076c0149d0</span>。</p>\n</li>\n</ol>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"Java查看堆栈信息\"><a href=\"#Java查看堆栈信息\" class=\"headerlink\" title=\"Java查看堆栈信息\"></a>Java查看堆栈信息</h2><blockquote>\n<p>jps -l 查看进程列表</p>\n</blockquote>\n<p><img src=\"/2022/09/03/Day11-Multithreading2-10/image-20220904103257892.png\" alt=\"一个Java进程列表\"></p>\n<blockquote>\n<p>jstack 进程号  查看进程堆栈信息</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2022-09-04 10:35:00</span><br><span class=\"line\">Full thread dump Java HotSpot(TM) 64-Bit Server VM (25.202-b08 mixed mode):</span><br><span class=\"line\"></span><br><span class=\"line\">//略...</span><br><span class=\"line\"></span><br><span class=\"line\">Found one Java-level deadlock:</span><br><span class=\"line\">=============================</span><br><span class=\"line\">&quot;T2 &quot;:</span><br><span class=\"line\">  waiting to lock monitor 0x000000001cac0c28 (object 0x000000076c0149d0, a java.lang.String),</span><br><span class=\"line\">  which is held by &quot;T1&quot;</span><br><span class=\"line\">&quot;T1&quot;:</span><br><span class=\"line\">  waiting to lock monitor 0x000000001cac3408 (object 0x000000076c014a08, a java.lang.String),</span><br><span class=\"line\">  which is held by &quot;T2 &quot;</span><br><span class=\"line\"></span><br><span class=\"line\">Java stack information for the threads listed above:</span><br><span class=\"line\">===================================================</span><br><span class=\"line\">&quot;T2 &quot;:</span><br><span class=\"line\">        at com.yn.MyThread2.run(Demo39_死锁1.java:35)</span><br><span class=\"line\">        - waiting to lock &lt;0x000000076c0149d0&gt; (a java.lang.String)</span><br><span class=\"line\">        - locked &lt;0x000000076c014a08&gt; (a java.lang.String)</span><br><span class=\"line\">        at java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\">&quot;T1&quot;:</span><br><span class=\"line\">        at com.yn.MyThread2.run(Demo39_死锁1.java:35)</span><br><span class=\"line\">        - waiting to lock &lt;0x000000076c014a08&gt; (a java.lang.String)</span><br><span class=\"line\">        - locked &lt;0x000000076c0149d0&gt; (a java.lang.String)</span><br><span class=\"line\">        at java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\"></span><br><span class=\"line\">Found 1 deadlock.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":["Java"]},{"title":"Day11 多线程进阶 9 CAS 原子引用","url":"http://zswh33.github.io/2022/09/03/Day11-Multithreading2-9/","content":"<h1 id=\"CAS\"><a href=\"#CAS\" class=\"headerlink\" title=\"CAS\"></a>CAS</h1><blockquote>\n<p>介绍</p>\n</blockquote>\n<p>比较当前工作内存中的值和主内存的值，若这个值为期望值，则执行操作。若不是就一直循环，即阻塞。</p>\n<blockquote>\n<p><code>public final boolean compareAndSet(int expect, int update)</code></p>\n</blockquote>\n<p><code>public final boolean compareAndSet(int expect, int update)</code>是一个AtomicInteger的实例方法。</p>\n<p>若实例的值为expect，则赋值为update。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AtomicInteger</span> <span class=\"variable\">atomicInteger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">123</span>);</span><br><span class=\"line\">        <span class=\"comment\">//public final boolean compareAndSet(int expect, int update)</span></span><br><span class=\"line\">        <span class=\"comment\">//expect 期望  update 更新</span></span><br><span class=\"line\">        <span class=\"comment\">//若达到期望值，则更新，否则不更新</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;1. &quot;</span>+atomicInteger);</span><br><span class=\"line\">        System.out.println(atomicInteger.compareAndSet(<span class=\"number\">123</span>, <span class=\"number\">345</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;2. &quot;</span>+atomicInteger);</span><br><span class=\"line\">        System.out.println(atomicInteger.compareAndSet(<span class=\"number\">234</span>,<span class=\"number\">123</span>));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;3. &quot;</span>+atomicInteger);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1.</span> <span class=\"number\">123</span></span><br><span class=\"line\"><span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">2.</span> <span class=\"number\">345</span></span><br><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"number\">3.</span> <span class=\"number\">345</span></span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>atomicInteger的初始值为123，经过第一次操作，123变为345，方法返回值为true，表示成功。</p>\n<p>后来atomicInteger的值为345，第二次操作，若值为234则变为123，显然不是345，返回false，修改失败。</p>\n<p>值仍为345。</p>\n<blockquote>\n<p>剖析底层的CAS</p>\n</blockquote>\n<p><strong>getAndIncrement()解析</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"title function_\">getAndIncrement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> unsafe.getAndAddInt(<span class=\"built_in\">this</span>, valueOffset, <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>方法getAndIncrement()可以为AtomicInteger对象通过内存方式实现“++”，其中，getAndIncrement()方法调用了getAndAddInt()方法，其中，为this即为当前对象，valueOffset为”对象为内存中的偏移值”（详见“其他”章节Unsafe类），“1”为增加的大小。</p>\n<p><strong>getAndAddInt()解析</strong></p>\n<p><img src=\"/2022/09/03/Day11-Multithreading2-9/image-20220903164910518.png\" alt=\"image-20220903164910518\"></p>\n<blockquote>\n<p>CAS总结</p>\n</blockquote>\n<p><strong>CAS：</strong>比较当前工作内存中的值和主内存的值，若这个值为期望值，则执行操作。若不是就一直循环，即阻塞。</p>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>循环耗时；</li>\n<li>一次性只能保证一个共享变量的原子性；</li>\n<li>ABA问题。</li>\n</ol>\n<blockquote>\n<p>CAS： ABA问题（狸猫换太子）</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo33_ABA</span>问题 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">AtomicInteger</span> <span class=\"variable\">atomicInteger</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(<span class=\"number\">123</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// ===================== 捣乱的线程 =====================</span></span><br><span class=\"line\">        System.out.println(atomicInteger.compareAndSet(<span class=\"number\">123</span>,<span class=\"number\">321</span>));</span><br><span class=\"line\">        System.out.println(atomicInteger);</span><br><span class=\"line\">        System.out.println(atomicInteger.compareAndSet(<span class=\"number\">321</span>,<span class=\"number\">123</span>));</span><br><span class=\"line\">        System.out.println(atomicInteger);</span><br><span class=\"line\">        <span class=\"comment\">// ===================== 期望的线程 =====================</span></span><br><span class=\"line\">        System.out.println(atomicInteger.compareAndSet(<span class=\"number\">123</span>,<span class=\"number\">321</span>));</span><br><span class=\"line\">        System.out.println(atomicInteger);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 期望的线程不知道捣乱的线程改过数据。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"原子引用\"><a href=\"#原子引用\" class=\"headerlink\" title=\"原子引用\"></a>原子引用</h1><p><em>AtomicStampedReference</em></p>\n<p>可以原子更新的对象引用。  思想：<strong>乐观锁</strong></p>\n<blockquote>\n<p>AtomicStampedReference介绍</p>\n</blockquote>\n<p>AtomicStampedReference创建的对象，有功能：</p>\n<ol>\n<li>指向一个泛型对象；</li>\n<li>记录一个stamp值（类似版本号）。</li>\n</ol>\n<p>通过<strong>compareAndSet()方法</strong>可以<strong>修改AtomicStampedReference对象的指向</strong>。在使用该方法更新指向时，可以指定<strong>原对象、修改后对象、期望stamp值、目标stamp值</strong>。</p>\n<p>该方法会判断指定的<strong>“原对象”</strong>和<strong>“期望stamp值”</strong>是否与存储的一致，</p>\n<ul>\n<li>若一致，则<strong>修改指向和stamp值</strong>，返回<strong>true</strong>；</li>\n<li>若不一致，则<strong>不修改</strong>，返回<strong>false</strong>。</li>\n</ul>\n<p>在线程执行前，记录对象的stamp值，然后进行业务代码。在这期间，若对象被修改，会留下stamp更新。再次修改对象前，核对stamp值，可以得知对象是否在这期间修改过。</p>\n<blockquote>\n<p>例子</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo34_AtomicReference</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//注意，如果泛型是一个包装类，注意对象的引用问题。</span></span><br><span class=\"line\">        <span class=\"comment\">//正常业务里，这里应为一个对象</span></span><br><span class=\"line\">        AtomicStampedReference&lt;Integer&gt; atomicReference = <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicStampedReference</span>&lt;&gt;(<span class=\"number\">12</span>,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">//捣乱的线程</span></span><br><span class=\"line\">        <span class=\"comment\">//负责在执行期间，修改atomicReference的值，并更新stamp的值。</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;1-&gt; &quot;</span>+atomicReference.getStamp());</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;A &quot;</span>+atomicReference.compareAndSet(</span><br><span class=\"line\">                    <span class=\"number\">12</span>, <span class=\"number\">123</span>,</span><br><span class=\"line\">                    atomicReference.getStamp(),</span><br><span class=\"line\">                    atomicReference.getStamp() + <span class=\"number\">1</span></span><br><span class=\"line\">            ));</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;2-&gt; &quot;</span>+atomicReference.getStamp());</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;A &quot;</span>+atomicReference.compareAndSet(</span><br><span class=\"line\">                    <span class=\"number\">123</span>, <span class=\"number\">12</span>,</span><br><span class=\"line\">                    atomicReference.getStamp(),</span><br><span class=\"line\">                    atomicReference.getStamp() + <span class=\"number\">1</span></span><br><span class=\"line\">            ));</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;3-&gt; &quot;</span>+atomicReference.getStamp());</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">\t\t<span class=\"comment\">//正常的业务线程</span></span><br><span class=\"line\">        <span class=\"comment\">//业务代码执行前，记录stamp的值，业务代码后，核对stamp值是否正确，若正确则修改对象的值，错误则不修改。</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">stamp</span> <span class=\"operator\">=</span> atomicReference.getStamp();</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;1-&gt; &quot;</span>+stamp);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;B &quot;</span>+atomicReference.compareAndSet(</span><br><span class=\"line\">                    <span class=\"number\">12</span>, <span class=\"number\">23</span>,</span><br><span class=\"line\">                    stamp,</span><br><span class=\"line\">                    stamp + <span class=\"number\">1</span></span><br><span class=\"line\">            ));</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;2-&gt; &quot;</span>+atomicReference.getStamp());</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><blockquote>\n<p>Unsafe类</p>\n</blockquote>\n<p>Unsafe用于让Java操作内存。</p>\n<p>原理：Java不能操作内存，但C++可以操作内存。Java有个Unsafe类有native本地方法，可以调用C++操作内存。</p>\n<p><img src=\"/2022/09/03/Day11-Multithreading2-9/image-20220903163422095.png\" alt=\"image-20220903163422095\"></p>\n<blockquote>\n<p>int的包装类Interger</p>\n</blockquote>\n<p><strong>Integer使用了对象缓存机制，默认范围 -128 ~ 127。</strong></p>\n<p><strong>推荐使用静态工厂方法 valueOf 获取对象实例，而不是new，因为valueOf使用缓存，而new一定会创建新的对象分配新的内存空间。</strong></p>\n<p>对于Integer var &#x3D; ?在**-128 ~ 127<strong>之间的赋值，Integer对象是在</strong>IntegerCache.cache<strong>产生，会</strong>复用已有对象<strong>，</strong>这个区间内的Integer值可以直接使用“&#x3D;&#x3D;”进行判断<strong>，但是这个区间之外的所有数据，都会在堆上产生，并</strong>不会<strong>复用已有对象。推荐使用</strong>equals**方法进行判断。</p>\n","categories":[],"tags":["Java"]},{"title":"Day11 DCL懒汉式单例反破解攻坚战 (๑•̀ㅂ•́)و✧","url":"http://zswh33.github.io/2022/09/03/Day11-Crack-DCL-LayMan/","content":"<h1 id=\"DCL懒汉式单例反破解攻坚战-๑•̀ㅂ•́-و✧\"><a href=\"#DCL懒汉式单例反破解攻坚战-๑•̀ㅂ•́-و✧\" class=\"headerlink\" title=\"DCL懒汉式单例反破解攻坚战 (๑•̀ㅂ•́)و✧\"></a>DCL懒汉式单例反破解攻坚战 (๑•̀ㅂ•́)و✧</h1><h2 id=\"DCL懒汉式单例\"><a href=\"#DCL懒汉式单例\" class=\"headerlink\" title=\"DCL懒汉式单例\"></a>DCL懒汉式单例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//懒汉式单例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LazyMan</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> LazyMan lazyMan;<span class=\"comment\">//添加volatile，防止代码重新编排。具体影响位置：getInstance()下的lazyMan = new LazyMan();</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//双重监测锁模式的 懒汉式单例  DCL懒汉式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazyMan <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lazyMan==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (LazyMan.class)&#123; <span class=\"comment\">//双重检测锁模式 避免对象反复创建</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(lazyMan==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    lazyMan = <span class=\"keyword\">new</span> <span class=\"title class_\">LazyMan</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lazyMan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LazyMan</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过反射破解DCL懒汉式单例\"><a href=\"#通过反射破解DCL懒汉式单例\" class=\"headerlink\" title=\"通过反射破解DCL懒汉式单例\"></a>通过反射破解DCL懒汉式单例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Crack1</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//通过反射获取多个LazyManV2</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"type\">LazyManV2</span> <span class=\"variable\">lazyManV2_1</span> <span class=\"operator\">=</span> LazyManV2.getInstance();<span class=\"comment\">//第一个</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> LazyManV2.class;<span class=\"comment\">//获取LazyManV2的Class类</span></span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">constructor</span> <span class=\"operator\">=</span> c1.getDeclaredConstructor();<span class=\"comment\">//通过反射获取构造方法</span></span><br><span class=\"line\">        constructor.setAccessible(<span class=\"literal\">true</span>);<span class=\"comment\">//设置权限</span></span><br><span class=\"line\">        <span class=\"type\">LazyManV2</span> <span class=\"variable\">lazyManV2_2</span> <span class=\"operator\">=</span> (LazyManV2) constructor.newInstance();<span class=\"comment\">//创建对象</span></span><br><span class=\"line\">        System.out.println(lazyManV2_1);</span><br><span class=\"line\">        System.out.println(lazyManV2_2);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main线程创建了一个DCL LazyMan</span><br><span class=\"line\">main线程创建了一个DCL LazyMan</span><br><span class=\"line\">com.yn.Demo31_懒汉式单例破解攻坚战.LazyManV2@1b6d3586</span><br><span class=\"line\">com.yn.Demo31_懒汉式单例破解攻坚战.LazyManV2@4554617c</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n\n<p>成功创建两个不同的单例。</p>\n<h2 id=\"DCL懒汉式单例2-0\"><a href=\"#DCL懒汉式单例2-0\" class=\"headerlink\" title=\"DCL懒汉式单例2.0\"></a>DCL懒汉式单例2.0</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//懒汉式单例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LazyManV3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LazyManV3 lazyMan;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//双重监测锁模式的 懒汉式单例  DCL懒汉式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazyManV3 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lazyMan==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (LazyManV3.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(lazyMan==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    lazyMan = <span class=\"keyword\">new</span> <span class=\"title class_\">LazyManV3</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lazyMan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LazyManV3</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//防止对象反复创建 防止通过反射破坏单例</span></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (LazyManV3.class)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(lazyMan!=<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;不要试图使用反射破坏异常&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+ <span class=\"string\">&quot;线程创建了一个DCL LazyMan&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这里在构造方法中添加了语句，在getInstance()方法创建对象后，禁止通过反射方式再次创建对象。</p>\n<p>使用getInstance()创建对象后，再次使用反射方式创建对象会抛出异常。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main线程创建了一个DCL LazyMan</span><br><span class=\"line\">Exception in thread &quot;main&quot; java.lang.reflect.InvocationTargetException</span><br><span class=\"line\">\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)</span><br><span class=\"line\">\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)</span><br><span class=\"line\">\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)</span><br><span class=\"line\">\tat com.yn.Demo31_懒汉式单例破解攻坚战.Crack2.main(Crack2.java:13)</span><br><span class=\"line\">Caused by: java.lang.RuntimeException: 不要试图使用反射破坏异常</span><br><span class=\"line\">\tat com.yn.Demo31_懒汉式单例破解攻坚战.LazyManV3.&lt;init&gt;(LazyManV3.java:24)</span><br><span class=\"line\">\t... 5 more</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 1</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过反射破解DCL懒汉式单例2-0\"><a href=\"#通过反射破解DCL懒汉式单例2-0\" class=\"headerlink\" title=\"通过反射破解DCL懒汉式单例2.0\"></a>通过反射破解DCL懒汉式单例2.0</h2><p><em>道高一尺，魔高一丈。</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Crack2</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//通过反射获取多个LazyManV2</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException &#123;</span><br><span class=\"line\"><span class=\"comment\">//        LazyManV3 lazyMan_1 = LazyManV3.getInstance();//第一个</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> LazyManV3.class;</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">constructor</span> <span class=\"operator\">=</span> c1.getDeclaredConstructor();</span><br><span class=\"line\">        constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">LazyManV3</span> <span class=\"variable\">lazyMan_2</span> <span class=\"operator\">=</span> (LazyManV3) constructor.newInstance();</span><br><span class=\"line\">        <span class=\"type\">LazyManV3</span> <span class=\"variable\">lazyMan_1</span> <span class=\"operator\">=</span> (LazyManV3) constructor.newInstance();</span><br><span class=\"line\">        System.out.println(lazyMan_1);</span><br><span class=\"line\">        System.out.println(lazyMan_2);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>两个对象都通过反射方式创建，这样LazyMan的类变量不会得到赋值，可以成功创建两个不同的对象。</p>\n<h2 id=\"DCL懒汉式单例3-0\"><a href=\"#DCL懒汉式单例3-0\" class=\"headerlink\" title=\"DCL懒汉式单例3.0\"></a>DCL懒汉式单例3.0</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//懒汉式单例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LazyManV4</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LazyManV4 lazyMan;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"variable\">awsl</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;<span class=\"comment\">//红绿灯  awsl换成加密的字符串，这里学习用</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//双重监测锁模式的 懒汉式单例  DCL懒汉式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazyManV4 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lazyMan==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (LazyManV4.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(lazyMan==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    lazyMan = <span class=\"keyword\">new</span> <span class=\"title class_\">LazyManV4</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lazyMan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LazyManV4</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//防止对象反复创建 防止通过反射破坏单例</span></span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (LazyManV4.class)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!awsl)&#123;<span class=\"comment\">//创建红绿灯，用于判断对象是否被反复创建</span></span><br><span class=\"line\">                awsl=<span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">RuntimeException</span>(<span class=\"string\">&quot;不要试图使用反射破坏异常&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+ <span class=\"string\">&quot;线程创建了一个DCL LazyMan&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>添加红绿灯，用于判断对象是否被反复创建。</p>\n<p>构造方法被重复调用，除第一次外，后面都会抛出异常。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main线程创建了一个DCL LazyMan</span><br><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java.lang.reflect.InvocationTargetException</span><br><span class=\"line\">\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)</span><br><span class=\"line\">\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:<span class=\"number\">62</span>)</span><br><span class=\"line\">\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:<span class=\"number\">45</span>)</span><br><span class=\"line\">\tat java.lang.reflect.Constructor.newInstance(Constructor.java:<span class=\"number\">423</span>)</span><br><span class=\"line\">\tat com.yn.Demo31_懒汉式单例破解攻坚战.Crack3.main(Crack3.java:<span class=\"number\">14</span>)</span><br><span class=\"line\">Caused by: java.lang.RuntimeException: 不要试图使用反射破坏异常</span><br><span class=\"line\">\tat com.yn.Demo31_懒汉式单例破解攻坚战.LazyManV4.&lt;init&gt;(LazyManV4.java:<span class=\"number\">27</span>)</span><br><span class=\"line\">\t... <span class=\"number\">5</span> more</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code <span class=\"number\">1</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"通过反射破解DCL懒汉式单例3-0\"><a href=\"#通过反射破解DCL懒汉式单例3-0\" class=\"headerlink\" title=\"通过反射破解DCL懒汉式单例3.0\"></a>通过反射破解DCL懒汉式单例3.0</h2><p>解密并想办法获得红绿灯的变量，然后修改红绿灯的值。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Crack3</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//通过反射获取多个LazyManV2</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException &#123;</span><br><span class=\"line\"><span class=\"comment\">//        LazyManV3 lazyMan_1 = LazyManV3.getInstance();//第一个</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> LazyManV4.class;</span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">constructor</span> <span class=\"operator\">=</span> c1.getDeclaredConstructor();</span><br><span class=\"line\">        constructor.setAccessible(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        <span class=\"type\">LazyManV4</span> <span class=\"variable\">lazyMan_2</span> <span class=\"operator\">=</span> (LazyManV4) constructor.newInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//先想办法解密获得awsl变量，然后通过反射修改awsl的值，然后破坏单例</span></span><br><span class=\"line\"><span class=\"comment\">//        String awsl = c1.getDeclaredFields()[1].getName();</span></span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">awsl</span> <span class=\"operator\">=</span> c1.getDeclaredField(<span class=\"string\">&quot;awsl&quot;</span>);</span><br><span class=\"line\">        awsl.setAccessible(<span class=\"literal\">true</span>);<span class=\"comment\">//破坏权限</span></span><br><span class=\"line\">        awsl.set(LazyManV4.class,<span class=\"literal\">false</span>);<span class=\"comment\">//设置值</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">LazyManV4</span> <span class=\"variable\">lazyMan_1</span> <span class=\"operator\">=</span> (LazyManV4) constructor.newInstance();</span><br><span class=\"line\">        System.out.println(lazyMan_1);</span><br><span class=\"line\">        System.out.println(lazyMan_2);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"枚举是一个单例对象\"><a href=\"#枚举是一个单例对象\" class=\"headerlink\" title=\"枚举是一个单例对象\"></a>枚举是一个单例对象</h2><blockquote>\n<p> newInstance()的源代码：不能通过反射破坏枚举类型。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public T newInstance(Object ... initargs)</span><br><span class=\"line\">    throws InstantiationException, IllegalAccessException,</span><br><span class=\"line\">           IllegalArgumentException, InvocationTargetException</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    if (!override) &#123;</span><br><span class=\"line\">        if (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class=\"line\">            Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class=\"line\">            checkAccess(caller, clazz, null, modifiers);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if ((clazz.getModifiers() &amp; Modifier.ENUM) != 0)</span><br><span class=\"line\">        throw new IllegalArgumentException(&quot;Cannot reflectively create enum objects&quot;);</span><br><span class=\"line\">    ConstructorAccessor ca = constructorAccessor;   // read volatile</span><br><span class=\"line\">    if (ca == null) &#123;</span><br><span class=\"line\">        ca = acquireConstructorAccessor();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    @SuppressWarnings(&quot;unchecked&quot;)</span><br><span class=\"line\">    T inst = (T) ca.newInstance(initargs);</span><br><span class=\"line\">    return inst;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过newInstance()的源代码发现，newInstance()不能通过反射破坏枚举类型。</p>\n<p>枚举自带单例模式。</p>\n<blockquote>\n<p>枚举</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Enum1</span> &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Enum1 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"通过反射破解枚举的单例对象\"><a href=\"#通过反射破解枚举的单例对象\" class=\"headerlink\" title=\"通过反射破解枚举的单例对象\"></a>通过反射破解枚举的单例对象</h2><blockquote>\n<p>Idea反编译Enmu1的class，发现代码里面有一个无参构造方法。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">Enum1</span> &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> asd;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Enum1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Enum1 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;Enum1&#123;asd=&quot;</span> + <span class=\"built_in\">this</span>.asd + <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>用反射的方式，通过无参构造方法创建对象。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Crack4</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException &#123;</span><br><span class=\"line\">        <span class=\"type\">Enum1</span> <span class=\"variable\">enum1</span> <span class=\"operator\">=</span> Enum1.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        Constructor&lt;Enum1&gt; constructor = Enum1.class.getDeclaredConstructor();<span class=\"comment\">//获取无参构造方法</span></span><br><span class=\"line\">        constructor.setAccessible(<span class=\"literal\">true</span>);<span class=\"comment\">//设置权限</span></span><br><span class=\"line\">        <span class=\"type\">Enum1</span> <span class=\"variable\">enum2</span> <span class=\"operator\">=</span> constructor.newInstance();<span class=\"comment\">//创建对象</span></span><br><span class=\"line\">        System.out.println(enum1);</span><br><span class=\"line\">        System.out.println(enum2);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;main&quot; java.lang.NoSuchMethodException: com.yn.Demo31_懒汉式单例破解攻坚战.Enum1.&lt;init&gt;()</span><br><span class=\"line\">\tat java.lang.Class.getConstructor0(Class.java:3082)</span><br><span class=\"line\">\tat java.lang.Class.getDeclaredConstructor(Class.java:2178)</span><br><span class=\"line\">\tat com.yn.Demo31_懒汉式单例破解攻坚战.Crack4.main(Crack4.java:11)</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 1</span><br></pre></td></tr></table></figure>\n\n<p>出现错误：没有这个方法。</p>\n<p>结论：没有相关的无参构造方法。</p>\n<blockquote>\n<p>通过javap -p 反编译class字节码文件，查看源代码。</p>\n</blockquote>\n<p><em>也许Idea骗了我们？</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Compiled from <span class=\"string\">&quot;Enum1.java&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">com</span>.yn.Demo31_懒汉式单例破解攻坚战.Enum1 <span class=\"keyword\">extends</span> <span class=\"title class_\">java</span>.lang.Enum&lt;com.yn.Demo31_懒汉式单例破解攻坚战.Enum1&gt; &#123;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> com.yn.Demo31_懒汉式单例破解攻坚战.Enum1 INSTANCE;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"type\">int</span> asd;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> com.yn.Demo31_懒汉式单例破解攻坚战.Enum1[] $VALUES;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.yn.Demo31_懒汉式单例破解攻坚战.Enum1[] values();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.yn.Demo31_懒汉式单例破解攻坚战.Enum1 <span class=\"title function_\">valueOf</span><span class=\"params\">(java.lang.String)</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> com.yn.Demo31_懒汉式单例破解攻坚战.Enum1();</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> com.yn.Demo31_懒汉式单例破解攻坚战.Enum1 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> java.lang.String <span class=\"title function_\">toString</span><span class=\"params\">()</span>;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> &#123;&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>通过反编译得知</p>\n<ol>\n<li><code>public final class com.yn.Demo31_懒汉式单例破解攻坚战.Enum1 extends java.lang.Enum&lt;com.yn.Demo31_懒汉式单例破解攻坚战.Enum1&gt;</code>。枚举确实是一个用class修饰的类，不过是继承了java.lang.Enum成为枚举。</li>\n<li><code>private com.yn.Demo31_懒汉式单例破解攻坚战.Enum1();</code>。Enmu1类确实有一个无参构造方法。？！</li>\n</ol>\n<blockquote>\n<p>尝试使用jad反编译class字节码文件</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.yn.Demo31_61D26C495F0F53554F8B783489E3653B575A6218;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Enum1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Enum</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Enum1[] values()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Enum1[])$VALUES.clone();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Enum1 <span class=\"title function_\">valueOf</span><span class=\"params\">(String name)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (Enum1)Enum.valueOf(com/yn/Demo31_61D26C495F0F53554F8B783489E3653B575A6218/Enum1, name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Enum1</span><span class=\"params\">(String s, <span class=\"type\">int</span> i)</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(s, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Enum1 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (<span class=\"keyword\">new</span> <span class=\"title class_\">StringBuilder</span>()).append(<span class=\"string\">&quot;Enum1&#123;asd=&quot;</span>).append(asd).append(<span class=\"string\">&#x27;&#125;&#x27;</span>).toString();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Enum1 INSTANCE;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> asd;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Enum1 $VALUES[];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> </span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        INSTANCE = <span class=\"keyword\">new</span> <span class=\"title class_\">Enum1</span>(<span class=\"string\">&quot;INSTANCE&quot;</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">        $VALUES = (<span class=\"keyword\">new</span> <span class=\"title class_\">Enum1</span>[] &#123;</span><br><span class=\"line\">            INSTANCE</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>由反编译结果可知，<code>private Enum1(String s, int i)</code>是一个有参构造方法。</p>\n<blockquote>\n<p>通过有参构造方法创建对象</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Crack4</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchMethodException, InvocationTargetException, InstantiationException, IllegalAccessException, NoSuchFieldException &#123;</span><br><span class=\"line\">        <span class=\"type\">Enum1</span> <span class=\"variable\">enum1</span> <span class=\"operator\">=</span> Enum1.getInstance();</span><br><span class=\"line\"></span><br><span class=\"line\">        Constructor&lt;Enum1&gt; constructor = Enum1.class.getDeclaredConstructor(String.class,<span class=\"type\">int</span>.class);<span class=\"comment\">//获取有参构造方法</span></span><br><span class=\"line\">        constructor.setAccessible(<span class=\"literal\">true</span>);<span class=\"comment\">//设置权限</span></span><br><span class=\"line\">        <span class=\"type\">Enum1</span> <span class=\"variable\">enum2</span> <span class=\"operator\">=</span> constructor.newInstance();<span class=\"comment\">//创建对象</span></span><br><span class=\"line\">        System.out.println(enum1);</span><br><span class=\"line\">        System.out.println(enum2);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread <span class=\"string\">&quot;main&quot;</span> java.lang.IllegalArgumentException: Cannot reflectively create <span class=\"keyword\">enum</span> <span class=\"title class_\">objects</span></span><br><span class=\"line\">\tat java.lang.reflect.Constructor.newInstance(Constructor.java:<span class=\"number\">417</span>)</span><br><span class=\"line\">\tat com.yn.Demo31_懒汉式单例破解攻坚战.Crack4.main(Crack4.java:<span class=\"number\">13</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<p>通过输出得知，不能通过反射创建枚举对象。</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><blockquote>\n<p>enum枚举</p>\n</blockquote>\n<p>枚举本身是一个class类</p>\n<blockquote>\n<p>使用jad将class文件转换为java文件</p>\n</blockquote>\n<p>jad -sjava 字节码文件.class</p>\n","categories":[],"tags":["Java"]},{"title":"Day11 多线程进阶 8 单例模式","url":"http://zswh33.github.io/2022/09/03/Day11-Multithreading2-8/","content":"<h1 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h1><p><em>创建的对象只有一个，程序运行过程中只使用这一个对象</em></p>\n<ol>\n<li>构造方法私有private</li>\n<li>程序运行过程中只有一个，使用getInstance()方法获取对象。</li>\n</ol>\n<h2 id=\"饿汉式单例\"><a href=\"#饿汉式单例\" class=\"headerlink\" title=\"饿汉式单例\"></a>饿汉式单例</h2><p><em>恶汉！！！</em></p>\n<p>一次性分配所有空间。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//饿汉式单例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Hungry</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"type\">Hungry</span> <span class=\"variable\">HUNGRY</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Hungry</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Hungry <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> HUNGRY;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">Hungry</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"懒汉式单例\"><a href=\"#懒汉式单例\" class=\"headerlink\" title=\"懒汉式单例\"></a>懒汉式单例</h2><p>使用时分配空间。</p>\n<h3 id=\"普通的懒汉式单例（仅用于学习）\"><a href=\"#普通的懒汉式单例（仅用于学习）\" class=\"headerlink\" title=\"普通的懒汉式单例（仅用于学习）\"></a>普通的懒汉式单例（仅用于学习）</h3><h4 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//懒汉式单例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LazyMan</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LazyMan lazyMan;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazyMan <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lazyMan==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            lazyMan = <span class=\"keyword\">new</span> <span class=\"title class_\">LazyMan</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lazyMan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LazyMan</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>相对于“饿汉式单例”，懒汉式单例在使用时才分配内存，避免了内存占用。</p>\n<h4 id=\"多线程下不适用\"><a href=\"#多线程下不适用\" class=\"headerlink\" title=\"多线程下不适用\"></a>多线程下不适用</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//懒汉式单例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LazyMan</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LazyMan lazyMan;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazyMan <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lazyMan==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            lazyMan = <span class=\"keyword\">new</span> <span class=\"title class_\">LazyMan</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lazyMan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LazyMan</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//多线程</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                LazyMan.getInstance();</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Thread-0</span><br><span class=\"line\">Thread-4</span><br><span class=\"line\">Thread-1</span><br><span class=\"line\">Thread-2</span><br></pre></td></tr></table></figure>\n\n<p>出现错误：多线程下多次创建对象。</p>\n<h3 id=\"DCL懒汉式单例（仅用于学习）\"><a href=\"#DCL懒汉式单例（仅用于学习）\" class=\"headerlink\" title=\"DCL懒汉式单例（仅用于学习）\"></a>DCL懒汉式单例（仅用于学习）</h3><p><em>懒汉式单例dev0.2</em></p>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//懒汉式单例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LazyMan</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LazyMan lazyMan;</span><br><span class=\"line\">    <span class=\"comment\">//双重监测锁模式的 懒汉式单例  DCL懒汉式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazyMan <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lazyMan==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (LazyMan.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(lazyMan==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    lazyMan = <span class=\"keyword\">new</span> <span class=\"title class_\">LazyMan</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lazyMan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LazyMan</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>将getInstance()方法中创建对象的过程添加了“双重检测锁”。</p>\n<p>解决了多线程下，对象反复创建的问题。</p>\n<h4 id=\"多线程下不适用2-0\"><a href=\"#多线程下不适用2-0\" class=\"headerlink\" title=\"多线程下不适用2.0\"></a>多线程下不适用2.0</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//懒汉式单例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LazyMan</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> LazyMan lazyMan;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//双重监测锁模式的 懒但是单例  DCL懒汉式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazyMan <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lazyMan==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (LazyMan.class)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(lazyMan==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    lazyMan = <span class=\"keyword\">new</span> <span class=\"title class_\">LazyMan</span>();<span class=\"comment\">// 不是一个原子性操作</span></span><br><span class=\"line\">                    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">                     * 将这个操作分割：</span></span><br><span class=\"line\"><span class=\"comment\">                     * 1. 分配内存空间</span></span><br><span class=\"line\"><span class=\"comment\">                     * 2. 执行构造方法，初始化对象</span></span><br><span class=\"line\"><span class=\"comment\">                     * 3. 把这个对象指向这个空间</span></span><br><span class=\"line\"><span class=\"comment\">                     *</span></span><br><span class=\"line\"><span class=\"comment\">                     * 在多线程执行过程中，可能会发生“指令编排”，导致操作顺序错乱，并造成问题。</span></span><br><span class=\"line\"><span class=\"comment\">                     * 如：</span></span><br><span class=\"line\"><span class=\"comment\">                     * 线程A执行了顺序：132，执行到3结束时，</span></span><br><span class=\"line\"><span class=\"comment\">                     * 线程B中的getInstance()发现lazyMan不为null，直接返回，</span></span><br><span class=\"line\"><span class=\"comment\">                     * 在线程A的2执行前，也就是对象构造方法执行前，线程B使用了没有进行构造方法lazyMan对象，造成意外。</span></span><br><span class=\"line\"><span class=\"comment\">                     * 解决方法：在lazyMan前添加volatile，避免指令重排。</span></span><br><span class=\"line\"><span class=\"comment\">                     */</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lazyMan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LazyMan</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//多线程</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                LazyMan.getInstance();</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在getInstance()方法中，<code>lazyMan = new LazyMan();</code>不是一个原子类操作，可以再分：</p>\n<ol>\n<li>分配内存空间</li>\n<li>执行构造方法，初始化对象</li>\n<li>把这个对象指向这个空间</li>\n</ol>\n<p>在多线程执行过程中，可能会发生“指令编排”，导致操作顺序错乱，并造成问题。</p>\n<p>如：<br>线程A执行了顺序：132，执行到3结束时，线程B中的getInstance()发现lazyMan不为null，直接返回，在线程A的2执行前，也就是对象构造方法执行前，线程B使用了没有进行构造方法lazyMan对象，造成意外。<br><strong>解决方法：</strong>在lazyMan前添加volatile，避免指令重排。</p>\n<h3 id=\"正确的DCL懒汉式单例\"><a href=\"#正确的DCL懒汉式单例\" class=\"headerlink\" title=\"正确的DCL懒汉式单例\"></a>正确的DCL懒汉式单例</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//懒汉式单例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">LazyMan</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> LazyMan lazyMan;<span class=\"comment\">//添加volatile，防止代码重新编排。具体影响位置：getInstance()下的lazyMan = new LazyMan();</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//双重监测锁模式的 懒汉式单例  DCL懒汉式</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazyMan <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(lazyMan==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (LazyMan.class)&#123; <span class=\"comment\">//双重检测锁模式 避免对象反复创建</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(lazyMan==<span class=\"literal\">null</span>)&#123;</span><br><span class=\"line\">                    lazyMan = <span class=\"keyword\">new</span> <span class=\"title class_\">LazyMan</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> lazyMan;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"title function_\">LazyMan</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"反破解DCL懒汉式单例\"><a href=\"#反破解DCL懒汉式单例\" class=\"headerlink\" title=\"反破解DCL懒汉式单例\"></a>反破解DCL懒汉式单例</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//懒汉式单例</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">LazyManV5</span> &#123;</span><br><span class=\"line\">    INSTANCE;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> LazyManV5 <span class=\"title function_\">getInstance</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> INSTANCE;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>这 ….这还是懒汉式单例吗？</em></p>\n","categories":[],"tags":["Java"]},{"title":"Day11 多线程进阶 7 JMM Volatile","url":"http://zswh33.github.io/2022/09/03/Day11-Multithreading2-7/","content":"<h1 id=\"JMM\"><a href=\"#JMM\" class=\"headerlink\" title=\"JMM\"></a>JMM</h1><p><em>Java Memory Model</em></p>\n<blockquote>\n<p>介绍</p>\n</blockquote>\n<p>JMM：Java内存模型。（一个约定，协议）</p>\n<blockquote>\n<p>使用场景 &#x2F; 解决的问题</p>\n</blockquote>\n<p>在不同硬件生产商和不同操作系统下，内存的访问逻辑有一定的差异，导致一段代码在某个系统环境下运行良好，并且线程安全，但是换了系统就出现各种问题。</p>\n<p>Java内存模型，就是为了屏蔽系统和硬件的差异，让一套代码在不同平台下能达到相同的访问效果。</p>\n<blockquote>\n<p>概念：内存划分</p>\n</blockquote>\n<p>JMM规定<strong>内存</strong>主要划分为<strong>主内存和工作内存两种</strong>。</p>\n<p>此处的主内存和工作内存与JVM内存划分（堆、栈、方法区）是在不同的层次上进行的，若非要对应起来，主内存对应的是Java堆中的对象实例部分，工作内存对应的是栈中的部分区域。</p>\n<p>从底层来看，<strong>主内存</strong>对应的是<strong>硬件的物理内存</strong>，<strong>工作内存</strong>对应的是<strong>寄存器和高速缓存</strong>。</p>\n<blockquote>\n<p>概念：内存交互操作</p>\n</blockquote>\n<p>内存交互操作有8中，虚拟机实现必须保证每一个操作都是原子的（原子：即不可再分的）。</p>\n<table>\n<thead>\n<tr>\n<th>原子操作</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>lock(锁定)</td>\n<td>作用于主内存的变量，把一个变量标识为线程独占状态。</td>\n</tr>\n<tr>\n<td>unlock(解锁)</td>\n<td>作用于主内存的变量，把一个处于锁定状态的变量释放出来。</td>\n</tr>\n<tr>\n<td>read(读取)</td>\n<td>作用于主内存的变量，把一个变量的值从主内存传输到线程的工作内存中。与load一起使用。</td>\n</tr>\n<tr>\n<td>load(载入)</td>\n<td>作用于工作内存的变量，把 <strong>read操作从主存中传输的变量</strong> 放入工作内存中。与read一起使用。</td>\n</tr>\n<tr>\n<td>use（使用）</td>\n<td>作用于工作内存的变量，把工作内存的变量传输给执行引擎。每当虚拟机遇到一个需要使用到变量的值，就要用到这个指定。</td>\n</tr>\n<tr>\n<td>assign（赋值）</td>\n<td>作用于工作内存的变量，把一个从执行引擎中接受到的值放入工作内存的变量副本中。</td>\n</tr>\n<tr>\n<td>store（存储）</td>\n<td>作用于主内存中的变量，把一个从工作内存变量的值传输到主内存中。与write一起使用。</td>\n</tr>\n<tr>\n<td>write（写入）</td>\n<td>作用于主内存中的变量，把store操作从工作内存中得到的变量的值放入主内存的变量中。与store一起使用。</td>\n</tr>\n</tbody></table>\n<p><strong>JMM原子操作的一些约定：</strong></p>\n<ol>\n<li>不允许read和load、store和write操作之一单独出现，即使用了read必须load，使用了store必须write；</li>\n<li>不允许线程丢弃它最近的assign操作，即工作变量数据改变之后，必须告知内存；</li>\n<li>不允许一个线程将没有assign的数据从工作内存同步回主内存；</li>\n<li>一个新的变量必须在内存中诞生，不允许工作内存直接使用一个未被初始化的变量。也就是对变量实施use、store操作之前，必须经过assign和load操作；</li>\n<li>一个变量同一时间只有一个线程能对其进行lock。多次lock后，必须执行相同次数的unlock才能解锁；</li>\n<li>如果对一个变量进行lock操作，会清空所有工作内存中此变量的值，在执行引擎使用这个变量前，必须重新load或assign操作初始化变量的值；</li>\n<li>如果一个变量没有被lock，就不能对其进行unlock操作，也不能unlock一个被其他线程锁住的变量；</li>\n<li>对一个变量进行unlock操作之前，必须把此变量同步回主内存。</li>\n</ol>\n<blockquote>\n<p>概念：一些约定</p>\n</blockquote>\n<p><em>关于JMM的一些同步的约定</em></p>\n<ol>\n<li>线程解锁前，必须立刻把<strong>共享变量立刻刷回主存</strong>；</li>\n<li>线程加锁前，必须读取主存中的最新值到工作内存中；</li>\n<li>加锁和解锁是同一把锁。</li>\n</ol>\n<h1 id=\"Volatile\"><a href=\"#Volatile\" class=\"headerlink\" title=\"Volatile\"></a>Volatile</h1><p>Volatile是Java虚拟机提供的轻量级<strong>同步机制</strong>。</p>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>hole…</p>\n<h2 id=\"作用-x2F-特征\"><a href=\"#作用-x2F-特征\" class=\"headerlink\" title=\"作用&#x2F;特征\"></a>作用&#x2F;特征</h2><ol>\n<li>保证可见性</li>\n<li>不保证原子性</li>\n<li>禁止指令重排</li>\n</ol>\n<h2 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h2><p>单例模式。</p>\n<h2 id=\"特征介绍\"><a href=\"#特征介绍\" class=\"headerlink\" title=\"特征介绍\"></a>特征介绍</h2><h3 id=\"特性1：保证可见性\"><a href=\"#特性1：保证可见性\" class=\"headerlink\" title=\"特性1：保证可见性\"></a>特性1：保证可见性</h3><p><strong>问题简述：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//出现问题：num赋值为1后，线程并没有停止</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo29_Volatile</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">//位于主存的一个变量</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (num == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//在线程中使用num时，会读取到工作区的num值，并没有同步主存的num值，</span></span><br><span class=\"line\">                <span class=\"comment\">//当主线程修改了主存中的num值，线程仍旧不会停止</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        num = <span class=\"number\">1</span>;<span class=\"comment\">//修改num值为1</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;现在num为1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当num赋值为1，子线程没有停止。因为在当前程序中，子线程运行后，会将num值复制到工作区，后续线程使用num值，只会使用到工作区的num，不使用主线程的num，主线程修改num后，子线程工作区的num仍为原来的值，导致在线程内num一直为0，子线程不会停止。</p>\n<p>另外的说法：在子线程运行后，num被read&#x2F;load到子线程的工作区后，线程的执行引擎使用工作区的num。当主线程将num值修改后，子线程工作区的num仍为原来的值，线程不会停止。</p>\n<p><strong>解决方法：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//出现问题：num赋值为1后，线程并没有停止</span></span><br><span class=\"line\"><span class=\"comment\">//解决方法：在num前加volatile</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo29_Volatile</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;<span class=\"comment\">//位于主存的一个变量</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (num == <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//在线程中使用num时，会读取到工作区的num值，并没有同步主存的num值，</span></span><br><span class=\"line\">                <span class=\"comment\">//当主线程修改了主存中的num值，线程仍旧不会停止</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        num = <span class=\"number\">1</span>;<span class=\"comment\">//修改num值为1</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;现在num为1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在num前加：volatile。</p>\n<p><em>待完善</em>  volatile可以保证可见性。</p>\n<h3 id=\"特性2：不保证原子性\"><a href=\"#特性2：不保证原子性\" class=\"headerlink\" title=\"特性2：不保证原子性\"></a>特性2：不保证原子性</h3><h4 id=\"基本问题\"><a href=\"#基本问题\" class=\"headerlink\" title=\"基本问题\"></a>基本问题</h4><p><strong>代码：</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo29_Volatile</span>不保证原子性 &#123;</span><br><span class=\"line\">    <span class=\"comment\">//volatile不保证原子性</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        num++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//理论上num结果应为20000</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">1000</span>; j++) &#123;</span><br><span class=\"line\">                    add();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//等待上面创建的线程执行结束</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (Thread.activeCount()&gt;<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//Java有两个默认线程：main和gc。所以这里写2。</span></span><br><span class=\"line\">            Thread.yield();<span class=\"comment\">//让主线程从运行态变为就绪态</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; &quot;</span>+num);<span class=\"comment\">//输出结果</span></span><br><span class=\"line\">        <span class=\"comment\">//main 18821</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在当前程序中，num输出结果并不是20000。</p>\n<h4 id=\"如何解决这个问题？\"><a href=\"#如何解决这个问题？\" class=\"headerlink\" title=\"如何解决这个问题？\"></a>如何解决这个问题？</h4><p>方法1： 在add()方法前添加synchronized，或添加lock机制。</p>\n<p>方法2： 将int替换为AtomicInteger原子Integer类。</p>\n<h4 id=\"使用原子类解决这个问题：将int替换为AtomicInteger原子Integer类。\"><a href=\"#使用原子类解决这个问题：将int替换为AtomicInteger原子Integer类。\" class=\"headerlink\" title=\"使用原子类解决这个问题：将int替换为AtomicInteger原子Integer类。\"></a><strong>使用原子类解决这个问题：将int替换为AtomicInteger原子Integer类。</strong></h4><blockquote>\n<p>分析add()的字节码</p>\n</blockquote>\n<p><img src=\"/2022/09/03/Day11-Multithreading2-7/image-20220903103744379.png\" alt=\"add()的字节码文件\"></p>\n<p>add()里的“num++”，是<strong>线程不安全的</strong>。从底层看，”num++”<strong>不是一个原子性操作</strong>。</p>\n<blockquote>\n<p>使用原子类，解决原子性问题</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo29_Volatile</span>不保证原子性_从原子角度解决问题 &#123;</span><br><span class=\"line\">    <span class=\"comment\">// volatile不保证原子性</span></span><br><span class=\"line\">    <span class=\"comment\">// 将int改为AtomicInteger原子类Integer。</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> <span class=\"keyword\">static</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">num</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">add</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//num++;//不是一个原子性操作</span></span><br><span class=\"line\">        num.getAndIncrement();<span class=\"comment\">// AtomicInteger + 1 方法 底层：CAS</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//理论上num结果应为20000</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; j &lt; <span class=\"number\">1000</span>; j++) &#123;</span><br><span class=\"line\">                    add();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//等待上面创建的线程执行结束</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (Thread.activeCount()&gt;<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//Java有两个默认线程：main和gc。所以这里写2。</span></span><br><span class=\"line\">            Thread.yield();<span class=\"comment\">//让主线程从运行态变为就绪态</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; &quot;</span>+num);<span class=\"comment\">//输出结果</span></span><br><span class=\"line\">        <span class=\"comment\">//main 20000</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>AtomicInteger</p>\n</blockquote>\n<p><em>类的底层直接与操作系统挂钩！在内存中操作值。</em></p>\n<p>hole….</p>\n<h3 id=\"特性3：禁止指令重排\"><a href=\"#特性3：禁止指令重排\" class=\"headerlink\" title=\"特性3：禁止指令重排\"></a>特性3：禁止指令重排</h3><blockquote>\n<p>介绍</p>\n</blockquote>\n<p>Volatile基于内存屏障，可以避免指令重排。</p>\n<blockquote>\n<p>实现原理</p>\n</blockquote>\n<p>在正常的指令流中，xx会为volatile指令前后添加内存屏障，禁止volatile前后的指令顺序交换。</p>\n<blockquote>\n<p>依赖</p>\n</blockquote>\n<p>内存屏障 作用：</p>\n<ol>\n<li>保证特定的操作的执行顺序；</li>\n<li>可以保证某些变量的内存可见性；</li>\n</ol>\n<p><strong>依赖于“内存屏障”，volatile实现了禁止指令重排。</strong></p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"指令重排\"><a href=\"#指令重排\" class=\"headerlink\" title=\"指令重排\"></a>指令重排</h2><blockquote>\n<p>介绍</p>\n</blockquote>\n<p>计算机不按照写的程序的顺序去执行。</p>\n<blockquote>\n<p>可能触发指令重排</p>\n</blockquote>\n<ol>\n<li>编译器优化的重排</li>\n<li>指令并行可能会重排</li>\n<li>内存系统重排</li>\n</ol>\n<blockquote>\n<p>一个例子</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>; <span class=\"comment\">// 2</span></span><br><span class=\"line\">x = x + <span class=\"number\">5</span>; <span class=\"comment\">// 3</span></span><br><span class=\"line\">y = x * x; <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<p>我们期望的： 1234</p>\n<p>实际执行可能的存在： 1324 、 2134等</p>\n<p>不可能的存在：4123</p>\n<h2 id=\"查看class文件字节码\"><a href=\"#查看class文件字节码\" class=\"headerlink\" title=\"查看class文件字节码\"></a>查看class文件字节码</h2><p>javap -c 类名.class</p>\n<h2 id=\"原子性操作\"><a href=\"#原子性操作\" class=\"headerlink\" title=\"原子性操作\"></a>原子性操作</h2><p>原子，即不可再分。</p>\n","categories":[],"tags":["Java"]},{"title":"Day10 多线程进阶 6 四大函数式接口 Stream流式计算 ForkJoin分支合并 CompletableFuture异步回调","url":"http://zswh33.github.io/2022/09/02/Day10-Multitherading2-6/","content":"<h1 id=\"四大函数式接口\"><a href=\"#四大函数式接口\" class=\"headerlink\" title=\"四大函数式接口\"></a>四大函数式接口</h1><blockquote>\n<p>函数式接口</p>\n</blockquote>\n<p>只有一个方法的接口。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//例 Callable接口</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Callable</span>&lt;V&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Computes a result, or throws an exception if unable to do so.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> computed result</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception if unable to compute a result</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    V <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Function函数式接口\"><a href=\"#Function函数式接口\" class=\"headerlink\" title=\"Function函数式接口\"></a>Function函数式接口</h2><p>Function接口可以将一个函数变成一个变量。</p>\n<p>Function可以用来写工具类，泛型参数里，第一个为传入类型，第二个为返回类型。</p>\n<blockquote>\n<p>源码</p>\n</blockquote>\n<p><img src=\"/2022/09/02/Day10-Multitherading2-6/image-20220902171032827.png\" alt=\"Function\"></p>\n<blockquote>\n<p>使用</p>\n</blockquote>\n<p>基本用法（不常用的用法）：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo21_Function</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Function可以用来写工具类，泛型参数里，第一个为传入类型，第二个为返回类型。</span></span><br><span class=\"line\">        <span class=\"comment\">//这里写一个工具类用于演示：返回输入整数+1。</span></span><br><span class=\"line\">        Function&lt;Integer,Integer&gt; function_plus1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Function</span>&lt;Integer,Integer&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Integer <span class=\"title function_\">apply</span><span class=\"params\">(Integer o)</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> o+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(function_plus1.apply(<span class=\"number\">123</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>常用用法：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo21_Function</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Function可以用来写工具类，泛型参数里，第一个为传入类型，第二个为返回类型。</span></span><br><span class=\"line\">        <span class=\"comment\">//这里写一个工具类用于演示：返回输入整数+1。</span></span><br><span class=\"line\">        Function&lt;Integer,Integer&gt; function_plus1 = (in)-&gt;&#123;<span class=\"keyword\">return</span> (<span class=\"type\">int</span>)in+<span class=\"number\">1</span>;&#125;;</span><br><span class=\"line\">        System.out.println(function_plus1.apply(<span class=\"number\">123</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>创建一个Function的引用，然后将一个lambda表达式的函数传值给引用；</p>\n<p>调用使用方法<code>apply(参数)</code>,返回值为lambda表达式的返回值。</p>\n<h2 id=\"Predicate断定型接口\"><a href=\"#Predicate断定型接口\" class=\"headerlink\" title=\"Predicate断定型接口\"></a>Predicate断定型接口</h2><p>不同于Function，Predicate定义的函数只能返回<code>boolean</code>值，输入参数不限。</p>\n<blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo22_Predicate</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Predicate也是一个函数式接口，不同的是：Predicate创建的函数只能返回boolean类型。</span></span><br><span class=\"line\">        <span class=\"comment\">//泛型参数为输入参数类型。</span></span><br><span class=\"line\">        <span class=\"comment\">//当前代码：判断字符串是否为空。</span></span><br><span class=\"line\">        Predicate&lt;String&gt; predicate_isEmpty = (string)-&gt;&#123;<span class=\"keyword\">return</span> string.isEmpty();&#125;;</span><br><span class=\"line\">        System.out.println(predicate_isEmpty.test(<span class=\"string\">&quot;asdqwe&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">false</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Consumer消费型接口\"><a href=\"#Consumer消费型接口\" class=\"headerlink\" title=\"Consumer消费型接口\"></a>Consumer消费型接口</h2><p>功能上与函数式接口基本一致。</p>\n<p>特点：只有输入，没有返回值。</p>\n<blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo23_Consumer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//Consumer消费型接口，只有输入没有返回值。</span></span><br><span class=\"line\">        <span class=\"comment\">//这里写一个：输出字符串。</span></span><br><span class=\"line\">        Consumer&lt;String&gt; consumer = (str)-&gt;&#123;System.out.println(str);&#125;;</span><br><span class=\"line\">        consumer.accept(<span class=\"string\">&quot;张三李四&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用方法<code>accept(参数)</code>使用该接口的实现对象。</p>\n<h2 id=\"Supplier供给型接口\"><a href=\"#Supplier供给型接口\" class=\"headerlink\" title=\"Supplier供给型接口\"></a>Supplier供给型接口</h2><p><em>“功能上与函数式接口基本一致。”</em></p>\n<p>特点：没有输入，只有返回值。</p>\n<blockquote>\n<p>源码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Supplier</span>&lt;T&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Gets a result.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> a result</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    T <span class=\"title function_\">get</span><span class=\"params\">()</span>;<span class=\"comment\">//没有参数，只有返回值</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>代码&#x2F;使用</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Supplier供给型接口：没有参数，只有返回值。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo24_Supplies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里写一个：只会返回1024的函数。</span></span><br><span class=\"line\">        Supplier&lt;Integer&gt; supplier = <span class=\"keyword\">new</span> <span class=\"title class_\">Supplier</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Integer <span class=\"title function_\">get</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;get!&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">1024</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(supplier.get());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>使用<code>get()</code>方法执行函数。</p>\n<blockquote>\n<p>代码 简化</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo24_Supplies</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//这里写一个：只会返回1024的函数。</span></span><br><span class=\"line\">        Supplier&lt;Integer&gt; supplier = ()-&gt;&#123;<span class=\"keyword\">return</span> <span class=\"number\">1024</span>;&#125;;</span><br><span class=\"line\">        System.out.println(supplier.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Stream流式计算\"><a href=\"#Stream流式计算\" class=\"headerlink\" title=\"Stream流式计算\"></a>Stream流式计算</h1><p><em>java.util.stream</em></p>\n<p>大数据时代，无非就是：<strong>存储 + 计算</strong></p>\n<p>比如：MySQL、Java集合等本质是用来存储东西的。</p>\n<p><strong>Stream流式计算</strong>就是用来<strong>计算</strong>。</p>\n<blockquote>\n<p>一个题目</p>\n<p>用一行代码实现：</p>\n<p>现在有5个用户，要求筛选出：</p>\n<ol>\n<li>ID必须是偶数</li>\n<li>年龄必须大于23岁</li>\n<li>用户名转为大写字母</li>\n<li>用户名字母倒着排序</li>\n<li>只输出一个用户</li>\n</ol>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo26_Stream</span>流式计算引入_一道题 &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 用一行代码实现：</span></span><br><span class=\"line\"><span class=\"comment\">     * 现在有5个用户，要求筛选出：</span></span><br><span class=\"line\"><span class=\"comment\">     * 1. ID必须是偶数</span></span><br><span class=\"line\"><span class=\"comment\">     * 2. 年龄必须大于23岁</span></span><br><span class=\"line\"><span class=\"comment\">     * 3. 用户名转为大写字母</span></span><br><span class=\"line\"><span class=\"comment\">     * 4. 用户名字母倒着排序</span></span><br><span class=\"line\"><span class=\"comment\">     * 5. 只输出一个用户</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">1</span>,<span class=\"string\">&quot;a&quot;</span>,<span class=\"number\">21</span>);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">2</span>,<span class=\"string\">&quot;b&quot;</span>,<span class=\"number\">22</span>);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">3</span>,<span class=\"string\">&quot;c&quot;</span>,<span class=\"number\">23</span>);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u4</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">4</span>,<span class=\"string\">&quot;d&quot;</span>,<span class=\"number\">24</span>);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">u5</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User</span>(<span class=\"number\">6</span>,<span class=\"string\">&quot;e&quot;</span>,<span class=\"number\">25</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//集合用于存储</span></span><br><span class=\"line\">        List&lt;User&gt; userList = Arrays.asList(u1,u2,u3,u4,u5);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//流用于计算</span></span><br><span class=\"line\">        userList.stream()</span><br><span class=\"line\">                .filter(u-&gt;&#123;<span class=\"keyword\">return</span> u.getId()%<span class=\"number\">2</span>==<span class=\"number\">0</span>;&#125;)<span class=\"comment\">//ID为偶数</span></span><br><span class=\"line\">                .filter(u-&gt;&#123;<span class=\"keyword\">return</span> u.getAge()&gt;<span class=\"number\">23</span>;&#125;)<span class=\"comment\">//年龄大于23</span></span><br><span class=\"line\">                .map(u-&gt;&#123;<span class=\"keyword\">return</span> u.getName().toUpperCase();&#125;)<span class=\"comment\">//名字大写</span></span><br><span class=\"line\">                .sorted((uu1,uu2)-&gt;&#123;<span class=\"keyword\">return</span> uu2.compareTo(uu1);&#125;)<span class=\"comment\">//逆序</span></span><br><span class=\"line\">                .limit(<span class=\"number\">1</span>)<span class=\"comment\">//输出1个</span></span><br><span class=\"line\">                .forEach(System.out::println);</span><br><span class=\"line\">        <span class=\"comment\">//Lambda表达式、链式编程、函数式接口、Stream流式计算</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> id;</span><br><span class=\"line\">    String name;</span><br><span class=\"line\">    <span class=\"type\">int</span> age;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">User</span><span class=\"params\">(<span class=\"type\">int</span> id, String name, <span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getId</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setId</span><span class=\"params\">(<span class=\"type\">int</span> id)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">getName</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setName</span><span class=\"params\">(String name)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getAge</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setAge</span><span class=\"params\">(<span class=\"type\">int</span> age)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;User&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;id=&quot;</span> + id +</span><br><span class=\"line\">                <span class=\"string\">&quot;, name=&#x27;&quot;</span> + name + <span class=\"string\">&#x27;\\&#x27;&#x27;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;, age=&quot;</span> + age +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>好像没有说明Stream流式计算是什么？！</em></p>\n<p>dig hole…</p>\n<h1 id=\"ForkJoin-分支合并\"><a href=\"#ForkJoin-分支合并\" class=\"headerlink\" title=\"ForkJoin 分支合并\"></a>ForkJoin 分支合并</h1><p><em>起源于JDK1.7</em></p>\n<blockquote>\n<p>介绍</p>\n</blockquote>\n<p>是一个<strong>分而治之</strong>的任务框架。</p>\n<p>使用场景：一个任务需要多线程执行，分割成很多块计算的时候，使用ForkJoin方法。</p>\n<p>ForkJoin的作用：对于大数据量计算，用于提高效率。</p>\n<blockquote>\n<p>特点</p>\n</blockquote>\n<p><strong>动态规范</strong>：和分而治之不同的是，任务分割的每个小任务之间互相联系。</p>\n<p><strong>工作密取（<del>工作窃取</del>）：</strong>分割了每个任务之后，若某个线程提前完成了任务，就会去其他线程偷取任务来完成，加快执行效率。同时，第一个分配的线程从队列的头部拿取任务，当完成任务的线程后去其他队列拿任务时候是从尾部拿任务。</p>\n<blockquote>\n<p>使用</p>\n</blockquote>\n<p>Hole…</p>\n<h1 id=\"异步回调\"><a href=\"#异步回调\" class=\"headerlink\" title=\"异步回调\"></a>异步回调</h1><p><em>类似ajax，将Java的线程创建过程包装，使创建线程更加方便。缺点是远离了底层，减少了手动优化的机会。</em></p>\n<h2 id=\"CompletableFuture类\"><a href=\"#CompletableFuture类\" class=\"headerlink\" title=\"CompletableFuture类\"></a>CompletableFuture类</h2><h3 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h3><table>\n<thead>\n<tr>\n<th>API</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>static  runAsync(Runnable runnable)</td>\n<td>创建一个无返回值的异步回调。</td>\n</tr>\n<tr>\n<td>static  supplyAsync(Supplier<U> supplier)</U></td>\n<td>创建一个有返回值的异步回调</td>\n</tr>\n<tr>\n<td>whenComplete(BiConsumer&lt;? super T, ? super Throwable&gt; action)</td>\n<td>为CompletableFuture对象的异步回调添加<strong>运行结束</strong>时要执行的操作。T为运行成功返回的结果，运行失败为null。Throwable为运行失败的错误信息，成功为null（运行失败指抛出异常或其他错误）。action为BiConsumer对象，用于使用参数和添加回调方法。返回值为CompletableFuture对象，可以使用链式编程。</td>\n</tr>\n<tr>\n<td>exceptionally(Function&lt;Throwable, ? extends T&gt; fn)</td>\n<td>为CompletableFuture对象的异步回调添加<strong>出现异常</strong>时要执行的操作。T为抛出的异常。fn为要执行的操作。</td>\n</tr>\n<tr>\n<td>get()</td>\n<td>使用runAsync()或supplyAsync()方法后，会返回一个CompletableFuture对象，可以使用get()方法获取异步回调的返回值。若线程未运行结束，则会阻塞当前线程等待运行结束。runAsync()的返回值为Void(无返回值)，supplyAsync()返回值由输入指定。</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><blockquote>\n<p>runAsync()和supplyAsyn()</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 异步调用：CompletableFuture</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo28_Future</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 发起一个请求</span></span><br><span class=\"line\">        <span class=\"comment\">// runAsync() 没有返回值的异步回调</span></span><br><span class=\"line\">        CompletableFuture&lt;Void&gt; completableFuture = CompletableFuture.runAsync(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; ok&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;等待runAsync异步请求的结果....&quot;</span>);</span><br><span class=\"line\">        completableFuture.get();<span class=\"comment\">//获取</span></span><br><span class=\"line\">        <span class=\"comment\">//supplyAsync 有返回值的异步回调</span></span><br><span class=\"line\">        CompletableFuture&lt;String&gt; completableFuture2 = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; supplyAsync异步回调&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;今天吃Obsidian&quot;</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;等待supplyAsync异步请求的结果.....&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;supplyAsync异步请求的结果：&quot;</span>+completableFuture2.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>supplyAsync()下的whenComplete()和exceptionally()</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 异步调用：CompletableFuture</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo28_Future2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//supplyAsync 有返回值的异步回调,包括成功、失败的回调。</span></span><br><span class=\"line\">        CompletableFuture&lt;String&gt; completableFuture2 = CompletableFuture.supplyAsync(()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; supplyAsync异步回调&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>/<span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;今天吃Obsidian&quot;</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        completableFuture2.whenComplete((t,u)-&gt;&#123;</span><br><span class=\"line\">            System.out.println(</span><br><span class=\"line\">                    <span class=\"string\">&quot;事件完成：&quot;</span> +</span><br><span class=\"line\">                            t+   <span class=\"comment\">//成功时，为正确的返回值，失败时为null</span></span><br><span class=\"line\">                            <span class=\"string\">&quot; &quot;</span>+u <span class=\"comment\">//失败时，为错误信息，成功时为null</span></span><br><span class=\"line\">            );</span><br><span class=\"line\">        &#125;).exceptionally((e)-&gt;&#123;</span><br><span class=\"line\">            System.out.println(e);<span class=\"comment\">//异常时，打印异常信息</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"string\">&quot;今天不吃Obsidian.&quot;</span>;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;等待supplyAsync异步请求的结果.....&quot;</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;supplyAsync异步请求的结果：&quot;</span>+completableFuture2.get());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"forEach-使用\"><a href=\"#forEach-使用\" class=\"headerlink\" title=\"forEach()使用\"></a><code>forEach()</code>使用</h2><p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = Arrays.asList(<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"number\">6</span>);</span><br><span class=\"line\">list.forEach((d)-&gt;&#123;</span><br><span class=\"line\">    System.out.print(d);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">123456</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"lambda代码简化\"><a href=\"#lambda代码简化\" class=\"headerlink\" title=\"lambda代码简化\"></a>lambda代码简化</h2><p>原本：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Consumer&lt;String&gt; consumer = <span class=\"keyword\">new</span> <span class=\"title class_\">Consumer</span>&lt;String&gt;() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">accept</span><span class=\"params\">(String s)</span> &#123;</span><br><span class=\"line\">        System.out.println(s);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>简化1：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Consumer&lt;String&gt; consumer = (str)-&gt;&#123;System.out.println(str);&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>简化2：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Consumer&lt;String&gt; consumer = System.out::println;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>当lambda代码块中<strong>只有一个方法</strong>，且<strong>方法的参数和lambda表达式的参数一致</strong>，才可以使用。</p>\n<h2 id=\"枚举enum\"><a href=\"#枚举enum\" class=\"headerlink\" title=\"枚举enum\"></a>枚举enum</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo25_</span>枚举 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Animal</span> <span class=\"variable\">animal</span> <span class=\"operator\">=</span> Animal.cat;</span><br><span class=\"line\">        System.out.println(animal);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">enum</span> <span class=\"title class_\">Animal</span>&#123;</span><br><span class=\"line\">    pig,cat,dog</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三种方法的求和计算\"><a href=\"#三种方法的求和计算\" class=\"headerlink\" title=\"三种方法的求和计算\"></a>三种方法的求和计算</h1><blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 任务：求和计算</span></span><br><span class=\"line\"><span class=\"comment\"> * 方法：</span></span><br><span class=\"line\"><span class=\"comment\"> * 1. 1000000000.for</span></span><br><span class=\"line\"><span class=\"comment\"> * 2. ForkJoin</span></span><br><span class=\"line\"><span class=\"comment\"> * 3. Stream并行流</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo27_</span>求和计算三种方法 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//基本方法</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sum=&quot;</span>+ProgramTime.get(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0L</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">long</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">9_0000_0000</span>; i++) &#123;</span><br><span class=\"line\">                sum += i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;===================&quot;</span>);</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//ForkJoin方法</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sum=&quot;</span>+ProgramTime.get(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"type\">ForkJoinPool</span> <span class=\"variable\">forkJoinPool</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ForkJoinPool</span>();</span><br><span class=\"line\">            ForkJoinTask&lt;Long&gt; task = <span class=\"keyword\">new</span> <span class=\"title class_\">ForkJoinDemo</span>(<span class=\"number\">0l</span>,<span class=\"number\">9_0000_0000l</span>);</span><br><span class=\"line\">            ForkJoinTask&lt;Long&gt; sumbit = forkJoinPool.submit(task);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sumbit.get();</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;===================&quot;</span>);</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//Stream并行流方法</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;sum=&quot;</span>+ProgramTime.get(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> LongStream.rangeClosed(<span class=\"number\">0l</span>,<span class=\"number\">9_0000_0000l</span>)</span><br><span class=\"line\">                    .parallel()</span><br><span class=\"line\">                    .reduce(<span class=\"number\">0</span>,Long::sum);</span><br><span class=\"line\">        &#125;));</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;===================&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ProgramTime</span>&lt;T&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">long</span> <span class=\"title function_\">get</span><span class=\"params\">(Callable&lt;Long&gt; fun)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">long</span> rs;</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        rs = fun.call();</span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;执行了时间：&quot;</span>+(end-start));</span><br><span class=\"line\">        <span class=\"keyword\">return</span> rs;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ForkJoinDemo</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">RecursiveTask</span>&lt;Long&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long start;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Long end;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Long</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> <span class=\"number\">10000L</span>;<span class=\"comment\">//临界值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">ForkJoinDemo</span><span class=\"params\">(Long start, Long end)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.start = start;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.end = end;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Long <span class=\"title function_\">compute</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (end - start &lt; temp) &#123;<span class=\"comment\">//若计算范围小于10000，就用普通方式计算</span></span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0L</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">long</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> start; i &lt;= end; i++) &#123;</span><br><span class=\"line\">                sum += i;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(sum);</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//ForkJoin 分支合并计算</span></span><br><span class=\"line\">            <span class=\"type\">long</span> <span class=\"variable\">mid</span> <span class=\"operator\">=</span> (start + end) / <span class=\"number\">2</span>;<span class=\"comment\">//中间值</span></span><br><span class=\"line\">            <span class=\"type\">ForkJoinDemo</span> <span class=\"variable\">task1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ForkJoinDemo</span>(start, mid);</span><br><span class=\"line\">            task1.fork();<span class=\"comment\">//拆分任务，把任务放入线程队列</span></span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(&quot;qwe&quot;);</span></span><br><span class=\"line\">            <span class=\"type\">ForkJoinDemo</span> <span class=\"variable\">task2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ForkJoinDemo</span>((mid + <span class=\"number\">1</span>), end);</span><br><span class=\"line\">            task2.fork();<span class=\"comment\">//后半部分</span></span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(&quot;asd&quot;);</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> task1.join() + task2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>输出</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">执行了时间：434</span><br><span class=\"line\">sum=405000000450000000</span><br><span class=\"line\">===================</span><br><span class=\"line\">执行了时间：253</span><br><span class=\"line\">sum=405000000450000000</span><br><span class=\"line\">===================</span><br><span class=\"line\">执行了时间：128</span><br><span class=\"line\">sum=405000000450000000</span><br><span class=\"line\">===================</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":["Java"]},{"title":"Day9 多线程进阶 5 读写锁 阻塞队列 同步队列 线程池","url":"http://zswh33.github.io/2022/09/01/Day9-Multithreading2-5/","content":"<h1 id=\"读写锁-ReentrantReadWriteLock\"><a href=\"#读写锁-ReentrantReadWriteLock\" class=\"headerlink\" title=\"读写锁 ReentrantReadWriteLock\"></a>读写锁 ReentrantReadWriteLock</h1><p>ReentrantReadWriteLock维护一对关联的Locks，一个用于只读操作，一个用于写入操作。</p>\n<p>读操作可以由多个线程进行，写操作只能由一个线程操作。</p>\n<p>当写操作由一个线程执行时，其他线程不能进行读操作，也不能进行写操作。</p>\n<p>当读操作被执行时，其他线程不能进行写操作。</p>\n<p><strong>读锁和写锁互斥。</strong></p>\n<h2 id=\"API\"><a href=\"#API\" class=\"headerlink\" title=\"API\"></a>API</h2><table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>writeLock().lock()</code></td>\n<td>锁住写锁。若写锁<strong>或</strong>读锁本来已被锁住，则阻塞，直到写锁<strong>和</strong>读锁被释放。阻塞结束后，锁住写锁，然后继续运行。</td>\n</tr>\n<tr>\n<td><code>writeLock().unlock()</code></td>\n<td>释放写锁。</td>\n</tr>\n<tr>\n<td><code>readLock().lock()</code></td>\n<td>锁住读锁。若写锁被锁住，则该方法阻塞，直到写锁被释放。阻塞结束后，锁住读锁，然后继续运行。</td>\n</tr>\n<tr>\n<td><code>readLock().unlock()</code></td>\n<td>释放读锁。</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * ReadWriteLock</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo16_ReadWriteLock</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MyCache</span> <span class=\"variable\">myCache</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyCache</span>();</span><br><span class=\"line\">        <span class=\"comment\">//写入</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span>  i;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                myCache.put(String.valueOf(temp),temp+<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//读取</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span>  i;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                myCache.get(String.valueOf(temp));</span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//自定义缓存</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyCache</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">volatile</span> Map&lt;String,Object&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">ReadWriteLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantReadWriteLock</span>();</span><br><span class=\"line\">    <span class=\"comment\">//存 写入的时候，只希望有一个线程写</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">put</span><span class=\"params\">(String key,Object value)</span>&#123;</span><br><span class=\"line\">        lock.writeLock().lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; 写入开始&quot;</span>);</span><br><span class=\"line\">            map.put(key,value);</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; 写入结束&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.writeLock().unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//取 读，可以有多个线程读</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Object <span class=\"title function_\">get</span><span class=\"params\">(String key)</span>&#123;</span><br><span class=\"line\">        lock.readLock().lock();</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; 读取开始&quot;</span>);</span><br><span class=\"line\">            o = map.get(key);</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; 读取结束&quot;</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.readLock().unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>  o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><ul>\n<li>写入时，用<code>lock.writeLock().lock()</code>锁住写锁；写入结束后，用<code>lock.writeLock().unlock()</code>释放写锁。</li>\n<li>读取时，用<code>lock.readLock().lock()</code>锁住读锁；读取结束后，用<code>lock.readLock().unlock()</code>释放读锁。</li>\n</ul>\n<h1 id=\"阻塞队列-BlockingQueue\"><a href=\"#阻塞队列-BlockingQueue\" class=\"headerlink\" title=\"阻塞队列 BlockingQueue\"></a>阻塞队列 BlockingQueue</h1><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><h3 id=\"Collection结构-和-队列类型介绍\"><a href=\"#Collection结构-和-队列类型介绍\" class=\"headerlink\" title=\"Collection结构 和 队列类型介绍\"></a>Collection结构 和 队列类型介绍</h3><p><img src=\"/2022/09/01/Day9-Multithreading2-5/image-20220902081842223.png\" alt=\"Collection接口的实现类结构。阻塞队列引入\"></p>\n<p><img src=\"/2022/09/01/Day9-Multithreading2-5/image-20220902085754900.png\" alt=\"队列\"></p>\n<p>Queue队列分三种：</p>\n<ul>\n<li>AbstractQueue非阻塞队列</li>\n<li>Deque双端队列</li>\n<li>BlockingQueue阻塞队列</li>\n</ul>\n<h3 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h3><p><em>FIFO 先进先出</em></p>\n<ul>\n<li>写入：若队列满了，就必须等待消费；</li>\n<li>取：若队列是空的，就必须等待生产；</li>\n</ul>\n<h2 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h2><p><img src=\"/2022/09/01/Day9-Multithreading2-5/image-20220902091132823.png\" alt=\"Queue实现类的结构\"></p>\n<p>阻塞队列分两种：LinkedBlockingQueue和ArrayBlockingQueue。</p>\n<h2 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h2><p>多线程并发处理，线程池。</p>\n<h2 id=\"API-1\"><a href=\"#API-1\" class=\"headerlink\" title=\"API\"></a>API</h2><p>分为四组：抛出异常，不抛出异常有返回值，阻塞等待，超时等待。</p>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>抛出异常的API</th>\n<th>有返回值不抛出异常的API</th>\n<th>阻塞等待的API</th>\n<th>超时等待的API</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>添加</td>\n<td>add(对象)<br>无返回值，失败则抛出异常</td>\n<td>offer(对象)<br>有返回值,boolean</td>\n<td>put(对象)</td>\n<td>offer(对象,超时时间, TimeUnit);<br>例：<br>offer(“a”,2,TimeUnit.SECOND)<br>即：添加”a”，超时2秒。</td>\n</tr>\n<tr>\n<td>移除</td>\n<td>remove()<br>无返回值，失败则抛出异常</td>\n<td>poll()<br>有返回值，null</td>\n<td>take()</td>\n<td>poll(超时时间,TimeUnit)<br>例：<br>offer(2,TimeUnit.SECOND)<br>即：移除并返回，若队列空，则阻塞，超时等待2秒。</td>\n</tr>\n<tr>\n<td>返回&#x2F;检测 队首元素</td>\n<td>element()</td>\n<td>peek()</td>\n<td>&#x2F;</td>\n<td>&#x2F;</td>\n</tr>\n</tbody></table>\n<h3 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h3><h4 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a>抛出异常</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1_Exception</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        ArrayBlockingQueue&lt;String&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>&lt;&gt;(<span class=\"number\">2</span>);<span class=\"comment\">//容量为2的阻塞队列</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//添加</span></span><br><span class=\"line\">        System.out.println(queue.add(<span class=\"string\">&quot;a&quot;</span>));</span><br><span class=\"line\">        System.out.println(queue.add(<span class=\"string\">&quot;b&quot;</span>));</span><br><span class=\"line\"><span class=\"comment\">//        System.out.println(queue.add(&quot;c&quot;));//让阻塞队列超出容量</span></span><br><span class=\"line\">        <span class=\"comment\">//异常 java.lang.IllegalStateException</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 输出：</span></span><br><span class=\"line\"><span class=\"comment\">         * Exception in thread &quot;main&quot; java.lang.IllegalStateException: Queue full  // 队列满</span></span><br><span class=\"line\"><span class=\"comment\">         *     at java.util.AbstractQueue.add(AbstractQueue.java:98)</span></span><br><span class=\"line\"><span class=\"comment\">         *     at java.util.concurrent.ArrayBlockingQueue.add(ArrayBlockingQueue.java:312)</span></span><br><span class=\"line\"><span class=\"comment\">         *     at com.yn.Demo17_BlockingQueue.test1_Exception(Demo17_BlockingQueue.java:19)</span></span><br><span class=\"line\"><span class=\"comment\">         *     at com.yn.Demo17_BlockingQueue.main(Demo17_BlockingQueue.java:9)</span></span><br><span class=\"line\"><span class=\"comment\">         * true</span></span><br><span class=\"line\"><span class=\"comment\">         * true</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(queue.remove());</span><br><span class=\"line\">        System.out.println(queue.remove());</span><br><span class=\"line\">        System.out.println(queue.remove());<span class=\"comment\">//若队列为空</span></span><br><span class=\"line\">        <span class=\"comment\">//异常：java.util.NoSuchElementException  没有元素异常</span></span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * 输出内容：</span></span><br><span class=\"line\"><span class=\"comment\">         * a</span></span><br><span class=\"line\"><span class=\"comment\">         * b</span></span><br><span class=\"line\"><span class=\"comment\">         * Exception in thread &quot;main&quot; java.util.NoSuchElementException</span></span><br><span class=\"line\"><span class=\"comment\">         *     at java.util.AbstractQueue.remove(AbstractQueue.java:117)</span></span><br><span class=\"line\"><span class=\"comment\">         *     at com.yn.Demo17_BlockingQueue.test1_Exception(Demo17_BlockingQueue.java:35)</span></span><br><span class=\"line\"><span class=\"comment\">         *     at com.yn.Demo17_BlockingQueue.main(Demo17_BlockingQueue.java:9)</span></span><br><span class=\"line\"><span class=\"comment\">         *</span></span><br><span class=\"line\"><span class=\"comment\">         * Process finished with exit code 1</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"有返回值，不抛出异常\"><a href=\"#有返回值，不抛出异常\" class=\"headerlink\" title=\"有返回值，不抛出异常\"></a>有返回值，不抛出异常</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2_NoException</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">    ArrayBlockingQueue&lt;String&gt; blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>&lt;&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//offer()</span></span><br><span class=\"line\">    System.out.println(blockingQueue.offer(<span class=\"string\">&quot;a&quot;</span>));</span><br><span class=\"line\">    System.out.println(blockingQueue.offer(<span class=\"string\">&quot;b&quot;</span>));</span><br><span class=\"line\">    System.out.println(blockingQueue.offer(<span class=\"string\">&quot;c&quot;</span>));<span class=\"comment\">//返回boolean，不抛出异常</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * true</span></span><br><span class=\"line\"><span class=\"comment\">     * true</span></span><br><span class=\"line\"><span class=\"comment\">     * false</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    System.out.println(blockingQueue.poll());</span><br><span class=\"line\">    System.out.println(blockingQueue.poll());</span><br><span class=\"line\">    System.out.println(blockingQueue.poll());<span class=\"comment\">//若队列为空，则返回null</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * a</span></span><br><span class=\"line\"><span class=\"comment\">     * b</span></span><br><span class=\"line\"><span class=\"comment\">     * null</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"等待-阻塞\"><a href=\"#等待-阻塞\" class=\"headerlink\" title=\"等待 阻塞\"></a>等待 阻塞</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 等待 阻塞</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3_blocking</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    ArrayBlockingQueue&lt;String&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>&lt;&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\">    queue.put(<span class=\"string\">&quot;a&quot;</span>);<span class=\"comment\">//进入队列</span></span><br><span class=\"line\">    queue.put(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">    queue.put(<span class=\"string\">&quot;c&quot;</span>);<span class=\"comment\">//队列已满，阻塞线程</span></span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(queue.take());<span class=\"comment\">//从队列取出</span></span><br><span class=\"line\">    System.out.println(queue.take());</span><br><span class=\"line\">    System.out.println(queue.take());<span class=\"comment\">//没有元素 阻塞</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"等待阻塞-超时\"><a href=\"#等待阻塞-超时\" class=\"headerlink\" title=\"等待阻塞 超时\"></a>等待阻塞 超时</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 等待 超时阻塞</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4_blocking</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    ArrayBlockingQueue&lt;String&gt; queue = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>&lt;&gt;(<span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    queue.offer(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">    queue.offer(<span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">    queue.offer(<span class=\"string\">&quot;c&quot;</span>,<span class=\"number\">2</span>, TimeUnit.SECONDS);<span class=\"comment\">//队列满，阻塞，超时等待2s。</span></span><br><span class=\"line\"></span><br><span class=\"line\">    queue.poll();</span><br><span class=\"line\">    queue.poll();</span><br><span class=\"line\">    queue.poll(<span class=\"number\">2</span>,TimeUnit.SECONDS);<span class=\"comment\">//同理</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"同步队列-SynchronousQueue\"><a href=\"#同步队列-SynchronousQueue\" class=\"headerlink\" title=\"同步队列 SynchronousQueue\"></a>同步队列 SynchronousQueue</h1><p>容量为1。</p>\n<h2 id=\"API-2\"><a href=\"#API-2\" class=\"headerlink\" title=\"API\"></a>API</h2><table>\n<thead>\n<tr>\n<th>API</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>put()</td>\n<td>添加元素。若队列中有元素，则阻塞，直到队列为空。</td>\n</tr>\n<tr>\n<td>take()</td>\n<td>取出元素。若队列中没有元素，则阻塞，直到队列不为空。</td>\n</tr>\n</tbody></table>\n<h2 id=\"代码-2\"><a href=\"#代码-2\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 同步队列</span></span><br><span class=\"line\"><span class=\"comment\"> * SynchronousQueue</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo18_SynchronousQueue</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        BlockingQueue&lt;String&gt; blockingQueue = <span class=\"keyword\">new</span> <span class=\"title class_\">SynchronousQueue</span>&lt;&gt;();<span class=\"comment\">// 同步队列</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; put 1&quot;</span>);</span><br><span class=\"line\">                blockingQueue.put(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; put 2&quot;</span>);</span><br><span class=\"line\">                blockingQueue.put(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; put 3&quot;</span>);</span><br><span class=\"line\">                blockingQueue.put(<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;T1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; &quot;</span>+blockingQueue.take());</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; &quot;</span>+blockingQueue.take());</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; &quot;</span>+blockingQueue.take());</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;T2&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * T1 put 1</span></span><br><span class=\"line\"><span class=\"comment\">         * T2 1</span></span><br><span class=\"line\"><span class=\"comment\">         * T1 put 2</span></span><br><span class=\"line\"><span class=\"comment\">         * T2 2</span></span><br><span class=\"line\"><span class=\"comment\">         * T1 put 3</span></span><br><span class=\"line\"><span class=\"comment\">         * T2 3</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h1><p><em>池化技术。线程池、连接池、内存池、对象池……………………..</em></p>\n<p>三大方法、7大参数、4种拒绝策略</p>\n<blockquote>\n<p>好处</p>\n</blockquote>\n<ol>\n<li>降低资源的消耗</li>\n<li>提高响应的速度</li>\n<li>方便管理</li>\n</ol>\n<blockquote>\n<p>作用</p>\n</blockquote>\n<ol>\n<li>线程复用</li>\n<li>可以控制最大并发数</li>\n<li>管理线程</li>\n</ol>\n<h2 id=\"三大方法\"><a href=\"#三大方法\" class=\"headerlink\" title=\"三大方法\"></a>三大方法</h2><p>Executors工具类有三个方法创建线程池。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Executors 工具类、3大方法</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo19_ThreadPool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        ExecutorService threadPool = Executors.newSingleThreadExecutor();//创建一个只有一个线程的线程池</span></span><br><span class=\"line\"><span class=\"comment\">//        ExecutorService threadPool = Executors.newFixedThreadPool(5);//创建一个有5个线程的线程池</span></span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">threadPool</span> <span class=\"operator\">=</span> Executors.newCachedThreadPool();<span class=\"comment\">//创建一个可伸缩的线程池</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                threadPool.execute(()-&gt;&#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; ok&quot;</span>);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            threadPool.shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Exectors的部分API\"><a href=\"#Exectors的部分API\" class=\"headerlink\" title=\"Exectors的部分API\"></a>Exectors的部分API</h3><table>\n<thead>\n<tr>\n<th>API</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>newSingleThreadExecutor()</td>\n<td>创建一个有一个线程的线程池。</td>\n</tr>\n<tr>\n<td>newFixedThreadPool(int)</td>\n<td>创建一个指定数量的线程的线程池。</td>\n</tr>\n<tr>\n<td>newCachedThreadPool()</td>\n<td>创建一个可伸缩的线程池。</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n<h2 id=\"七大参数\"><a href=\"#七大参数\" class=\"headerlink\" title=\"七大参数\"></a>七大参数</h2><h3 id=\"引入-1\"><a href=\"#引入-1\" class=\"headerlink\" title=\"引入\"></a>引入</h3><blockquote>\n<p> 三个方法的源码分析</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newSingleThreadExecutor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FinalizableDelegatedExecutorService</span></span><br><span class=\"line\">        (<span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>,  <span class=\"comment\">//核心线程数和最大线程数为1</span></span><br><span class=\"line\">                                <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,  <span class=\"comment\">//</span></span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newFixedThreadPool</span><span class=\"params\">(<span class=\"type\">int</span> nThreads)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(nThreads, nThreads,<span class=\"comment\">//核心线程数和最大线程数为nThreads</span></span><br><span class=\"line\">                                  <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newCachedThreadPool</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(<span class=\"number\">0</span>, Integer.MAX_VALUE,<span class=\"comment\">//核心线程数为0，和最大线程数为Intger.MAX_VALUE</span></span><br><span class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> <span class=\"title class_\">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>分析得知：都来源于<strong>ThreadPoolExecutor</strong>的构造方法。</p>\n<blockquote>\n<p>ThreadPoolExecutor的构造方法</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize, //核心线程池大小</span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">int</span> maximumPoolSize,//最大线程池大小</span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">long</span> keepAliveTime,//超时释放时间</span></span><br><span class=\"line\"><span class=\"params\">                          TimeUnit unit,//超时释放时间单位</span></span><br><span class=\"line\"><span class=\"params\">                          BlockingQueue&lt;Runnable&gt; workQueue,//阻塞队列</span></span><br><span class=\"line\"><span class=\"params\">                          ThreadFactory threadFactory,//线程工厂</span></span><br><span class=\"line\"><span class=\"params\">                          RejectedExecutionHandler handler//拒绝策略</span></span><br><span class=\"line\"><span class=\"params\">                         )</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">        maximumPoolSize &lt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\">        maximumPoolSize &lt; corePoolSize ||</span><br><span class=\"line\">        keepAliveTime &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workQueue == <span class=\"literal\">null</span> || threadFactory == <span class=\"literal\">null</span> || handler == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.acc = System.getSecurityManager() == <span class=\"literal\">null</span> ?</span><br><span class=\"line\">            <span class=\"literal\">null</span> :</span><br><span class=\"line\">            AccessController.getContext();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.corePoolSize = corePoolSize;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.workQueue = workQueue;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.threadFactory = threadFactory;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.handler = handler;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>构造方法的7个参数，即：<strong>七大参数</strong>。</p>\n<h3 id=\"ThreadPoolExecutor\"><a href=\"#ThreadPoolExecutor\" class=\"headerlink\" title=\"ThreadPoolExecutor\"></a>ThreadPoolExecutor</h3><h4 id=\"构造方法的七个参数\"><a href=\"#构造方法的七个参数\" class=\"headerlink\" title=\"构造方法的七个参数\"></a>构造方法的七个参数</h4><table>\n<thead>\n<tr>\n<th>参数名</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>int corePoolSize</td>\n<td>核心线程数量</td>\n</tr>\n<tr>\n<td>int maximumPoolSize</td>\n<td>最大线程数量</td>\n</tr>\n<tr>\n<td>long keepAliveTime</td>\n<td>超时释放时间</td>\n</tr>\n<tr>\n<td>TimeUnit unit</td>\n<td>超时释放时间单位</td>\n</tr>\n<tr>\n<td>BlockingQueue&lt;Runnable&gt; workQueue</td>\n<td>阻塞队列，若线程耗尽，则将新进入的任务放进阻塞队列。线程恢复后，依次为队列里的任务分配线程。</td>\n</tr>\n<tr>\n<td>ThreadFactory threadFactory</td>\n<td>线程工厂</td>\n</tr>\n<tr>\n<td>RejectedExecutionHandler handler</td>\n<td>拒绝策略</td>\n</tr>\n</tbody></table>\n<h3 id=\"执行策略\"><a href=\"#执行策略\" class=\"headerlink\" title=\"执行策略\"></a>执行策略</h3><ol>\n<li>若任务进入，则先分配到核心线程；</li>\n<li>若<strong>核心线程耗尽</strong>，<strong>则分配到阻塞队列</strong>；</li>\n<li>若<strong>阻塞队列已满</strong>，则<strong>创建额外线程</strong>，将<strong>新来的任务</strong>分配给<strong>新创建的线程</strong>。（而不是将阻塞队列的任务分配给新创建的线程）</li>\n<li>若<strong>线程</strong>达<strong>最大数量</strong>，且<strong>阻塞队列已满</strong>，则对<strong>新来任务</strong>进行<strong>拒绝策略</strong>。</li>\n<li>若<strong>额外线程空闲时间</strong>达到 <strong>keepAliveTime x unit</strong>，则释放额外线程。</li>\n</ol>\n<h3 id=\"代码-3\"><a href=\"#代码-3\" class=\"headerlink\" title=\"代码\"></a>代码</h3><blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo20_ThreadPoolExecutor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//自定义线程池</span></span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">threadPool</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(</span><br><span class=\"line\">                <span class=\"number\">2</span>,<span class=\"comment\">//corePoolSize核心线程数</span></span><br><span class=\"line\">                <span class=\"number\">3</span>,<span class=\"comment\">//maximumPoolSize最大线程数</span></span><br><span class=\"line\">                <span class=\"number\">3</span>,<span class=\"comment\">//keepAliveTime</span></span><br><span class=\"line\">                TimeUnit.SECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;&gt;(<span class=\"number\">2</span>),  <span class=\"comment\">//队列</span></span><br><span class=\"line\">                Executors.defaultThreadFactory(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>.AbortPolicy()</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; &quot;</span>+id+<span class=\"string\">&quot; processing...&quot;</span>);</span><br><span class=\"line\">                threadPool.execute(()-&gt;&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; &quot;</span>+id+<span class=\"string\">&quot; ok&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            threadPool.shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>输出</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main 1 processing...</span><br><span class=\"line\">main 2 processing...</span><br><span class=\"line\">main 3 processing...</span><br><span class=\"line\">main 4 processing...</span><br><span class=\"line\">main 5 processing...</span><br><span class=\"line\">main 6 processing...</span><br><span class=\"line\">java.util.concurrent.RejectedExecutionException: Task com.yn.Demo20_ThreadPoolExecutor$$Lambda$1/1096979270@7cca494b rejected from java.util.concurrent.ThreadPoolExecutor@7ba4f24f[Running, pool size = 3, active threads = 3, queued tasks = 2, completed tasks = 0]</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2063)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:830)</span><br><span class=\"line\">\tat java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1379)</span><br><span class=\"line\">\tat com.yn.Demo20_ThreadPoolExecutor.main(Demo20_ThreadPoolExecutor.java:22)</span><br><span class=\"line\">pool-1-thread-2 2 ok</span><br><span class=\"line\">pool-1-thread-1 1 ok</span><br><span class=\"line\">pool-1-thread-3 5 ok</span><br><span class=\"line\">pool-1-thread-2 3 ok</span><br><span class=\"line\">pool-1-thread-3 4 ok</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>说明</p>\n</blockquote>\n<p>任务1和任务2分配给线程1和线程2；</p>\n<p>到任务3和任务4的时候，核心线程已有任务，将任务3和任务4分配到阻塞队列；</p>\n<p>到任务5，由于核心线程和阻塞队列都耗尽，开始创建额外线程，并将任务5分配给新创建的线程；</p>\n<p>到任务6，由于线程数已达最大，进行拒绝策略：抛出异常<del style=\"color:#cccccc\">（报错）</del>，中断主线程。</p>\n<h3 id=\"一些计算题\"><a href=\"#一些计算题\" class=\"headerlink\" title=\"一些计算题\"></a>一些计算题</h3><ol>\n<li>线程池的<strong>最大承载数量</strong> &#x3D; 最大线程数 + 队列长度</li>\n</ol>\n<h2 id=\"四个拒绝策略\"><a href=\"#四个拒绝策略\" class=\"headerlink\" title=\"四个拒绝策略\"></a>四个拒绝策略</h2><p><em>ThreadPoolExecutor类的四个内部类</em></p>\n<table>\n<thead>\n<tr>\n<th>类名</th>\n<th>介绍（若线程池已达最大承载，在执行execute()方法的线程会发生）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ThreadPoolExecutor.AbortPolicy</td>\n<td>抛出异常<code>java.util.concurrent.RejectedExecutionException</code></td>\n</tr>\n<tr>\n<td>ThreadPoolExecutor.CallerRunsPolicy</td>\n<td>任务直接在主线程执行。<span style=\"color:#aaaaaa\"><em>“你哪来的？回去！”</em></span></td>\n</tr>\n<tr>\n<td>ThreadPoolExecutor.DiscardPolicy</td>\n<td>不抛出异常，丢弃任务。<span style=\"color:#aaaaaa\"><em>“马什么梅？”</em></span></td>\n</tr>\n<tr>\n<td>ThreadPoolExecutor.DiscardOldestPolicy</td>\n<td>将等待队列里的最早来的任务丢弃，然后将新来的任务放进等待队列里。</td>\n</tr>\n</tbody></table>\n<h3 id=\"代码-4\"><a href=\"#代码-4\" class=\"headerlink\" title=\"代码\"></a>代码</h3><blockquote>\n<p>AbortPolicy</p>\n</blockquote>\n<p>在上面</p>\n<blockquote>\n<p>CallerRunsPolicy</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo20_ThreadPoolExecutor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//自定义线程池</span></span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">threadPool</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(</span><br><span class=\"line\">                <span class=\"number\">2</span>,<span class=\"comment\">//corePoolSize核心线程数</span></span><br><span class=\"line\">                <span class=\"number\">3</span>,<span class=\"comment\">//maximumPoolSize最大线程数</span></span><br><span class=\"line\">                <span class=\"number\">3</span>,<span class=\"comment\">//keepAliveTime</span></span><br><span class=\"line\">                TimeUnit.SECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;&gt;(<span class=\"number\">2</span>),  <span class=\"comment\">//队列</span></span><br><span class=\"line\">                Executors.defaultThreadFactory(),</span><br><span class=\"line\"><span class=\"comment\">//                new ThreadPoolExecutor.AbortPolicy()</span></span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>.CallerRunsPolicy()</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\"><span class=\"comment\">//                System.out.println(Thread.currentThread().getName()+&quot; &quot;+id+&quot; processing...&quot;);</span></span><br><span class=\"line\">                threadPool.execute(()-&gt;&#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; &quot;</span>+id+<span class=\"string\">&quot; ok&quot;</span>);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            threadPool.shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-1-thread-1 1 ok</span><br><span class=\"line\">pool-1-thread-3 5 ok</span><br><span class=\"line\">main 6 ok</span><br><span class=\"line\">pool-1-thread-2 2 ok</span><br><span class=\"line\">pool-1-thread-1 3 ok</span><br><span class=\"line\">pool-1-thread-3 4 ok</span><br></pre></td></tr></table></figure>\n\n<p>任务6直接从main线程执行，未进入线程池。</p>\n<blockquote>\n<p>DiscardPolicy</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo20_ThreadPoolExecutor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//自定义线程池</span></span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">threadPool</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(</span><br><span class=\"line\">                <span class=\"number\">2</span>,<span class=\"comment\">//corePoolSize核心线程数</span></span><br><span class=\"line\">                <span class=\"number\">3</span>,<span class=\"comment\">//maximumPoolSize最大线程数</span></span><br><span class=\"line\">                <span class=\"number\">3</span>,<span class=\"comment\">//keepAliveTime</span></span><br><span class=\"line\">                TimeUnit.SECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;&gt;(<span class=\"number\">2</span>),  <span class=\"comment\">//队列</span></span><br><span class=\"line\">                Executors.defaultThreadFactory(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>.DiscardPolicy() <span class=\"comment\">// 队列满了，丢掉任务，不会抛出异常</span></span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\"><span class=\"comment\">//                System.out.println(Thread.currentThread().getName()+&quot; &quot;+id+&quot; processing...&quot;);</span></span><br><span class=\"line\">                threadPool.execute(()-&gt;&#123;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; &quot;</span>+id+<span class=\"string\">&quot; ok&quot;</span>);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            threadPool.shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-1-thread-1 1 ok</span><br><span class=\"line\">pool-1-thread-3 5 ok</span><br><span class=\"line\">pool-1-thread-1 3 ok</span><br><span class=\"line\">pool-1-thread-2 2 ok</span><br><span class=\"line\">pool-1-thread-3 4 ok</span><br></pre></td></tr></table></figure>\n\n<p>创建了10个任务，实际运行了前5个，另外5个被抛弃。</p>\n<blockquote>\n<p>DiscardOldestPolicy</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo20_ThreadPoolExecutor</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//自定义线程池</span></span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">threadPool</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(</span><br><span class=\"line\">                <span class=\"number\">2</span>,<span class=\"comment\">//corePoolSize核心线程数</span></span><br><span class=\"line\">                <span class=\"number\">3</span>,<span class=\"comment\">//maximumPoolSize最大线程数</span></span><br><span class=\"line\">                <span class=\"number\">3</span>,<span class=\"comment\">//keepAliveTime</span></span><br><span class=\"line\">                TimeUnit.SECONDS,</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;&gt;(<span class=\"number\">2</span>),  <span class=\"comment\">//队列</span></span><br><span class=\"line\">                Executors.defaultThreadFactory(),</span><br><span class=\"line\">                <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>.DiscardOldestPolicy() <span class=\"comment\">// 队列满了，丢弃等待队列里最早的任务，将新来的任务加入到队列中</span></span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">id</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\"><span class=\"comment\">//                System.out.println(Thread.currentThread().getName()+&quot; &quot;+id+&quot; processing...&quot;);</span></span><br><span class=\"line\">                threadPool.execute(()-&gt;&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; &quot;</span>+id+<span class=\"string\">&quot; ok&quot;</span>);</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            threadPool.shutdown();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pool-1-thread-1 1 ok</span><br><span class=\"line\">pool-1-thread-3 5 ok</span><br><span class=\"line\">pool-1-thread-2 2 ok</span><br><span class=\"line\">pool-1-thread-1 9 ok</span><br><span class=\"line\">pool-1-thread-3 10 ok</span><br></pre></td></tr></table></figure>\n\n<p>任务1,2,5,9,10正常执行。</p>\n<h1 id=\"最大线程数在理论上如何定义\"><a href=\"#最大线程数在理论上如何定义\" class=\"headerlink\" title=\"最大线程数在理论上如何定义\"></a>最大线程数在理论上如何定义</h1><blockquote>\n<p>CPU密集型。</p>\n</blockquote>\n<p><strong>CPU密集型：</strong>CPU密集型也叫<strong>计算密集型</strong>，指的是系统的硬盘，内存性能要比CPU好很多，大部分情况是CPU满载，I&#x2F;O占用率不高。</p>\n<p><strong>CPU密集</strong>：任务需要<strong>大量的运算</strong>，<strong>没有阻塞</strong>，CPU一直全速运行。</p>\n<p><em>这类多出现在在开发中的一些<strong>业务复杂计算</strong>和<strong>逻辑处理过程中</strong>。</em></p>\n<p>CPU密集任务只有在真正的多核CPU上才能得到加速，而在单核CPU上，不论开几个模拟的线程，任务都不可能得到加速。</p>\n<p><strong>CPU密集时，线程数一般只需要设置为CPU核心数的线程个数就可。</strong>计算密集型任务的特点是要进行大量的计算，消耗CPU资源。这种计算密集型任务虽然也可以用多任务完成，但是任务越多，花在任务切换的时间就越多，CPU执行任务的效率就越低，所以，要最高效地利用CPU，计算密集型任务同时进行的数量应当等于CPU的核心数，避免线程或进程的切换。</p>\n<p><em>Java获取CPU核心数：Runtime().getRuntime().availableProcessors()</em></p>\n<blockquote>\n<p>IO密集型。</p>\n</blockquote>\n<p><strong>IO密集型</strong>指的是系统的<strong>CPU性能相对硬盘，内存要好很多</strong>。此时，系统运作大部分的状况是，CPU在等I&#x2F;O（硬盘&#x2F;内存）的读&#x2F;写操作，CPU负载并不高。</p>\n<p>CPU使用率较低，程序中会存在大量的I&#x2F;O操作占用时间，导致线程的空余时间很多，通常就需要开CPU核心数数倍的线程。</p>\n<p>计算公式：<strong>IO密集型核心线程数 &#x3D; CPU核数 &#x2F; ( 1 - 阻塞系数 )</strong></p>\n<p>​\t\t\t\t\t<strong>阻塞系数 &#x3D; 阻塞时间 &#x2F; (阻塞时间 + 计算时间)</strong>    <em>一般取0.8或0.9</em></p>\n<p>当线程进行I&#x2F;O操作CPU空闲时，启动其他线程继续使用CPU，以提高CPU的利用率。</p>\n<h1 id=\"在实际业务中的线程数选择\"><a href=\"#在实际业务中的线程数选择\" class=\"headerlink\" title=\"在实际业务中的线程数选择\"></a>在实际业务中的线程数选择</h1><p><em>实际业务往往与理论值有所偏差，依据实际情况选择线程数。</em></p>\n<p>“粗调，微调”</p>\n<blockquote>\n<p>粗调</p>\n</blockquote>\n<p><strong>IO密集型两个公式</strong></p>\n<p><em>至2022.9.2为止，目前的我了解到的线程数选择方式有两个公式，两个选一个就好，我认为后者更有道理，</em></p>\n<ol>\n<li><p><del>线程数 &#x3D; 2 x 核心数 + 1</del></p>\n</li>\n<li><p>核心线程数 &#x3D; CPU核数 &#x2F; ( 1 - 阻塞系数 )</p>\n<p>阻塞系数 &#x3D; 阻塞时间 &#x2F; (阻塞时间 + 计算时间)    <em>一般取0.8或0.9</em></p>\n</li>\n</ol>\n<p><strong>CPU密集型</strong></p>\n<p>线程数 &#x3D; 核心数 + 1</p>\n<blockquote>\n<p>微调</p>\n</blockquote>\n<p><em>公式面向的是普遍情况，但业务总是<strong>千奇百态</strong>。</em></p>\n<p>先粗调获得基本线程数，然后使用数据分析（Java可以用jstack），然后根据实际情况调整线程数。</p>\n<p>运行程序，采集各种情况下的压力数据，统计分析得到结果。</p>\n<p><strong>若CPU多数线程处于等待状态，则说明线程数够用；</strong></p>\n<p><strong>若CPU多数线程处于运行状态，可以适当调高线程数量。</strong></p>\n<p><em>一个新奇的想法： 动态线程数，依据情况自动调整线程数。</em></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://www.bilibili.com/video/BV1B7411L7tE\">https://www.bilibili.com/video/BV1B7411L7tE</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/433310450\">https://zhuanlan.zhihu.com/p/433310450</a></p>\n<p><a href=\"https://blog.csdn.net/youanyyou/article/details/78990156\">https://blog.csdn.net/youanyyou/article/details/78990156</a></p>\n<p><a href=\"https://www.cnblogs.com/ming-blogs/p/10897242.html\">https://www.cnblogs.com/ming-blogs/p/10897242.html</a></p>\n<p><a href=\"https://blog.csdn.net/GmwEnterprise/article/details/103839295\">https://blog.csdn.net/GmwEnterprise/article/details/103839295</a></p>\n","categories":[],"tags":["Java"]},{"title":"Day9 多线程进阶 4 Callable 和 常用的并发用三个辅助类","url":"http://zswh33.github.io/2022/09/01/Day9-Multithreading2-4/","content":"<h1 id=\"Callable\"><a href=\"#Callable\" class=\"headerlink\" title=\"Callable\"></a>Callable</h1><h2 id=\"Callable创建线程的优势\"><a href=\"#Callable创建线程的优势\" class=\"headerlink\" title=\"Callable创建线程的优势\"></a>Callable创建线程的优势</h2><ol>\n<li>可以有返回值</li>\n<li>可以抛出异常</li>\n</ol>\n<blockquote>\n<p><code>FutureTask</code>简述</p>\n</blockquote>\n<p><img src=\"/2022/09/01/Day9-Multithreading2-4/image-20220901164203305.png\" alt=\"FutureTask简述\"></p>\n<p><strong>Runnable、<code>FutureTask</code>、Thread和Callable的关系</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;V&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">Callable</span>&lt;V&gt;() &#123;...&#125;))</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>()&#123;...&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用Callable</p>\n</blockquote>\n<ol>\n<li>实现Callable接口创建类<code>MyThread</code>，并创建类的对象thread；</li>\n<li>使用对象thread创建<code>FutureTask</code>适配类对象<code>futureTask</code>；</li>\n<li>使用<code>futureTask</code>对象创建Thread对象并start()，即可使用Callable创建线程；</li>\n<li>创建线程后，使用<code>futureTask.get()</code>并cast可以得到返回值。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo12_Callable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">MyThread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>();</span><br><span class=\"line\">        <span class=\"type\">FutureTask</span> <span class=\"variable\">futureTask</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>(thread);<span class=\"comment\">//适配类</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(futureTask,<span class=\"string\">&quot;A&quot;</span>).start();<span class=\"comment\">//运行线程</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> (String) futureTask.get();<span class=\"comment\">//获取Callback的返回结果</span></span><br><span class=\"line\">        System.out.println(rs);<span class=\"comment\">//输出返回值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">MyThread</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Callable</span>&lt;String&gt;&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;call()&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;这是一个返回值&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>其他需要注意的地方</p>\n</blockquote>\n<ol>\n<li><p><code>futureTask.get()</code>方法会阻塞线程，因为要<strong>等待Callback的返回结果</strong>。</p>\n<p>解决方法：<strong>异步通信</strong>。</p>\n</li>\n<li><p><code>new Thread(futureTask,&quot;A&quot;).start();</code>的运行结果会被缓存，提高效率。</p>\n<p>若同时执行两个这个语句，第二个不会输出。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo12_Callable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>().start();</span><br><span class=\"line\">        <span class=\"type\">MyThread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>();</span><br><span class=\"line\">        <span class=\"type\">FutureTask</span> <span class=\"variable\">futureTask</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>(thread);<span class=\"comment\">//适配类</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(futureTask,<span class=\"string\">&quot;A&quot;</span>).start();<span class=\"comment\">//运行线程</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(futureTask,<span class=\"string\">&quot;A&quot;</span>).start();<span class=\"comment\">//</span></span><br><span class=\"line\">        <span class=\"type\">String</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> (String) futureTask.get();<span class=\"comment\">//获取Callback的返回结果</span></span><br><span class=\"line\">        System.out.println(rs);<span class=\"comment\">//输出返回值</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span>  <span class=\"title class_\">MyThread</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Callable</span>&lt;String&gt;&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;call()&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;这是一个返回值&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"常用的辅助类-CountDownLatch-CyclicBarrier-Semaphore\"><a href=\"#常用的辅助类-CountDownLatch-CyclicBarrier-Semaphore\" class=\"headerlink\" title=\"常用的辅助类 CountDownLatch CyclicBarrier Semaphore\"></a>常用的辅助类 <code>CountDownLatch</code> <code>CyclicBarrier</code> <code>Semaphore</code></h1><h2 id=\"CountDownLatch\"><a href=\"#CountDownLatch\" class=\"headerlink\" title=\"CountDownLatch\"></a><code>CountDownLatch</code></h2><p>一个减法计数器</p>\n<blockquote>\n<p>常用方法</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>CountDownLatch(int)</code></td>\n<td>构造方法，参数为计数器的起点。</td>\n</tr>\n<tr>\n<td><code>countDown()</code></td>\n<td>计数器值-1。</td>\n</tr>\n<tr>\n<td><code>await()</code></td>\n<td>阻塞线程，直到计数器归零。</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo13_CountDownLatch</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这里设总数为6</span></span><br><span class=\"line\">        <span class=\"type\">CountDownLatch</span> <span class=\"variable\">countDownLatch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CountDownLatch</span>(<span class=\"number\">6</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">6</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; come on.&quot;</span>);</span><br><span class=\"line\">                countDownLatch.countDown();</span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        countDownLatch.await();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;程序结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>countDownLatch</code>初始值为6。创建6个线程，每个线程都会执行一个<code>countDownLatch.countDown();</code>。然后<code>countDownLatch.await();</code>会阻塞线程，直到<code>countDownLatch</code>归零为止。</p>\n<h2 id=\"CyclicBarrier\"><a href=\"#CyclicBarrier\" class=\"headerlink\" title=\"CyclicBarrier\"></a><code>CyclicBarrier</code></h2><p>与<code>CountDownLatch</code>相反，<code>CyclicBarrier</code>是一个加法计数器。</p>\n<blockquote>\n<p>用处</p>\n</blockquote>\n<p>用在<strong>协调多个线程同步</strong>的场合，所有线程等待完成，然后一起继续下一步。</p>\n<blockquote>\n<p>使用介绍</p>\n</blockquote>\n<p>使用<code>new CyclicBarrier(数量，方法)</code>来创建一个<code>CyclicBarrier</code>对象。</p>\n<p>构造方法有两个参数，</p>\n<ol>\n<li>第一个参数为一个整数，表示计时器的总数。</li>\n<li>第二个参数为Callback接口，使用lambda表达式填充。表示计时器到达指定数量后要进行的操作。</li>\n</ol>\n<p><code>await()</code>方法用在需要协调的线程中，执行该方法：</p>\n<ol>\n<li>计数器+1，然后阻塞当前线程。当计数器达到指定值，计数器会唤醒线程，线程继续运行。</li>\n<li>为需要协调的多个线程都添加该方法，可以让多个线程协调工作。</li>\n</ol>\n<blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo14_CyclicBarrier</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">         * Java的寻宝者：在Java中收集到10个华丽宝箱。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">CyclicBarrier</span> <span class=\"variable\">cyclicBarrier</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CyclicBarrier</span>(<span class=\"number\">10</span>,()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;获得成就：Java的寻宝者&quot;</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">temp</span> <span class=\"operator\">=</span> i;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;打开了第&quot;</span>+temp+<span class=\"string\">&quot;个华丽宝箱。&quot;</span>);</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    cyclicBarrier.await();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><em>Java的寻宝者：在Java中打开10个华丽宝箱</em></p>\n<p>创建10个打开宝箱的线程。线程打开宝箱后，进入<code>await</code>状态，计数器+1，直到<strong>计数器计数结束</strong>，即所有线程都打开宝箱，然后将进入<code>await</code>的线程全部唤醒，继续运行。</p>\n<p><span style=\"font-size:13px;color:rgba(0,0,0,0.5)\">获得成就：Java的寻宝者</span></p>\n<p><img src=\"/2022/09/01/Day9-Multithreading2-4/%E8%8E%B7%E5%BE%97%E6%88%90%E5%B0%B1%EF%BC%9AJava%E7%9A%84%E5%AF%BB%E5%AE%9D%E8%80%85.png\" alt=\"获得成就：Java的寻宝者\"></p>\n<h2 id=\"Semaphore\"><a href=\"#Semaphore\" class=\"headerlink\" title=\"Semaphore\"></a>Semaphore</h2><p><em>信号量</em></p>\n<p>一般用来表示资源的可用量。</p>\n<p>比如，数据库的最大并发连接数为3。</p>\n<blockquote>\n<p>方法</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Semaphore(permits)</td>\n<td>构造方法。参数为信号量的计数器容量。</td>\n</tr>\n<tr>\n<td>acquire()</td>\n<td>得到。若Semaphore没有剩余的信号量，则阻塞，等待信号量释放。若有，则信号量减一，继续运行。</td>\n</tr>\n<tr>\n<td>release()</td>\n<td>释放。释放一个Semaphore的信号量，唤醒等待的线程。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo15_Semaphore</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//例如：一个数据库的最高并发连接数为3。</span></span><br><span class=\"line\">        <span class=\"type\">Semaphore</span> <span class=\"variable\">semaphore</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Semaphore</span>(<span class=\"number\">3</span>);<span class=\"comment\">//最高并发连接数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; i &lt;= <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    semaphore.acquire();<span class=\"comment\">//获得</span></span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; 得到一个连接权，连接数据库&quot;</span>);</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);<span class=\"comment\">//模拟数据库操作</span></span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; 操作结束，断开数据库。&quot;</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    semaphore.release();<span class=\"comment\">//释放</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>使用场景</p>\n</blockquote>\n<p>限流，数据库限制并发数。</p>\n<p>多个共享资源互斥的使用！并发限流，控制最大的线程数。</p>\n","categories":[],"tags":["Java"]},{"title":"Day9 多线程进阶 3 集合类不安全","url":"http://zswh33.github.io/2022/09/01/Day9-Multithreading2-3/","content":"<h1 id=\"引入：集合类不安全\"><a href=\"#引入：集合类不安全\" class=\"headerlink\" title=\"引入：集合类不安全\"></a>引入：集合类不安全</h1><h2 id=\"例：使用多线程操作List-lt-String-gt\"><a href=\"#例：使用多线程操作List-lt-String-gt\" class=\"headerlink\" title=\"例：使用多线程操作List&lt;String&gt;\"></a>例：使用多线程操作<code>List&lt;String&gt;</code></h2><blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo9_</span>多线程操作字符串ArrayList &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        List&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                list.add(UUID.randomUUID().toString().substring(<span class=\"number\">0</span>,<span class=\"number\">5</span>));<span class=\"comment\">//随机生成一个字符串，添加到list中。</span></span><br><span class=\"line\">                System.out.println(list);</span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();<span class=\"comment\">//线程名为i对应的值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>输出</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[058ac]</span><br><span class=\"line\">[058ac, e749b, a5fec]</span><br><span class=\"line\">[058ac, e749b, a5fec, a8e9a]</span><br><span class=\"line\">[058ac, e749b, a5fec, a8e9a, 06bae, 09588]</span><br><span class=\"line\">[058ac, e749b, a5fec, a8e9a, 06bae]</span><br><span class=\"line\">[058ac, e749b, a5fec, a8e9a, 06bae, 09588, 20884]</span><br><span class=\"line\">[058ac, e749b, a5fec, a8e9a, 06bae, 09588, 20884, 1edab]</span><br><span class=\"line\">[058ac, e749b, a5fec, a8e9a, 06bae, 09588, 20884, 1edab, ce3d3]</span><br><span class=\"line\">[058ac, e749b, a5fec, a8e9a, 06bae, 09588, 20884, 1edab, ce3d3, 86bcf]</span><br><span class=\"line\">Exception in thread &quot;2&quot; java.util.ConcurrentModificationException</span><br><span class=\"line\">\tat java.util.ArrayList$Itr.checkForComodification(ArrayList.java:909)</span><br><span class=\"line\">\tat java.util.ArrayList$Itr.next(ArrayList.java:859)</span><br><span class=\"line\">\tat java.util.AbstractCollection.toString(AbstractCollection.java:461)</span><br><span class=\"line\">\tat java.lang.String.valueOf(String.java:2994)</span><br><span class=\"line\">\tat java.io.PrintStream.println(PrintStream.java:821)</span><br><span class=\"line\">\tat com.yn.Demo9_多线程操作字符串ArrayList.lambda$main$0(Demo9_多线程操作字符串ArrayList.java:14)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\"></span><br><span class=\"line\">Process finished with exit code 0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><code>java.util.ConcurrentModificationException</code></p>\n</blockquote>\n<p>上面例子中出现了<code>java.util.ConcurrentModificationException</code>异常。</p>\n<p><code>java.util.ConcurrentModificationException</code>异常，即：<strong>并发修改异常</strong>。</p>\n<p>结论：<strong>并发下ArrayList 不安全</strong>。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ol>\n<li><p><code>List&lt;String&gt; list = new Vector&lt;&gt;();</code></p>\n<p>Vector是线程安全的，ArrayList是线程不安全的。</p>\n<p>在<code>Vector</code>类下，<code>add()</code>方法带有<code>synchronized</code>修饰；<code>ArrayList</code>下的add()方法没有<code>synchronized</code>修饰。</p>\n</li>\n<li><p><code>List&lt;String&gt; list = Collections.synchronizedList(new ArrayList&lt;&gt;());</code></p>\n</li>\n<li><p>（ JUC方案 ）<code>List&lt;String&gt; list = new CopyOnWriteArrayList&lt;&gt;();</code></p>\n</li>\n</ol>\n<h1 id=\"CopyOnWriteArrayList\"><a href=\"#CopyOnWriteArrayList\" class=\"headerlink\" title=\"CopyOnWriteArrayList\"></a><code>CopyOnWriteArrayList</code></h1><p><em>写入时复制</em></p>\n<h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p>首先把<strong>原数组</strong>复制一份，然后把<strong>要添加的内容</strong>添加进<strong>新数组</strong>，最后将<strong>新的数组</strong>直接赋值给<strong>原引用</strong>。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">add</span><span class=\"params\">(E e)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.lock;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Object[] elements = getArray();</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> elements.length;</span><br><span class=\"line\">            Object[] newElements = Arrays.copyOf(elements, len + <span class=\"number\">1</span>);<span class=\"comment\">//复制数组</span></span><br><span class=\"line\">            newElements[len] = e;<span class=\"comment\">//插入</span></span><br><span class=\"line\">            setArray(newElements);<span class=\"comment\">//新的数组赋值给原引用</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>写入时复制</li>\n<li>读写分离</li>\n</ul>\n<h2 id=\"CopyOnWriteArrayList-和-Vector\"><a href=\"#CopyOnWriteArrayList-和-Vector\" class=\"headerlink\" title=\"CopyOnWriteArrayList 和 Vector\"></a><code>CopyOnWriteArrayList</code> 和 <code>Vector</code></h2><p>CopyOnWriteArrayList效率比Vector高。</p>\n<h1 id=\"Set不安全\"><a href=\"#Set不安全\" class=\"headerlink\" title=\"Set不安全\"></a>Set不安全</h1><p><img src=\"/2022/09/01/Day9-Multithreading2-3/image-20220901150416448.png\" alt=\"Collection集合类的实现\"></p>\n<h2 id=\"例：使用多线程操作Set-lt-String-gt\"><a href=\"#例：使用多线程操作Set-lt-String-gt\" class=\"headerlink\" title=\"例：使用多线程操作Set&lt;String&gt;\"></a>例：使用多线程操作<code>Set&lt;String&gt;</code></h2><blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo10_</span>多线程操作字符串Set &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Set&lt;String&gt; set = <span class=\"keyword\">new</span> <span class=\"title class_\">HashSet</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">15</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                set.add(UUID.randomUUID().toString().substring(<span class=\"number\">0</span>,<span class=\"number\">5</span>));</span><br><span class=\"line\">                System.out.println(set);</span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>输出</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1cb01, eb758, aa01b, 9af06, c57bf, 847f3, 2b7e6, e2f07, 96c2f, bc219, b0027]</span><br><span class=\"line\">[1cb01, eb758, aa01b, 9af06, c57bf, 847f3, 2b7e6, e2f07, 96c2f, bc219, b0027]</span><br><span class=\"line\">[1cb01, eb758, aa01b, 9af06, c57bf, 847f3, 2b7e6, e2f07, 96c2f, bc219, b0027]</span><br><span class=\"line\">[1cb01, eb758, aa01b, 9af06, c57bf, 847f3, 2b7e6, e2f07, 96c2f, bc219, b0027]</span><br><span class=\"line\">[eb758, aa01b, c57bf, 847f3, e2f07, 96c2f, b9460, bc219, 1cb01, 9af06, 2b7e6, b0027, 93907]</span><br><span class=\"line\">[eb758, aa01b, c57bf, 847f3, e2f07, 96c2f, b9460, bc219, 1cb01, 9af06, 2b7e6, b0027, 93907]</span><br><span class=\"line\">[1cb01, eb758, aa01b, 9af06, c57bf, 847f3, 2b7e6, e2f07, 96c2f, b9460, bc219, b0027]</span><br><span class=\"line\">[1cb01, eb758, aa01b, 9af06, c57bf, 847f3, 2b7e6, e2f07, 96c2f, b9460, bc219, b0027]</span><br><span class=\"line\">[eb758, aa01b, 6e750, c57bf, 847f3, e2f07, 96c2f, b9460, bc219, 1cb01, 9af06, 2b7e6, b0027, 93907]</span><br><span class=\"line\">[eb758, aa01b, 6e750, c57bf, 847f3, e2f07, 96c2f, b9460, bc219, 1cb01, 9af06, 2b7e6, b0027, 93907]</span><br><span class=\"line\">[eb758, aa01b, 6e750, c57bf, 847f3, e2f07, 96c2f, b9460, bc219, 1cb01, 9af06, 2b7e6, b0027, 93907]</span><br><span class=\"line\">[eb758, aa01b, 6e750, c57bf, 847f3, e2f07, 96c2f, b9460, bc219, 1cb01, 9af06, 2b7e6, b0027, 93907]</span><br><span class=\"line\">[eb758, aa01b, 6e750, c57bf, 847f3, e2f07, 96c2f, b9460, bc219, 1cb01, 9af06, 2b7e6, b0027, 93907]</span><br><span class=\"line\">[eb758, aa01b, 6e750, c57bf, 847f3, e2f07, 96c2f, b9460, bc219, 1cb01, 9af06, 2b7e6, b0027, 93907]</span><br><span class=\"line\">Exception in thread &quot;1&quot; java.util.ConcurrentModificationException</span><br><span class=\"line\">\tat java.util.HashMap$HashIterator.nextNode(HashMap.java:1445)</span><br><span class=\"line\">\tat java.util.HashMap$KeyIterator.next(HashMap.java:1469)</span><br><span class=\"line\">\tat java.util.AbstractCollection.toString(AbstractCollection.java:461)</span><br><span class=\"line\">\tat java.lang.String.valueOf(String.java:2994)</span><br><span class=\"line\">\tat java.io.PrintStream.println(PrintStream.java:821)</span><br><span class=\"line\">\tat com.yn.Demo10_多线程操作字符串Set.lambda$main$0(Demo10_多线程操作字符串Set.java:13)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>\n\n<p>出现了错误<code>java.util.ConcurrentModificationException</code>。</p>\n<h2 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ol>\n<li><code>Set&lt;String&gt; set = Collections.synchronizedSet(new HashSet&lt;&gt;());</code></li>\n<li>( JUC方案 ) <code>Set&lt;String&gt; set = new CopyOnWriteArraySet&lt;&gt;();</code></li>\n</ol>\n<h2 id=\"HashSet底层\"><a href=\"#HashSet底层\" class=\"headerlink\" title=\"HashSet底层\"></a><code>HashSet</code>底层</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">HashSet</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//add     set的本质是map的key   key是无法宠物的</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"type\">boolean</span> <span class=\"title function_\">add</span><span class=\"params\">(E e)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> map.put(e, PRESENT)==<span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">PRESENT</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();<span class=\"comment\">//PRESENT是一个常量，是一个不变的值。</span></span><br></pre></td></tr></table></figure>\n\n<p><code>HashSet</code>的底层是<code>HashMap</code>。</p>\n<h1 id=\"多线程的HashMap\"><a href=\"#多线程的HashMap\" class=\"headerlink\" title=\"多线程的HashMap\"></a>多线程的<code>HashMap</code></h1><blockquote>\n<p>引入：</p>\n<p><code>Map&lt;String,String&gt; map = new HashMap&lt;&gt;();</code></p>\n<p>map是这么用的吗？默认等价于什么？</p>\n</blockquote>\n<p>不是这样用的。用法：Hole….（挖坑，后续填）</p>\n<p>默认等价于<code>new HashMap&lt;&gt;(16,0.75)</code></p>\n<h2 id=\"HashMap\"><a href=\"#HashMap\" class=\"headerlink\" title=\"HashMap\"></a><code>HashMap</code></h2><p><code>HashMap</code>是一个集合，键值对的集合，每个节点用Node&lt;K,V&gt;表示</p>\n<blockquote>\n<p>Node</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Node</span>&lt;K,V&gt; <span class=\"keyword\">implements</span> <span class=\"title class_\">Map</span>.Entry&lt;K,V&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">int</span> hash;</span><br><span class=\"line\">        <span class=\"keyword\">final</span> K key;</span><br><span class=\"line\">        V value;</span><br><span class=\"line\">        Node&lt;K,V&gt; next;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Node是一个内部类，key为键，value为值，next指向下一个元素。</p>\n<blockquote>\n<p>数据结构</p>\n</blockquote>\n<p>HashMap的数据结构为：数组+（链表或红黑树）</p>\n<ul>\n<li>在JDK1.8之前，HashMap的数据结构为“数组 + 链表”，数组是HashMap的主体，链表则是为了解决哈希冲突问题；</li>\n<li>Jdk1.8之后，当链表长度大于阈值（或者红黑树的边界值，默认为8），并且当前数组长度大于64时，此索引位置上的所有数据改为使用红黑树存储。</li>\n</ul>\n<p>注：若链表长度大于64，但数组长度小于64，此时并不会将链表转换为红黑树，而是进行数组扩容。</p>\n<p>因为红黑树需要保持平衡，影响效率，为了提高性能和减少搜索时间，当链表长度大于阈值且数组长度大于64时，链表才会转换为红黑树。</p>\n<blockquote>\n<p>HashMap的构造函数</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">HashMap</span><span class=\"params\">(<span class=\"type\">int</span> initialCapacity, <span class=\"type\">float</span> loadFactor)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class=\"line\">                                           initialCapacity);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class=\"line\">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (loadFactor &lt;= <span class=\"number\">0</span> || Float.isNaN(loadFactor))</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>(<span class=\"string\">&quot;Illegal load factor: &quot;</span> +</span><br><span class=\"line\">                                           loadFactor);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.loadFactor = loadFactor;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>HashMap有两个参数：initialCapacity 和 loadFactor  （初始容量和加载因子）</p>\n<ul>\n<li>初始容量是创建时数组分配的容量大小，默认为16；</li>\n<li>加载因子</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">final</span> V <span class=\"title function_\">putVal</span><span class=\"params\">(<span class=\"type\">int</span> hash, K key, V value, <span class=\"type\">boolean</span> onlyIfAbsent,</span></span><br><span class=\"line\"><span class=\"params\">                   <span class=\"type\">boolean</span> evict)</span> &#123;<span class=\"comment\">// K 键 V值 onlyIfAbsent  evict</span></span><br><span class=\"line\">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class=\"type\">int</span> n, i;<span class=\"comment\">//tab 为节点头</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((tab = table) == <span class=\"literal\">null</span> || (n = tab.length) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            n = (tab = resize()).length;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">        <span class=\"keyword\">if</span> ((p = tab[i = (n - <span class=\"number\">1</span>) &amp; hash]) == <span class=\"literal\">null</span>)</span><br><span class=\"line\">            tab[i] = newNode(hash, key, value, <span class=\"literal\">null</span>);</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            Node&lt;K,V&gt; e; K k;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (p.hash == hash &amp;&amp;</span><br><span class=\"line\">                ((k = p.key) == key || (key != <span class=\"literal\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                e = p;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (p <span class=\"keyword\">instanceof</span> TreeNode)</span><br><span class=\"line\">                e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class=\"built_in\">this</span>, tab, hash, key, value);</span><br><span class=\"line\">            <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">binCount</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; ; ++binCount) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> ((e = p.next) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        p.next = newNode(hash, key, value, <span class=\"literal\">null</span>);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class=\"number\">1</span>) <span class=\"comment\">// -1 for 1st</span></span><br><span class=\"line\">                            treeifyBin(tab, hash);</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (e.hash == hash &amp;&amp;</span><br><span class=\"line\">                        ((k = e.key) == key || (key != <span class=\"literal\">null</span> &amp;&amp; key.equals(k))))</span><br><span class=\"line\">                        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                    p = e;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (e != <span class=\"literal\">null</span>) &#123; <span class=\"comment\">// existing mapping for key</span></span><br><span class=\"line\">                <span class=\"type\">V</span> <span class=\"variable\">oldValue</span> <span class=\"operator\">=</span> e.value;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (!onlyIfAbsent || oldValue == <span class=\"literal\">null</span>)</span><br><span class=\"line\">                    e.value = value;</span><br><span class=\"line\">                afterNodeAccess(e);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">        ++modCount;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (++size &gt; threshold)</span><br><span class=\"line\">            resize();</span><br><span class=\"line\">        afterNodeInsertion(evict);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"例：使用多线程操作Set-lt-String-gt-1\"><a href=\"#例：使用多线程操作Set-lt-String-gt-1\" class=\"headerlink\" title=\"例：使用多线程操作Set&lt;String&gt;\"></a>例：使用多线程操作<code>Set&lt;String&gt;</code></h2><blockquote>\n<p>代码</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo11_</span>多线程操作HashMap &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Map&lt;String,String&gt; map = <span class=\"keyword\">new</span> <span class=\"title class_\">HashMap</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">                map.put(Thread.currentThread().getName(), UUID.randomUUID().toString().substring(<span class=\"number\">0</span>,<span class=\"number\">5</span>));</span><br><span class=\"line\">                System.out.println(map);</span><br><span class=\"line\">            &#125;,String.valueOf(i)).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>输出</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;0=c16d6, 1=a939d, 3=96525, 4=27c75&#125;</span><br><span class=\"line\">&#123;0=c16d6, 1=a939d, 3=96525, 4=27c75, 5=ead0a, 6=a81ee, 7=96a76, 9=ec2fb&#125;</span><br><span class=\"line\">&#123;0=c16d6, 1=a939d, 3=96525, 4=27c75, 5=ead0a, 6=a81ee, 9=ec2fb&#125;</span><br><span class=\"line\">&#123;0=c16d6, 1=a939d, 3=96525, 4=27c75, 5=ead0a, 9=ec2fb&#125;</span><br><span class=\"line\">&#123;0=c16d6, 1=a939d, 3=96525, 4=27c75, 5=ead0a&#125;</span><br><span class=\"line\">&#123;0=c16d6, 1=a939d, 3=96525, 4=27c75&#125;</span><br><span class=\"line\">&#123;0=c16d6, 1=a939d, 3=96525, 4=27c75, 5=ead0a, 6=a81ee, 7=96a76, 8=78b79, 9=ec2fb&#125;</span><br><span class=\"line\">Exception in thread &quot;3&quot; Exception in thread &quot;2&quot; Exception in thread &quot;0&quot; java.util.ConcurrentModificationException</span><br><span class=\"line\">\tat java.util.HashMap$HashIterator.nextNode(HashMap.java:1445)</span><br><span class=\"line\">\tat java.util.HashMap$EntryIterator.next(HashMap.java:1479)</span><br><span class=\"line\">\tat java.util.HashMap$EntryIterator.next(HashMap.java:1477)</span><br><span class=\"line\">\tat java.util.AbstractMap.toString(AbstractMap.java:554)</span><br><span class=\"line\">\tat java.lang.String.valueOf(String.java:2994)</span><br><span class=\"line\">\tat java.io.PrintStream.println(PrintStream.java:821)</span><br><span class=\"line\">\tat com.yn.Demo11_多线程操作HashMap.lambda$main$0(Demo11_多线程操作HashMap.java:13)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\">java.util.ConcurrentModificationException</span><br><span class=\"line\">\tat java.util.HashMap$HashIterator.nextNode(HashMap.java:1445)</span><br><span class=\"line\">\tat java.util.HashMap$EntryIterator.next(HashMap.java:1479)</span><br><span class=\"line\">\tat java.util.HashMap$EntryIterator.next(HashMap.java:1477)</span><br><span class=\"line\">\tat java.util.AbstractMap.toString(AbstractMap.java:554)</span><br><span class=\"line\">\tat java.lang.String.valueOf(String.java:2994)</span><br><span class=\"line\">\tat java.io.PrintStream.println(PrintStream.java:821)</span><br><span class=\"line\">\tat com.yn.Demo11_多线程操作HashMap.lambda$main$0(Demo11_多线程操作HashMap.java:13)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br><span class=\"line\">java.util.ConcurrentModificationException</span><br><span class=\"line\">\tat java.util.HashMap$HashIterator.nextNode(HashMap.java:1445)</span><br><span class=\"line\">\tat java.util.HashMap$EntryIterator.next(HashMap.java:1479)</span><br><span class=\"line\">\tat java.util.HashMap$EntryIterator.next(HashMap.java:1477)</span><br><span class=\"line\">\tat java.util.AbstractMap.toString(AbstractMap.java:554)</span><br><span class=\"line\">\tat java.lang.String.valueOf(String.java:2994)</span><br><span class=\"line\">\tat java.io.PrintStream.println(PrintStream.java:821)</span><br><span class=\"line\">\tat com.yn.Demo11_多线程操作HashMap.lambda$main$0(Demo11_多线程操作HashMap.java:13)</span><br><span class=\"line\">\tat java.lang.Thread.run(Thread.java:748)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方案-2\"><a href=\"#解决方案-2\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ol>\n<li><code>Map&lt;String,String&gt; map = Collections.synchronizedMap(new HashMap&lt;&gt;());</code></li>\n<li>( JUC方案 )  <code>Map&lt;String,String&gt; map = new ConcurrentHashMap&lt;&gt;();</code></li>\n</ol>\n<p><img src=\"/2022/09/01/Day9-Multithreading2-3/image-20220901155650474.png\" alt=\"JDK文档中concurrent包下类的部分截图\"></p>\n<h2 id=\"ConcurrentHashMap-介绍…-gt-Hole…\"><a href=\"#ConcurrentHashMap-介绍…-gt-Hole…\" class=\"headerlink\" title=\"ConcurrentHashMap 介绍….-&gt; Hole…\"></a>ConcurrentHashMap 介绍….-&gt; Hole…</h2><h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><blockquote>\n<p>随机生成字符串</p>\n</blockquote>\n<p><code>UUID.randomUUID().toString()</code></p>\n<p>可以随机生成字符串，使用<code>substring(0,x)</code>取出其中一部分。</p>\n","categories":[],"tags":["Java"]},{"title":"Day9 多线程进阶 2 八锁现象","url":"http://zswh33.github.io/2022/09/01/Day9-Multithreading2-2/","content":"<h1 id=\"8锁现象（加深synchronized锁的理解）\"><a href=\"#8锁现象（加深synchronized锁的理解）\" class=\"headerlink\" title=\"8锁现象（加深synchronized锁的理解）\"></a>8锁现象（加深synchronized锁的理解）</h1><p><em>8个关于锁的问题</em></p>\n<p><em>锁是什么？如何判断锁的是谁！</em></p>\n<p>对象、Class</p>\n<h2 id=\"synchronized若修饰于实例方法，则锁住的是方法的对象。\"><a href=\"#synchronized若修饰于实例方法，则锁住的是方法的对象。\" class=\"headerlink\" title=\"synchronized若修饰于实例方法，则锁住的是方法的对象。\"></a>synchronized若修饰于<strong>实例方法</strong>，则锁住的是<strong>方法的对象</strong>。</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo5_synchronized</span>锁住的是方法的对象 &#123;</span><br><span class=\"line\">    <span class=\"comment\">//synchronized锁住的是方法的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Phone</span> <span class=\"variable\">phone</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone</span>();<span class=\"comment\">//对象</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;phone.sendSms();&#125;,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;phone.call();&#125;,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"comment\">//结果</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            发短信</span></span><br><span class=\"line\"><span class=\"comment\">            打电话</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        解释：A线程启动后，synchronized锁住了对象phone，B线程启动后，必须等待A线程结束后，才会开始执行。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Phone</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendSms</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发短信&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;打电话&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一个对象加锁之后，不影响没有synchronized修饰的方法的正常执行。\"><a href=\"#一个对象加锁之后，不影响没有synchronized修饰的方法的正常执行。\" class=\"headerlink\" title=\"一个对象加锁之后，不影响没有synchronized修饰的方法的正常执行。\"></a>一个对象加锁之后，不影响没有synchronized修饰的方法的正常执行。</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo6_synchronized</span>锁住对象后_没有<span class=\"keyword\">synchronized</span>修饰的方法正常执行 &#123;</span><br><span class=\"line\">    <span class=\"comment\">//synchronized锁住的是方法的对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Phone2</span> <span class=\"variable\">phone</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone2</span>();<span class=\"comment\">//对象</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;phone.sendSms();&#125;,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;phone.hello();&#125;,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"comment\">//结果</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            Hello</span></span><br><span class=\"line\"><span class=\"comment\">            发短信</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        解释：A线程启动后，synchronized锁住了对象phone，B线程启动后，hello()方法未用synchronized修饰，不受锁的影响，正常执行。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Phone2</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendSms</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发短信&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span>&#123;<span class=\"comment\">//不用synchronized修饰</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"两个对象-两个同步方法-互不影响\"><a href=\"#两个对象-两个同步方法-互不影响\" class=\"headerlink\" title=\"两个对象 两个同步方法 互不影响\"></a>两个对象 两个同步方法 互不影响</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo7_synchronized_</span>两个对象两个同步方法 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Phone3</span> <span class=\"variable\">phone1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone3</span>();</span><br><span class=\"line\">        <span class=\"type\">Phone3</span> <span class=\"variable\">phone2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone3</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;phone1.sendSms();&#125;,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;phone2.call();&#125;,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"comment\">//结果</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            打电话</span></span><br><span class=\"line\"><span class=\"comment\">            发短信</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        解释：A线程启动后，synchronized锁住了对象phone1，B线程启动后，synchronized锁住了对象phone2，两者互不影响，正常执行。</span></span><br><span class=\"line\"><span class=\"comment\">        A线程的sendSms()方法中有sleep，相对输出要比B线程的输出方法要晚。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Phone3</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendSms</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发短信&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;打电话&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"静态同步方法锁住的是类的Class对象，不影响实例方法的正常执行\"><a href=\"#静态同步方法锁住的是类的Class对象，不影响实例方法的正常执行\" class=\"headerlink\" title=\"静态同步方法锁住的是类的Class对象，不影响实例方法的正常执行\"></a>静态同步方法锁住的是类的Class对象，不影响实例方法的正常执行</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo8_</span>静态同步方法锁住的是类的Class对象_不影响实例方法的正常执行 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Phone4</span> <span class=\"variable\">phone</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Phone4</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            phone.sendSms();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            phone.call();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"comment\">//结果</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            打电话</span></span><br><span class=\"line\"><span class=\"comment\">            发短信</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        解释：A线程启动后，synchronized锁住了类Phone4的Class对象，B线程启动后，synchronized锁住了对象phone，两者互不影响，正常执行。</span></span><br><span class=\"line\"><span class=\"comment\">        A线程的sendSms()方法中有sleep，相对输出要比B线程的输出方法要晚。</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Phone4</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sendSms</span><span class=\"params\">()</span> &#123;<span class=\"comment\">//静态同步方法</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;发短信&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;打电话&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>同步实例方法锁住的是<strong>调用者&#x2F;当前对象</strong>，会影响<strong>当前对象的所有同步实例方法</strong>的正常执行。</p>\n<p>静态同步实例方法锁住的是<strong>类模板对象Class</strong>，会影响<strong>类的所有类方法</strong>的正常执行。</p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><blockquote>\n<p><code>TimeUnit</code>类</p>\n</blockquote>\n<p>设置延迟的类，（用来代替<code>Thread.sleep()</code>）</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>TimeUnit.SECONDS.sleep(timeout)</code></td>\n<td>延时，单位：秒</td>\n</tr>\n<tr>\n<td><code>TimeUnit.DAYS.sleep(timeout)</code></td>\n<td>延时，单位：天</td>\n</tr>\n<tr>\n<td><code>TimeUnit.HOURS.sleep(timeout);</code></td>\n<td>延时，单位：小时</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n","categories":[],"tags":["Java"]},{"title":"DayX AllNote 个人全局需要注意的","url":"http://zswh33.github.io/2022/08/31/DayX-AllNote-个人全局需要注意的/","content":"<h1 id=\"面向工作需要学会的-了解的\"><a href=\"#面向工作需要学会的-了解的\" class=\"headerlink\" title=\"面向工作需要学会的 了解的\"></a>面向工作需要学会的 了解的</h1><blockquote>\n<p>个人收集到的</p>\n</blockquote>\n<p>…</p>\n<blockquote>\n<p>从课程视频中得到的</p>\n</blockquote>\n<p>单例模式、八大排序算法、生产者消费者问题、死锁。</p>\n<blockquote>\n<p>基础</p>\n</blockquote>\n<p>泛型、枚举、反射、lambda表达式、链式编程、函数式接口、Stream流式计算。</p>\n<h1 id=\"留下的坑\"><a href=\"#留下的坑\" class=\"headerlink\" title=\"留下的坑\"></a>留下的坑</h1><blockquote>\n<p>位于<strong>Day9 Multithreading2 3</strong>的<strong>HashMap不安全</strong>下的</p>\n</blockquote>\n<ol>\n<li><p><code>Map&lt;String,String&gt; map = new HashMap&lt;&gt;();</code></p>\n<p>map是这么用的吗？默认等价于什么？</p>\n</li>\n<li><p><code>ConcurrentHashMap</code> 介绍</p>\n</li>\n</ol>\n<blockquote>\n<p>位于<strong>Day10-Multithreading2 6</strong>下的</p>\n</blockquote>\n<p>Stream流式计算，链式编程，ForkJoin.</p>\n<p>待完善：异步回调。</p>\n<blockquote>\n<p>位于 <strong>Day11-Multithreading2 7</strong> 下的</p>\n</blockquote>\n<p>JMM的原子操作的约定。</p>\n<p><code>AtomicInteger</code>原子类。</p>\n<p>Volatile的禁止指令重排。</p>\n<p>指令重排。</p>\n<blockquote>\n<p>视频里没讲到的，要重新学习的</p>\n</blockquote>\n<p>…</p>\n<h1 id=\"画个饼，万一要学呢？\"><a href=\"#画个饼，万一要学呢？\" class=\"headerlink\" title=\"画个饼，万一要学呢？\"></a>画个饼，万一要学呢？</h1><ol>\n<li>Dobbo底层Netty</li>\n</ol>\n<h1 id=\"待办\"><a href=\"#待办\" class=\"headerlink\" title=\"待办\"></a>待办</h1><h2 id=\"完成一个基于SpringBoot的完整的博客项目\"><a href=\"#完成一个基于SpringBoot的完整的博客项目\" class=\"headerlink\" title=\"完成一个基于SpringBoot的完整的博客项目\"></a>完成一个基于SpringBoot的完整的博客项目</h2><ol>\n<li>有一套自己熟悉的后台模板：x-admin；</li>\n<li>前端界面：至少自己能够通过前端框架，组合出来一个网站页面；<ul>\n<li>index</li>\n<li>about</li>\n<li>blog</li>\n<li>post</li>\n<li>user</li>\n</ul>\n</li>\n<li>让网站独立运行。</li>\n</ol>\n","categories":[],"tags":["Job"]},{"title":"Day8 Java多线程进阶 1","url":"http://zswh33.github.io/2022/08/31/Day8-Multithreading2-1/","content":"<h1 id=\"JUC\"><a href=\"#JUC\" class=\"headerlink\" title=\"JUC\"></a>JUC</h1><p><strong><code>java.util.concurrent</code></strong></p>\n<h2 id=\"子类介绍\"><a href=\"#子类介绍\" class=\"headerlink\" title=\"子类介绍\"></a>子类介绍</h2><p><code>java.util.concurrent.atomic</code> 原子性</p>\n<p><code>java.util.concurrent.locks</code> lock锁</p>\n<h2 id=\"在业务中\"><a href=\"#在业务中\" class=\"headerlink\" title=\"在业务中\"></a>在业务中</h2><p>普通的线程代码：Thread</p>\n<p>Runnable： 没有返回值，效率相对于Callable低。</p>\n<h1 id=\"线程和进程\"><a href=\"#线程和进程\" class=\"headerlink\" title=\"线程和进程\"></a>线程和进程</h1><p><strong>对于Java而言的线程：</strong>Thread、Runnable、Callable。</p>\n<blockquote>\n<p><strong>并发和并行</strong></p>\n</blockquote>\n<p>并发（多线程操作同一个资源）</p>\n<ul>\n<li>CPU一核，模拟出多条线程。<em>天下武功，唯快不破，快速交替。</em></li>\n</ul>\n<p>并行（多个人一起行走）</p>\n<ul>\n<li>CPU多核，多个线程可以同时执行。<em>线程池</em></li>\n</ul>\n<blockquote>\n<p> <strong>线程有几个状态</strong></p>\n</blockquote>\n<p>六个。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NEW,<span class=\"comment\">//线程新生</span></span><br><span class=\"line\">RUNNABLE,<span class=\"comment\">//运行状态</span></span><br><span class=\"line\">BLOCKED,<span class=\"comment\">//阻塞</span></span><br><span class=\"line\">WAITING,<span class=\"comment\">//等待</span></span><br><span class=\"line\">TIMED_WAITING,<span class=\"comment\">//超时等待</span></span><br><span class=\"line\">TERMINATED;<span class=\"comment\">//终止</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p> <strong>wait&#x2F;sleep区别</strong></p>\n</blockquote>\n<ol>\n<li><p><strong>来自不同的类</strong></p>\n<p>wait -&gt; Object</p>\n<p>sleep -&gt; Thread</p>\n</li>\n<li><p><strong>关于锁的释放</strong></p>\n<p>wait 会释放锁</p>\n<p>sleep 不会释放锁</p>\n</li>\n<li><p><strong>使用的范围不同</strong></p>\n<p>wait 必须在同步代码块中</p>\n<p>sleep 可以在任何地方使用</p>\n</li>\n<li><p><strong>是否需要捕获异常</strong></p>\n<p>wait 不需要捕获异常</p>\n<p>sleep 必须要捕获异常</p>\n</li>\n</ol>\n<h1 id=\"Lock锁\"><a href=\"#Lock锁\" class=\"headerlink\" title=\"Lock锁\"></a>Lock锁</h1><p><em>synchronized</em></p>\n<blockquote>\n<p>Lock接口以及其实现类</p>\n</blockquote>\n<p><img src=\"/2022/08/31/Day8-Multithreading2-1/image-20220831185158454.png\" alt=\"image-20220831185158454\"></p>\n<p><strong>Lock是一个接口，有以下实现类。</strong></p>\n<ul>\n<li><p>ReentrantLock 可重用锁</p>\n</li>\n<li><p>ReadLock 读锁</p>\n</li>\n<li><p>WriteLock 写锁</p>\n</li>\n</ul>\n<blockquote>\n<p>公平锁 非公平锁</p>\n</blockquote>\n<p><img src=\"/2022/08/31/Day8-Multithreading2-1/image-20220831185615965.png\" alt=\"image-20220831185615965\"></p>\n<p>公平锁：先来后到。</p>\n<p>非公平锁：可以插队。（默认）</p>\n<blockquote>\n<p>synchronized 和 Lock 区别</p>\n</blockquote>\n<ol>\n<li><p>synchronized 内置的Java关键字。 Lock是一个Java类。</p>\n</li>\n<li><p>synchronized 无法判断获取锁的状态。Lock可以判断是否获取到了锁。</p>\n</li>\n<li><p>synchronized 会自动释放锁。Lock必须要手动释放锁，若不释放，则会<strong>死锁</strong>。</p>\n</li>\n<li><p>synchronized 线程1（获得锁，阻塞），线程2（等待）（悲）。Lock锁不一定会一直等待，可以尝试获取锁。</p>\n</li>\n<li><p>synchronized 可重入锁，不可中断的，非公平；Lock，可重入锁，可以判断锁，非公平（可以自己设置）。</p>\n</li>\n<li><p>synchronized 适合锁少量的代码同步问题，Lock适合锁大量的同步代码。</p>\n</li>\n</ol>\n<h1 id=\"生产者和消费者问题\"><a href=\"#生产者和消费者问题\" class=\"headerlink\" title=\"生产者和消费者问题\"></a>生产者和消费者问题</h1><h2 id=\"synchronized版本\"><a href=\"#synchronized版本\" class=\"headerlink\" title=\"synchronized版本\"></a>synchronized版本</h2><p><strong>代码：</strong>(错误的版本，正确的版本下面)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程之间的通信问题：生产者和消费者问题。 等待唤醒，通知唤醒</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程交替执行</span></span><br><span class=\"line\"><span class=\"comment\"> * A B 操作同一个变量 num = 0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo3_</span>生产者和消费者 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Data</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Data</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    data.increment();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    data.decrement();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断等待  业务  通知</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Data</span>&#123;<span class=\"comment\">//资源类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">number</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//+1</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">increment</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (number!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//等待</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        number++;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; -&gt; &quot;</span>+number);</span><br><span class=\"line\">        <span class=\"comment\">//通知其他线程</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// - 1</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">decrement</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(number==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//等待</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        number--;</span><br><span class=\"line\">        <span class=\"comment\">//通知其他线程</span></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; -&gt; &quot;</span>+number);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>出现问题：两个线程正常运行 四个线程出现问题。 虚假唤醒。</p>\n</blockquote>\n<p>当出现超过两个线程，就会出现<strong>虚假唤醒</strong>。</p>\n<p><em>当一个生产者生产结束后，会唤醒其他所有消费者，导致消费者全部开始消费，若消费者多于1个，会出现多次消费，导致错误。</em></p>\n<p>为解决这个问题，可以<strong>将if换成while</strong>，来防止虚假唤醒。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程之间的通信问题：生产者和消费者问题。 等待唤醒，通知唤醒</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程交替执行</span></span><br><span class=\"line\"><span class=\"comment\"> * A B 操作同一个变量 num = 0</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo3_</span>生产者和消费者 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Data</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Data</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    data.increment();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    data.decrement();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断等待  业务  通知</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Data</span>&#123;<span class=\"comment\">//资源类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">number</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//+1</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">increment</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (number!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//等待</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        number++;</span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; -&gt; &quot;</span>+number);</span><br><span class=\"line\">        <span class=\"comment\">//通知其他线程</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// - 1</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">decrement</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(number==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//等待</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.wait();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        number--;</span><br><span class=\"line\">        <span class=\"comment\">//通知其他线程</span></span><br><span class=\"line\">        System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; -&gt; &quot;</span>+number);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.notifyAll();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"JUC版生产者和消费者问题\"><a href=\"#JUC版生产者和消费者问题\" class=\"headerlink\" title=\"JUC版生产者和消费者问题\"></a>JUC版生产者和消费者问题</h2><blockquote>\n<p>Lock用来替代synchronized的名词</p>\n</blockquote>\n<p><img src=\"/2022/08/31/Day8-Multithreading2-1/image-20220831203812436.png\" alt=\"Lock用来替代synchronized的名词\"></p>\n<p><strong>代码实现</strong>：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo3_</span>生产者和消费者JUC版 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Data2</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Data2</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                data.increment();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                data.increment();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                data.decrement();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;C&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                data.decrement();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;D&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 判断等待  业务  通知</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Data2</span>&#123;<span class=\"comment\">//资源类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">number</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">Lock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\">    <span class=\"type\">Condition</span> <span class=\"variable\">condition</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\"><span class=\"comment\">//    condition.await();//等待</span></span><br><span class=\"line\"><span class=\"comment\">//    condition.signalAll();//唤醒全部</span></span><br><span class=\"line\">    <span class=\"comment\">//+1</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">increment</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//业务代码</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (number!=<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                condition.await();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            number++;</span><br><span class=\"line\">            condition.signalAll();</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; =&gt; &quot;</span>+number);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// - 1</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">decrement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (number==<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//等待</span></span><br><span class=\"line\">                condition.await();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            number--;</span><br><span class=\"line\">            <span class=\"comment\">//通知</span></span><br><span class=\"line\">            condition.signalAll();</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; =&gt; &quot;</span>+number);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Condition精准通知唤醒\"><a href=\"#Condition精准通知唤醒\" class=\"headerlink\" title=\"Condition精准通知唤醒\"></a>Condition精准通知唤醒</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 当前需求：A执行完通知B，B执行完通知C，C执行完通知A。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo4_</span>通过生产者消费者问题学习Condition精准通知 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Data3</span> <span class=\"variable\">data</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Data3</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                data.printA();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;A&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                data.printB();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;B&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">                data.printC();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;C&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Data3</span>&#123;<span class=\"comment\">//资源类</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Lock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Condition</span> <span class=\"variable\">condition1</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Condition</span> <span class=\"variable\">condition2</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">Condition</span> <span class=\"variable\">condition3</span> <span class=\"operator\">=</span> lock.newCondition();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">number</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>; <span class=\"comment\">// 1 A    2 B   3 C</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printA</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//业务  判断 &gt; 执行 &gt; 通知</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (number!=<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//等待</span></span><br><span class=\"line\">                condition1.await();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; A&quot;</span>);</span><br><span class=\"line\">            <span class=\"comment\">//唤醒B</span></span><br><span class=\"line\">            number = <span class=\"number\">2</span>;</span><br><span class=\"line\">            condition2.signal();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printB</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//业务  判断 &gt; 执行 &gt; 通知</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (number!=<span class=\"number\">2</span>)&#123;</span><br><span class=\"line\">                condition2.await();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; B&quot;</span>);</span><br><span class=\"line\">            number = <span class=\"number\">3</span>;</span><br><span class=\"line\">            condition3.signal();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printC</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//业务  判断 &gt; 执行 &gt; 通知</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (number != <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">                condition3.await();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; C&quot;</span>);</span><br><span class=\"line\">            number = <span class=\"number\">1</span>;</span><br><span class=\"line\">            condition1.signal();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><ul>\n<li><p>native  本地方法。</p>\n</li>\n<li><p>获取CPU核数方法</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取CPU核数</span></span><br><span class=\"line\"><span class=\"comment\">// CPU 密集型，IO密集型</span></span><br><span class=\"line\">System.out.println(Runtime.getRuntime().availableProcessors());</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>并发编程的本质：<strong>充分利用CPU的资源</strong></li>\n</ul>\n<h1 id=\"一些问题\"><a href=\"#一些问题\" class=\"headerlink\" title=\"一些问题\"></a>一些问题</h1><p><strong>Q：Java默认有几个线程？</strong></p>\n<p>A：2个。main和GC。</p>\n<p><strong>Q： Java可以开启线程吗？</strong></p>\n<p>A：不可以。通过分析new Thread().start()，可以得到一个native方法<code>private native void start0();</code>，这个方法是个本地方法，调用的是底层的C++。Java不能直接操作硬件。</p>\n","categories":[],"tags":["Java"]},{"title":"Day8 反射机制 2","url":"http://zswh33.github.io/2022/08/31/Day8-Reflection-2/","content":"<h1 id=\"Java-Reflection-反射机制2\"><a href=\"#Java-Reflection-反射机制2\" class=\"headerlink\" title=\"Java Reflection 反射机制2\"></a>Java Reflection 反射机制2</h1><h2 id=\"获取运行时类的对象的属性\"><a href=\"#获取运行时类的对象的属性\" class=\"headerlink\" title=\"获取运行时类的对象的属性\"></a>获取运行时类的对象的属性</h2><h3 id=\"Class类的方法\"><a href=\"#Class类的方法\" class=\"headerlink\" title=\"Class类的方法\"></a>Class类的方法</h3><table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>介绍</th>\n<th>参数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>getName()</td>\n<td>获得类的全名，包括包。如：com.uwupu.User</td>\n<td></td>\n</tr>\n<tr>\n<td>getSimpleName()</td>\n<td>获得类的名字。如：User</td>\n<td></td>\n</tr>\n<tr>\n<td>getFields()</td>\n<td>获取类的public属性。</td>\n<td></td>\n</tr>\n<tr>\n<td>getDeclaredFields()</td>\n<td>获得类的所有属性。</td>\n<td></td>\n</tr>\n<tr>\n<td>getDeclaredField(param)</td>\n<td>通过名字获得类的属性</td>\n<td>属性的名字</td>\n</tr>\n<tr>\n<td>getDeclaredConstructors()</td>\n<td>获得类的所有的构造器</td>\n<td></td>\n</tr>\n<tr>\n<td>getConstructors()</td>\n<td>获得类的public的构造器</td>\n<td></td>\n</tr>\n<tr>\n<td>getConstructor(param)</td>\n<td>通过构造器的参数获得类的构造器</td>\n<td>构造器的参数</td>\n</tr>\n</tbody></table>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, NoSuchFieldException, NoSuchMethodException &#123;</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;Demo2_Reflection.User&quot;</span>);<span class=\"comment\">//引用一个之前用过的类</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获得类的名字</span></span><br><span class=\"line\">        System.out.println(c1.getName());<span class=\"comment\">//获得包名和类名</span></span><br><span class=\"line\">        System.out.println(c1.getSimpleName());<span class=\"comment\">//获得类名</span></span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        Demo2_Reflection.User</span></span><br><span class=\"line\"><span class=\"comment\">        User</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获得类的属性</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------------&quot;</span>);</span><br><span class=\"line\">        Field[] fields = c1.getFields();<span class=\"comment\">//仅为public的属性</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Field f : fields)&#123;</span><br><span class=\"line\">            System.out.println(f);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;------------------&quot;</span>);</span><br><span class=\"line\">        fields = c1.getDeclaredFields();<span class=\"comment\">//全部的属性</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Field f : fields)&#123;</span><br><span class=\"line\">            System.out.println(f);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        ------------------</span></span><br><span class=\"line\"><span class=\"comment\">        public int Demo2_Reflection.User.length</span></span><br><span class=\"line\"><span class=\"comment\">        ------------------</span></span><br><span class=\"line\"><span class=\"comment\">        private java.lang.String Demo2_Reflection.User.name</span></span><br><span class=\"line\"><span class=\"comment\">        private int Demo2_Reflection.User.id</span></span><br><span class=\"line\"><span class=\"comment\">        private int Demo2_Reflection.User.age</span></span><br><span class=\"line\"><span class=\"comment\">        public int Demo2_Reflection.User.length</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获得指定属性</span></span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> c1.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        System.out.println(name);<span class=\"comment\">//private java.lang.String Demo2_Reflection.User.name</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获得类的方法</span></span><br><span class=\"line\">        Method[] methods = c1.getMethods();<span class=\"comment\">//获得本类及其父类的public方法。</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Method method : methods) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;getMethods：&quot;</span>+method);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        methods = c1.getDeclaredMethods();<span class=\"comment\">//获得本类及其父类的所有方法</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Method method : methods) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;getDeclaredMethods：&quot;</span>+method);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获得指定方法</span></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">getMethod</span> <span class=\"operator\">=</span> c1.getMethod(<span class=\"string\">&quot;getName&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">setMethod</span> <span class=\"operator\">=</span> c1.getMethod(<span class=\"string\">&quot;setName&quot;</span>,String.class);<span class=\"comment\">//后面的参数用于筛选方法重载时的多个方法。</span></span><br><span class=\"line\">        System.out.println(getMethod);<span class=\"comment\">//public java.lang.String Demo2_Reflection.User.getName()</span></span><br><span class=\"line\">        System.out.println(setMethod);<span class=\"comment\">//public void Demo2_Reflection.User.setName(java.lang.String)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获得指定的构造器</span></span><br><span class=\"line\">        Constructor[] constructors = c1.getDeclaredConstructors();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Constructor constructor : constructors) &#123;</span><br><span class=\"line\">            System.out.println(constructor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        constructors = c1.getConstructors();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Constructor constructor : constructors) &#123;</span><br><span class=\"line\">            System.out.println(constructor);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        public Demo2_Reflection.User()</span></span><br><span class=\"line\"><span class=\"comment\">        public Demo2_Reflection.User(java.lang.String,int,int)</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">constructor</span> <span class=\"operator\">=</span> c1.getConstructor(String.class,<span class=\"type\">int</span>.class,<span class=\"type\">int</span>.class);</span><br><span class=\"line\">        System.out.println(constructor);<span class=\"comment\">//public Demo2_Reflection.User(java.lang.String,int,int)</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对Class对象进行一些操作\"><a href=\"#对Class对象进行一些操作\" class=\"headerlink\" title=\"对Class对象进行一些操作\"></a>对Class对象进行一些操作</h2><h3 id=\"创建类的对象：\"><a href=\"#创建类的对象：\" class=\"headerlink\" title=\"创建类的对象：\"></a>创建类的对象：</h3><h4 id=\"方法1：\"><a href=\"#方法1：\" class=\"headerlink\" title=\"方法1：\"></a>方法1：</h4><p>调用Class对象的newInstance()方法。</p>\n<ul>\n<li>类必须有一个无参构造器；</li>\n<li>需要足够的类的构造器访问权限。</li>\n</ul>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo8_</span>通过Class对象对类进行一些操作 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获得Class对象</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;Demo2_Reflection.User&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//构造一个对象</span></span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user</span> <span class=\"operator\">=</span> (User)c1.newInstance();<span class=\"comment\">//本质上调用了类的无参构造器。若没有无参构造器，会报错。</span></span><br><span class=\"line\">        System.out.println(user);</span><br><span class=\"line\">        <span class=\"comment\">//User&#123;name=&#x27;null&#x27;, id=0, age=0&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方法2：\"><a href=\"#方法2：\" class=\"headerlink\" title=\"方法2：\"></a>方法2：</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo8_</span>通过Class对象对类进行一些操作 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获得Class对象</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;Demo2_Reflection.User&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//通过构造器创建对象</span></span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">constructor</span> <span class=\"operator\">=</span> c1.getDeclaredConstructor(String.class,<span class=\"type\">int</span>.class,<span class=\"type\">int</span>.class);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user2</span> <span class=\"operator\">=</span> (User) constructor.newInstance(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">1</span>,<span class=\"number\">22</span>);</span><br><span class=\"line\">        System.out.println(user2);</span><br><span class=\"line\">        <span class=\"comment\">//User&#123;name=&#x27;张三&#x27;, id=1, age=22&#125;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过反射操作方法\"><a href=\"#通过反射操作方法\" class=\"headerlink\" title=\"通过反射操作方法\"></a>通过反射操作方法</h3><p>Invoke</p>\n<ul>\n<li><p>可以操作方法，参数1为操作的对象，后面的参数为方法的参数。</p>\n</li>\n<li><p>返回值为原方法的返回值。</p>\n</li>\n</ul>\n<p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo8_</span>通过Class对象对类进行一些操作 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获得Class对象</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;Demo2_Reflection.User&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//通过构造器创建对象</span></span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">constructor</span> <span class=\"operator\">=</span> c1.getDeclaredConstructor(String.class,<span class=\"type\">int</span>.class,<span class=\"type\">int</span>.class);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user2</span> <span class=\"operator\">=</span> (User) constructor.newInstance(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">1</span>,<span class=\"number\">22</span>);</span><br><span class=\"line\">        System.out.println(user2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过反射调用普通方法</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过反射获取一个方法</span></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">setName</span> <span class=\"operator\">=</span> c1.getDeclaredMethod(<span class=\"string\">&quot;setName&quot;</span>,String.class);</span><br><span class=\"line\">        setName.invoke(user2,<span class=\"string\">&quot;李四&quot;</span>);</span><br><span class=\"line\">        System.out.println(user2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User&#123;name=&#x27;张三&#x27;, id=1, age=22&#125;</span><br><span class=\"line\">User&#123;name=&#x27;李四&#x27;, id=1, age=22&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过反射操作属性\"><a href=\"#通过反射操作属性\" class=\"headerlink\" title=\"通过反射操作属性\"></a>通过反射操作属性</h3><p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo8_</span>通过Class对象对类进行一些操作 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, InvocationTargetException, NoSuchFieldException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获得Class对象</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;Demo2_Reflection.User&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过构造器创建对象</span></span><br><span class=\"line\">        <span class=\"type\">Constructor</span> <span class=\"variable\">constructor</span> <span class=\"operator\">=</span> c1.getDeclaredConstructor(String.class,<span class=\"type\">int</span>.class,<span class=\"type\">int</span>.class);</span><br><span class=\"line\">        <span class=\"type\">User</span> <span class=\"variable\">user2</span> <span class=\"operator\">=</span> (User) constructor.newInstance(<span class=\"string\">&quot;张三&quot;</span>,<span class=\"number\">1</span>,<span class=\"number\">22</span>);</span><br><span class=\"line\">        System.out.println(user2);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//通过反射操作属性</span></span><br><span class=\"line\">        <span class=\"comment\">//不能直接操作私有属性，通过setAccessible方法关掉权限监测。</span></span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> c1.getDeclaredField(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">        name.setAccessible(<span class=\"literal\">true</span>);<span class=\"comment\">//关掉权限监测</span></span><br><span class=\"line\">        name.set(user2,<span class=\"string\">&quot;王五&quot;</span>);<span class=\"comment\">//直接操作权限不够 name属性为private</span></span><br><span class=\"line\">        System.out.println(user2);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">User&#123;name=&#x27;李四&#x27;, id=1, age=22&#125;</span><br><span class=\"line\">User&#123;name=&#x27;王五&#x27;, id=1, age=22&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ul>\n<li>若要”使用Field的set方法操作属性“或“使用invoke方法操作原方法”，若属性或方法用private修饰，则不能直接操作，需要用<code>setAccessible(true)</code>方法关掉权限监测，才可直接操作。</li>\n</ul>\n<h3 id=\"setAccessible\"><a href=\"#setAccessible\" class=\"headerlink\" title=\"setAccessible\"></a>setAccessible</h3><ul>\n<li>Method、Field和Constructor对象都有setAccessible()方法；</li>\n<li>**<code>setAccessible</code>**作用是启动和禁用访问安全检查的开关。</li>\n<li>参数为true表示<strong>关闭反射对象</strong>的<strong>访问检查</strong>。默认为false。<ul>\n<li>可以提高反射效率。<strong>若代码中必须使用反射，且该句代码需要频繁地被调用，请一定设置为true。</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"获取泛型信息\"><a href=\"#获取泛型信息\" class=\"headerlink\" title=\"获取泛型信息\"></a>获取泛型信息</h3><p>Java采用泛型擦除的机制来引入泛型，Java中的泛型仅仅是给编译器javac使用的，确保数据的安全性和免去强制类型转换问题。一旦编译完成，所有和泛型有关的类型全部擦除。</p>\n<p>为了通过反射操作这些类型，Java新增了集中类型来代表不能归一到Class类中的类型但是又和原始类型齐名的类型。</p>\n<table>\n<thead>\n<tr>\n<th>类型名</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ParameterizedType</td>\n<td>表示一种参数化类型，如<code>Collection&lt;String&gt;</code></td>\n</tr>\n<tr>\n<td>GenericArrayType</td>\n<td>表示一种元素类型是参数化类型或者类型变量的数组类型。</td>\n</tr>\n<tr>\n<td>TypeVariable</td>\n<td>是各种类型变量的公共父接口。</td>\n</tr>\n<tr>\n<td>WildcardType</td>\n<td>代表一种通配符类型表达式。</td>\n</tr>\n</tbody></table>\n<p>代码：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test9</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test01</span><span class=\"params\">(Map&lt;String, User&gt; map, List&lt;User&gt; list)</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test01&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Map&lt;String,User&gt; <span class=\"title function_\">test02</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;test02&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> NoSuchMethodException &#123;</span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> Test9.class.getMethod(<span class=\"string\">&quot;test01&quot;</span>,Map.class,List.class);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获得参数是泛型</span></span><br><span class=\"line\">        <span class=\"comment\">//Generic 泛型</span></span><br><span class=\"line\">        Type[] types = method.getGenericParameterTypes();<span class=\"comment\">//获得参数类型列表</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Type type : types)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;# &quot;</span>+type);</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(type <span class=\"keyword\">instanceof</span> ParameterizedType)&#123;</span><br><span class=\"line\">                Type[] type2 =((ParameterizedType) type).getActualTypeArguments();<span class=\"comment\">//获得真实参数信息 获得参数的泛型参数列表</span></span><br><span class=\"line\">                <span class=\"keyword\">for</span> (Type type3 :type2)&#123;</span><br><span class=\"line\">                    System.out.println(type3);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;--------------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获得返回值是泛型的参数</span></span><br><span class=\"line\">        method = Test9.class.getMethod(<span class=\"string\">&quot;test02&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Type</span> <span class=\"variable\">returnType</span> <span class=\"operator\">=</span> method.getGenericReturnType();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;# &quot;</span>+returnType);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(returnType <span class=\"keyword\">instanceof</span> ParameterizedType)&#123;</span><br><span class=\"line\">            Type[] type2 =((ParameterizedType) returnType).getActualTypeArguments();<span class=\"comment\">//获得真实参数信息 获得参数的泛型参数列表</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Type type3 :type2)&#123;</span><br><span class=\"line\">                System.out.println(type3);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取注解信息\"><a href=\"#获取注解信息\" class=\"headerlink\" title=\"获取注解信息\"></a>获取注解信息</h3><h4 id=\"ORM\"><a href=\"#ORM\" class=\"headerlink\" title=\"ORM\"></a>ORM</h4><ul>\n<li><strong>Object relationship Mapping</strong> <strong>-&gt; 对象关系映射</strong></li>\n</ul>\n<p><img src=\"/2022/08/31/Day8-Reflection-2/image-20220831165101726.png\" alt=\"image-20220831165101726\"></p>\n<h4 id=\"代码-1\"><a href=\"#代码-1\" class=\"headerlink\" title=\"代码\"></a>代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo10_</span>通过反射获得注解 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取类</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;MyClass&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取类的注解的值</span></span><br><span class=\"line\">        <span class=\"type\">MyAnnotation</span> <span class=\"variable\">classAnnotation</span> <span class=\"operator\">=</span> (MyAnnotation) c1.getAnnotation(MyAnnotation.class);<span class=\"comment\">//获取注解对象</span></span><br><span class=\"line\">        System.out.println(classAnnotation);<span class=\"comment\">//输出</span></span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">                <span class=\"string\">&quot;id: &quot;</span> + classAnnotation.id() +</span><br><span class=\"line\">                        <span class=\"string\">&quot;  name: &quot;</span> +classAnnotation.name()</span><br><span class=\"line\">        );<span class=\"comment\">//获取注解的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取属性的注解的值</span></span><br><span class=\"line\">        <span class=\"type\">Field</span> <span class=\"variable\">field</span> <span class=\"operator\">=</span> c1.getField(<span class=\"string\">&quot;id&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">MyAnnotation</span> <span class=\"variable\">myAnnoation</span> <span class=\"operator\">=</span> field.getAnnotation(MyAnnotation.class);</span><br><span class=\"line\">        System.out.println(myAnnoation);</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">                <span class=\"string\">&quot;id: &quot;</span> + myAnnoation.id() +</span><br><span class=\"line\">                        <span class=\"string\">&quot;  name: &quot;</span> +myAnnoation.name()</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取方法的注解的值</span></span><br><span class=\"line\">        <span class=\"type\">Method</span> <span class=\"variable\">method</span> <span class=\"operator\">=</span> c1.getMethod(<span class=\"string\">&quot;int2String&quot;</span>, <span class=\"type\">int</span>.class);</span><br><span class=\"line\">        <span class=\"type\">MyAnnotation</span> <span class=\"variable\">methodAnnoation</span> <span class=\"operator\">=</span> method.getAnnotation(MyAnnotation.class);</span><br><span class=\"line\">        System.out.println(methodAnnoation);</span><br><span class=\"line\">        System.out.println(</span><br><span class=\"line\">                <span class=\"string\">&quot;id: &quot;</span> + methodAnnoation.id() +</span><br><span class=\"line\">                        <span class=\"string\">&quot;  name: &quot;</span> +methodAnnoation.name()</span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一个类</span></span><br><span class=\"line\"><span class=\"meta\">@MyAnnotation(name = &quot;MyClass&quot;,id = 1)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyClass</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@MyAnnotation(name = &quot;id&quot;,id = 2)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> id;<span class=\"comment\">//一个属性</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//一个方法</span></span><br><span class=\"line\">    <span class=\"meta\">@MyAnnotation(name = &quot;int2String&quot;,id = 3)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">int2String</span><span class=\"params\">(<span class=\"type\">int</span> value)</span>&#123;</span><br><span class=\"line\">           <span class=\"keyword\">return</span> String.valueOf(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//声明注解</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一个Target可以是属性，类或方法的注解</span></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.FIELD,ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span> MyAnnotation&#123;</span><br><span class=\"line\">    String <span class=\"title function_\">name</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">id</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@MyAnnoation(name=MyClass, id=1)</span><br><span class=\"line\">id: 1  name: MyClass</span><br><span class=\"line\">@MyAnnoation(name=id, id=2)</span><br><span class=\"line\">id: 2  name: id</span><br><span class=\"line\">@MyAnnoation(name=int2String, id=3)</span><br><span class=\"line\">id: 3  name: int2String</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":[],"tags":["Java"]},{"title":"Day8 Reflection 反射机制","url":"http://zswh33.github.io/2022/08/31/Day8-Reflection/","content":"<h1 id=\"Java-Reflection-反射机制\"><a href=\"#Java-Reflection-反射机制\" class=\"headerlink\" title=\"Java Reflection 反射机制\"></a>Java Reflection 反射机制</h1><h2 id=\"静态语言-动态语言\"><a href=\"#静态语言-动态语言\" class=\"headerlink\" title=\"静态语言 动态语言\"></a>静态语言 动态语言</h2><h3 id=\"动态语言\"><a href=\"#动态语言\" class=\"headerlink\" title=\"动态语言\"></a>动态语言</h3><p>是一类在运行时可以改变其结构的语言。</p>\n<p>即：在运行时代码可以根据某些条件改变自身结构。</p>\n<p>主要动态语言：Object-C、C#、JavaScript、PHP、Python等。</p>\n<h3 id=\"静态语言\"><a href=\"#静态语言\" class=\"headerlink\" title=\"静态语言\"></a>静态语言</h3><p>运行时结构不可变的语言就是静态语言，如Java，C，C++。</p>\n<p>Java不是动态语言，但可以称为“准动态语言”。可以通过反射机制获得类似动态语言的特性。</p>\n<h2 id=\"Java-Reflection\"><a href=\"#Java-Reflection\" class=\"headerlink\" title=\"Java Reflection\"></a>Java Reflection</h2><p>Reflection反射机制允许程序在执行期间借助于Reflection API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Class</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;java.lang.String&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n\n\n<p>加载完类之后，在堆内存的方法区就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。通过这个对象可以看到类的结构。</p>\n<p>透过这个对象看到类结构的过程，称为<strong>反射</strong>。</p>\n<h3 id=\"功能\"><a href=\"#功能\" class=\"headerlink\" title=\"功能\"></a>功能</h3><p>在运行时：</p>\n<ol>\n<li>判断任意一个对象所属的类；</li>\n<li>构造任意一个类的对象；</li>\n<li>判断任意一个类所具有的成员变量和方法；</li>\n<li>获取泛型信息；</li>\n<li>调用任意一个对象的成员变量和方法；</li>\n<li>处理注解；</li>\n<li>生产动态代理；</li>\n<li>…</li>\n</ol>\n<h3 id=\"优点-缺点\"><a href=\"#优点-缺点\" class=\"headerlink\" title=\"优点 缺点\"></a>优点 缺点</h3><p>优点：可以实现动态创建对象和编译；</p>\n<p>缺点：这类操作慢于直接执行的操作。</p>\n<h3 id=\"主要API\"><a href=\"#主要API\" class=\"headerlink\" title=\"主要API\"></a>主要API</h3><ul>\n<li><p><code>java.lang.Class</code> 代表一个类</p>\n</li>\n<li><p><code>java.lang.Method</code> 代表类的方法</p>\n</li>\n<li><p><code>java.lang.Field</code> 代表类的成员变量</p>\n</li>\n<li><p><code>java.lang.Constructor</code> 代表类的构造器</p>\n</li>\n<li><p>……</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//通过反射获取类的class对象</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;Demo2_Reflection.User&quot;</span>);</span><br><span class=\"line\">        System.out.println(c1);<span class=\"comment\">//获取类</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;Demo2_Reflection.User&quot;</span>);</span><br><span class=\"line\">        System.out.println(c1==c2);<span class=\"comment\">//true  每个类只有一个Class对象</span></span><br><span class=\"line\"></span><br><span class=\"line\">        Method[] methods = c1.getMethods();<span class=\"comment\">//获取类的方法</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Method i : methods)&#123;</span><br><span class=\"line\">            System.out.println(i.getName());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        toString</span></span><br><span class=\"line\"><span class=\"comment\">        getName</span></span><br><span class=\"line\"><span class=\"comment\">        getId</span></span><br><span class=\"line\"><span class=\"comment\">        ...</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//一个实体类 ： 一般用POJO或entity表示</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">User</span>&#123;...&#125;<span class=\"comment\">//getter setter constructor ...</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Class类\"><a href=\"#Class类\" class=\"headerlink\" title=\"Class类\"></a>Class类</h2><p>Class是Java的一个类。</p>\n<ul>\n<li>Class对象只能由系统建立对象。</li>\n<li>一个加载的类在JVM中只会有一个Class实例；</li>\n<li>一个Class对象对应的是一个加载到JVM中的一个class文件；</li>\n<li>通过Class可以完整地得到一个类中的<strong>所有被加载的结构</strong>。</li>\n</ul>\n<h3 id=\"常用方法\"><a href=\"#常用方法\" class=\"headerlink\" title=\"常用方法\"></a>常用方法</h3><table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>static ClassforName(String name)</code></td>\n<td>返回指定类名name的Class对象</td>\n</tr>\n<tr>\n<td><code>Object newInstance()</code></td>\n<td>调用缺省构造函数，返回Class对象的一个实例。</td>\n</tr>\n<tr>\n<td><code>getName()</code></td>\n<td>返回Class对象表示的实体的名称</td>\n</tr>\n<tr>\n<td><code>Class getSuperClass()</code></td>\n<td>返回当前Class对象分类的Class对象。</td>\n</tr>\n<tr>\n<td><code>Class[] getinterfaces()</code></td>\n<td>获取当前Class对象的接口</td>\n</tr>\n<tr>\n<td><code>ClassLoader getClassLoader()</code></td>\n<td>返回该类的类加载器</td>\n</tr>\n<tr>\n<td><code>Constructor[] getConstructors()</code></td>\n<td>返回一个包含某些Constructor对象的数组。</td>\n</tr>\n<tr>\n<td><code>Method getMethod(String name,Class ... T)</code></td>\n<td>返回Method对象，形参类型为paramType</td>\n</tr>\n<tr>\n<td><code>Field[] getDeclaredFiedlds()</code></td>\n<td>返回Field对象的一个数组</td>\n</tr>\n</tbody></table>\n<h3 id=\"获取Class对象\"><a href=\"#获取Class对象\" class=\"headerlink\" title=\"获取Class对象\"></a>获取Class对象</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo3_CreateClass</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">User2</span> <span class=\"variable\">user2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">User2</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//1. 通过对象获得</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> user2.getClass();</span><br><span class=\"line\">        <span class=\"comment\">//2. 通过forname获得</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;User2&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//3. 通过类名.class获得</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c3</span> <span class=\"operator\">=</span> User2.class;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取父类类型</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c4</span> <span class=\"operator\">=</span> c1.getSuperclass();</span><br><span class=\"line\">        System.out.println(c4);<span class=\"comment\">//class java.lang.Object</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"哪些类型可以有Class对象\"><a href=\"#哪些类型可以有Class对象\" class=\"headerlink\" title=\"哪些类型可以有Class对象\"></a>哪些类型可以有Class对象</h3><ul>\n<li><p>class：外部类，成员，局部内部类，匿名内部类；</p>\n</li>\n<li><p>interface接口</p>\n</li>\n<li><p>[]数组</p>\n</li>\n<li><p><code>enum</code>枚举</p>\n</li>\n<li><p>annotation注解<code>@interface</code></p>\n</li>\n<li><p>void</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo4_ClassFromWhere</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c1</span> <span class=\"operator\">=</span> Object.class;<span class=\"comment\">//类</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c2</span> <span class=\"operator\">=</span> Comparable.class;<span class=\"comment\">//接口</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c3</span> <span class=\"operator\">=</span> String[].class;<span class=\"comment\">//数组</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c4</span> <span class=\"operator\">=</span> <span class=\"type\">int</span>[][].class;<span class=\"comment\">//二维数组</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c5</span> <span class=\"operator\">=</span> Override.class;<span class=\"comment\">//注解</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c6</span> <span class=\"operator\">=</span> ElementType.class; <span class=\"comment\">//枚举</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c7</span> <span class=\"operator\">=</span> Integer.class; <span class=\"comment\">// 基本数据类型</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c8</span> <span class=\"operator\">=</span> <span class=\"keyword\">void</span>.class;<span class=\"comment\">//void</span></span><br><span class=\"line\">        <span class=\"type\">Class</span> <span class=\"variable\">c9</span> <span class=\"operator\">=</span> Class.class; <span class=\"comment\">//Class对象</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Java内存分析\"><a href=\"#Java内存分析\" class=\"headerlink\" title=\"Java内存分析\"></a>Java内存分析</h3><h4 id=\"类的加载过程\"><a href=\"#类的加载过程\" class=\"headerlink\" title=\"类的加载过程\"></a>类的加载过程</h4><table>\n<thead>\n<tr>\n<th>序号</th>\n<th>过程</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>1</td>\n<td>类的加载Load</td>\n<td>将类的class文件读入内存，并为之创建一个java.lang.Class对象。这个过程由类加载器完成。</td>\n</tr>\n<tr>\n<td>2</td>\n<td>类的链接Link</td>\n<td>将类的二进制数据合并到JVM中。</td>\n</tr>\n<tr>\n<td>3</td>\n<td>类的初始化Initialize</td>\n<td>JVM负责对类进行初始化。</td>\n</tr>\n</tbody></table>\n<h5 id=\"链接-过程\"><a href=\"#链接-过程\" class=\"headerlink\" title=\"链接 过程\"></a>链接 过程</h5><ul>\n<li>验证：确保加载的类信息符合JVM规范，没有安全方面问题；</li>\n<li>准备：为类变量static分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中分配；</li>\n<li>解析：虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。</li>\n</ul>\n<h6 id=\"类初始化顺序代码\"><a href=\"#类初始化顺序代码\" class=\"headerlink\" title=\"类初始化顺序代码\"></a>类初始化顺序代码</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo5_</span>初始化顺序 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;程序开始&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">AClass</span> <span class=\"variable\">aClass</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AClass</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;程序结束&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        运行结果：</span></span><br><span class=\"line\"><span class=\"comment\">            程序开始</span></span><br><span class=\"line\"><span class=\"comment\">            类代码块初始化</span></span><br><span class=\"line\"><span class=\"comment\">            无参构造初始化</span></span><br><span class=\"line\"><span class=\"comment\">            程序结束</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AClass</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;类代码块初始化&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">AClass</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;无参构造初始化&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"初始化顺序-代码2\"><a href=\"#初始化顺序-代码2\" class=\"headerlink\" title=\"初始化顺序 代码2\"></a>初始化顺序 代码2</h6><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;main方法所在类被加载&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//主动引用：new</span></span><br><span class=\"line\">        <span class=\"type\">Son</span> <span class=\"variable\">son</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Father</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;父类被加载&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Son</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Father</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;子类被加载&quot;</span>);</span><br><span class=\"line\">        m = <span class=\"number\">300</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">m</span> <span class=\"operator\">=</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">M</span> <span class=\"operator\">=</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main方法所在类被加载</span><br><span class=\"line\">父类被加载</span><br><span class=\"line\">子类被加载</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"初始化-过程\"><a href=\"#初始化-过程\" class=\"headerlink\" title=\"初始化 过程\"></a>初始化 过程</h5><ul>\n<li>即，执行构造器<code>&lt;clinit&gt;</code>方法的过程。</li>\n</ul>\n<h6 id=\"lt-clinit-gt\"><a href=\"#lt-clinit-gt\" class=\"headerlink\" title=\"&lt;clinit&gt;\"></a>&lt;clinit&gt;</h6><p>类构造器<code>&lt;clinit&gt;()</code>方法是由编译器自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器用来<strong>构造类信息</strong>，而不是用来构造<strong>该类对象的构造器</strong>）</p>\n<p>虚拟机会保证一个类的<code>&lt;clinit&gt;()</code>方法在多线程环境中被正确加锁和同步。</p>\n<h2 id=\"类的初始化\"><a href=\"#类的初始化\" class=\"headerlink\" title=\"类的初始化\"></a>类的初始化</h2><ul>\n<li>当发生<strong>类的主动引用</strong>，则一定会发生类的初始化。<ul>\n<li>当虚拟机启动，先初始化main方法所在的类。</li>\n<li>new<strong>一个类的对象</strong>。（new一个类的数组不计入。）</li>\n<li>调用类的静态成员和静态方法（除了final常量）</li>\n<li>使用java.lang.reflect包的方法对类进行反射调用。</li>\n<li>当初始化一个类，如果其父类没有被初始化，则先会初始化它的父类。</li>\n</ul>\n</li>\n<li><strong>类的被动引用</strong>，不会发生类的初始化<ul>\n<li>当访问一个静态域时，只有<strong>真正声明这个域的类</strong>才会被初始化。<ul>\n<li>如：当通过子类引用父类的静态变量，<strong>不会导致子类初始化</strong>。</li>\n</ul>\n</li>\n<li>通过数组定义类引用，不会触发此类的初始化。</li>\n<li><strong>引用常量</strong>不会触发此类的初始化（常量在链接阶段就存入调用类的常量池中）</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> Son.M;<span class=\"comment\">//引用常量</span></span><br><span class=\"line\">Son[] array = <span class=\"keyword\">new</span> <span class=\"title class_\">Son</span>[<span class=\"number\">5</span>];<span class=\"comment\">//new一个数组，不引发初始化</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h2><p><strong>类加载：</strong>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口。</p>\n<p><strong>类缓存：</strong>标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，将<strong>维持加载（缓存）</strong>一段时间。</p>\n<p><em>JVM垃圾回收机制可以回收这些Class对象</em></p>\n<p><img src=\"/2022/08/31/Day8-Reflection/image-20220831150141611.png\" alt=\"Java程序运行过程\"></p>\n<h3 id=\"类加载器分类\"><a href=\"#类加载器分类\" class=\"headerlink\" title=\"类加载器分类\"></a>类加载器分类</h3><p><strong>引导类加载器：</strong>用C++编写，是JVM自带的类加载器，<strong>负责Java平台核心库</strong>，用来装载核心类库。该加载器无法直接获取。<em>Bootstap Classloader</em></p>\n<p><strong>扩展类加载器：</strong>负责<code>jre/lib/ext</code>目录下的jar包或<code>-D java.ext.dirs</code>指定目录下的jar包装入工作库。<em>Extension Classloader、ExtClassLoader</em></p>\n<p><strong>系统类加载器：</strong>负责<code>java --classpath</code>或<code>--D java.class.path</code>所指目录下的类与jar包装入工作，是最常用的类加载器。<em>System Classloader、 AppClassLoader</em></p>\n<p><em>注释：</em>Java平台核心库，即<code>rt.jar</code>包。文件位置：jre&#x2F;lib&#x2F;rt.jar（内含有如：java.lang.*等类的字节码文件。）</p>\n<p><img src=\"/2022/08/31/Day8-Reflection/image-20220831151249781.png\" alt=\"7-zip软件对于rt.jar文件目录的部分截图\"></p>\n<h4 id=\"代码查看\"><a href=\"#代码查看\" class=\"headerlink\" title=\"代码查看\"></a>代码查看</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo6_</span>系统类的加载器 &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//获取系统类的加载器</span></span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">systemClassLoader</span> <span class=\"operator\">=</span> ClassLoader.getSystemClassLoader();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;系统类加载器： &quot;</span>+systemClassLoader);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取系统类加载器的父类加载器-&gt;扩展类加载器</span></span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">parent</span> <span class=\"operator\">=</span> systemClassLoader.getParent();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;系统类加载器的父类扩展类加载器： &quot;</span>+parent);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取扩展类加载器的父类加载器 -&gt; 根加载器(c/c++)</span></span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">parent2</span> <span class=\"operator\">=</span> parent.getParent();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;扩展类加载器的父类根加载器：&quot;</span>+parent2);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//当前类是哪个加载器加载的</span></span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;Demo6_系统类的加载器&quot;</span>).getClassLoader();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;自定义类的加载器： &quot;</span>+classLoader);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//JDK内置类是哪个加载器加载的</span></span><br><span class=\"line\">        <span class=\"type\">ClassLoader</span> <span class=\"variable\">classLoader2</span> <span class=\"operator\">=</span> Class.forName(<span class=\"string\">&quot;java.lang.Object&quot;</span>).getClassLoader();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;JDK内置类的类加载器： &quot;</span>+classLoader2);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        系统类加载器： sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class=\"line\"><span class=\"comment\">        系统类加载器的父类扩展类加载器： sun.misc.Launcher$ExtClassLoader@1b6d3586</span></span><br><span class=\"line\"><span class=\"comment\">        扩展类加载器的父类根加载器：null  //根加载器不能直接获得</span></span><br><span class=\"line\"><span class=\"comment\">        自定义类的加载器： sun.misc.Launcher$AppClassLoader@18b4aac2</span></span><br><span class=\"line\"><span class=\"comment\">        JDK内置类的类加载器： null</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获得系统类加载器可以加载的路径</span></span><br><span class=\"line\">        System.out.println(System.getProperty(<span class=\"string\">&quot;java.class.path&quot;</span>));</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        D:\\AboutProgram\\Env\\jdk1.8.0_202\\jre\\lib\\charsets.jar;</span></span><br><span class=\"line\"><span class=\"comment\">        D:\\AboutProgram\\Env\\jdk1.8.0_202\\jre\\lib\\deploy.jar;</span></span><br><span class=\"line\"><span class=\"comment\">        ...</span></span><br><span class=\"line\"><span class=\"comment\">        D:\\AboutProgram\\Env\\jdk1.8.0_202\\jre\\lib\\resources.jar;</span></span><br><span class=\"line\"><span class=\"comment\">        D:\\AboutProgram\\Env\\jdk1.8.0_202\\jre\\lib\\rt.jar;   //这个是rt.jar</span></span><br><span class=\"line\"><span class=\"comment\">        D:\\ uwupu\\ideaProject\\Java反射\\out\\production\\Java反射;  //项目</span></span><br><span class=\"line\"><span class=\"comment\">        D:\\Software\\IntelliJ IDEA 2021.2.2\\lib\\idea_rt.jar    //idea_rt.jar包</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["Java"]},{"title":"Day7 Java 注解","url":"http://zswh33.github.io/2022/08/30/Day7-Java-Annotation-1/","content":"<h1 id=\"Annotation注解\"><a href=\"#Annotation注解\" class=\"headerlink\" title=\"Annotation注解\"></a>Annotation注解</h1><p><em>Annotation是JDK5.0引入的技术</em></p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><ul>\n<li>对程序进行解释</li>\n<li>可以被编译器读取</li>\n</ul>\n<h2 id=\"格式\"><a href=\"#格式\" class=\"headerlink\" title=\"格式\"></a>格式</h2><ul>\n<li><p>以“@注释名”在代码中存在，也可以添加一些参数值，</p>\n<ul>\n<li><p>如：@SuppressWarnings(value&#x3D;”unchecked”)</p>\n</li>\n<li><p>@Override 重写方法的注解</p>\n</li>\n<li><p>&#96;&#96;&#96;java<br>class MyThread implements Runnable{</p>\n<pre><code>@Override//注解\npublic void run() &#123;\n\n&#125;\n</code></pre>\n<p>}</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">## 一些内置注解</span><br><span class=\"line\"></span><br><span class=\"line\">- @Override，java.lang.Override。表示一个方法声明打算重写超累中另一个方法声明。</span><br><span class=\"line\">- @Deprecated，java.lang.Deprecated。表示不鼓励程序员使用这样的元素或者有更好的方式，但是可以使用。</span><br><span class=\"line\">- @SuppressWarnings，java.lang.SuppressWarnings。用来抑制编译时的警告信息。</span><br><span class=\"line\">  - 参数：</span><br><span class=\"line\">  - @SuppressWarnings(&quot;all&quot;)</span><br><span class=\"line\">  - 等...</span><br><span class=\"line\"></span><br><span class=\"line\">## 元注解</span><br><span class=\"line\"></span><br><span class=\"line\">作用：负责注解其他注解。</span><br><span class=\"line\"></span><br><span class=\"line\">Java顶一个4个标准的meta-annotation，用来提供对其他annotation类型做说明。</span><br><span class=\"line\"></span><br><span class=\"line\">位于`java.lang.annotation`</span><br><span class=\"line\"></span><br><span class=\"line\">有以下几种：</span><br><span class=\"line\"></span><br><span class=\"line\">- @Target 用于描述注解的使用范围。（被描述的注解可以用在什么地方）</span><br><span class=\"line\">- @Retention：表示需要在什么级别保存该注释信息，用于描述注解的生命周期。</span><br><span class=\"line\">  - （SOURCE &lt; CLASS &lt; RUNTIME）</span><br><span class=\"line\">- @Document：说明该注解将被包含在Javadoc中。</span><br><span class=\"line\">- @Inherited：说明子类可以继承父类中的该注解。</span><br><span class=\"line\"></span><br><span class=\"line\">示例：</span><br><span class=\"line\"></span><br><span class=\"line\">```java</span><br><span class=\"line\">@MyAnnoation</span><br><span class=\"line\">//类 TYPE</span><br><span class=\"line\">public class Demo2_MetaAnnoation &#123;</span><br><span class=\"line\">    @MyAnnoation</span><br><span class=\"line\">    //方法 METHOD</span><br><span class=\"line\">    public void Test()&#123;</span><br><span class=\"line\">        @MyAnnoation</span><br><span class=\"line\">        int a;//局部变量 LOCAL_VARIABLE</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//定义一个注解</span><br><span class=\"line\">//可以用在 类，方法，局部变量中</span><br><span class=\"line\">@Target(value = &#123;ElementType.TYPE,ElementType.METHOD,ElementType.LOCAL_VARIABLE&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//表示注解在什么地方有效</span><br><span class=\"line\">//运行时</span><br><span class=\"line\">@Retention(value = RetentionPolicy.RUNTIME)</span><br><span class=\"line\">// 出现在JavaDoc中</span><br><span class=\"line\">@Documented</span><br><span class=\"line\">//子类可以继承父类的注解</span><br><span class=\"line\">@Inherited</span><br><span class=\"line\">@interface  MyAnnoation&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"自定义注解\"><a href=\"#自定义注解\" class=\"headerlink\" title=\"自定义注解\"></a>自定义注解</h2><p>使用@interface自定义注解，自动继承java.lang.Annotation接口</p>\n<p>格式：public @interface 注解名{定义内容}</p>\n<ul>\n<li><p>定义内容中<strong>一个方法</strong>指一个<strong>配置参数</strong>。</p>\n</li>\n<li><p>返回值类型就是参数的类型，只能是Class，String，enum。</p>\n</li>\n<li><p>可以通过default来声明参数的默认值。</p>\n</li>\n<li><p>注解元素必须要有值。</p>\n</li>\n<li><p>只有一个值时，一般用value()表示。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo3_CustomAnnotation</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@MyAnnotation2(name = &quot;zhangsan&quot;,//name为zhangsan。参数age有默认值，可以不写。</span></span><br><span class=\"line\"><span class=\"meta\">                    say = &#123;&quot;小张&quot;,&quot;小兰&quot;&#125;//可以有数组</span></span><br><span class=\"line\"><span class=\"meta\">    )</span></span><br><span class=\"line\">    <span class=\"meta\">@MyAnnotation3(&quot;只有一个参数&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span>  MyAnnotation2&#123;</span><br><span class=\"line\">    <span class=\"comment\">//注解的参数</span></span><br><span class=\"line\">    <span class=\"comment\">//参数类型 + 参数名</span></span><br><span class=\"line\">    String <span class=\"title function_\">name</span><span class=\"params\">()</span>;<span class=\"comment\">//没有默认值一定要传值</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">age</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> <span class=\"number\">0</span>;<span class=\"comment\">//有默认值，可以不传值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    String[] say() <span class=\"keyword\">default</span> &#123;<span class=\"string\">&quot;张三&quot;</span>,<span class=\"string\">&quot;李四&quot;</span>,<span class=\"string\">&quot;王五&quot;</span>,<span class=\"string\">&quot;赵六&quot;</span>&#125;;<span class=\"comment\">//这是一个数组参数</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Target(&#123;ElementType.TYPE,ElementType.METHOD&#125;)</span></span><br><span class=\"line\"><span class=\"meta\">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class=\"line\"><span class=\"meta\">@interface</span>  MyAnnotation3 &#123;</span><br><span class=\"line\">    String <span class=\"title function_\">value</span><span class=\"params\">()</span>;<span class=\"comment\">//若注解只有一个参数 只需要一个value就可。</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注解在哪里使用\"><a href=\"#注解在哪里使用\" class=\"headerlink\" title=\"注解在哪里使用\"></a>注解在哪里使用</h2><p>可以附加在package，class，method，field上面，相当于给他们添加了额外的辅助信息。</p>\n<p><strong>可以通过反射机制编程实现对这些元数据的访问。</strong></p>\n","categories":[],"tags":["Java"]},{"title":"Day7 Java 网络编程 1","url":"http://zswh33.github.io/2022/08/30/Day7-Java-Network-1/","content":"<h1 id=\"IP地址\"><a href=\"#IP地址\" class=\"headerlink\" title=\"IP地址\"></a>IP地址</h1><ul>\n<li>唯一定位一台网络上的计算机</li>\n<li>127.0.0.1：本机localhost</li>\n<li>ip地址分为IPv4和IPv6<ul>\n<li>IPv4 四个字节组成；</li>\n<li>IPv6：128位，8个无符号整数组成。<ul>\n<li>2001:0bb2:aaaa:bbbb:cccc:dddd:eeee:2222</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><p><code>java.net.InetAddress</code></p>\n<p>这个类用来表示IP地址。</p>\n<p>一些方法：</p>\n<ol>\n<li>static InetAddress getAllByName(String name)，给出主机的名称，根据系统上配置的名称服务返回其IP地址数组。</li>\n</ol>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.net.InetAddress;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.net.UnknownHostException;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//通过域名获取InetAddress对象</span></span><br><span class=\"line\">            <span class=\"type\">InetAddress</span> <span class=\"variable\">address</span> <span class=\"operator\">=</span> InetAddress.getByName(<span class=\"string\">&quot;www.baidu.com&quot;</span>);</span><br><span class=\"line\">            System.out.println(address);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//获取本地InetAddress对象</span></span><br><span class=\"line\">            <span class=\"type\">InetAddress</span> <span class=\"variable\">address2</span> <span class=\"operator\">=</span> InetAddress.getLocalHost();</span><br><span class=\"line\">            System.out.println(address2);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//常用方法</span></span><br><span class=\"line\">            System.out.println(address.getHostAddress());<span class=\"comment\">//ip地址</span></span><br><span class=\"line\">            System.out.println(address.getHostName());<span class=\"comment\">//域名</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (UnknownHostException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"端口\"><a href=\"#端口\" class=\"headerlink\" title=\"端口\"></a>端口</h1><p>范围：0-65535</p>\n<p>端口分类：</p>\n<ul>\n<li>公有端口 0~1023</li>\n<li>程序注册端口：1024~49151，分配用户或者程序</li>\n<li>动态、私有：49152~65535</li>\n</ul>\n<h2 id=\"Windows下查看进程端口\"><a href=\"#Windows下查看进程端口\" class=\"headerlink\" title=\"Windows下查看进程端口\"></a>Windows下查看进程端口</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -ano <span class=\"comment\"># 查看所有程序端口</span></span><br><span class=\"line\">netstat -ano|findstr <span class=\"string\">&quot;5900&quot;</span> <span class=\"comment\"># 寻找字符存在5900的行</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"InetSocketAddress\"><a href=\"#InetSocketAddress\" class=\"headerlink\" title=\"InetSocketAddress\"></a>InetSocketAddress</h1><p>这个类的对象可以包含有<strong>地址+端口</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">InetSocketAddress</span> <span class=\"variable\">socketAddress</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">InetSocketAddress</span>(<span class=\"string\">&quot;127.0.0.1&quot;</span>,<span class=\"number\">1234</span>);</span><br><span class=\"line\">        System.out.println(socketAddress);</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        /127.0.0.1:1234</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"通信协议\"><a href=\"#通信协议\" class=\"headerlink\" title=\"通信协议\"></a>通信协议</h1><p><strong>TCP&#x2F;IP协议簇</strong></p>\n<p>重要的协议：</p>\n<ul>\n<li>TCP 用户传输协议</li>\n<li>UDP 用户数据报协议</li>\n</ul>\n<p><strong>TCP和UDP对比</strong></p>\n<p>TCP:</p>\n<ul>\n<li>连接稳定</li>\n<li>三次握手 四次挥手</li>\n</ul>\n<p>UDP：</p>\n<ul>\n<li>不稳定</li>\n</ul>\n<h1 id=\"Java上的TCP\"><a href=\"#Java上的TCP\" class=\"headerlink\" title=\"Java上的TCP\"></a>Java上的TCP</h1><p>客户端</p>\n<ol>\n<li>连接服务器Socket；</li>\n<li>发送消息。</li>\n</ol>\n<p>服务端</p>\n<ol>\n<li>建立服务的端口ServerSocket；</li>\n<li>等待用户的连接Socket；</li>\n<li>接收消息。</li>\n</ol>\n<h2 id=\"Client和Server示例\"><a href=\"#Client和Server示例\" class=\"headerlink\" title=\"Client和Server示例\"></a>Client和Server示例</h2><h3 id=\"Client\"><a href=\"#Client\" class=\"headerlink\" title=\"Client\"></a>Client</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Client</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">socket</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//IO流</span></span><br><span class=\"line\">        <span class=\"type\">OutputStream</span> <span class=\"variable\">os</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//声明地址和端口号</span></span><br><span class=\"line\">            <span class=\"type\">InetAddress</span> <span class=\"variable\">server</span> <span class=\"operator\">=</span> InetAddress.getByName(<span class=\"string\">&quot;127.0.0.1&quot;</span>);</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">port</span> <span class=\"operator\">=</span> <span class=\"number\">9999</span>;</span><br><span class=\"line\">            <span class=\"comment\">//创建一个Socket连接</span></span><br><span class=\"line\">            socket = <span class=\"keyword\">new</span> <span class=\"title class_\">Socket</span>(server,port);</span><br><span class=\"line\">            <span class=\"comment\">//IO流</span></span><br><span class=\"line\">            os = socket.getOutputStream();</span><br><span class=\"line\">            os.write(<span class=\"string\">&quot;你好，吃黑曜石吗。&quot;</span>.getBytes());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                os.close();</span><br><span class=\"line\">                socket.close();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Server\"><a href=\"#Server\" class=\"headerlink\" title=\"Server\"></a>Server</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Server</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ServerSocket</span> <span class=\"variable\">serverSocket</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//等待客户端连接</span></span><br><span class=\"line\">        <span class=\"type\">Socket</span> <span class=\"variable\">accept</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//读取消息</span></span><br><span class=\"line\">        <span class=\"type\">InputStream</span> <span class=\"variable\">is</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"comment\">//管道流</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ByteArrayOutputStream</span> <span class=\"variable\">outputStream</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">//</span></span><br><span class=\"line\">            serverSocket = <span class=\"keyword\">new</span> <span class=\"title class_\">ServerSocket</span>(<span class=\"number\">9999</span>);</span><br><span class=\"line\">            <span class=\"comment\">//等待客户端连接</span></span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">                accept = serverSocket.accept();</span><br><span class=\"line\">                <span class=\"comment\">//读取消息</span></span><br><span class=\"line\">                is = accept.getInputStream();</span><br><span class=\"line\">                <span class=\"comment\">//管道流</span></span><br><span class=\"line\"></span><br><span class=\"line\">                outputStream = <span class=\"keyword\">new</span> <span class=\"title class_\">ByteArrayOutputStream</span>();</span><br><span class=\"line\">                <span class=\"type\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"title class_\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">                <span class=\"type\">int</span> len;</span><br><span class=\"line\">                <span class=\"keyword\">while</span> ((len=is.read(buffer))!=-<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                    outputStream.write(buffer,<span class=\"number\">0</span>,len);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(outputStream.toString());</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                outputStream.close();</span><br><span class=\"line\">                is.close();</span><br><span class=\"line\">                serverSocket.close();</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["Java"]},{"title":"Day7 Java 多线程 2","url":"http://zswh33.github.io/2022/08/30/Day7-Java-Multithreading-2/","content":"<h1 id=\"线程协作\"><a href=\"#线程协作\" class=\"headerlink\" title=\"线程协作\"></a>线程协作</h1><h2 id=\"生产者消费者问题\"><a href=\"#生产者消费者问题\" class=\"headerlink\" title=\"生产者消费者问题\"></a>生产者消费者问题</h2><p>这是一个线程同步问题，生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件。</p>\n<h2 id=\"Java线程通信\"><a href=\"#Java线程通信\" class=\"headerlink\" title=\"Java线程通信\"></a>Java线程通信</h2><table>\n<thead>\n<tr>\n<th align=\"left\">方法名</th>\n<th align=\"left\">作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">wait()</td>\n<td align=\"left\">表示线程一直等待，直到其他线程通知，与sleep不同，会释放锁；</td>\n</tr>\n<tr>\n<td align=\"left\">wait(long timeout)</td>\n<td align=\"left\">指定等待的秒数</td>\n</tr>\n<tr>\n<td align=\"left\">notify()</td>\n<td align=\"left\">唤醒一个处于等待状态的线程</td>\n</tr>\n<tr>\n<td align=\"left\">notifyAll()</td>\n<td align=\"left\">唤醒同一个对象上所有调用wait()方法的线程，优先级别高的线程优先调度</td>\n</tr>\n</tbody></table>\n<p>注：均是Object类的方法，都只能在同步方法或者同步代码块中使用，否则会抛出异常<code>IllEgalMonitorStateException</code>。</p>\n<h2 id=\"问题解决\"><a href=\"#问题解决\" class=\"headerlink\" title=\"问题解决\"></a>问题解决</h2><h3 id=\"方式1\"><a href=\"#方式1\" class=\"headerlink\" title=\"方式1\"></a>方式1</h3><p>并发协作模型“生产者&#x2F;消费者模式” -&gt; 管程法</p>\n<ul>\n<li><p>生产者：负责生产数据的模块（可能是方法，对象，线程，进程）；</p>\n</li>\n<li><p>消费者：负责处理数据的模块（可能是方法，对象，线程，进程）；</p>\n</li>\n<li><p>缓冲区：消费者不能直接使用生产者的数据，他们之间有个“缓冲区”</p>\n</li>\n</ul>\n<p><strong>生产者将生产好的数据放入缓冲区，消费者从缓冲区拿出数据。</strong></p>\n<p><img src=\"/2022/08/30/Day7-Java-Multithreading-2/Thread2.png\" alt=\"Thread2\"></p>\n<h3 id=\"方式2\"><a href=\"#方式2\" class=\"headerlink\" title=\"方式2\"></a>方式2</h3><p>并发协作模型“生产者&#x2F;消费者模式”  -&gt; 信号灯法</p>\n<p> 通过一个<strong>标志位</strong>解决问题。</p>\n<h2 id=\"线程池\"><a href=\"#线程池\" class=\"headerlink\" title=\"线程池\"></a>线程池</h2><p><strong>背景：</strong>经常创建和销毁，使用了特别大的资源，比如并发情况下的线程，对性能影响很大。</p>\n<p><strong>思路：</strong>提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁，实现重复利用。</p>\n<p><strong>优点：</strong></p>\n<ul>\n<li>提高响应速度(减少了创建新线程的时间)</li>\n<li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li>\n<li>便于线程管理</li>\n</ul>\n<h3 id=\"使用线程池\"><a href=\"#使用线程池\" class=\"headerlink\" title=\"使用线程池\"></a>使用线程池</h3><p><em>JDK5.0起提供了线程池相关的API：<strong>ExecutorService</strong>和<strong>Executors</strong></em></p>\n<p>ExecutorService：线程池接口。子类有：ThreadPoolExecutor。</p>\n<p>方法：</p>\n<ul>\n<li><code>void execute(Runnable command)</code>：执行任务&#x2F;命令，没有返回值，一般用来执行Runnable。</li>\n<li><code>&lt;T&gt;Future&lt;T&gt; submit(Callable&lt;T&gt; task)</code>：执行任务，有返回值，一般用来执行Callable。</li>\n<li><code>void shutdown()</code>关闭连接池。</li>\n</ul>\n<p>Executors：工具类，线程池的工厂类，用于创建并返回不同类型的线程池。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demo19_ThreadPool</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建线程池</span></span><br><span class=\"line\">        <span class=\"comment\">//newFixedThreadPool参数为线程池大小</span></span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">service</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"comment\">//执行</span></span><br><span class=\"line\">        service.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>());</span><br><span class=\"line\">        service.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>());</span><br><span class=\"line\">        service.execute(<span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//关闭连接</span></span><br><span class=\"line\">        service.shutdownNow();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyThread</span> <span class=\"keyword\">implements</span>  <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; &quot;</span>+i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"创建线程小结\"><a href=\"#创建线程小结\" class=\"headerlink\" title=\"创建线程小结\"></a>创建线程小结</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Callable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.FutureTask;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//创建线程方式 3种</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CreateThread</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">MyThread</span>().start();<span class=\"comment\">//1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">MyRunnable</span>()).start();<span class=\"comment\">//2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//3</span></span><br><span class=\"line\">        FutureTask&lt;Integer&gt; futureTask = <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">MyCall</span>());</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(futureTask).start();</span><br><span class=\"line\">        Integer rs=<span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            rs = futureTask.get();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(rs+<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//1. 继承Thread类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyThread</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;继承Thread&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//2. 实现Runnable接口</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyRunnable</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;实现Runnable接口&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//3. 实现Callable接口</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyCall</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Callable</span>&lt;Integer&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Integer <span class=\"title function_\">call</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;Call .&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">123</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":["Java"]},{"title":"Day6 Java多线程 1","url":"http://zswh33.github.io/2022/08/29/Day6-Java-Multithreading-1/","content":"<h1 id=\"Java-多线程-1\"><a href=\"#Java-多线程-1\" class=\"headerlink\" title=\"Java 多线程 1\"></a>Java 多线程 1</h1><p>程序：指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念；<br>进程：执行程序的一次执行过程，它是一个动态的概念。是系统资源分配的单位；<br>一个进程中可以包含若干个线程，一个进程至少有一个线程。<br>线程是CPU调度和执行的单位。</p>\n<p>线程就是独立的执行路径<br>在程序运行时，即使没有自己创建线程，后台也会有多个线程，如主线程，gc线程；<br>main()可以称为主线程，为系统的入口，用于执行整个程序；</p>\n<h2 id=\"线程创建\"><a href=\"#线程创建\" class=\"headerlink\" title=\"线程创建\"></a>线程创建</h2><p>.<strong>三种方式</strong></p>\n<ul>\n<li>继承Thread类</li>\n<li>实现Runnable接口</li>\n<li>实现Callback接口</li>\n</ul>\n<h3 id=\"继承Thread类\"><a href=\"#继承Thread类\" class=\"headerlink\" title=\"继承Thread类\"></a>继承Thread类</h3><ol>\n<li>自定义类继承<strong>Thread类</strong>；</li>\n<li>重写**run()**方法，编写线程执行体；</li>\n<li>创建线程对象，调用start()方法启动线程。</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UThread1</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">20</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;当前是线程： &quot;</span>+i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;程序开始\\n-----------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">        <span class=\"type\">UThread1</span> <span class=\"variable\">uThread1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UThread1</span>();</span><br><span class=\"line\">        uThread1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//与线程对照</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">200</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;这里是主线程：&quot;</span>+i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实现Runnable接口\"><a href=\"#实现Runnable接口\" class=\"headerlink\" title=\"实现Runnable接口\"></a>实现Runnable接口</h2><p>.<em>对于两种线程创建方式，建议使用”实现Runnable接口”方式实现多线程</em></p>\n<h3 id=\"目的\"><a href=\"#目的\" class=\"headerlink\" title=\"目的\"></a>目的</h3><p>避免单继承的局限性，灵活方便，方便同一个对象被多个线程使用</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RunnableImpl</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"type\">int</span> rest;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">RunnableImpl</span><span class=\"params\">(<span class=\"type\">int</span> id, <span class=\"type\">int</span> rest)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.rest = rest;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(rest&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;我是&quot;</span>+id+<span class=\"string\">&quot; 剩余：&quot;</span>+rest+<span class=\"string\">&quot;次数&quot;</span>);</span><br><span class=\"line\">            rest--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">RunnableImpl</span>(<span class=\"number\">1</span>,<span class=\"number\">20</span>));</span><br><span class=\"line\">        t1.start();<span class=\"comment\">//启动线程</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>线程开启不一定立即执行，由CPU调度执行</p>\n<h2 id=\"Callable方式\"><a href=\"#Callable方式\" class=\"headerlink\" title=\"Callable方式\"></a>Callable方式</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Callable</span>&lt;Boolean&gt; &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> id;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> Boolean <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        System.out.println(id);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Math.random()&gt;<span class=\"number\">0.5</span>;<span class=\"comment\">//随机返回一个结果</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Test</span><span class=\"params\">(<span class=\"type\">int</span> id)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Test</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Test</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建执行服务</span></span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">ser</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//提交执行</span></span><br><span class=\"line\">        Future&lt;Boolean&gt; rs1 = ser.submit(t1);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取结果</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;1. &quot;</span>+rs1.get());</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (Exception e)&#123;</span><br><span class=\"line\">            System.out.println(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//关闭</span></span><br><span class=\"line\">        ser.shutdownNow();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"静态代理\"><a href=\"#静态代理\" class=\"headerlink\" title=\"静态代理\"></a>静态代理</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StaticProxy</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Restaurant</span> <span class=\"variable\">restaurant</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Restaurant</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">You</span>());</span><br><span class=\"line\">        restaurant.startEat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//目标：You要Eat</span></span><br><span class=\"line\"><span class=\"comment\">//过程：代理Restaurant，Restaurant准备饭前饭后要做的事情</span></span><br><span class=\"line\"><span class=\"comment\">//结果：Restaurant代理You去startEat</span></span><br><span class=\"line\"><span class=\"comment\">//注意：真实对象和代理对象实现同一个接口</span></span><br><span class=\"line\"><span class=\"comment\">//好处：代理对象可以做好多真实对象做不了的事情</span></span><br><span class=\"line\"><span class=\"comment\">//      真实对象专注做自己的事情</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Eat</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//吃饭</span></span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">startEat</span><span class=\"params\">()</span>;<span class=\"comment\">//开始吃</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//吃饭对象</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">You</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Eat</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startEat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;开始吃饭，超开心&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//代理对象</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Restaurant</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Eat</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Eat target;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Restaurant</span><span class=\"params\">(Eat target)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startEat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        before();<span class=\"comment\">//做饭</span></span><br><span class=\"line\">        target.startEat();<span class=\"comment\">//吃饭</span></span><br><span class=\"line\">        after();<span class=\"comment\">//收拾</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">after</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//收拾残局</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;吃完离开 Leave&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">before</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//做饭</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;烤Food&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Lambda-表达式\"><a href=\"#Lambda-表达式\" class=\"headerlink\" title=\"Lambda 表达式\"></a>Lambda 表达式</h2><h3 id=\"函数式接口\"><a href=\"#函数式接口\" class=\"headerlink\" title=\"函数式接口\"></a>函数式接口</h3><ol>\n<li>任何接口，如果<strong>只包含一个抽象方法</strong>，则是一个函数式接口</li>\n<li>对于函数式接口，可以通过lambda表达式来创建该接口的对象</li>\n</ol>\n<h3 id=\"匿名内部类\"><a href=\"#匿名内部类\" class=\"headerlink\" title=\"匿名内部类\"></a>匿名内部类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//匿名内部类</span></span><br><span class=\"line\">        <span class=\"type\">Eat</span> <span class=\"variable\">lunch</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Eat</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">startEat</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;吃午饭&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        lunch.startEat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义一个函数式接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Eat</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">startEat</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lambda表达式使用\"><a href=\"#lambda表达式使用\" class=\"headerlink\" title=\"lambda表达式使用\"></a>lambda表达式使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//lambda表达式</span></span><br><span class=\"line\">        <span class=\"type\">Eat</span> <span class=\"variable\">lunch</span> <span class=\"operator\">=</span> ()-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;吃午饭&quot;</span>);</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        lunch.startEat();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//定义一个函数式接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Eat</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">startEat</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"代参Lambda表达式\"><a href=\"#代参Lambda表达式\" class=\"headerlink\" title=\"代参Lambda表达式\"></a>代参Lambda表达式</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Callback</span> <span class=\"variable\">callback</span> <span class=\"operator\">=</span> (a)-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;传入参数为：&quot;</span>+a);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ++a;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(callback.call(<span class=\"number\">123</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//一个函数式接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Callback</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">call</span><span class=\"params\">(<span class=\"type\">int</span> t)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可以简化的内容\"><a href=\"#可以简化的内容\" class=\"headerlink\" title=\"可以简化的内容\"></a>可以简化的内容</h3><ol>\n<li>简化括号：若参数只有一个，则可以简化括号</li>\n<li>简化花括号: 若代码只有一行，这可以简化花括号</li>\n</ol>\n<h4 id=\"简化括号\"><a href=\"#简化括号\" class=\"headerlink\" title=\"简化括号\"></a>简化括号</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Callback</span> <span class=\"variable\">callback</span> <span class=\"operator\">=</span> a-&gt;&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;传入参数为：&quot;</span>+a);</span><br><span class=\"line\">            <span class=\"keyword\">return</span> ++a;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        System.out.println(callback.call(<span class=\"number\">123</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//一个函数式接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Callback</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"title function_\">call</span><span class=\"params\">(<span class=\"type\">int</span> t)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"简化花括号\"><a href=\"#简化花括号\" class=\"headerlink\" title=\"简化花括号\"></a>简化花括号</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Callback</span> <span class=\"variable\">callback</span> <span class=\"operator\">=</span> t -&gt; System.out.println(++t);</span><br><span class=\"line\">        callback.call(<span class=\"number\">123</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//一个函数式接口</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Callback</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">call</span><span class=\"params\">(<span class=\"type\">int</span> t)</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"线程的一些方法\"><a href=\"#线程的一些方法\" class=\"headerlink\" title=\"线程的一些方法\"></a>线程的一些方法</h2><table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>setPriority(int newPriority)</td>\n<td>更改线程优先级</td>\n</tr>\n<tr>\n<td>sleep(long millis)</td>\n<td>在指定的毫秒数内使正在执行的线程休眠</td>\n</tr>\n<tr>\n<td>join()</td>\n<td>等待线程终止</td>\n</tr>\n<tr>\n<td>yield()</td>\n<td>暂停当前线程，执行其他线程</td>\n</tr>\n<tr>\n<td>interrupt()</td>\n<td>中断线程，<strong>一般不用</strong></td>\n</tr>\n<tr>\n<td>isAlive()</td>\n<td>测试线程是否处于活跃状态</td>\n</tr>\n</tbody></table>\n<h3 id=\"停止线程\"><a href=\"#停止线程\" class=\"headerlink\" title=\"停止线程\"></a>停止线程</h3><p>不推荐使用JDK提供的stop()和destroy()<br>推荐让线程自己停下来，建议使用一个标志位进行终止变量，当flag&#x3D;false，则终止线程运行。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">YThread</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Thread</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> flag=<span class=\"literal\">true</span>;<span class=\"comment\">//停止标志</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (flag)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Thread running...&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">requestStop</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        flag = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadStop</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">YThread</span> <span class=\"variable\">yThread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">YThread</span>();</span><br><span class=\"line\">        yThread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//主线程</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Main &quot;</span>+i);</span><br><span class=\"line\">            <span class=\"comment\">//当i==60，请求线程停止</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i==<span class=\"number\">60</span>)&#123;</span><br><span class=\"line\">                yThread.requestStop();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"线程休眠\"><a href=\"#线程休眠\" class=\"headerlink\" title=\"线程休眠\"></a>线程休眠</h3><p>.<em>每个对象都有一个锁，sleep不会释放锁</em></p>\n<p>Thread.sleep(毫秒)</p>\n<h3 id=\"线程礼让\"><a href=\"#线程礼让\" class=\"headerlink\" title=\"线程礼让\"></a>线程礼让</h3><p>.<em>礼让不一定成功，看CPU<del>心情</del>调度</em></p>\n<p><code>Thread.yield();</code></p>\n<h3 id=\"线程强制执行-join\"><a href=\"#线程强制执行-join\" class=\"headerlink\" title=\"线程强制执行 join\"></a>线程强制执行 join</h3><p>.<em>少用</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ARun</span>(),<span class=\"string\">&quot;vip&quot;</span>);</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//主线程</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(i==<span class=\"number\">20</span>)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    thread.join();<span class=\"comment\">//插队</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;main &quot;</span>+i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ARun</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">100</span>;i++)&#123;</span><br><span class=\"line\">            System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot;执行到&quot;</span>+i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取线程状态\"><a href=\"#获取线程状态\" class=\"headerlink\" title=\"获取线程状态\"></a>获取线程状态</h3><p>Thread.getState();</p>\n<h4 id=\"线程状态\"><a href=\"#线程状态\" class=\"headerlink\" title=\"线程状态\"></a>线程状态</h4><table>\n<thead>\n<tr>\n<th>Thread.State</th>\n<th>表达</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>NEW</td>\n<td>尚未启动的线程</td>\n</tr>\n<tr>\n<td>RUNNABLE</td>\n<td>在Java虚拟机中执行的线程处于此状态</td>\n</tr>\n<tr>\n<td>BLOCKED</td>\n<td>被阻塞的线程</td>\n</tr>\n<tr>\n<td>WAITING</td>\n<td>等待另一个线程执行特定状态的状态</td>\n</tr>\n<tr>\n<td>TIMED_WAITING</td>\n<td>等待另一个线程执行动作达到指定等待时间的状态</td>\n</tr>\n<tr>\n<td>TERMINATED</td>\n<td>已退出的线程处于此状态</td>\n</tr>\n</tbody></table>\n<p>代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">ARun</span>());</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;线程开始&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//监测状态</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (thread.getState()!= State.TERMINATED)&#123;</span><br><span class=\"line\">            System.out.println(thread.getState());</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(thread.getState());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ARun</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5</span>; i++) &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;/////&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"线程优先级\"><a href=\"#线程优先级\" class=\"headerlink\" title=\"线程优先级\"></a>线程优先级</h3><p>线程优先级用数字表示，范围1~10</p>\n<table>\n<thead>\n<tr>\n<th>常量名</th>\n<th>值</th>\n<th>介绍</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>Thread.MIN_PRIORITY</td>\n<td>1</td>\n<td>最低</td>\n</tr>\n<tr>\n<td>Thread.MAX_PRIORITY</td>\n<td>10</td>\n<td>最高</td>\n</tr>\n<tr>\n<td>Thread.NORM_PRIORITY</td>\n<td>5</td>\n<td>默认</td>\n</tr>\n</tbody></table>\n<h4 id=\"改变优先级-x2F-获取优先级\"><a href=\"#改变优先级-x2F-获取优先级\" class=\"headerlink\" title=\"改变优先级&#x2F;获取优先级\"></a>改变优先级&#x2F;获取优先级</h4><p>setPriority(int p)<br>getPriority()</p>\n<h3 id=\"守护线程\"><a href=\"#守护线程\" class=\"headerlink\" title=\"守护线程\"></a>守护线程</h3><p><code>thread.setDaemon(true);//false为用户线程，true为守护线程。默认为false。</code></p>\n<p>虚拟机必须保证用户线程执行完毕，不用等待守护线程执行完毕。<br>比如：后台记录操作日志，监控内存，垃圾回收等等。</p>\n<h3 id=\"线程同步\"><a href=\"#线程同步\" class=\"headerlink\" title=\"线程同步\"></a>线程同步</h3><p>多个线程访问同一个对象，为了保障数据在方法中被访问时的正确性，在访问时加入<strong>锁机制synchronized</strong>，当一个线程获得对象的排它锁，独占资源，其他线程必须等待，使用后释放锁即可。</p>\n<p>存在问题：</p>\n<ol>\n<li>一个线程持有锁会导致其他所有需要锁的线程挂起；</li>\n<li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题。</li>\n</ol>\n<h3 id=\"线程同步安全-synchronized\"><a href=\"#线程同步安全-synchronized\" class=\"headerlink\" title=\"线程同步安全 synchronized\"></a>线程同步安全 synchronized</h3><p>synchronized有两种用法：synchronized方法和synchronized块。<br>同步方法<code>public synchronized void method(int args)&#123;&#125;</code></p>\n<p>synchronized方法必须获得调用该方法的对象的锁才能执行，否则线程会阻塞。方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行。</p>\n<p>方法里面需要修改的内容需要锁。只读的代码不需要锁。</p>\n<p>缺陷：若将一个大的方法申明为synchronized将会影响效率。</p>\n<h4 id=\"synchronized锁住的对象\"><a href=\"#synchronized锁住的对象\" class=\"headerlink\" title=\"synchronized锁住的对象\"></a>synchronized锁住的对象</h4><ul>\n<li>修饰实例方法：作用于<strong>当前实例</strong>加锁。</li>\n<li>修饰静态方法：作用于<strong>当前类对象</strong>加锁（锁住Class对象，然后，该对象的静态方法都得等待）。</li>\n<li>修饰代码块：<strong>指定加锁对象</strong>，对给定对象加锁。</li>\n</ul>\n<p>加锁之后，锁只对<strong>有synchronized修饰的方法</strong>有效。</p>\n<h4 id=\"同步块\"><a href=\"#同步块\" class=\"headerlink\" title=\"同步块\"></a>同步块</h4><p>同步块：<code>synchronized(Obj)&#123;&#125;</code></p>\n<p>Obj称为同步监视器。<br>Obj可以是任何对象，但是推荐使用共享资源作为同步监视器。<br>Obj一般是同步块内变化的量。（增删改的对象）</p>\n<h4 id=\"CopyOnWriteArrayList\"><a href=\"#CopyOnWriteArrayList\" class=\"headerlink\" title=\"CopyOnWriteArrayList\"></a>CopyOnWriteArrayList</h4><p>安全的ArrayList</p>\n<h2 id=\"死锁\"><a href=\"#死锁\" class=\"headerlink\" title=\"死锁\"></a>死锁</h2><h3 id=\"产生死锁必要条件\"><a href=\"#产生死锁必要条件\" class=\"headerlink\" title=\"产生死锁必要条件\"></a>产生死锁必要条件</h3><ol>\n<li>互斥条件：一个资源每次只能被一个进程使用；</li>\n<li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放；</li>\n<li>不剥夺条件：进程进程已获得的资源，在未使用完之前，不能强行剥夺；</li>\n<li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li>\n</ol>\n<h2 id=\"Lock锁\"><a href=\"#Lock锁\" class=\"headerlink\" title=\"Lock锁\"></a>Lock锁</h2><p><code>java.util.concurrent.locks.Lock</code>接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁。</p>\n<p><code>ReentrantLock</code>类实现了Lock，拥有与<code>synchronized</code>相同的并发性和内存语义。</p>\n<p><code>ReentrantLock</code>即可重入的互斥锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">BuyTicket</span> <span class=\"variable\">buyTicket</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">BuyTicket</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(buyTicket,<span class=\"string\">&quot;a&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(buyTicket,<span class=\"string\">&quot;b&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(buyTicket,<span class=\"string\">&quot;c&quot;</span>).start();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">BuyTicket</span> <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> ticket=<span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ReentrantLock</span>();</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\">            lock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (ticket&gt;<span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">                    Thread.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">                    System.out.println(Thread.currentThread().getName()+<span class=\"string\">&quot; &quot;</span>+ticket--);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">catch</span> (InterruptedException e)&#123;</span><br><span class=\"line\">                System.out.println(e);</span><br><span class=\"line\">            &#125;<span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                lock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":["Java"]},{"title":"Day5 Java 5","url":"http://zswh33.github.io/2022/08/29/Day5-Java-5/","content":"<h1 id=\"Java-个人总结-5\"><a href=\"#Java-个人总结-5\" class=\"headerlink\" title=\"Java 个人总结 5\"></a>Java 个人总结 5</h1><h2 id=\"异常\"><a href=\"#异常\" class=\"headerlink\" title=\"异常\"></a>异常</h2><h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><p>检查性异常，运行时异常，错误。</p>\n<h3 id=\"Throwable\"><a href=\"#Throwable\" class=\"headerlink\" title=\"Throwable\"></a>Throwable</h3><p>分为 Error和Exception。</p>\n<p>Error不可预见，尽可能避免；<br>Exception可以被开发者预见。</p>\n<p>Exception分为IOException和RuntimeException（运行时异常）。</p>\n<h4 id=\"Error\"><a href=\"#Error\" class=\"headerlink\" title=\"Error\"></a>Error</h4><p>Error类对象由Java虚拟机生成并抛出，大多数错误与开发者所执行的操作无关。<br>例：OutOfMemoryError，当JVM不再有继续执行所需的内存资源。</p>\n<h4 id=\"Exception\"><a href=\"#Exception\" class=\"headerlink\" title=\"Exception\"></a>Exception</h4><p>一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。</p>\n<h4 id=\"Error和Exception的区别\"><a href=\"#Error和Exception的区别\" class=\"headerlink\" title=\"Error和Exception的区别\"></a>Error和Exception的区别</h4><p>Error通常是灾难性的致命错误，是程序无法控制和处理的。当出现这些异常，Java虚拟机（JVM）一般会选择终止线程；<br>Exception通常情况下是可以被程序处理的，并却在程序中应该尽可能的去处理这些异常。</p>\n<h2 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a>异常处理</h2><h3 id=\"关键字\"><a href=\"#关键字\" class=\"headerlink\" title=\"关键字\"></a>关键字</h3><p>try、catch、finally、throw、throws</p>\n<h3 id=\"捕获异常和错误\"><a href=\"#捕获异常和错误\" class=\"headerlink\" title=\"捕获异常和错误\"></a>捕获异常和错误</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> <span class=\"number\">1</span> / <span class=\"number\">0</span>;<span class=\"comment\">//除以0的异常 ArithmeticException</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (ArithmeticException e)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;/0 Exception&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            a();<span class=\"comment\">//栈溢出错误  StackOverflowError</span></span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (StackOverflowError t)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;Error: &quot;</span>+t.toString());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        /0 Exception</span></span><br><span class=\"line\"><span class=\"comment\">        Error: java.lang.StackOverflowError</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        b();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        a();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"抛出异常\"><a href=\"#抛出异常\" class=\"headerlink\" title=\"抛出异常\"></a>抛出异常</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//主动抛出异常</span></span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ArithmeticException</span>(<span class=\"string\">&quot;主动抛出的异常&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exception in thread &quot;main&quot; java.lang.ArithmeticException: 主动抛出的异常</span><br><span class=\"line\">    at Demo7.Test2.main(Test2.java:6)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"自定义异常\"><a href=\"#自定义异常\" class=\"headerlink\" title=\"自定义异常\"></a>自定义异常</h3><h4 id=\"自定义异常类\"><a href=\"#自定义异常类\" class=\"headerlink\" title=\"自定义异常类\"></a>自定义异常类</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//自定义异常类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyException</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Exception</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//假设a大于10，则抛出异常</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> a;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyException</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.a = a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//异常打印的信息</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">toString</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;MyException&#123;&quot;</span> +</span><br><span class=\"line\">                <span class=\"string\">&quot;a=&quot;</span> + a +</span><br><span class=\"line\">                <span class=\"string\">&#x27;&#125;&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            yTest(<span class=\"number\">11</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span> (MyException e)&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;异常&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">yTest</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> <span class=\"keyword\">throws</span> MyException &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;a= &quot;</span> + a);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (a &gt; <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyException</span>(a);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;ok&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a= 11</span><br><span class=\"line\">异常</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ol>\n<li>处理运行时异常时，合理规避同时辅助try-catch处理;</li>\n<li>在多重catch块后面，可以加一个catch(Exception) 来处理可能会被遗漏的异常;</li>\n<li>对于不确定的代码，也可加上try-catch处理潜在异常;</li>\n<li>尽量去处理异常，切忌简单地调用printStackTrace()去打印输出;</li>\n<li>尽量添加finally语句块去释放占用的资源。</li>\n</ol>\n<h2 id=\"一些转义字符\"><a href=\"#一些转义字符\" class=\"headerlink\" title=\"一些转义字符\"></a>一些转义字符</h2><p><code>\\u0000</code><br><code>\\b</code> 退格键<br><code>\\n</code> 换行<br><code>\\t</code> 制表</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ol>\n<li>&gt;&gt;&gt; 无符号右移 移位运算符</li>\n<li>JavaDoc注释<blockquote>\n<p>@author 作者<br> @Version 版本<br> @Since JDK版本<br> @param 参数<br> @return 返回<br> @throws</p>\n</blockquote>\n</li>\n<li>类与对象<br> 类是对象的抽象：模板class；<br> 对象是类的具体；<br> 单例模式，需要构造器私有；</li>\n<li>单例模式<br> 目的：保证一个雷仅有一个实例，并提供一个访问它的全局访问点；<br> 主要解决：一个全局使用的类频繁地创建与销毁；<br> 如何解决：判断系统是否已经有这个实例，若有则返回，没有则创建；<br> 关键代码：构造函数私有；</li>\n<li>多态：父类引用指向子类对象。</li>\n</ol>\n","categories":[],"tags":["Java"]},{"title":"Day4 Nginx 1","url":"http://zswh33.github.io/2022/08/29/Day4-Nginx/","content":"<h1 id=\"Nginx\"><a href=\"#Nginx\" class=\"headerlink\" title=\"Nginx\"></a>Nginx</h1><p>Nginx一个高性能的HTTP和反向代理的web服务器，同时也提供IMAP&#x2F;POP3&#x2F;SMTP服务。</p>\n<h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>即：反向代理、负载均衡、动静分离。</p>\n<p>Http代理，反向代理，</p>\n<h3 id=\"正向代理\"><a href=\"#正向代理\" class=\"headerlink\" title=\"正向代理\"></a>正向代理</h3><p>代理客户端。<br>多个客户端 -&gt; 代理 -&gt; … -&gt; 单个服务器</p>\n<h3 id=\"反向代理\"><a href=\"#反向代理\" class=\"headerlink\" title=\"反向代理\"></a>反向代理</h3><p>代理服务器<br>多个客户端 -&gt; … -&gt; 代理 -&gt; 多个服务器</p>\n<p><img src=\"/2022/08/29/Day4-Nginx/Nginx.png\" alt=\"Nginx反向代理示例图\"></p>\n<h2 id=\"负载均衡\"><a href=\"#负载均衡\" class=\"headerlink\" title=\"负载均衡\"></a>负载均衡</h2><p>轮询、加权轮询、iphash</p>\n<h3 id=\"iphash\"><a href=\"#iphash\" class=\"headerlink\" title=\"iphash\"></a>iphash</h3><p>可以解决Session不共享的问题</p>\n<h2 id=\"不建议使用Nginx用作Session共享，建议使用Redis\"><a href=\"#不建议使用Nginx用作Session共享，建议使用Redis\" class=\"headerlink\" title=\"不建议使用Nginx用作Session共享，建议使用Redis\"></a>不建议使用Nginx用作Session共享，建议使用Redis</h2><h2 id=\"动静分离\"><a href=\"#动静分离\" class=\"headerlink\" title=\"动静分离\"></a>动静分离</h2><p>将<strong>动态服务请求</strong>和<strong>静态服务请求</strong>分开。</p>\n<h2 id=\"conf文件\"><a href=\"#conf文件\" class=\"headerlink\" title=\"conf文件\"></a>conf文件</h2><p>…</p>\n<h2 id=\"Nginx-常用命令\"><a href=\"#Nginx-常用命令\" class=\"headerlink\" title=\"Nginx 常用命令\"></a>Nginx 常用命令</h2><p>nginx 启动<br>nginx -s stop 停止<br>nginx -s quit  安全退出<br>nginx -s reload 重新加载配置文件<br>ps aux|grep nginx 查看nginx进程</p>\n<h2 id=\"多项目负载均衡\"><a href=\"#多项目负载均衡\" class=\"headerlink\" title=\"多项目负载均衡\"></a>多项目负载均衡</h2><p>用Nginx均衡来自8080和8081的负载。</p>\n<figure class=\"highlight perl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\">\tupstream yupstream&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\"># 服务器资源</span></span><br><span class=\"line\">\t\tserver <span class=\"number\">127.0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">8080</span> weight=<span class=\"number\">1</span>;   <span class=\"comment\"># 权重为1</span></span><br><span class=\"line\">\t\tserver <span class=\"number\">127.0</span>.<span class=\"number\">0</span>.<span class=\"number\">1</span>:<span class=\"number\">8081</span> weight=<span class=\"number\">1</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tserver&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">listen</span>\t<span class=\"number\">801</span>;</span><br><span class=\"line\">\t\tserver_name\tlocalhost;</span><br><span class=\"line\">\t\t<span class=\"comment\"># 代理</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\"># 根目录请求</span></span><br><span class=\"line\">\t\tlocation / &#123;</span><br><span class=\"line\">\t\t\t\troot html;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">index</span> index.html,index.htm;</span><br><span class=\"line\">\t\t\t\tproxy_pass http:<span class=\"regexp\">//</span>yupstream;   <span class=\"comment\"># 反向代理</span></span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\">\t\tlocation /admin &#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","categories":[],"tags":["Nginx"]},{"title":"Day4 Java 4","url":"http://zswh33.github.io/2022/08/29/Day4-Java-4/","content":"<h1 id=\"Java-个人总结-4\"><a href=\"#Java-个人总结-4\" class=\"headerlink\" title=\"Java 个人总结 4\"></a>Java 个人总结 4</h1><h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><h3 id=\"三大特性\"><a href=\"#三大特性\" class=\"headerlink\" title=\"三大特性\"></a>三大特性</h3><p>封装、继承、多态</p>\n<h3 id=\"面向对象\"><a href=\"#面向对象\" class=\"headerlink\" title=\"面向对象\"></a>面向对象</h3><p>.<em>以类的方式组织代码，以对象的组织（封装）数据</em></p>\n<h3 id=\"对象内存分析\"><a href=\"#对象内存分析\" class=\"headerlink\" title=\"对象内存分析\"></a>对象内存分析</h3><p><img src=\"/2022/08/29/Day4-Java-4/1.png\" alt=\"对象内存分析\"></p>\n<h2 id=\"多态\"><a href=\"#多态\" class=\"headerlink\" title=\"多态\"></a>多态</h2><h3 id=\"存在条件\"><a href=\"#存在条件\" class=\"headerlink\" title=\"存在条件\"></a>存在条件</h3><ol>\n<li>有继承关系</li>\n<li>子类重写父类方法</li>\n<li>父类引用指向子类对象</li>\n</ol>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>多态是方法的多态，属性没有多态性</p>\n<h2 id=\"instanceof\"><a href=\"#instanceof\" class=\"headerlink\" title=\"instanceof\"></a>instanceof</h2><p>功能：判断前面的对象是否属于后面的类，或者属于其子类。</p>\n<h2 id=\"Object是所有类的父类\"><a href=\"#Object是所有类的父类\" class=\"headerlink\" title=\"Object是所有类的父类\"></a>Object是所有类的父类</h2><h2 id=\"代码块\"><a href=\"#代码块\" class=\"headerlink\" title=\"代码块\"></a>代码块</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">CodeBlock</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//匿名代码块</span></span><br><span class=\"line\">    <span class=\"comment\">// 一般用于赋初值</span></span><br><span class=\"line\">    <span class=\"comment\">// 每创建一次对象 运行一次</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;匿名代码块&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//静态代码块</span></span><br><span class=\"line\">    <span class=\"comment\">//类加载后运行，只运行一次</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;静态代码块&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">CodeBlock</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;构造方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">CodeBlock</span> <span class=\"variable\">codeBlock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CodeBlock</span>();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-------------------------&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">CodeBlock</span> <span class=\"variable\">codeBlock2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">CodeBlock</span>();</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        静态代码块</span></span><br><span class=\"line\"><span class=\"comment\">        匿名代码块</span></span><br><span class=\"line\"><span class=\"comment\">        构造方法</span></span><br><span class=\"line\"><span class=\"comment\">        -------------------------</span></span><br><span class=\"line\"><span class=\"comment\">        匿名代码块</span></span><br><span class=\"line\"><span class=\"comment\">        构造方法</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"抽象\"><a href=\"#抽象\" class=\"headerlink\" title=\"抽象\"></a>抽象</h2><p>.<em>抽象的抽象：约束</em></p>\n<ol>\n<li>抽象类不能new，只能靠子类去实现;</li>\n<li>抽象类中可以写普通方法;</li>\n<li>抽象方法必须在抽象类中.</li>\n</ol>\n<h3 id=\"定义-x2F-声明\"><a href=\"#定义-x2F-声明\" class=\"headerlink\" title=\"定义&#x2F;声明\"></a>定义&#x2F;声明</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UAbstract</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">all</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        run();</span><br><span class=\"line\">        say();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UAbstract2</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">UAbstract</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;run&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">say</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;say&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">UAbstract</span> <span class=\"variable\">uAbstract</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UAbstract2</span>();</span><br><span class=\"line\">        uAbstract.all();</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">            run</span></span><br><span class=\"line\"><span class=\"comment\">            say</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>意义：提高开发效率。</p>\n<h2 id=\"接口\"><a href=\"#接口\" class=\"headerlink\" title=\"接口\"></a>接口</h2><ol>\n<li>是一种约束；</li>\n<li>定义一些方法，让不同的人实现；</li>\n<li>接口不能被实例化；</li>\n<li>接口可以实现多个；</li>\n<li>类实现接口后，必须要重写接口中的方法。</li>\n</ol>\n<h2 id=\"内部类\"><a href=\"#内部类\" class=\"headerlink\" title=\"内部类\"></a>内部类</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><p>在一个类的内部再定义一个类。</p>\n<h3 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h3><ol>\n<li><p>成员内部类</p>\n</li>\n<li><p>静态内部类</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//外部类</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Outer</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> id=<span class=\"number\">6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">out</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;外部类的方法&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//内部类</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Inner</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">InnerFunction</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;内部类的方法&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获得外部类的私有属性</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">InnerGetOuterId</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            System.out.println(id);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//静态内部类 用static修饰</span></span><br><span class=\"line\">    <span class=\"comment\">//不能访问Outer的属性</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">class</span> <span class=\"title class_\">StaticInner</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">InnerFunction</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;内部类的方法&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获得外部类的私有属性</span></span><br><span class=\"line\">        <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">InnerGetOuterId</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//            System.out.println(id); //报错</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>局部内部类</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Outer2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//局部内部类</span></span><br><span class=\"line\">        <span class=\"comment\">//放在方法里</span></span><br><span class=\"line\">        <span class=\"keyword\">class</span> <span class=\"title class_\">Inner</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>匿名内部类</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Outer4</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//匿名内部类</span></span><br><span class=\"line\">        <span class=\"type\">UserService3</span> <span class=\"variable\">userService3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UserService3</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        userService3.hello();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">UserService3</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">void</span> <span class=\"title function_\">hello</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ol>\n<li>一个java文件中可以有多个class类，但只能有一个public class;</li>\n</ol>\n","categories":[],"tags":["Java"]},{"title":"Day3 Java 3","url":"http://zswh33.github.io/2022/08/29/Day3-Java-3/","content":"<h1 id=\"Java-个人总结-3\"><a href=\"#Java-个人总结-3\" class=\"headerlink\" title=\"Java 个人总结 3\"></a>Java 个人总结 3</h1><h2 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h2><p>位运算效率极高。</p>\n<p>A &#x3D; 0011 1100<br>B &#x3D; 0000 1101<br>-————————–<br>A&amp;B &#x3D; 0000 1100  且<br>A|B &#x3D; 0011 1101  或<br>A^B &#x3D; 0011 0001  异或<br>~B  &#x3D; 1111 0010  取反</p>\n<p>Q： 对于计算机来说，更快地计算2*8&#x3D;?<br>A： 位运算，2 &lt;&lt; 3 &#x3D; 16</p>\n<h2 id=\"包机制\"><a href=\"#包机制\" class=\"headerlink\" title=\"包机制\"></a>包机制</h2><p>为了更好地组织类 Java提供了包机制，用于区别类名的<strong>命名空间</strong>。<br>一般利用公司域名倒置作为包名：<code>com.uwupu.blog</code><br>在类里需要添加 <code>package com.uwupu.blog</code></p>\n<h2 id=\"JavaDoc-文档注释\"><a href=\"#JavaDoc-文档注释\" class=\"headerlink\" title=\"JavaDoc 文档注释\"></a>JavaDoc 文档注释</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 类注释</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> uwupu 作者</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@version</span> 1.0  版本</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 1.8    JDK版本</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UDoc</span> &#123;</span><br><span class=\"line\">    String name;  <span class=\"comment\">// 类变量</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 方法注释</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@author</span> uwupu 作者</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name  参数</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span>       返回值</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> Exception 抛出</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String <span class=\"title function_\">uTest</span><span class=\"params\">(String name)</span> <span class=\"keyword\">throws</span> Exception&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"生成文档\"><a href=\"#生成文档\" class=\"headerlink\" title=\"生成文档\"></a>生成文档</h3><p>在类所在文件夹中打开终端，执行以下命令，可以生成类的文档。<br><code>javadoc -encoding UTF-8 -charset UTF-8 类名.java</code></p>\n<h2 id=\"增强的for循环\"><a href=\"#增强的for循环\" class=\"headerlink\" title=\"增强的for循环\"></a>增强的for循环</h2><p>.<em>JDK 5 引入用于数组和集合的循环</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ForDemo</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] ns = &#123;<span class=\"number\">10</span>,<span class=\"number\">20</span>,<span class=\"number\">30</span>,<span class=\"number\">40</span>,<span class=\"number\">50</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> ( <span class=\"type\">int</span> i : ns)&#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        结果：</span></span><br><span class=\"line\"><span class=\"comment\">            10</span></span><br><span class=\"line\"><span class=\"comment\">            20</span></span><br><span class=\"line\"><span class=\"comment\">            30</span></span><br><span class=\"line\"><span class=\"comment\">            40</span></span><br><span class=\"line\"><span class=\"comment\">            50</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法重载\"><a href=\"#方法重载\" class=\"headerlink\" title=\"方法重载\"></a>方法重载</h2><p>规则：</p>\n<ol>\n<li>方法名必须相同；</li>\n<li>参数必须不同；</li>\n<li>方法返回类型可以相同也可不同；</li>\n<li>仅仅返回类型不同不足以成为方法的重载；</li>\n</ol>\n<h2 id=\"命令行传参\"><a href=\"#命令行传参\" class=\"headerlink\" title=\"命令行传参\"></a>命令行传参</h2><p><code>public static void main(String[] args)</code>中的args即为参数。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Args</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(String i : args)&#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可变参数\"><a href=\"#可变参数\" class=\"headerlink\" title=\"可变参数\"></a>可变参数</h2><p>.<em>Java 1.5开始，可以通过“…”来创建可变参数</em></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Demox3</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        Demox3.printMax(<span class=\"number\">123</span>,<span class=\"number\">123</span>,<span class=\"number\">234</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">printMax</span><span class=\"params\">(<span class=\"type\">double</span>... numbers)</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">double</span> i : numbers)&#123;</span><br><span class=\"line\">            System.out.println(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        结果：</span></span><br><span class=\"line\"><span class=\"comment\">        123.0</span></span><br><span class=\"line\"><span class=\"comment\">        123.0</span></span><br><span class=\"line\"><span class=\"comment\">        234.0</span></span><br><span class=\"line\"><span class=\"comment\">         */</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><ol>\n<li>若有多个参数，将可变参数放在最后一个；</li>\n<li>一个方法只能有一个可变参数。</li>\n</ol>\n<h2 id=\"数组创建\"><a href=\"#数组创建\" class=\"headerlink\" title=\"数组创建\"></a>数组创建</h2><p>在Java中，一般用<code>DataType[] arrayRefVar;</code>方式声明数组变量，一般不用<code>DataType arrayRefVar[];</code></p>\n<p>创建数组用<code>new DataType[];</code><br>即</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Array</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] nums; <span class=\"comment\">//定义</span></span><br><span class=\"line\">        nums = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">10</span>]; <span class=\"comment\">//创建并赋值</span></span><br><span class=\"line\">        <span class=\"type\">int</span>[] nums2 = &#123;<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>&#125;; <span class=\"comment\">//静态初始化</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内存分析\"><a href=\"#内存分析\" class=\"headerlink\" title=\"内存分析\"></a>内存分析</h2><p>堆：</p>\n<ol>\n<li>存放new的对象和数组;</li>\n<li>可以被所有的线程共享，不会存放别的对象引用。</li>\n</ol>\n<p><img src=\"/2022/08/29/Day3-Java-3/%E5%86%85%E5%AD%98.png\" alt=\"内存\"></p>\n<p><br>栈：</p>\n<ol>\n<li>存放基本变量类型(会包含这个基本类型的具体数值);</li>\n<li>引用对象的变量(会存放这个引用在堆里面的具体地址)。</li>\n</ol>\n<p><br>方法区：</p>\n<ol>\n<li>可以被所有的线程共享；</li>\n<li>包含了所有的class和static变量。</li>\n</ol>\n<p><img src=\"/2022/08/29/Day3-Java-3/1.png\" alt=\"内存分布\"></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><p>数组下标越界异常：ArrayIndexOutOfBoundsException</p>\n<h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h4><ol>\n<li>数组是引用类型。一旦分配，会被隐式地初始化。</li>\n<li>长度是确定的，一旦被创建，不可改变；</li>\n<li>数组中的元素可以是任何数据类型，包括基本类型和引用类型；</li>\n<li>数组对象本身在堆中。</li>\n</ol>\n<h2 id=\"Arrays类\"><a href=\"#Arrays类\" class=\"headerlink\" title=\"Arrays类\"></a>Arrays类</h2><p>数组工具类：java.util.Arrays</p>\n<p>Arrays.toString(数组)方法可以将数组转换为字符串；<br>Arrays.sort(数组) 将数组排序。<br>Arrays.fill(数组，值)  将数组填充为指定值。<br>Arrays.fill(数组，开始，结束，值)  将从开始到结束的位置设置为指定值。</p>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><p>时间复杂度：O(n^2)</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BubbleSort</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] array = &#123;<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        array = UBubbleSort(array);</span><br><span class=\"line\">        System.out.println(Arrays.toString(array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] UBubbleSort(<span class=\"type\">int</span> []array)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> array.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> temp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> ; i &lt; len-<span class=\"number\">1</span> ; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> len-<span class=\"number\">1</span> ; j &gt; i ;j--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(array[j] &lt; array[j-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    temp = array[j];</span><br><span class=\"line\">                    array[j] = array[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">                    array[j-<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"优化\"><a href=\"#优化\" class=\"headerlink\" title=\"优化\"></a>优化</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">BubbleSort</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span>[] array = &#123;<span class=\"number\">1</span>,<span class=\"number\">5</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">2</span>,<span class=\"number\">1</span>,<span class=\"number\">5</span>&#125;;</span><br><span class=\"line\">        array = UBubbleSort(array);</span><br><span class=\"line\">        System.out.println(Arrays.toString(array));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] UBubbleSort(<span class=\"type\">int</span> []array)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">len</span> <span class=\"operator\">=</span> array.length;</span><br><span class=\"line\">        <span class=\"type\">int</span> temp;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span> ; i &lt; len-<span class=\"number\">1</span> ; i++)&#123;</span><br><span class=\"line\">            <span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>; <span class=\"comment\">// 通过flag表示位减少没有意义的比较</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">//内层循环</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> <span class=\"variable\">j</span> <span class=\"operator\">=</span> len-<span class=\"number\">1</span> ; j &gt; i ;j--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(array[j] &lt; array[j-<span class=\"number\">1</span>])&#123;</span><br><span class=\"line\">                    temp = array[j];</span><br><span class=\"line\">                    array[j] = array[j-<span class=\"number\">1</span>];</span><br><span class=\"line\">                    array[j-<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">                    flag = <span class=\"literal\">true</span>; <span class=\"comment\">// 当前有交换项</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!flag)&#123;</span><br><span class=\"line\">                <span class=\"comment\">//若没有交换项，表示剩下已排好序</span></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> array;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"稀疏数组\"><a href=\"#稀疏数组\" class=\"headerlink\" title=\"稀疏数组\"></a>稀疏数组</h2><p>.<em>当一个数组中大部分元素为0，或者为同一值的数组时，可以使用稀疏数组来保存该数组</em></p>\n<p>一个5x5的二维数组</p>\n<table>\n<thead>\n<tr>\n<th>.</th>\n<th>.</th>\n<th>.</th>\n<th>.</th>\n<th>.</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>6</td>\n</tr>\n<tr>\n<td>0</td>\n<td>3</td>\n<td>5</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>4</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n<tr>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n<td>0</td>\n</tr>\n</tbody></table>\n<p>稀疏数组表示</p>\n<table>\n<thead>\n<tr>\n<th>rows</th>\n<th>cols</th>\n<th>value</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>4</td>\n<td>6</td>\n</tr>\n<tr>\n<td>1</td>\n<td>1</td>\n<td>3</td>\n</tr>\n<tr>\n<td>1</td>\n<td>2</td>\n<td>5</td>\n</tr>\n<tr>\n<td>2</td>\n<td>2</td>\n<td>4</td>\n</tr>\n</tbody></table>\n","categories":[],"tags":["Java"]},{"title":"Day3 Java 2","url":"http://zswh33.github.io/2022/08/29/Day3-Java-2/","content":"<h1 id=\"Java-个人总结-2\"><a href=\"#Java-个人总结-2\" class=\"headerlink\" title=\"Java 个人总结 2\"></a>Java 个人总结 2</h1><h2 id=\"类型转换\"><a href=\"#类型转换\" class=\"headerlink\" title=\"类型转换\"></a>类型转换</h2><p>小 —————————————— 大<br>byte,short -&gt; char -&gt; int -&gt; long -&gt; float -&gt; double</p>\n<p>小 -&gt; 大 需要强制转换<br>大 -&gt; 小 自动转换</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 低转高  低 -&gt; 高  强制转换</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> (<span class=\"type\">byte</span>)i;  <span class=\"comment\">//强制转换</span></span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(i);</span><br><span class=\"line\">System.out.println(b);</span><br><span class=\"line\"><span class=\"comment\">//结果：</span></span><br><span class=\"line\"><span class=\"comment\">//128</span></span><br><span class=\"line\"><span class=\"comment\">//-128</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 高转低 高 -&gt; 低 自动转换</span></span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> <span class=\"number\">128</span>;</span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> i2; <span class=\"comment\">//自动转换 不需要强制转换</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong></p>\n<ol>\n<li>不能对布尔值进行转换</li>\n<li>不能把对象类型转换为不相干类型</li>\n<li>高容量转低容量，需要强制转换</li>\n<li>转换可能<strong>内存溢出</strong>，或<strong>精度问题</strong></li>\n</ol>\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><p>局部变量：必须声明和初始化值</p>\n<p><strong>实例变量：</strong> 从属于类，如果不初始化，默认值为</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>布尔值</td>\n<td>false</td>\n</tr>\n<tr>\n<td>基本类型</td>\n<td>0</td>\n</tr>\n<tr>\n<td>其他</td>\n<td>null</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">UVatiable</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> b; <span class=\"comment\">//类变量</span></span><br><span class=\"line\">    String s;<span class=\"comment\">// 实例变量 从属于对象</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;<span class=\"comment\">//局部变量 必须声明和初始化值</span></span><br><span class=\"line\">        System.out.println(i);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//实例变量使用</span></span><br><span class=\"line\">        <span class=\"type\">UVatiable</span> <span class=\"variable\">yv</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">UVatiable</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(yv.s);</span><br><span class=\"line\">        <span class=\"comment\">//为null</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(UVatiable.b);<span class=\"comment\">//输出类变量</span></span><br><span class=\"line\">        <span class=\"comment\">//为null</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h2><p>初始化后不能再改变值</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>final 常量名 &#x3D; 值<br><code>final int PI = 3.1415</code></p>\n<h2 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h2><ol>\n<li>所有变量，方法、类名：见名知义；</li>\n<li>类成员变量：首字母小写和驼峰原则：monthSalary</li>\n<li>局部变量：驼峰原则</li>\n<li>常量：大写字母和下划线：MAX_VALUE</li>\n<li>类名 首字母大写和驼峰原则：Man,GoodMan,SpringBoot</li>\n<li>方法名：首字母小写和驼峰原则：run(),runRunRun()</li>\n</ol>\n<h2 id=\"运算符\"><a href=\"#运算符\" class=\"headerlink\" title=\"运算符\"></a>运算符</h2><table>\n<thead>\n<tr>\n<th><strong>名字</strong></th>\n<th><strong>表现</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>算数运算符</td>\n<td>+ - * &#x2F; % ++ –</td>\n</tr>\n<tr>\n<td>赋值运算符</td>\n<td>&#x3D;</td>\n</tr>\n<tr>\n<td>关系运算符</td>\n<td>&gt; &lt; &gt;&#x3D; &lt;&#x3D; &#x3D;&#x3D; !&#x3D; instanceof</td>\n</tr>\n<tr>\n<td>逻辑运算符</td>\n<td>&amp;&amp; || !</td>\n</tr>\n<tr>\n<td>位运算符</td>\n<td>&amp; | ^ ~ &gt;&gt; &lt;&lt; &gt;&gt;&gt;</td>\n</tr>\n<tr>\n<td>条件运算符</td>\n<td>? :</td>\n</tr>\n<tr>\n<td>扩展赋值运算符</td>\n<td>+&#x3D; -&#x3D; ^&#x3D; &#x2F;&#x3D;</td>\n</tr>\n</tbody></table>\n<p>instanceof 用来判断一个对象是否属于某个指定的类或其子类的实例</p>\n<h3 id=\"自增-自减\"><a href=\"#自增-自减\" class=\"headerlink\" title=\"自增 自减\"></a>自增 自减</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Dx2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">3</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> a++;<span class=\"comment\">//先b赋值，再进行a=a+1</span></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ++a;<span class=\"comment\">//先进行a=a+1。再赋值c</span></span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(a);<span class=\"comment\">//5</span></span><br><span class=\"line\">        System.out.println(b);<span class=\"comment\">//3</span></span><br><span class=\"line\">        System.out.println(c);<span class=\"comment\">//5</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"幂运算\"><a href=\"#幂运算\" class=\"headerlink\" title=\"幂运算\"></a>幂运算</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.pow(<span class=\"number\">2</span>,<span class=\"number\">3</span>)<span class=\"comment\">//即2^3，返回值类型为double</span></span><br></pre></td></tr></table></figure>\n\n\n<p>…</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><ol>\n<li><p>JDK新特性 数字之间可以用下划线分割，并不影响原效果<br><code>int money = 10_0000_0000</code></p>\n</li>\n<li><p>大整数计算 int到long</p>\n <figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"number\">10_0000_0000</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">total</span> <span class=\"operator\">=</span> a*b; <span class=\"comment\">//-1474836480 计算溢出</span></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">total2</span> <span class=\"operator\">=</span> a*b;<span class=\"comment\">//仍旧溢出</span></span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">total3</span> <span class=\"operator\">=</span> money*((<span class=\"type\">long</span>)years);<span class=\"comment\">//先转换一个为long，计算则不会出错</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>long类型的变量值在赋值时数字后面的L，用大写或小写都可，为保障易读，使用大写L.</p>\n</li>\n<li><p>修饰符 不存在先后顺序</p>\n</li>\n<li><p>cast  转换v.。</p>\n</li>\n</ol>\n<h2 id=\"测验\"><a href=\"#测验\" class=\"headerlink\" title=\"测验\"></a>测验</h2>","categories":[],"tags":["Java"]},{"title":"Day3 Java 1","url":"http://zswh33.github.io/2022/08/29/Day3-Java-1/","content":"<h1 id=\"Java个人小结\"><a href=\"#Java个人小结\" class=\"headerlink\" title=\"Java个人小结\"></a>Java个人小结</h1><h2 id=\"Java\"><a href=\"#Java\" class=\"headerlink\" title=\"Java\"></a>Java</h2><ol>\n<li>强类型语言；</li>\n</ol>\n<h2 id=\"标识符注意\"><a href=\"#标识符注意\" class=\"headerlink\" title=\"标识符注意\"></a>标识符注意</h2><h3 id=\"概念\"><a href=\"#概念\" class=\"headerlink\" title=\"概念\"></a>概念</h3><ol>\n<li>所有标识符都应该以字母，美元符，或者下划线开始；</li>\n<li>由字母，美元符，下划线或数字的任意组合；</li>\n<li>不能使用关键字作为变量名或方法名；</li>\n<li>大小写敏感。</li>\n</ol>\n<h3 id=\"拓展\"><a href=\"#拓展\" class=\"headerlink\" title=\"拓展\"></a>拓展</h3><ol>\n<li>中文支持 但用起来麻烦 一般不用。不要用拼音；</li>\n<li>见名知义。</li>\n</ol>\n<h2 id=\"Java数据类型\"><a href=\"#Java数据类型\" class=\"headerlink\" title=\"Java数据类型\"></a>Java数据类型</h2><h3 id=\"数据类型\"><a href=\"#数据类型\" class=\"headerlink\" title=\"数据类型\"></a>数据类型</h3><ol>\n<li>基本类型</li>\n<li>引用类型</li>\n</ol>\n<p>基本数据类型：数值类型、boolean类型。<br>引用类型： 类、接口、数组。<br>数据类型：整数类型、浮点类型、字符类型。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>范围</th>\n<th>占用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>-128 ~ 127</td>\n<td>一个字节</td>\n</tr>\n<tr>\n<td>short</td>\n<td>-32768 ~ 32767</td>\n<td>2个字节</td>\n</tr>\n<tr>\n<td>int</td>\n<td>-2^31 ~ 2^31-1</td>\n<td>4个字节</td>\n</tr>\n<tr>\n<td>long</td>\n<td>2^63 ~ 2^63-1</td>\n<td>8个字节</td>\n</tr>\n<tr>\n<td>float</td>\n<td></td>\n<td>四个字节</td>\n</tr>\n<tr>\n<td>double</td>\n<td></td>\n<td>8个字节</td>\n</tr>\n<tr>\n<td>char</td>\n<td></td>\n<td>2个字节</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>true或false</td>\n<td>一位</td>\n</tr>\n</tbody></table>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">num1</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">byte</span> <span class=\"variable\">num2</span> <span class=\"operator\">=</span> <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"type\">short</span> <span class=\"variable\">num3</span> <span class=\"operator\">=</span> <span class=\"number\">30</span>;</span><br><span class=\"line\"><span class=\"type\">long</span> <span class=\"variable\">num4</span> <span class=\"operator\">=</span> <span class=\"number\">30L</span>; <span class=\"comment\">//加L</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">float</span> <span class=\"variable\">num5</span> <span class=\"operator\">=</span> <span class=\"number\">30.5F</span> <span class=\"comment\">//加F</span></span><br><span class=\"line\"><span class=\"type\">double</span> <span class=\"variable\">num6</span> <span class=\"operator\">=</span> <span class=\"number\">3.14159265358979</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">name</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;A&#x27;</span>;<span class=\"comment\">//单个字符</span></span><br><span class=\"line\"><span class=\"type\">char</span> <span class=\"variable\">namw2</span> <span class=\"operator\">=</span> <span class=\"string\">&#x27;张&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//布尔值</span></span><br><span class=\"line\"><span class=\"type\">boolean</span> <span class=\"variable\">flag</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//String不是关键字，是一个类</span></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">namea</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;张三&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"强类型语言-弱类型语言\"><a href=\"#强类型语言-弱类型语言\" class=\"headerlink\" title=\"强类型语言 弱类型语言\"></a>强类型语言 弱类型语言</h2><h3 id=\"强类型语言\"><a href=\"#强类型语言\" class=\"headerlink\" title=\"强类型语言\"></a>强类型语言</h3><p>要求变量的使用要严格符合规定，变量要求<strong>先定义后使用</strong></p>\n<h3 id=\"弱类型语言\"><a href=\"#弱类型语言\" class=\"headerlink\" title=\"弱类型语言\"></a>弱类型语言</h3><p>…</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><h3 id=\"字节\"><a href=\"#字节\" class=\"headerlink\" title=\"字节\"></a>字节</h3><h4 id=\"换算\"><a href=\"#换算\" class=\"headerlink\" title=\"换算\"></a>换算</h4><p>1B(byte 字节) &#x3D; 8bit (位)<br>1字节 &#x3D; 8位</p>\n<h4 id=\"一般表示\"><a href=\"#一般表示\" class=\"headerlink\" title=\"一般表示\"></a>一般表示</h4><p>B byte 字节<br>b bit  位</p>\n<h2 id=\"考试-x2F-测验\"><a href=\"#考试-x2F-测验\" class=\"headerlink\" title=\"考试&#x2F;测验\"></a>考试&#x2F;测验</h2><h3 id=\"整数\"><a href=\"#整数\" class=\"headerlink\" title=\"整数\"></a>整数</h3><h4 id=\"进制\"><a href=\"#进制\" class=\"headerlink\" title=\"进制\"></a>进制</h4><table>\n<thead>\n<tr>\n<th>进制</th>\n<th>前缀</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>二进制</td>\n<td>0b</td>\n</tr>\n<tr>\n<td>八进制</td>\n<td>0</td>\n</tr>\n<tr>\n<td>十六进制</td>\n<td>0x</td>\n</tr>\n<tr>\n<td>十进制</td>\n<td></td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i2</span> <span class=\"operator\">=</span> <span class=\"number\">010</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> <span class=\"variable\">i3</span> <span class=\"operator\">=</span> <span class=\"number\">0x10</span>;</span><br><span class=\"line\"><span class=\"comment\">//i 10</span></span><br><span class=\"line\"><span class=\"comment\">//i2 8</span></span><br><span class=\"line\"><span class=\"comment\">//i3 16</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"浮点数\"><a href=\"#浮点数\" class=\"headerlink\" title=\"浮点数\"></a>浮点数</h4><p>在银行业务里用什么表示钱?<br>答： BigDecimal</p>\n<p>float 有限 离散 舍入误差 为大约值 接近但不等于<br>尽少使用浮点数去比较</p>\n<h4 id=\"字符\"><a href=\"#字符\" class=\"headerlink\" title=\"字符\"></a>字符</h4><p><code>char c3 = &#39;\\u0061&#39;</code><br>Unicode编码<br>“\\u0061”表示字符a</p>\n<p>…</p>\n<h4 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">sa</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">sb</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">String</span>(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">System.out.println(sa==sb);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">sc</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\"><span class=\"type\">String</span> <span class=\"variable\">sd</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\">System.out.println(sc==sd);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//结果为</span></span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n","categories":[],"tags":["Java"]},{"title":"Day2 Idea使用","url":"http://zswh33.github.io/2022/08/29/Day2-Idea使用/","content":"<h1 id=\"Idea部分使用-Settings中的一些设置\"><a href=\"#Idea部分使用-Settings中的一些设置\" class=\"headerlink\" title=\"Idea部分使用:Settings中的一些设置\"></a>Idea部分使用:Settings中的一些设置</h1><p>在Settings -&gt; Editor下，<br>Font 字体<br>Color Scheme 颜色模板<br>Code Style  代码风格</p>\n<h2 id=\"文档注释\"><a href=\"#文档注释\" class=\"headerlink\" title=\"文档注释\"></a>文档注释</h2><h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * @Des 描述</span><br><span class=\"line\"> * @Author 作者</span><br><span class=\"line\"> */</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"国际化\"><a href=\"#国际化\" class=\"headerlink\" title=\"国际化\"></a>国际化</h1><h2 id=\"Idea项目的多语言\"><a href=\"#Idea项目的多语言\" class=\"headerlink\" title=\"Idea项目的多语言\"></a>Idea项目的多语言</h2><p><img src=\"/2022/08/29/Day2-Idea%E4%BD%BF%E7%94%A8/image-20220910112451912.png\" alt=\"image-20220910112451912\"></p>\n<p>使用Idea编辑一个多语言文件，可以将文件合并到一个列表里面。</p>\n<p>只需要将”_en_US”、”zh_CN”或其他语言简写作为文件的后缀即可实现。</p>\n<h2 id=\"插件：Resource-Bundle-Editor\"><a href=\"#插件：Resource-Bundle-Editor\" class=\"headerlink\" title=\"插件：Resource Bundle Editor\"></a>插件：Resource Bundle Editor</h2><p>可以将合并到同一个列表里面的多个文件放到一个页面编辑。</p>\n<p><img src=\"/2022/08/29/Day2-Idea%E4%BD%BF%E7%94%A8/image-20220910112905125.png\" alt=\"image-20220910112905125\"></p>\n","categories":[],"tags":["Idea"]},{"title":"Day1 Markdown 学习","url":"http://zswh33.github.io/2022/08/29/Day1-Markdown-学习/","content":"<h1 id=\"Markdown-学习\"><a href=\"#Markdown-学习\" class=\"headerlink\" title=\"Markdown 学习\"></a>Markdown 学习</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Markdown 是一种轻量级标记语言，一般用来写文章。</p>\n<h2 id=\"符号\"><a href=\"#符号\" class=\"headerlink\" title=\"符号\"></a>符号</h2><p>||<br>–|–<br>一级标题|#<br>二级标题|##<br>三级标题|###<br>加粗| <code>**内容**</code><br>斜体| <code>*内容*</code><br>加粗和斜体| <code>***内容***</code><br>链接|<code>[链接名](地址)</code><br>有序列表| <code>1. 2. 3.</code><br>无序列表| <code>- - -</code><br>表格| <code>标头1|标头2|标头3  --|--|-- 内容1|内容2|内容3  内容4|内容5|内容6</code><br>图片| <code>![图片名](链接)</code><br>代码| &#96;&#96;   &#96;&#96;&#96;&#96;&#96;&#96; </p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"基本文字\"><a href=\"#基本文字\" class=\"headerlink\" title=\"基本文字\"></a>基本文字</h3><p><code>**加粗字体**</code>   <strong>加粗字体</strong></p>\n<p><code>*斜体*</code> <em>斜体</em></p>\n<p><code>***加粗和斜体***</code> <em><strong>加粗和斜体</strong></em></p>\n<p><code>[链接名](地址)</code> <code>[uwupu的博客](https://www.cnblogs.com/uwupu/)</code> <a href=\"https://www.cnblogs.com/uwupu/\">uwupu的博客</a></p>\n<h3 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h3><p><code>![图片名](链接)</code></p>\n<p><code>![图片名](链接)</code></p>\n<h3 id=\"表格\"><a href=\"#表格\" class=\"headerlink\" title=\"表格\"></a>表格</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">标头1|标头2|标头3</span><br><span class=\"line\">--|--|--</span><br><span class=\"line\">内容1|内容2|内容3</span><br><span class=\"line\">内容4|内容5|内容6</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>标头1</th>\n<th>标头2</th>\n<th>标头3</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>内容1</td>\n<td>内容2</td>\n<td>内容3</td>\n</tr>\n<tr>\n<td>内容4</td>\n<td>内容5</td>\n<td>内容6</td>\n</tr>\n</tbody></table>\n<h3 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h3><figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">单行代码 `代码内容`</span><br><span class=\"line\">多行代码 ```代码内容```</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">`System.out.println(&quot;Hello World&quot;);//单行代码`</span><br></pre></td></tr></table></figure>\n\n<p><code>System.out.println(&quot;Hello World&quot;);//单行代码</code></p>\n<figure class=\"highlight tex\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\">//多行代码</span><br><span class=\"line\">public class HelloWorld &#123;</span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">\t\tSystem.out.println(&quot;Hello World&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;```</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//多行代码</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">HelloWorld</span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">\t\tSystem.out.println(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>暂无</p>\n","categories":[],"tags":["Markdown"]},{"title":"Hello World","url":"http://zswh33.github.io/2022/08/28/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"","url":"http://zswh33.github.io/manifest.json","content":"{\"name\":\"string\",\"short_name\":\"Junzhou\",\"theme_color\":\"#49b1f5\",\"background_color\":\"#49b1f5\",\"display\":\"standalone\",\"scope\":\"/\",\"start_url\":\"/\",\"icons\":[{\"src\":\"images/pwaicons/512.png\",\"sizes\":\"512x512\",\"type\":\"image/png\"}],\"splash_pages\":\"/\"}","categories":[],"tags":[]},{"title":"about","url":"http://zswh33.github.io/about/index.html","content":"<p>这是一个记录个人学习日志的博客。</p>\n<p>嗯 如此..</p>\n<p>联系方式：<a href=\"mailto:&#x79;&#x79;&#x6e;&#51;&#x33;&#64;&#x71;&#113;&#46;&#x63;&#111;&#x6d;\">&#x79;&#x79;&#x6e;&#51;&#x33;&#64;&#x71;&#113;&#46;&#x63;&#111;&#x6d;</a></p>\n<p>其他：</p>\n<p>基于<a href=\"https://hexo.io/\">hexo</a></p>\n<p>基于<a href=\"https://github.com/fluid-dev/hexo-theme-fluid\">fluid</a>的主题</p>\n","categories":[],"tags":[]},{"title":"404","url":"http://zswh33.github.io//404.html","content":"","categories":[],"tags":[]},{"title":"tags","url":"http://zswh33.github.io/tags/index.html","content":"","categories":[],"tags":[]},{"title":"categories","url":"http://zswh33.github.io/categories/index.html","content":"","categories":[],"tags":[]}]